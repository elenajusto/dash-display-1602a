
dash-display-1602a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d84  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f04  08003f04  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f0c  08003f0c  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f10  08003f10  00013f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000088  08003f9c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08003f9c  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de62  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fd8  00000000  00000000  0002df55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d4  00000000  00000000  00030a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179c5  00000000  00000000  00031354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f9e7  00000000  00000000  00048d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097b0d  00000000  00000000  00058700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d00  00000000  00000000  000f0210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f2f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003e28 	.word	0x08003e28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08003e28 	.word	0x08003e28

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fafe 	bl	8000c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f809 	bl	800064e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f8de 	bl	80007fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000640:	f000 f88e 	bl	8000760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000644:	f000 f84c 	bl	80006e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  	  i2cScanner();
 8000648:	f000 f928 	bl	800089c <i2cScanner>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	e7fe      	b.n	800064c <main+0x1c>

0800064e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064e:	b590      	push	{r4, r7, lr}
 8000650:	b093      	sub	sp, #76	; 0x4c
 8000652:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000654:	2410      	movs	r4, #16
 8000656:	193b      	adds	r3, r7, r4
 8000658:	0018      	movs	r0, r3
 800065a:	2338      	movs	r3, #56	; 0x38
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f002 ff5c 	bl	800351c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	003b      	movs	r3, r7
 8000666:	0018      	movs	r0, r3
 8000668:	2310      	movs	r3, #16
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f002 ff55 	bl	800351c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	0018      	movs	r0, r3
 8000678:	f001 f962 	bl	8001940 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 f99a 	bl	80019d8 <HAL_RCC_OscConfig>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a8:	f000 f956 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	003b      	movs	r3, r7
 80006ae:	2207      	movs	r2, #7
 80006b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	003b      	movs	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	003b      	movs	r3, r7
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fc9f 	bl	800200c <HAL_RCC_ClockConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006d2:	f000 f941 	bl	8000958 <Error_Handler>
  }
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b013      	add	sp, #76	; 0x4c
 80006dc:	bd90      	pop	{r4, r7, pc}
	...

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_I2C1_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <MX_I2C1_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_I2C1_Init+0x74>)
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <MX_I2C1_Init+0x7c>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x74>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fd5b 	bl	80011d8 <HAL_I2C_Init>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000726:	f000 f917 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x74>)
 800072c:	2100      	movs	r1, #0
 800072e:	0018      	movs	r0, r3
 8000730:	f001 f86e 	bl	8001810 <HAL_I2CEx_ConfigAnalogFilter>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000738:	f000 f90e 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <MX_I2C1_Init+0x74>)
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f8b1 	bl	80018a8 <HAL_I2CEx_ConfigDigitalFilter>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f905 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000a4 	.word	0x200000a4
 8000758:	40005400 	.word	0x40005400
 800075c:	00303d5b 	.word	0x00303d5b

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000766:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <MX_USART2_UART_Init+0x98>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800076c:	22e1      	movs	r2, #225	; 0xe1
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 ff90 	bl	80026d0 <HAL_UART_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007b4:	f000 f8d0 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fdad 	bl	800331c <HAL_UARTEx_SetTxFifoThreshold>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007c6:	f000 f8c7 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fde4 	bl	800339c <HAL_UARTEx_SetRxFifoThreshold>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007d8:	f000 f8be 	bl	8000958 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f002 fd62 	bl	80032a8 <HAL_UARTEx_DisableFifoMode>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f000 f8b6 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	200000f8 	.word	0x200000f8
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b089      	sub	sp, #36	; 0x24
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	240c      	movs	r4, #12
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2314      	movs	r3, #20
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f002 fe85 	bl	800351c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000818:	2104      	movs	r1, #4
 800081a:	430a      	orrs	r2, r1
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000822:	2204      	movs	r2, #4
 8000824:	4013      	ands	r3, r2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_GPIO_Init+0x9c>)
 800082c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000830:	2120      	movs	r1, #32
 8000832:	430a      	orrs	r2, r1
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800083a:	2220      	movs	r2, #32
 800083c:	4013      	ands	r3, r2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_GPIO_Init+0x9c>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800085a:	23a0      	movs	r3, #160	; 0xa0
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fc9a 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000868:	0021      	movs	r1, r4
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2220      	movs	r2, #32
 800086e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2201      	movs	r2, #1
 8000874:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2202      	movs	r2, #2
 8000880:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000882:	187a      	adds	r2, r7, r1
 8000884:	23a0      	movs	r3, #160	; 0xa0
 8000886:	05db      	lsls	r3, r3, #23
 8000888:	0011      	movs	r1, r2
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fb22 	bl	8000ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	b009      	add	sp, #36	; 0x24
 8000896:	bd90      	pop	{r4, r7, pc}
 8000898:	40021000 	.word	0x40021000

0800089c <i2cScanner>:

/* USER CODE BEGIN 4 */

	void i2cScanner(){
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
		uint8_t i = 0, ret;
 80008a2:	1dfb      	adds	r3, r7, #7
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <i2cScanner+0x9c>)
 80008aa:	4924      	ldr	r1, [pc, #144]	; (800093c <i2cScanner+0xa0>)
 80008ac:	4824      	ldr	r0, [pc, #144]	; (8000940 <i2cScanner+0xa4>)
 80008ae:	221a      	movs	r2, #26
 80008b0:	f001 ff64 	bl	800277c <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
 80008ba:	e02d      	b.n	8000918 <i2cScanner+0x7c>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80008bc:	1dfb      	adds	r3, r7, #7
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	18db      	adds	r3, r3, r3
 80008c4:	b299      	uxth	r1, r3
 80008c6:	1dbc      	adds	r4, r7, #6
 80008c8:	481e      	ldr	r0, [pc, #120]	; (8000944 <i2cScanner+0xa8>)
 80008ca:	2305      	movs	r3, #5
 80008cc:	2203      	movs	r2, #3
 80008ce:	f000 fd29 	bl	8001324 <HAL_I2C_IsDeviceReady>
 80008d2:	0003      	movs	r3, r0
 80008d4:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 80008d6:	1dbb      	adds	r3, r7, #6
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d006      	beq.n	80008ec <i2cScanner+0x50>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 80008de:	4b16      	ldr	r3, [pc, #88]	; (8000938 <i2cScanner+0x9c>)
 80008e0:	4919      	ldr	r1, [pc, #100]	; (8000948 <i2cScanner+0xac>)
 80008e2:	4817      	ldr	r0, [pc, #92]	; (8000940 <i2cScanner+0xa4>)
 80008e4:	2204      	movs	r2, #4
 80008e6:	f001 ff49 	bl	800277c <HAL_UART_Transmit>
 80008ea:	e010      	b.n	800090e <i2cScanner+0x72>
			}
			else if(ret == HAL_OK)
 80008ec:	1dbb      	adds	r3, r7, #6
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10c      	bne.n	800090e <i2cScanner+0x72>
			{
				sprintf(Buffer, "0x%X", i);
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	4914      	ldr	r1, [pc, #80]	; (800094c <i2cScanner+0xb0>)
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <i2cScanner+0xb4>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f002 fded 	bl	80034dc <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <i2cScanner+0x9c>)
 8000904:	4912      	ldr	r1, [pc, #72]	; (8000950 <i2cScanner+0xb4>)
 8000906:	480e      	ldr	r0, [pc, #56]	; (8000940 <i2cScanner+0xa4>)
 8000908:	2219      	movs	r2, #25
 800090a:	f001 ff37 	bl	800277c <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	3201      	adds	r2, #1
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	b25b      	sxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	dacc      	bge.n	80008bc <i2cScanner+0x20>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <i2cScanner+0x9c>)
 8000924:	490b      	ldr	r1, [pc, #44]	; (8000954 <i2cScanner+0xb8>)
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <i2cScanner+0xa4>)
 8000928:	220b      	movs	r2, #11
 800092a:	f001 ff27 	bl	800277c <HAL_UART_Transmit>
	}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b003      	add	sp, #12
 8000934:	bd90      	pop	{r4, r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	00002710 	.word	0x00002710
 800093c:	20000004 	.word	0x20000004
 8000940:	200000f8 	.word	0x200000f8
 8000944:	200000a4 	.word	0x200000a4
 8000948:	20000000 	.word	0x20000000
 800094c:	08003e40 	.word	0x08003e40
 8000950:	2000018c 	.word	0x2000018c
 8000954:	20000020 	.word	0x20000020

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_MspInit+0x4c>)
 800096c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <HAL_MspInit+0x4c>)
 8000970:	2101      	movs	r1, #1
 8000972:	430a      	orrs	r2, r1
 8000974:	641a      	str	r2, [r3, #64]	; 0x40
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	2201      	movs	r2, #1
 800097c:	4013      	ands	r3, r2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <HAL_MspInit+0x4c>)
 8000984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_MspInit+0x4c>)
 8000988:	2180      	movs	r1, #128	; 0x80
 800098a:	0549      	lsls	r1, r1, #21
 800098c:	430a      	orrs	r2, r1
 800098e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <HAL_MspInit+0x4c>)
 8000992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	055b      	lsls	r3, r3, #21
 8000998:	4013      	ands	r3, r2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800099e:	23c0      	movs	r3, #192	; 0xc0
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f9cc 	bl	8000d40 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000

080009b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b4:	b590      	push	{r4, r7, lr}
 80009b6:	b097      	sub	sp, #92	; 0x5c
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	2344      	movs	r3, #68	; 0x44
 80009be:	18fb      	adds	r3, r7, r3
 80009c0:	0018      	movs	r0, r3
 80009c2:	2314      	movs	r3, #20
 80009c4:	001a      	movs	r2, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	f002 fda8 	bl	800351c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009cc:	2410      	movs	r4, #16
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	0018      	movs	r0, r3
 80009d2:	2334      	movs	r3, #52	; 0x34
 80009d4:	001a      	movs	r2, r3
 80009d6:	2100      	movs	r1, #0
 80009d8:	f002 fda0 	bl	800351c <memset>
  if(hi2c->Instance==I2C1)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <HAL_I2C_MspInit+0xbc>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d13f      	bne.n	8000a66 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	2220      	movs	r2, #32
 80009ea:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 fcb3 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	1e03      	subs	r3, r0, #0
 80009fc:	d001      	beq.n	8000a02 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009fe:	f7ff ffab 	bl	8000958 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_I2C_MspInit+0xc0>)
 8000a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_I2C_MspInit+0xc0>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_I2C_MspInit+0xc0>)
 8000a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a12:	2201      	movs	r2, #1
 8000a14:	4013      	ands	r3, r2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a1a:	2144      	movs	r1, #68	; 0x44
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	22c0      	movs	r2, #192	; 0xc0
 8000a20:	00d2      	lsls	r2, r2, #3
 8000a22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2212      	movs	r2, #18
 8000a28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2206      	movs	r2, #6
 8000a3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3c:	187a      	adds	r2, r7, r1
 8000a3e:	23a0      	movs	r3, #160	; 0xa0
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	0011      	movs	r1, r2
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fa45 	bl	8000ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_I2C_MspInit+0xc0>)
 8000a4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a4e:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_I2C_MspInit+0xc0>)
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	0389      	lsls	r1, r1, #14
 8000a54:	430a      	orrs	r2, r1
 8000a56:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <HAL_I2C_MspInit+0xc0>)
 8000a5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a5c:	2380      	movs	r3, #128	; 0x80
 8000a5e:	039b      	lsls	r3, r3, #14
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	b017      	add	sp, #92	; 0x5c
 8000a6c:	bd90      	pop	{r4, r7, pc}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	40005400 	.word	0x40005400
 8000a74:	40021000 	.word	0x40021000

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b097      	sub	sp, #92	; 0x5c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	2344      	movs	r3, #68	; 0x44
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	0018      	movs	r0, r3
 8000a86:	2314      	movs	r3, #20
 8000a88:	001a      	movs	r2, r3
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	f002 fd46 	bl	800351c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a90:	2410      	movs	r4, #16
 8000a92:	193b      	adds	r3, r7, r4
 8000a94:	0018      	movs	r0, r3
 8000a96:	2334      	movs	r3, #52	; 0x34
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f002 fd3e 	bl	800351c <memset>
  if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <HAL_UART_MspInit+0xb8>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d13e      	bne.n	8000b28 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	2202      	movs	r2, #2
 8000aae:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab0:	193b      	adds	r3, r7, r4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f001 fc51 	bl	8002360 <HAL_RCCEx_PeriphCLKConfig>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ac2:	f7ff ff49 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ac8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_UART_MspInit+0xbc>)
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	0289      	lsls	r1, r1, #10
 8000ad0:	430a      	orrs	r2, r1
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ad4:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ad8:	2380      	movs	r3, #128	; 0x80
 8000ada:	029b      	lsls	r3, r3, #10
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_UART_MspInit+0xbc>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	430a      	orrs	r2, r1
 8000aec:	635a      	str	r2, [r3, #52]	; 0x34
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_UART_MspInit+0xbc>)
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	2201      	movs	r2, #1
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000afa:	2144      	movs	r1, #68	; 0x44
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	220c      	movs	r2, #12
 8000b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	2202      	movs	r2, #2
 8000b06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b08:	187b      	adds	r3, r7, r1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2201      	movs	r2, #1
 8000b18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	187a      	adds	r2, r7, r1
 8000b1c:	23a0      	movs	r3, #160	; 0xa0
 8000b1e:	05db      	lsls	r3, r3, #23
 8000b20:	0011      	movs	r1, r2
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f9d6 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b28:	46c0      	nop			; (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	b017      	add	sp, #92	; 0x5c
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40021000 	.word	0x40021000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	46c0      	nop			; (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f8d4 	bl	8000d08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	; (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	18d3      	adds	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f002 fcc8 	bl	800352c <__errno>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	425b      	negs	r3, r3
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	18d2      	adds	r2, r2, r3
 8000bb6:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <_sbrk+0x64>)
 8000bb8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b006      	add	sp, #24
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20009000 	.word	0x20009000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	200001a8 	.word	0x200001a8
 8000bd0:	200002f8 	.word	0x200002f8

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000be4:	f7ff fff6 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0e:	f002 fc93 	bl	8003538 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c12:	f7ff fd0d 	bl	8000630 <main>

08000c16 <LoopForever>:

LoopForever:
  b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   r0, =_estack
 8000c18:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c24:	08003f14 	.word	0x08003f14
  ldr r2, =_sbss
 8000c28:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c2c:	200002f8 	.word	0x200002f8

08000c30 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_COMP_IRQHandler>
	...

08000c34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <HAL_Init+0x3c>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <HAL_Init+0x3c>)
 8000c46:	2180      	movs	r1, #128	; 0x80
 8000c48:	0049      	lsls	r1, r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f000 f810 	bl	8000c74 <HAL_InitTick>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	701a      	strb	r2, [r3, #0]
 8000c5e:	e001      	b.n	8000c64 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fe80 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	781b      	ldrb	r3, [r3, #0]
}
 8000c68:	0018      	movs	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b002      	add	sp, #8
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b590      	push	{r4, r7, lr}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <HAL_InitTick+0x88>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d02b      	beq.n	8000ce4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_InitTick+0x8c>)
 8000c8e:	681c      	ldr	r4, [r3, #0]
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_InitTick+0x88>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	0019      	movs	r1, r3
 8000c96:	23fa      	movs	r3, #250	; 0xfa
 8000c98:	0098      	lsls	r0, r3, #2
 8000c9a:	f7ff fa3d 	bl	8000118 <__udivsi3>
 8000c9e:	0003      	movs	r3, r0
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0020      	movs	r0, r4
 8000ca4:	f7ff fa38 	bl	8000118 <__udivsi3>
 8000ca8:	0003      	movs	r3, r0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 f905 	bl	8000eba <HAL_SYSTICK_Config>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d112      	bne.n	8000cda <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d80a      	bhi.n	8000cd0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	425b      	negs	r3, r3
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f8e4 	bl	8000e90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cc8:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_InitTick+0x90>)
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	e00d      	b.n	8000cec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e008      	b.n	8000cec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cda:	230f      	movs	r3, #15
 8000cdc:	18fb      	adds	r3, r7, r3
 8000cde:	2201      	movs	r2, #1
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e003      	b.n	8000cec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2201      	movs	r2, #1
 8000cea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000cec:	230f      	movs	r3, #15
 8000cee:	18fb      	adds	r3, r7, r3
 8000cf0:	781b      	ldrb	r3, [r3, #0]
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b005      	add	sp, #20
 8000cf8:	bd90      	pop	{r4, r7, pc}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	20000034 	.word	0x20000034
 8000d00:	2000002c 	.word	0x2000002c
 8000d04:	20000030 	.word	0x20000030

08000d08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d0c:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <HAL_IncTick+0x1c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	001a      	movs	r2, r3
 8000d12:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <HAL_IncTick+0x20>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	18d2      	adds	r2, r2, r3
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <HAL_IncTick+0x20>)
 8000d1a:	601a      	str	r2, [r3, #0]
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000034 	.word	0x20000034
 8000d28:	200001ac 	.word	0x200001ac

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b02      	ldr	r3, [pc, #8]	; (8000d3c <HAL_GetTick+0x10>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	200001ac 	.word	0x200001ac

08000d40 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d4e:	4013      	ands	r3, r2
 8000d50:	0019      	movs	r1, r3
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d54:	687a      	ldr	r2, [r7, #4]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	601a      	str	r2, [r3, #0]
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40010000 	.word	0x40010000
 8000d68:	fffff9ff 	.word	0xfffff9ff

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d80:	d828      	bhi.n	8000dd4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d82:	4a2f      	ldr	r2, [pc, #188]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000d84:	1dfb      	adds	r3, r7, #7
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b25b      	sxtb	r3, r3
 8000d8a:	089b      	lsrs	r3, r3, #2
 8000d8c:	33c0      	adds	r3, #192	; 0xc0
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	589b      	ldr	r3, [r3, r2]
 8000d92:	1dfa      	adds	r2, r7, #7
 8000d94:	7812      	ldrb	r2, [r2, #0]
 8000d96:	0011      	movs	r1, r2
 8000d98:	2203      	movs	r2, #3
 8000d9a:	400a      	ands	r2, r1
 8000d9c:	00d2      	lsls	r2, r2, #3
 8000d9e:	21ff      	movs	r1, #255	; 0xff
 8000da0:	4091      	lsls	r1, r2
 8000da2:	000a      	movs	r2, r1
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	019b      	lsls	r3, r3, #6
 8000dae:	22ff      	movs	r2, #255	; 0xff
 8000db0:	401a      	ands	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	0018      	movs	r0, r3
 8000db8:	2303      	movs	r3, #3
 8000dba:	4003      	ands	r3, r0
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dc0:	481f      	ldr	r0, [pc, #124]	; (8000e40 <__NVIC_SetPriority+0xd4>)
 8000dc2:	1dfb      	adds	r3, r7, #7
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	b25b      	sxtb	r3, r3
 8000dc8:	089b      	lsrs	r3, r3, #2
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	33c0      	adds	r3, #192	; 0xc0
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dd2:	e031      	b.n	8000e38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000dd6:	1dfb      	adds	r3, r7, #7
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	230f      	movs	r3, #15
 8000dde:	400b      	ands	r3, r1
 8000de0:	3b08      	subs	r3, #8
 8000de2:	089b      	lsrs	r3, r3, #2
 8000de4:	3306      	adds	r3, #6
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	3304      	adds	r3, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	1dfa      	adds	r2, r7, #7
 8000df0:	7812      	ldrb	r2, [r2, #0]
 8000df2:	0011      	movs	r1, r2
 8000df4:	2203      	movs	r2, #3
 8000df6:	400a      	ands	r2, r1
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	21ff      	movs	r1, #255	; 0xff
 8000dfc:	4091      	lsls	r1, r2
 8000dfe:	000a      	movs	r2, r1
 8000e00:	43d2      	mvns	r2, r2
 8000e02:	401a      	ands	r2, r3
 8000e04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	019b      	lsls	r3, r3, #6
 8000e0a:	22ff      	movs	r2, #255	; 0xff
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	0018      	movs	r0, r3
 8000e14:	2303      	movs	r3, #3
 8000e16:	4003      	ands	r3, r0
 8000e18:	00db      	lsls	r3, r3, #3
 8000e1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e1c:	4809      	ldr	r0, [pc, #36]	; (8000e44 <__NVIC_SetPriority+0xd8>)
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001c      	movs	r4, r3
 8000e24:	230f      	movs	r3, #15
 8000e26:	4023      	ands	r3, r4
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	3306      	adds	r3, #6
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	18c3      	adds	r3, r0, r3
 8000e34:	3304      	adds	r3, #4
 8000e36:	601a      	str	r2, [r3, #0]
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	1e5a      	subs	r2, r3, #1
 8000e54:	2380      	movs	r3, #128	; 0x80
 8000e56:	045b      	lsls	r3, r3, #17
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d301      	bcc.n	8000e60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e010      	b.n	8000e82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <SysTick_Config+0x44>)
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	3a01      	subs	r2, #1
 8000e66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2103      	movs	r1, #3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff ff7c 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x44>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x44>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	0018      	movs	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b002      	add	sp, #8
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60b9      	str	r1, [r7, #8]
 8000e98:	607a      	str	r2, [r7, #4]
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	1c02      	adds	r2, r0, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	0011      	movs	r1, r2
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff5d 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b004      	add	sp, #16
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ffbf 	bl	8000e48 <SysTick_Config>
 8000eca:	0003      	movs	r3, r0
}
 8000ecc:	0018      	movs	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e147      	b.n	8001174 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2101      	movs	r1, #1
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	4091      	lsls	r1, r2
 8000eee:	000a      	movs	r2, r1
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d100      	bne.n	8000efc <HAL_GPIO_Init+0x28>
 8000efa:	e138      	b.n	800116e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2203      	movs	r2, #3
 8000f02:	4013      	ands	r3, r2
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d005      	beq.n	8000f14 <HAL_GPIO_Init+0x40>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	4013      	ands	r3, r2
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	409a      	lsls	r2, r3
 8000f22:	0013      	movs	r3, r2
 8000f24:	43da      	mvns	r2, r3
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	43da      	mvns	r2, r3
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	2201      	movs	r2, #1
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d017      	beq.n	8000fb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	2203      	movs	r2, #3
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689a      	ldr	r2, [r3, #8]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	409a      	lsls	r2, r3
 8000fa4:	0013      	movs	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d123      	bne.n	8001006 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	08da      	lsrs	r2, r3, #3
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3208      	adds	r2, #8
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	58d3      	ldr	r3, [r2, r3]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	2207      	movs	r2, #7
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	691a      	ldr	r2, [r3, #16]
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2107      	movs	r1, #7
 8000fea:	400b      	ands	r3, r1
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	6939      	ldr	r1, [r7, #16]
 8001004:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	005b      	lsls	r3, r3, #1
 8001010:	2203      	movs	r2, #3
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	43da      	mvns	r2, r3
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4013      	ands	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2203      	movs	r2, #3
 8001024:	401a      	ands	r2, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	23c0      	movs	r3, #192	; 0xc0
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d100      	bne.n	8001048 <HAL_GPIO_Init+0x174>
 8001046:	e092      	b.n	800116e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001048:	4a50      	ldr	r2, [pc, #320]	; (800118c <HAL_GPIO_Init+0x2b8>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3318      	adds	r3, #24
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	589b      	ldr	r3, [r3, r2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2203      	movs	r2, #3
 800105a:	4013      	ands	r3, r2
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	220f      	movs	r2, #15
 8001060:	409a      	lsls	r2, r3
 8001062:	0013      	movs	r3, r2
 8001064:	43da      	mvns	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	05db      	lsls	r3, r3, #23
 8001072:	429a      	cmp	r2, r3
 8001074:	d013      	beq.n	800109e <HAL_GPIO_Init+0x1ca>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a45      	ldr	r2, [pc, #276]	; (8001190 <HAL_GPIO_Init+0x2bc>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d00d      	beq.n	800109a <HAL_GPIO_Init+0x1c6>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a44      	ldr	r2, [pc, #272]	; (8001194 <HAL_GPIO_Init+0x2c0>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d007      	beq.n	8001096 <HAL_GPIO_Init+0x1c2>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a43      	ldr	r2, [pc, #268]	; (8001198 <HAL_GPIO_Init+0x2c4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d101      	bne.n	8001092 <HAL_GPIO_Init+0x1be>
 800108e:	2303      	movs	r3, #3
 8001090:	e006      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 8001092:	2305      	movs	r3, #5
 8001094:	e004      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 8001096:	2302      	movs	r3, #2
 8001098:	e002      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <HAL_GPIO_Init+0x1cc>
 800109e:	2300      	movs	r3, #0
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	2103      	movs	r1, #3
 80010a4:	400a      	ands	r2, r1
 80010a6:	00d2      	lsls	r2, r2, #3
 80010a8:	4093      	lsls	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010b0:	4936      	ldr	r1, [pc, #216]	; (800118c <HAL_GPIO_Init+0x2b8>)
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3318      	adds	r3, #24
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_GPIO_Init+0x2b8>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	43da      	mvns	r2, r3
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4013      	ands	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	035b      	lsls	r3, r3, #13
 80010d6:	4013      	ands	r3, r2
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4313      	orrs	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_GPIO_Init+0x2b8>)
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <HAL_GPIO_Init+0x2b8>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	43da      	mvns	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4013      	ands	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685a      	ldr	r2, [r3, #4]
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	039b      	lsls	r3, r3, #14
 8001100:	4013      	ands	r3, r2
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800110c:	4b1f      	ldr	r3, [pc, #124]	; (800118c <HAL_GPIO_Init+0x2b8>)
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001112:	4a1e      	ldr	r2, [pc, #120]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001114:	2384      	movs	r3, #132	; 0x84
 8001116:	58d3      	ldr	r3, [r2, r3]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43da      	mvns	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685a      	ldr	r2, [r3, #4]
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	029b      	lsls	r3, r3, #10
 800112c:	4013      	ands	r3, r2
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001138:	4914      	ldr	r1, [pc, #80]	; (800118c <HAL_GPIO_Init+0x2b8>)
 800113a:	2284      	movs	r2, #132	; 0x84
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	58d3      	ldr	r3, [r2, r3]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43da      	mvns	r2, r3
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685a      	ldr	r2, [r3, #4]
 8001156:	2380      	movs	r3, #128	; 0x80
 8001158:	025b      	lsls	r3, r3, #9
 800115a:	4013      	ands	r3, r2
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001166:	4909      	ldr	r1, [pc, #36]	; (800118c <HAL_GPIO_Init+0x2b8>)
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	3301      	adds	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	40da      	lsrs	r2, r3
 800117c:	1e13      	subs	r3, r2, #0
 800117e:	d000      	beq.n	8001182 <HAL_GPIO_Init+0x2ae>
 8001180:	e6b0      	b.n	8000ee4 <HAL_GPIO_Init+0x10>
  }
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46c0      	nop			; (mov r8, r8)
 8001186:	46bd      	mov	sp, r7
 8001188:	b006      	add	sp, #24
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40021800 	.word	0x40021800
 8001190:	50000400 	.word	0x50000400
 8001194:	50000800 	.word	0x50000800
 8001198:	50000c00 	.word	0x50000c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	0008      	movs	r0, r1
 80011a6:	0011      	movs	r1, r2
 80011a8:	1cbb      	adds	r3, r7, #2
 80011aa:	1c02      	adds	r2, r0, #0
 80011ac:	801a      	strh	r2, [r3, #0]
 80011ae:	1c7b      	adds	r3, r7, #1
 80011b0:	1c0a      	adds	r2, r1, #0
 80011b2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b4:	1c7b      	adds	r3, r7, #1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d004      	beq.n	80011c6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011bc:	1cbb      	adds	r3, r7, #2
 80011be:	881a      	ldrh	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011c4:	e003      	b.n	80011ce <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011c6:	1cbb      	adds	r3, r7, #2
 80011c8:	881a      	ldrh	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e08f      	b.n	800130a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2241      	movs	r2, #65	; 0x41
 80011ee:	5c9b      	ldrb	r3, [r3, r2]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d107      	bne.n	8001206 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2240      	movs	r2, #64	; 0x40
 80011fa:	2100      	movs	r1, #0
 80011fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	0018      	movs	r0, r3
 8001202:	f7ff fbd7 	bl	80009b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2241      	movs	r2, #65	; 0x41
 800120a:	2124      	movs	r1, #36	; 0x24
 800120c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	438a      	bics	r2, r1
 800121c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	493b      	ldr	r1, [pc, #236]	; (8001314 <HAL_I2C_Init+0x13c>)
 8001228:	400a      	ands	r2, r1
 800122a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4938      	ldr	r1, [pc, #224]	; (8001318 <HAL_I2C_Init+0x140>)
 8001238:	400a      	ands	r2, r1
 800123a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d108      	bne.n	8001256 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2180      	movs	r1, #128	; 0x80
 800124e:	0209      	lsls	r1, r1, #8
 8001250:	430a      	orrs	r2, r1
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	e007      	b.n	8001266 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2184      	movs	r1, #132	; 0x84
 8001260:	0209      	lsls	r1, r1, #8
 8001262:	430a      	orrs	r2, r1
 8001264:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d109      	bne.n	8001282 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	0109      	lsls	r1, r1, #4
 800127c:	430a      	orrs	r2, r1
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	e007      	b.n	8001292 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4923      	ldr	r1, [pc, #140]	; (800131c <HAL_I2C_Init+0x144>)
 800128e:	400a      	ands	r2, r1
 8001290:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4920      	ldr	r1, [pc, #128]	; (8001320 <HAL_I2C_Init+0x148>)
 800129e:	430a      	orrs	r2, r1
 80012a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	491a      	ldr	r1, [pc, #104]	; (8001318 <HAL_I2C_Init+0x140>)
 80012ae:	400a      	ands	r2, r1
 80012b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	431a      	orrs	r2, r3
 80012bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69d9      	ldr	r1, [r3, #28]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1a      	ldr	r2, [r3, #32]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	430a      	orrs	r2, r1
 80012da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2101      	movs	r1, #1
 80012e8:	430a      	orrs	r2, r1
 80012ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2241      	movs	r2, #65	; 0x41
 80012f6:	2120      	movs	r1, #32
 80012f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2242      	movs	r2, #66	; 0x42
 8001304:	2100      	movs	r1, #0
 8001306:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b002      	add	sp, #8
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	f0ffffff 	.word	0xf0ffffff
 8001318:	ffff7fff 	.word	0xffff7fff
 800131c:	fffff7ff 	.word	0xfffff7ff
 8001320:	02008000 	.word	0x02008000

08001324 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	230a      	movs	r3, #10
 8001332:	18fb      	adds	r3, r7, r3
 8001334:	1c0a      	adds	r2, r1, #0
 8001336:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001338:	2300      	movs	r3, #0
 800133a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2241      	movs	r2, #65	; 0x41
 8001340:	5c9b      	ldrb	r3, [r3, r2]
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b20      	cmp	r3, #32
 8001346:	d000      	beq.n	800134a <HAL_I2C_IsDeviceReady+0x26>
 8001348:	e0df      	b.n	800150a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	699a      	ldr	r2, [r3, #24]
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	401a      	ands	r2, r3
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	429a      	cmp	r2, r3
 800135c:	d101      	bne.n	8001362 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800135e:	2302      	movs	r3, #2
 8001360:	e0d4      	b.n	800150c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2240      	movs	r2, #64	; 0x40
 8001366:	5c9b      	ldrb	r3, [r3, r2]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_I2C_IsDeviceReady+0x4c>
 800136c:	2302      	movs	r3, #2
 800136e:	e0cd      	b.n	800150c <HAL_I2C_IsDeviceReady+0x1e8>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2240      	movs	r2, #64	; 0x40
 8001374:	2101      	movs	r1, #1
 8001376:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2241      	movs	r2, #65	; 0x41
 800137c:	2124      	movs	r1, #36	; 0x24
 800137e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d107      	bne.n	800139e <HAL_I2C_IsDeviceReady+0x7a>
 800138e:	230a      	movs	r3, #10
 8001390:	18fb      	adds	r3, r7, r3
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	059b      	lsls	r3, r3, #22
 8001396:	0d9b      	lsrs	r3, r3, #22
 8001398:	4a5e      	ldr	r2, [pc, #376]	; (8001514 <HAL_I2C_IsDeviceReady+0x1f0>)
 800139a:	431a      	orrs	r2, r3
 800139c:	e006      	b.n	80013ac <HAL_I2C_IsDeviceReady+0x88>
 800139e:	230a      	movs	r3, #10
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	059b      	lsls	r3, r3, #22
 80013a6:	0d9b      	lsrs	r3, r3, #22
 80013a8:	4a5b      	ldr	r2, [pc, #364]	; (8001518 <HAL_I2C_IsDeviceReady+0x1f4>)
 80013aa:	431a      	orrs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80013b2:	f7ff fcbb 	bl	8000d2c <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	2220      	movs	r2, #32
 80013c2:	4013      	ands	r3, r2
 80013c4:	3b20      	subs	r3, #32
 80013c6:	425a      	negs	r2, r3
 80013c8:	4153      	adcs	r3, r2
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	231f      	movs	r3, #31
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2210      	movs	r2, #16
 80013da:	4013      	ands	r3, r2
 80013dc:	3b10      	subs	r3, #16
 80013de:	425a      	negs	r2, r3
 80013e0:	4153      	adcs	r3, r2
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	231e      	movs	r3, #30
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013ea:	e035      	b.n	8001458 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	d01a      	beq.n	8001428 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80013f2:	f7ff fc9b 	bl	8000d2c <HAL_GetTick>
 80013f6:	0002      	movs	r2, r0
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d302      	bcc.n	8001408 <HAL_I2C_IsDeviceReady+0xe4>
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d10f      	bne.n	8001428 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2241      	movs	r2, #65	; 0x41
 800140c:	2120      	movs	r1, #32
 800140e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001414:	2220      	movs	r2, #32
 8001416:	431a      	orrs	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2240      	movs	r2, #64	; 0x40
 8001420:	2100      	movs	r1, #0
 8001422:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e071      	b.n	800150c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	2220      	movs	r2, #32
 8001430:	4013      	ands	r3, r2
 8001432:	3b20      	subs	r3, #32
 8001434:	425a      	negs	r2, r3
 8001436:	4153      	adcs	r3, r2
 8001438:	b2da      	uxtb	r2, r3
 800143a:	231f      	movs	r3, #31
 800143c:	18fb      	adds	r3, r7, r3
 800143e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2210      	movs	r2, #16
 8001448:	4013      	ands	r3, r2
 800144a:	3b10      	subs	r3, #16
 800144c:	425a      	negs	r2, r3
 800144e:	4153      	adcs	r3, r2
 8001450:	b2da      	uxtb	r2, r3
 8001452:	231e      	movs	r3, #30
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001458:	231f      	movs	r3, #31
 800145a:	18fb      	adds	r3, r7, r3
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d104      	bne.n	800146c <HAL_I2C_IsDeviceReady+0x148>
 8001462:	231e      	movs	r3, #30
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0bf      	beq.n	80013ec <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2210      	movs	r2, #16
 8001474:	4013      	ands	r3, r2
 8001476:	2b10      	cmp	r3, #16
 8001478:	d01a      	beq.n	80014b0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	0013      	movs	r3, r2
 8001484:	2200      	movs	r2, #0
 8001486:	2120      	movs	r1, #32
 8001488:	f000 f86a 	bl	8001560 <I2C_WaitOnFlagUntilTimeout>
 800148c:	1e03      	subs	r3, r0, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e03b      	b.n	800150c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2220      	movs	r2, #32
 800149a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2241      	movs	r2, #65	; 0x41
 80014a0:	2120      	movs	r1, #32
 80014a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2240      	movs	r2, #64	; 0x40
 80014a8:	2100      	movs	r1, #0
 80014aa:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e02d      	b.n	800150c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	68f8      	ldr	r0, [r7, #12]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	0013      	movs	r3, r2
 80014ba:	2200      	movs	r2, #0
 80014bc:	2120      	movs	r1, #32
 80014be:	f000 f84f 	bl	8001560 <I2C_WaitOnFlagUntilTimeout>
 80014c2:	1e03      	subs	r3, r0, #0
 80014c4:	d001      	beq.n	80014ca <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e020      	b.n	800150c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2210      	movs	r2, #16
 80014d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2220      	movs	r2, #32
 80014d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d900      	bls.n	80014ea <HAL_I2C_IsDeviceReady+0x1c6>
 80014e8:	e74d      	b.n	8001386 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2241      	movs	r2, #65	; 0x41
 80014ee:	2120      	movs	r1, #32
 80014f0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	2220      	movs	r2, #32
 80014f8:	431a      	orrs	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	2100      	movs	r1, #0
 8001504:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800150a:	2302      	movs	r3, #2
  }
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	b008      	add	sp, #32
 8001512:	bd80      	pop	{r7, pc}
 8001514:	02002000 	.word	0x02002000
 8001518:	02002800 	.word	0x02002800

0800151c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	2b02      	cmp	r3, #2
 8001530:	d103      	bne.n	800153a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2201      	movs	r2, #1
 8001542:	4013      	ands	r3, r2
 8001544:	2b01      	cmp	r3, #1
 8001546:	d007      	beq.n	8001558 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2101      	movs	r1, #1
 8001554:	430a      	orrs	r2, r1
 8001556:	619a      	str	r2, [r3, #24]
  }
}
 8001558:	46c0      	nop			; (mov r8, r8)
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001570:	e03a      	b.n	80015e8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	6839      	ldr	r1, [r7, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	0018      	movs	r0, r3
 800157a:	f000 f849 	bl	8001610 <I2C_IsErrorOccurred>
 800157e:	1e03      	subs	r3, r0, #0
 8001580:	d001      	beq.n	8001586 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e040      	b.n	8001608 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	3301      	adds	r3, #1
 800158a:	d02d      	beq.n	80015e8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800158c:	f7ff fbce 	bl	8000d2c <HAL_GetTick>
 8001590:	0002      	movs	r2, r0
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d302      	bcc.n	80015a2 <I2C_WaitOnFlagUntilTimeout+0x42>
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d122      	bne.n	80015e8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	4013      	ands	r3, r2
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	425a      	negs	r2, r3
 80015b2:	4153      	adcs	r3, r2
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	001a      	movs	r2, r3
 80015b8:	1dfb      	adds	r3, r7, #7
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d113      	bne.n	80015e8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c4:	2220      	movs	r2, #32
 80015c6:	431a      	orrs	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2241      	movs	r2, #65	; 0x41
 80015d0:	2120      	movs	r1, #32
 80015d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2242      	movs	r2, #66	; 0x42
 80015d8:	2100      	movs	r1, #0
 80015da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2240      	movs	r2, #64	; 0x40
 80015e0:	2100      	movs	r1, #0
 80015e2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e00f      	b.n	8001608 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	68ba      	ldr	r2, [r7, #8]
 80015f0:	4013      	ands	r3, r2
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	425a      	negs	r2, r3
 80015f8:	4153      	adcs	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	001a      	movs	r2, r3
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d0b5      	beq.n	8001572 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}

08001610 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001610:	b590      	push	{r4, r7, lr}
 8001612:	b08b      	sub	sp, #44	; 0x2c
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2327      	movs	r3, #39	; 0x27
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2210      	movs	r2, #16
 8001638:	4013      	ands	r3, r2
 800163a:	d100      	bne.n	800163e <I2C_IsErrorOccurred+0x2e>
 800163c:	e082      	b.n	8001744 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2210      	movs	r2, #16
 8001644:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001646:	e060      	b.n	800170a <I2C_IsErrorOccurred+0xfa>
 8001648:	2427      	movs	r4, #39	; 0x27
 800164a:	193b      	adds	r3, r7, r4
 800164c:	193a      	adds	r2, r7, r4
 800164e:	7812      	ldrb	r2, [r2, #0]
 8001650:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	3301      	adds	r3, #1
 8001656:	d058      	beq.n	800170a <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001658:	f7ff fb68 	bl	8000d2c <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	429a      	cmp	r2, r3
 8001666:	d306      	bcc.n	8001676 <I2C_IsErrorOccurred+0x66>
 8001668:	193b      	adds	r3, r7, r4
 800166a:	193a      	adds	r2, r7, r4
 800166c:	7812      	ldrb	r2, [r2, #0]
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d149      	bne.n	800170a <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	2380      	movs	r3, #128	; 0x80
 800167e:	01db      	lsls	r3, r3, #7
 8001680:	4013      	ands	r3, r2
 8001682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001684:	2013      	movs	r0, #19
 8001686:	183b      	adds	r3, r7, r0
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	2142      	movs	r1, #66	; 0x42
 800168c:	5c52      	ldrb	r2, [r2, r1]
 800168e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699a      	ldr	r2, [r3, #24]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	401a      	ands	r2, r3
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d126      	bne.n	80016f2 <I2C_IsErrorOccurred+0xe2>
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	01db      	lsls	r3, r3, #7
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d021      	beq.n	80016f2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80016ae:	183b      	adds	r3, r7, r0
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b20      	cmp	r3, #32
 80016b4:	d01d      	beq.n	80016f2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	01c9      	lsls	r1, r1, #7
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016c8:	f7ff fb30 	bl	8000d2c <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016d0:	e00f      	b.n	80016f2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016d2:	f7ff fb2b 	bl	8000d2c <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b19      	cmp	r3, #25
 80016de:	d908      	bls.n	80016f2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	2220      	movs	r2, #32
 80016e4:	4313      	orrs	r3, r2
 80016e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80016e8:	2327      	movs	r3, #39	; 0x27
 80016ea:	18fb      	adds	r3, r7, r3
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]

              break;
 80016f0:	e00b      	b.n	800170a <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	2220      	movs	r2, #32
 80016fa:	4013      	ands	r3, r2
 80016fc:	2127      	movs	r1, #39	; 0x27
 80016fe:	187a      	adds	r2, r7, r1
 8001700:	1879      	adds	r1, r7, r1
 8001702:	7809      	ldrb	r1, [r1, #0]
 8001704:	7011      	strb	r1, [r2, #0]
 8001706:	2b20      	cmp	r3, #32
 8001708:	d1e3      	bne.n	80016d2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2220      	movs	r2, #32
 8001712:	4013      	ands	r3, r2
 8001714:	2b20      	cmp	r3, #32
 8001716:	d004      	beq.n	8001722 <I2C_IsErrorOccurred+0x112>
 8001718:	2327      	movs	r3, #39	; 0x27
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d092      	beq.n	8001648 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001722:	2327      	movs	r3, #39	; 0x27
 8001724:	18fb      	adds	r3, r7, r3
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d103      	bne.n	8001734 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2220      	movs	r2, #32
 8001732:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001734:	6a3b      	ldr	r3, [r7, #32]
 8001736:	2204      	movs	r2, #4
 8001738:	4313      	orrs	r3, r2
 800173a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800173c:	2327      	movs	r3, #39	; 0x27
 800173e:	18fb      	adds	r3, r7, r3
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4013      	ands	r3, r2
 8001754:	d00c      	beq.n	8001770 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	2201      	movs	r2, #1
 800175a:	4313      	orrs	r3, r2
 800175c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	0052      	lsls	r2, r2, #1
 8001766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001768:	2327      	movs	r3, #39	; 0x27
 800176a:	18fb      	adds	r3, r7, r3
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4013      	ands	r3, r2
 8001778:	d00c      	beq.n	8001794 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	2208      	movs	r2, #8
 800177e:	4313      	orrs	r3, r2
 8001780:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	00d2      	lsls	r2, r2, #3
 800178a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800178c:	2327      	movs	r3, #39	; 0x27
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	2201      	movs	r2, #1
 8001792:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d00c      	beq.n	80017b8 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	2202      	movs	r2, #2
 80017a2:	4313      	orrs	r3, r2
 80017a4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017b0:	2327      	movs	r3, #39	; 0x27
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80017b8:	2327      	movs	r3, #39	; 0x27
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d01d      	beq.n	80017fe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	0018      	movs	r0, r3
 80017c6:	f7ff fea9 	bl	800151c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	685a      	ldr	r2, [r3, #4]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	490d      	ldr	r1, [pc, #52]	; (800180c <I2C_IsErrorOccurred+0x1fc>)
 80017d6:	400a      	ands	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017de:	6a3b      	ldr	r3, [r7, #32]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2241      	movs	r2, #65	; 0x41
 80017ea:	2120      	movs	r1, #32
 80017ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	2242      	movs	r2, #66	; 0x42
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2240      	movs	r2, #64	; 0x40
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80017fe:	2327      	movs	r3, #39	; 0x27
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	781b      	ldrb	r3, [r3, #0]
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b00b      	add	sp, #44	; 0x2c
 800180a:	bd90      	pop	{r4, r7, pc}
 800180c:	fe00e800 	.word	0xfe00e800

08001810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2241      	movs	r2, #65	; 0x41
 800181e:	5c9b      	ldrb	r3, [r3, r2]
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b20      	cmp	r3, #32
 8001824:	d138      	bne.n	8001898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2240      	movs	r2, #64	; 0x40
 800182a:	5c9b      	ldrb	r3, [r3, r2]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d101      	bne.n	8001834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001830:	2302      	movs	r3, #2
 8001832:	e032      	b.n	800189a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	2101      	movs	r1, #1
 800183a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2241      	movs	r2, #65	; 0x41
 8001840:	2124      	movs	r1, #36	; 0x24
 8001842:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2101      	movs	r1, #1
 8001850:	438a      	bics	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4911      	ldr	r1, [pc, #68]	; (80018a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001860:	400a      	ands	r2, r1
 8001862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2241      	movs	r2, #65	; 0x41
 8001888:	2120      	movs	r1, #32
 800188a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2240      	movs	r2, #64	; 0x40
 8001890:	2100      	movs	r1, #0
 8001892:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	e000      	b.n	800189a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001898:	2302      	movs	r3, #2
  }
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	ffffefff 	.word	0xffffefff

080018a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2241      	movs	r2, #65	; 0x41
 80018b6:	5c9b      	ldrb	r3, [r3, r2]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d139      	bne.n	8001932 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2240      	movs	r2, #64	; 0x40
 80018c2:	5c9b      	ldrb	r3, [r3, r2]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e033      	b.n	8001934 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2240      	movs	r2, #64	; 0x40
 80018d0:	2101      	movs	r1, #1
 80018d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2241      	movs	r2, #65	; 0x41
 80018d8:	2124      	movs	r1, #36	; 0x24
 80018da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2101      	movs	r1, #1
 80018e8:	438a      	bics	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	430a      	orrs	r2, r1
 800191c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2241      	movs	r2, #65	; 0x41
 8001922:	2120      	movs	r1, #32
 8001924:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2240      	movs	r2, #64	; 0x40
 800192a:	2100      	movs	r1, #0
 800192c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001932:	2302      	movs	r3, #2
  }
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}
 800193c:	fffff0ff 	.word	0xfffff0ff

08001940 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a19      	ldr	r2, [pc, #100]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800194e:	4013      	ands	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d11f      	bne.n	80019a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	0013      	movs	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	189b      	adds	r3, r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4912      	ldr	r1, [pc, #72]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001972:	0018      	movs	r0, r3
 8001974:	f7fe fbd0 	bl	8000118 <__udivsi3>
 8001978:	0003      	movs	r3, r0
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800197e:	e008      	b.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3b01      	subs	r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e001      	b.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e009      	b.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	401a      	ands	r2, r3
 800199c:	2380      	movs	r3, #128	; 0x80
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d0ed      	beq.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b004      	add	sp, #16
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	40007000 	.word	0x40007000
 80019b4:	fffff9ff 	.word	0xfffff9ff
 80019b8:	2000002c 	.word	0x2000002c
 80019bc:	000f4240 	.word	0x000f4240

080019c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	23e0      	movs	r3, #224	; 0xe0
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	4013      	ands	r3, r2
}
 80019ce:	0018      	movs	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000

080019d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e2fe      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2201      	movs	r2, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	d100      	bne.n	80019f6 <HAL_RCC_OscConfig+0x1e>
 80019f4:	e07c      	b.n	8001af0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019f6:	4bc3      	ldr	r3, [pc, #780]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2238      	movs	r2, #56	; 0x38
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a00:	4bc0      	ldr	r3, [pc, #768]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2203      	movs	r2, #3
 8001a06:	4013      	ands	r3, r2
 8001a08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	2b10      	cmp	r3, #16
 8001a0e:	d102      	bne.n	8001a16 <HAL_RCC_OscConfig+0x3e>
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d002      	beq.n	8001a1c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d10b      	bne.n	8001a34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	4bb9      	ldr	r3, [pc, #740]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	029b      	lsls	r3, r3, #10
 8001a24:	4013      	ands	r3, r2
 8001a26:	d062      	beq.n	8001aee <HAL_RCC_OscConfig+0x116>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d15e      	bne.n	8001aee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e2d9      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	025b      	lsls	r3, r3, #9
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d107      	bne.n	8001a50 <HAL_RCC_OscConfig+0x78>
 8001a40:	4bb0      	ldr	r3, [pc, #704]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4baf      	ldr	r3, [pc, #700]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	0249      	lsls	r1, r1, #9
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	e020      	b.n	8001a92 <HAL_RCC_OscConfig+0xba>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	23a0      	movs	r3, #160	; 0xa0
 8001a56:	02db      	lsls	r3, r3, #11
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d10e      	bne.n	8001a7a <HAL_RCC_OscConfig+0xa2>
 8001a5c:	4ba9      	ldr	r3, [pc, #676]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4ba8      	ldr	r3, [pc, #672]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a62:	2180      	movs	r1, #128	; 0x80
 8001a64:	02c9      	lsls	r1, r1, #11
 8001a66:	430a      	orrs	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	4ba6      	ldr	r3, [pc, #664]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4ba5      	ldr	r3, [pc, #660]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a70:	2180      	movs	r1, #128	; 0x80
 8001a72:	0249      	lsls	r1, r1, #9
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	e00b      	b.n	8001a92 <HAL_RCC_OscConfig+0xba>
 8001a7a:	4ba2      	ldr	r3, [pc, #648]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4ba1      	ldr	r3, [pc, #644]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a80:	49a1      	ldr	r1, [pc, #644]	; (8001d08 <HAL_RCC_OscConfig+0x330>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	4b9f      	ldr	r3, [pc, #636]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b9e      	ldr	r3, [pc, #632]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001a8c:	499f      	ldr	r1, [pc, #636]	; (8001d0c <HAL_RCC_OscConfig+0x334>)
 8001a8e:	400a      	ands	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d014      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9a:	f7ff f947 	bl	8000d2c <HAL_GetTick>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f942 	bl	8000d2c <HAL_GetTick>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e298      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	4b93      	ldr	r3, [pc, #588]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	029b      	lsls	r3, r3, #10
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xcc>
 8001ac2:	e015      	b.n	8001af0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f932 	bl	8000d2c <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ace:	f7ff f92d 	bl	8000d2c <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e283      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae0:	4b88      	ldr	r3, [pc, #544]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	029b      	lsls	r3, r3, #10
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d1f0      	bne.n	8001ace <HAL_RCC_OscConfig+0xf6>
 8001aec:	e000      	b.n	8001af0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2202      	movs	r2, #2
 8001af6:	4013      	ands	r3, r2
 8001af8:	d100      	bne.n	8001afc <HAL_RCC_OscConfig+0x124>
 8001afa:	e099      	b.n	8001c30 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001afc:	4b81      	ldr	r3, [pc, #516]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2238      	movs	r2, #56	; 0x38
 8001b02:	4013      	ands	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b06:	4b7f      	ldr	r3, [pc, #508]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b10      	cmp	r3, #16
 8001b14:	d102      	bne.n	8001b1c <HAL_RCC_OscConfig+0x144>
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d002      	beq.n	8001b22 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d135      	bne.n	8001b8e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b22:	4b78      	ldr	r3, [pc, #480]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x162>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e256      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b72      	ldr	r3, [pc, #456]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	4a74      	ldr	r2, [pc, #464]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	0019      	movs	r1, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	021a      	lsls	r2, r3, #8
 8001b4a:	4b6e      	ldr	r3, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d112      	bne.n	8001b7c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b56:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a6e      	ldr	r2, [pc, #440]	; (8001d14 <HAL_RCC_OscConfig+0x33c>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	0019      	movs	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	4b67      	ldr	r3, [pc, #412]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0adb      	lsrs	r3, r3, #11
 8001b70:	2207      	movs	r2, #7
 8001b72:	4013      	ands	r3, r2
 8001b74:	4a68      	ldr	r2, [pc, #416]	; (8001d18 <HAL_RCC_OscConfig+0x340>)
 8001b76:	40da      	lsrs	r2, r3
 8001b78:	4b68      	ldr	r3, [pc, #416]	; (8001d1c <HAL_RCC_OscConfig+0x344>)
 8001b7a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b7c:	4b68      	ldr	r3, [pc, #416]	; (8001d20 <HAL_RCC_OscConfig+0x348>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	0018      	movs	r0, r3
 8001b82:	f7ff f877 	bl	8000c74 <HAL_InitTick>
 8001b86:	1e03      	subs	r3, r0, #0
 8001b88:	d051      	beq.n	8001c2e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e22c      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d030      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b96:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a5e      	ldr	r2, [pc, #376]	; (8001d14 <HAL_RCC_OscConfig+0x33c>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	4b57      	ldr	r3, [pc, #348]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001baa:	4b56      	ldr	r3, [pc, #344]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4b55      	ldr	r3, [pc, #340]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	2180      	movs	r1, #128	; 0x80
 8001bb2:	0049      	lsls	r1, r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7ff f8b8 	bl	8000d2c <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc2:	f7ff f8b3 	bl	8000d2c <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e209      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd4:	4b4b      	ldr	r3, [pc, #300]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a4a      	ldr	r2, [pc, #296]	; (8001d10 <HAL_RCC_OscConfig+0x338>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	0019      	movs	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	021a      	lsls	r2, r3, #8
 8001bf0:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	e01b      	b.n	8001c30 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001bf8:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	4949      	ldr	r1, [pc, #292]	; (8001d24 <HAL_RCC_OscConfig+0x34c>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff f892 	bl	8000d2c <HAL_GetTick>
 8001c08:	0003      	movs	r3, r0
 8001c0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f88d 	bl	8000d2c <HAL_GetTick>
 8001c12:	0002      	movs	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e1e3      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c20:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x236>
 8001c2c:	e000      	b.n	8001c30 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2208      	movs	r2, #8
 8001c36:	4013      	ands	r3, r2
 8001c38:	d047      	beq.n	8001cca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c3a:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2238      	movs	r2, #56	; 0x38
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b18      	cmp	r3, #24
 8001c44:	d10a      	bne.n	8001c5c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c46:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d03c      	beq.n	8001cca <HAL_RCC_OscConfig+0x2f2>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d138      	bne.n	8001cca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e1c5      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d019      	beq.n	8001c98 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001c66:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c68:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff f85c 	bl	8000d2c <HAL_GetTick>
 8001c74:	0003      	movs	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f857 	bl	8000d2c <HAL_GetTick>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e1ad      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c90:	2202      	movs	r2, #2
 8001c92:	4013      	ands	r3, r2
 8001c94:	d0f1      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2a2>
 8001c96:	e018      	b.n	8001cca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c9c:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	438a      	bics	r2, r1
 8001ca2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff f842 	bl	8000d2c <HAL_GetTick>
 8001ca8:	0003      	movs	r3, r0
 8001caa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cae:	f7ff f83d 	bl	8000d2c <HAL_GetTick>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e193      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d1f1      	bne.n	8001cae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2204      	movs	r2, #4
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d100      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x2fe>
 8001cd4:	e0c6      	b.n	8001e64 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	231f      	movs	r3, #31
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2238      	movs	r2, #56	; 0x38
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b20      	cmp	r3, #32
 8001ce8:	d11e      	bne.n	8001d28 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x32c>)
 8001cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d100      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x31e>
 8001cf4:	e0b6      	b.n	8001e64 <HAL_RCC_OscConfig+0x48c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d000      	beq.n	8001d00 <HAL_RCC_OscConfig+0x328>
 8001cfe:	e0b1      	b.n	8001e64 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e171      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	fffeffff 	.word	0xfffeffff
 8001d0c:	fffbffff 	.word	0xfffbffff
 8001d10:	ffff80ff 	.word	0xffff80ff
 8001d14:	ffffc7ff 	.word	0xffffc7ff
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	2000002c 	.word	0x2000002c
 8001d20:	20000030 	.word	0x20000030
 8001d24:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d28:	4bb1      	ldr	r3, [pc, #708]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	055b      	lsls	r3, r3, #21
 8001d30:	4013      	ands	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x360>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x362>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d011      	beq.n	8001d62 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4bac      	ldr	r3, [pc, #688]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001d40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d42:	4bab      	ldr	r3, [pc, #684]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	0549      	lsls	r1, r1, #21
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d4c:	4ba8      	ldr	r3, [pc, #672]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	055b      	lsls	r3, r3, #21
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d5a:	231f      	movs	r3, #31
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	4ba4      	ldr	r3, [pc, #656]	; (8001ff4 <HAL_RCC_OscConfig+0x61c>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d11a      	bne.n	8001da4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d6e:	4ba1      	ldr	r3, [pc, #644]	; (8001ff4 <HAL_RCC_OscConfig+0x61c>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4ba0      	ldr	r3, [pc, #640]	; (8001ff4 <HAL_RCC_OscConfig+0x61c>)
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	0049      	lsls	r1, r1, #1
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d7c:	f7fe ffd6 	bl	8000d2c <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d86:	f7fe ffd1 	bl	8000d2c <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e127      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d98:	4b96      	ldr	r3, [pc, #600]	; (8001ff4 <HAL_RCC_OscConfig+0x61c>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4013      	ands	r3, r2
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x3e2>
 8001dac:	4b90      	ldr	r3, [pc, #576]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001dae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001db0:	4b8f      	ldr	r3, [pc, #572]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	430a      	orrs	r2, r1
 8001db6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001db8:	e01c      	b.n	8001df4 <HAL_RCC_OscConfig+0x41c>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x404>
 8001dc2:	4b8b      	ldr	r3, [pc, #556]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001dc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc6:	4b8a      	ldr	r3, [pc, #552]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001dc8:	2104      	movs	r1, #4
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dce:	4b88      	ldr	r3, [pc, #544]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001dd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dd2:	4b87      	ldr	r3, [pc, #540]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0x41c>
 8001ddc:	4b84      	ldr	r3, [pc, #528]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001dde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001de0:	4b83      	ldr	r3, [pc, #524]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001de2:	2101      	movs	r1, #1
 8001de4:	438a      	bics	r2, r1
 8001de6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de8:	4b81      	ldr	r3, [pc, #516]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001dea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dec:	4b80      	ldr	r3, [pc, #512]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001dee:	2104      	movs	r1, #4
 8001df0:	438a      	bics	r2, r1
 8001df2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d014      	beq.n	8001e26 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7fe ff96 	bl	8000d2c <HAL_GetTick>
 8001e00:	0003      	movs	r3, r0
 8001e02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e04:	e009      	b.n	8001e1a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e06:	f7fe ff91 	bl	8000d2c <HAL_GetTick>
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	4a79      	ldr	r2, [pc, #484]	; (8001ff8 <HAL_RCC_OscConfig+0x620>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0e6      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1a:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x42e>
 8001e24:	e013      	b.n	8001e4e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7fe ff81 	bl	8000d2c <HAL_GetTick>
 8001e2a:	0003      	movs	r3, r0
 8001e2c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e2e:	e009      	b.n	8001e44 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7fe ff7c 	bl	8000d2c <HAL_GetTick>
 8001e34:	0002      	movs	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	4a6f      	ldr	r2, [pc, #444]	; (8001ff8 <HAL_RCC_OscConfig+0x620>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e0d1      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e4e:	231f      	movs	r3, #31
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4b65      	ldr	r3, [pc, #404]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e5c:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001e5e:	4967      	ldr	r1, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x624>)
 8001e60:	400a      	ands	r2, r1
 8001e62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d100      	bne.n	8001e6e <HAL_RCC_OscConfig+0x496>
 8001e6c:	e0bb      	b.n	8001fe6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e6e:	4b60      	ldr	r3, [pc, #384]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	2238      	movs	r2, #56	; 0x38
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d100      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4a4>
 8001e7a:	e07b      	b.n	8001f74 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d156      	bne.n	8001f32 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	4b5a      	ldr	r3, [pc, #360]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001e8a:	495d      	ldr	r1, [pc, #372]	; (8002000 <HAL_RCC_OscConfig+0x628>)
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7fe ff4c 	bl	8000d2c <HAL_GetTick>
 8001e94:	0003      	movs	r3, r0
 8001e96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9a:	f7fe ff47 	bl	8000d2c <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e09d      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eac:	4b50      	ldr	r3, [pc, #320]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	049b      	lsls	r3, r3, #18
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d1f0      	bne.n	8001e9a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	4a51      	ldr	r2, [pc, #324]	; (8002004 <HAL_RCC_OscConfig+0x62c>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	4b42      	ldr	r3, [pc, #264]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b3f      	ldr	r3, [pc, #252]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0449      	lsls	r1, r1, #17
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001efa:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b3c      	ldr	r3, [pc, #240]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0549      	lsls	r1, r1, #21
 8001f04:	430a      	orrs	r2, r1
 8001f06:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7fe ff10 	bl	8000d2c <HAL_GetTick>
 8001f0c:	0003      	movs	r3, r0
 8001f0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7fe ff0b 	bl	8000d2c <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e061      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f24:	4b32      	ldr	r3, [pc, #200]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	049b      	lsls	r3, r3, #18
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x53a>
 8001f30:	e059      	b.n	8001fe6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f32:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b2e      	ldr	r3, [pc, #184]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001f38:	4931      	ldr	r1, [pc, #196]	; (8002000 <HAL_RCC_OscConfig+0x628>)
 8001f3a:	400a      	ands	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7fe fef5 	bl	8000d2c <HAL_GetTick>
 8001f42:	0003      	movs	r3, r0
 8001f44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe fef0 	bl	8000d2c <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e046      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	049b      	lsls	r3, r3, #18
 8001f62:	4013      	ands	r3, r2
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001f6c:	4926      	ldr	r1, [pc, #152]	; (8002008 <HAL_RCC_OscConfig+0x630>)
 8001f6e:	400a      	ands	r2, r1
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	e038      	b.n	8001fe6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e033      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x618>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2203      	movs	r2, #3
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d126      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	2270      	movs	r2, #112	; 0x70
 8001f98:	401a      	ands	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d11f      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	23fe      	movs	r3, #254	; 0xfe
 8001fa6:	01db      	lsls	r3, r3, #7
 8001fa8:	401a      	ands	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d116      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb4:	697a      	ldr	r2, [r7, #20]
 8001fb6:	23f8      	movs	r3, #248	; 0xf8
 8001fb8:	039b      	lsls	r3, r3, #14
 8001fba:	401a      	ands	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d10e      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	23e0      	movs	r3, #224	; 0xe0
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	401a      	ands	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	0f5b      	lsrs	r3, r3, #29
 8001fd8:	075a      	lsls	r2, r3, #29
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b008      	add	sp, #32
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	00001388 	.word	0x00001388
 8001ffc:	efffffff 	.word	0xefffffff
 8002000:	feffffff 	.word	0xfeffffff
 8002004:	11c1808c 	.word	0x11c1808c
 8002008:	eefefffc 	.word	0xeefefffc

0800200c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0e9      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b76      	ldr	r3, [pc, #472]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2207      	movs	r2, #7
 8002026:	4013      	ands	r3, r2
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d91e      	bls.n	800206c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b73      	ldr	r3, [pc, #460]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2207      	movs	r2, #7
 8002034:	4393      	bics	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	4b70      	ldr	r3, [pc, #448]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002040:	f7fe fe74 	bl	8000d2c <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002048:	e009      	b.n	800205e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800204a:	f7fe fe6f 	bl	8000d2c <HAL_GetTick>
 800204e:	0002      	movs	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	4a6a      	ldr	r2, [pc, #424]	; (8002200 <HAL_RCC_ClockConfig+0x1f4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0ca      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2207      	movs	r2, #7
 8002064:	4013      	ands	r3, r2
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d1ee      	bne.n	800204a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2202      	movs	r2, #2
 8002072:	4013      	ands	r3, r2
 8002074:	d015      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2204      	movs	r2, #4
 800207c:	4013      	ands	r3, r2
 800207e:	d006      	beq.n	800208e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002080:	4b60      	ldr	r3, [pc, #384]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	21e0      	movs	r1, #224	; 0xe0
 8002088:	01c9      	lsls	r1, r1, #7
 800208a:	430a      	orrs	r2, r1
 800208c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800208e:	4b5d      	ldr	r3, [pc, #372]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4a5d      	ldr	r2, [pc, #372]	; (8002208 <HAL_RCC_ClockConfig+0x1fc>)
 8002094:	4013      	ands	r3, r2
 8002096:	0019      	movs	r1, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2201      	movs	r2, #1
 80020a8:	4013      	ands	r3, r2
 80020aa:	d057      	beq.n	800215c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	; 0x80
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	4013      	ands	r3, r2
 80020be:	d12b      	bne.n	8002118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e097      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020cc:	4b4d      	ldr	r3, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	049b      	lsls	r3, r3, #18
 80020d4:	4013      	ands	r3, r2
 80020d6:	d11f      	bne.n	8002118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e08b      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4013      	ands	r3, r2
 80020ee:	d113      	bne.n	8002118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e07f      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d106      	bne.n	800210a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 80020fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002100:	2202      	movs	r2, #2
 8002102:	4013      	ands	r3, r2
 8002104:	d108      	bne.n	8002118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e074      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800210a:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 800210c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210e:	2202      	movs	r2, #2
 8002110:	4013      	ands	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e06d      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002118:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2207      	movs	r2, #7
 800211e:	4393      	bics	r3, r2
 8002120:	0019      	movs	r1, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800212c:	f7fe fdfe 	bl	8000d2c <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002134:	e009      	b.n	800214a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002136:	f7fe fdf9 	bl	8000d2c <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <HAL_RCC_ClockConfig+0x1f4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e054      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2238      	movs	r2, #56	; 0x38
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	429a      	cmp	r2, r3
 800215a:	d1ec      	bne.n	8002136 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2207      	movs	r2, #7
 8002162:	4013      	ands	r3, r2
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d21e      	bcs.n	80021a8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2207      	movs	r2, #7
 8002170:	4393      	bics	r3, r2
 8002172:	0019      	movs	r1, r3
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800217c:	f7fe fdd6 	bl	8000d2c <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002184:	e009      	b.n	800219a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002186:	f7fe fdd1 	bl	8000d2c <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_RCC_ClockConfig+0x1f4>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d901      	bls.n	800219a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e02c      	b.n	80021f4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800219a:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HAL_RCC_ClockConfig+0x1f0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2207      	movs	r2, #7
 80021a0:	4013      	ands	r3, r2
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d1ee      	bne.n	8002186 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2204      	movs	r2, #4
 80021ae:	4013      	ands	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	4a15      	ldr	r2, [pc, #84]	; (800220c <HAL_RCC_ClockConfig+0x200>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	0019      	movs	r1, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 80021c2:	430a      	orrs	r2, r1
 80021c4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021c6:	f000 f829 	bl	800221c <HAL_RCC_GetSysClockFreq>
 80021ca:	0001      	movs	r1, r0
 80021cc:	4b0d      	ldr	r3, [pc, #52]	; (8002204 <HAL_RCC_ClockConfig+0x1f8>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	220f      	movs	r2, #15
 80021d4:	401a      	ands	r2, r3
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_RCC_ClockConfig+0x204>)
 80021d8:	0092      	lsls	r2, r2, #2
 80021da:	58d3      	ldr	r3, [r2, r3]
 80021dc:	221f      	movs	r2, #31
 80021de:	4013      	ands	r3, r2
 80021e0:	000a      	movs	r2, r1
 80021e2:	40da      	lsrs	r2, r3
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_ClockConfig+0x208>)
 80021e6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x20c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0018      	movs	r0, r3
 80021ee:	f7fe fd41 	bl	8000c74 <HAL_InitTick>
 80021f2:	0003      	movs	r3, r0
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b004      	add	sp, #16
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40022000 	.word	0x40022000
 8002200:	00001388 	.word	0x00001388
 8002204:	40021000 	.word	0x40021000
 8002208:	fffff0ff 	.word	0xfffff0ff
 800220c:	ffff8fff 	.word	0xffff8fff
 8002210:	08003e48 	.word	0x08003e48
 8002214:	2000002c 	.word	0x2000002c
 8002218:	20000030 	.word	0x20000030

0800221c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2238      	movs	r2, #56	; 0x38
 8002228:	4013      	ands	r3, r2
 800222a:	d10f      	bne.n	800224c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800222c:	4b39      	ldr	r3, [pc, #228]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0adb      	lsrs	r3, r3, #11
 8002232:	2207      	movs	r2, #7
 8002234:	4013      	ands	r3, r2
 8002236:	2201      	movs	r2, #1
 8002238:	409a      	lsls	r2, r3
 800223a:	0013      	movs	r3, r2
 800223c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	4835      	ldr	r0, [pc, #212]	; (8002318 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002242:	f7fd ff69 	bl	8000118 <__udivsi3>
 8002246:	0003      	movs	r3, r0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	e05d      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2238      	movs	r2, #56	; 0x38
 8002252:	4013      	ands	r3, r2
 8002254:	2b08      	cmp	r3, #8
 8002256:	d102      	bne.n	800225e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_RCC_GetSysClockFreq+0x100>)
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e054      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800225e:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2238      	movs	r2, #56	; 0x38
 8002264:	4013      	ands	r3, r2
 8002266:	2b10      	cmp	r3, #16
 8002268:	d138      	bne.n	80022dc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2203      	movs	r2, #3
 8002270:	4013      	ands	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	2207      	movs	r2, #7
 800227c:	4013      	ands	r3, r2
 800227e:	3301      	adds	r3, #1
 8002280:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b03      	cmp	r3, #3
 8002286:	d10d      	bne.n	80022a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	4824      	ldr	r0, [pc, #144]	; (800231c <HAL_RCC_GetSysClockFreq+0x100>)
 800228c:	f7fd ff44 	bl	8000118 <__udivsi3>
 8002290:	0003      	movs	r3, r0
 8002292:	0019      	movs	r1, r3
 8002294:	4b1f      	ldr	r3, [pc, #124]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	0a1b      	lsrs	r3, r3, #8
 800229a:	227f      	movs	r2, #127	; 0x7f
 800229c:	4013      	ands	r3, r2
 800229e:	434b      	muls	r3, r1
 80022a0:	617b      	str	r3, [r7, #20]
        break;
 80022a2:	e00d      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	481c      	ldr	r0, [pc, #112]	; (8002318 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022a8:	f7fd ff36 	bl	8000118 <__udivsi3>
 80022ac:	0003      	movs	r3, r0
 80022ae:	0019      	movs	r1, r3
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	227f      	movs	r2, #127	; 0x7f
 80022b8:	4013      	ands	r3, r2
 80022ba:	434b      	muls	r3, r1
 80022bc:	617b      	str	r3, [r7, #20]
        break;
 80022be:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0f5b      	lsrs	r3, r3, #29
 80022c6:	2207      	movs	r2, #7
 80022c8:	4013      	ands	r3, r2
 80022ca:	3301      	adds	r3, #1
 80022cc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	6978      	ldr	r0, [r7, #20]
 80022d2:	f7fd ff21 	bl	8000118 <__udivsi3>
 80022d6:	0003      	movs	r3, r0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	e015      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022dc:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2238      	movs	r2, #56	; 0x38
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d103      	bne.n	80022f0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2238      	movs	r2, #56	; 0x38
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b18      	cmp	r3, #24
 80022fa:	d103      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80022fc:	23fa      	movs	r3, #250	; 0xfa
 80022fe:	01db      	lsls	r3, r3, #7
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	e001      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002308:	693b      	ldr	r3, [r7, #16]
}
 800230a:	0018      	movs	r0, r3
 800230c:	46bd      	mov	sp, r7
 800230e:	b006      	add	sp, #24
 8002310:	bd80      	pop	{r7, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	40021000 	.word	0x40021000
 8002318:	00f42400 	.word	0x00f42400
 800231c:	007a1200 	.word	0x007a1200

08002320 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002324:	4b02      	ldr	r3, [pc, #8]	; (8002330 <HAL_RCC_GetHCLKFreq+0x10>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	0018      	movs	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	2000002c 	.word	0x2000002c

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b5b0      	push	{r4, r5, r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002338:	f7ff fff2 	bl	8002320 <HAL_RCC_GetHCLKFreq>
 800233c:	0004      	movs	r4, r0
 800233e:	f7ff fb3f 	bl	80019c0 <LL_RCC_GetAPB1Prescaler>
 8002342:	0003      	movs	r3, r0
 8002344:	0b1a      	lsrs	r2, r3, #12
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002348:	0092      	lsls	r2, r2, #2
 800234a:	58d3      	ldr	r3, [r2, r3]
 800234c:	221f      	movs	r2, #31
 800234e:	4013      	ands	r3, r2
 8002350:	40dc      	lsrs	r4, r3
 8002352:	0023      	movs	r3, r4
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bdb0      	pop	{r4, r5, r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	08003e88 	.word	0x08003e88

08002360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002368:	2313      	movs	r3, #19
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002370:	2312      	movs	r3, #18
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	029b      	lsls	r3, r3, #10
 8002380:	4013      	ands	r3, r2
 8002382:	d100      	bne.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002384:	e0a3      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002386:	2011      	movs	r0, #17
 8002388:	183b      	adds	r3, r7, r0
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800238e:	4bc3      	ldr	r3, [pc, #780]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	055b      	lsls	r3, r3, #21
 8002396:	4013      	ands	r3, r2
 8002398:	d110      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4bc0      	ldr	r3, [pc, #768]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800239c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800239e:	4bbf      	ldr	r3, [pc, #764]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a0:	2180      	movs	r1, #128	; 0x80
 80023a2:	0549      	lsls	r1, r1, #21
 80023a4:	430a      	orrs	r2, r1
 80023a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023a8:	4bbc      	ldr	r3, [pc, #752]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	055b      	lsls	r3, r3, #21
 80023b0:	4013      	ands	r3, r2
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b6:	183b      	adds	r3, r7, r0
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023bc:	4bb8      	ldr	r3, [pc, #736]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4bb7      	ldr	r3, [pc, #732]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	0049      	lsls	r1, r1, #1
 80023c6:	430a      	orrs	r2, r1
 80023c8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023ca:	f7fe fcaf 	bl	8000d2c <HAL_GetTick>
 80023ce:	0003      	movs	r3, r0
 80023d0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023d2:	e00b      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d4:	f7fe fcaa 	bl	8000d2c <HAL_GetTick>
 80023d8:	0002      	movs	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d904      	bls.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80023e2:	2313      	movs	r3, #19
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2203      	movs	r2, #3
 80023e8:	701a      	strb	r2, [r3, #0]
        break;
 80023ea:	e005      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ec:	4bac      	ldr	r3, [pc, #688]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4013      	ands	r3, r2
 80023f6:	d0ed      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80023f8:	2313      	movs	r3, #19
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d154      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002402:	4ba6      	ldr	r3, [pc, #664]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002406:	23c0      	movs	r3, #192	; 0xc0
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4013      	ands	r3, r2
 800240c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d019      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	429a      	cmp	r2, r3
 800241c:	d014      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800241e:	4b9f      	ldr	r3, [pc, #636]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002422:	4aa0      	ldr	r2, [pc, #640]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002424:	4013      	ands	r3, r2
 8002426:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002428:	4b9c      	ldr	r3, [pc, #624]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800242c:	4b9b      	ldr	r3, [pc, #620]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	0249      	lsls	r1, r1, #9
 8002432:	430a      	orrs	r2, r1
 8002434:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002436:	4b99      	ldr	r3, [pc, #612]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800243a:	4b98      	ldr	r3, [pc, #608]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800243c:	499a      	ldr	r1, [pc, #616]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800243e:	400a      	ands	r2, r1
 8002440:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002442:	4b96      	ldr	r3, [pc, #600]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2201      	movs	r2, #1
 800244c:	4013      	ands	r3, r2
 800244e:	d016      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fe fc6c 	bl	8000d2c <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002458:	e00c      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7fe fc67 	bl	8000d2c <HAL_GetTick>
 800245e:	0002      	movs	r2, r0
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	4a91      	ldr	r2, [pc, #580]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d904      	bls.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800246a:	2313      	movs	r3, #19
 800246c:	18fb      	adds	r3, r7, r3
 800246e:	2203      	movs	r2, #3
 8002470:	701a      	strb	r2, [r3, #0]
            break;
 8002472:	e004      	b.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002474:	4b89      	ldr	r3, [pc, #548]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	2202      	movs	r2, #2
 800247a:	4013      	ands	r3, r2
 800247c:	d0ed      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800247e:	2313      	movs	r3, #19
 8002480:	18fb      	adds	r3, r7, r3
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002488:	4b84      	ldr	r3, [pc, #528]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	4a85      	ldr	r2, [pc, #532]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800248e:	4013      	ands	r3, r2
 8002490:	0019      	movs	r1, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002496:	4b81      	ldr	r3, [pc, #516]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002498:	430a      	orrs	r2, r1
 800249a:	65da      	str	r2, [r3, #92]	; 0x5c
 800249c:	e00c      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800249e:	2312      	movs	r3, #18
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2213      	movs	r2, #19
 80024a4:	18ba      	adds	r2, r7, r2
 80024a6:	7812      	ldrb	r2, [r2, #0]
 80024a8:	701a      	strb	r2, [r3, #0]
 80024aa:	e005      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024ac:	2312      	movs	r3, #18
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2213      	movs	r2, #19
 80024b2:	18ba      	adds	r2, r7, r2
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024b8:	2311      	movs	r3, #17
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d105      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024c2:	4b76      	ldr	r3, [pc, #472]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024c6:	4b75      	ldr	r3, [pc, #468]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024c8:	4979      	ldr	r1, [pc, #484]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80024ca:	400a      	ands	r2, r1
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2201      	movs	r2, #1
 80024d4:	4013      	ands	r3, r2
 80024d6:	d009      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024d8:	4b70      	ldr	r3, [pc, #448]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024dc:	2203      	movs	r2, #3
 80024de:	4393      	bics	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4b6d      	ldr	r3, [pc, #436]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2202      	movs	r2, #2
 80024f2:	4013      	ands	r3, r2
 80024f4:	d009      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024f6:	4b69      	ldr	r3, [pc, #420]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024fa:	220c      	movs	r2, #12
 80024fc:	4393      	bics	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	4b65      	ldr	r3, [pc, #404]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002506:	430a      	orrs	r2, r1
 8002508:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2210      	movs	r2, #16
 8002510:	4013      	ands	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002514:	4b61      	ldr	r3, [pc, #388]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002518:	4a66      	ldr	r2, [pc, #408]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800251a:	4013      	ands	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	4b5e      	ldr	r3, [pc, #376]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002524:	430a      	orrs	r2, r1
 8002526:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4013      	ands	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002534:	4b59      	ldr	r3, [pc, #356]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	4a5f      	ldr	r2, [pc, #380]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800253a:	4013      	ands	r3, r2
 800253c:	0019      	movs	r1, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002544:	430a      	orrs	r2, r1
 8002546:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	4013      	ands	r3, r2
 8002552:	d009      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002554:	4b51      	ldr	r3, [pc, #324]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	4a58      	ldr	r2, [pc, #352]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69da      	ldr	r2, [r3, #28]
 8002562:	4b4e      	ldr	r3, [pc, #312]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002564:	430a      	orrs	r2, r1
 8002566:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2220      	movs	r2, #32
 800256e:	4013      	ands	r3, r2
 8002570:	d009      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	4a52      	ldr	r2, [pc, #328]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002582:	430a      	orrs	r2, r1
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	; 0x80
 800258c:	01db      	lsls	r3, r3, #7
 800258e:	4013      	ands	r3, r2
 8002590:	d015      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002592:	4b42      	ldr	r3, [pc, #264]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	0899      	lsrs	r1, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	4b3f      	ldr	r3, [pc, #252]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025a0:	430a      	orrs	r2, r1
 80025a2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a1a      	ldr	r2, [r3, #32]
 80025a8:	2380      	movs	r3, #128	; 0x80
 80025aa:	05db      	lsls	r3, r3, #23
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d106      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025b0:	4b3a      	ldr	r3, [pc, #232]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	0249      	lsls	r1, r1, #9
 80025ba:	430a      	orrs	r2, r1
 80025bc:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	031b      	lsls	r3, r3, #12
 80025c6:	4013      	ands	r3, r2
 80025c8:	d009      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025ca:	4b34      	ldr	r3, [pc, #208]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	4393      	bics	r3, r2
 80025d2:	0019      	movs	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025d8:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025da:	430a      	orrs	r2, r1
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	039b      	lsls	r3, r3, #14
 80025e6:	4013      	ands	r3, r2
 80025e8:	d016      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025ea:	4b2c      	ldr	r3, [pc, #176]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	4a35      	ldr	r2, [pc, #212]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	0019      	movs	r1, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f8:	4b28      	ldr	r3, [pc, #160]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025fa:	430a      	orrs	r2, r1
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	03db      	lsls	r3, r3, #15
 8002606:	429a      	cmp	r2, r3
 8002608:	d106      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	4b23      	ldr	r3, [pc, #140]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	0449      	lsls	r1, r1, #17
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	03db      	lsls	r3, r3, #15
 8002620:	4013      	ands	r3, r2
 8002622:	d016      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002624:	4b1d      	ldr	r3, [pc, #116]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002628:	4a27      	ldr	r2, [pc, #156]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800262a:	4013      	ands	r3, r2
 800262c:	0019      	movs	r1, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002634:	430a      	orrs	r2, r1
 8002636:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	045b      	lsls	r3, r3, #17
 8002640:	429a      	cmp	r2, r3
 8002642:	d106      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002644:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	0449      	lsls	r1, r1, #17
 800264e:	430a      	orrs	r2, r1
 8002650:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	4013      	ands	r3, r2
 800265c:	d016      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002664:	4013      	ands	r3, r2
 8002666:	0019      	movs	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800266e:	430a      	orrs	r2, r1
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695a      	ldr	r2, [r3, #20]
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	01db      	lsls	r3, r3, #7
 800267a:	429a      	cmp	r2, r3
 800267c:	d106      	bne.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	0249      	lsls	r1, r1, #9
 8002688:	430a      	orrs	r2, r1
 800268a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800268c:	2312      	movs	r3, #18
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b006      	add	sp, #24
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	40007000 	.word	0x40007000
 80026a4:	fffffcff 	.word	0xfffffcff
 80026a8:	fffeffff 	.word	0xfffeffff
 80026ac:	00001388 	.word	0x00001388
 80026b0:	efffffff 	.word	0xefffffff
 80026b4:	fffff3ff 	.word	0xfffff3ff
 80026b8:	fff3ffff 	.word	0xfff3ffff
 80026bc:	ffcfffff 	.word	0xffcfffff
 80026c0:	ffffcfff 	.word	0xffffcfff
 80026c4:	ffbfffff 	.word	0xffbfffff
 80026c8:	feffffff 	.word	0xfeffffff
 80026cc:	ffff3fff 	.word	0xffff3fff

080026d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e046      	b.n	8002770 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2288      	movs	r2, #136	; 0x88
 80026e6:	589b      	ldr	r3, [r3, r2]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2284      	movs	r2, #132	; 0x84
 80026f0:	2100      	movs	r1, #0
 80026f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	0018      	movs	r0, r3
 80026f8:	f7fe f9be 	bl	8000a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2288      	movs	r2, #136	; 0x88
 8002700:	2124      	movs	r1, #36	; 0x24
 8002702:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2101      	movs	r1, #1
 8002710:	438a      	bics	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	0018      	movs	r0, r3
 8002720:	f000 fb8e 	bl	8002e40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0018      	movs	r0, r3
 8002728:	f000 f8cc 	bl	80028c4 <UART_SetConfig>
 800272c:	0003      	movs	r3, r0
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e01c      	b.n	8002770 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	490d      	ldr	r1, [pc, #52]	; (8002778 <HAL_UART_Init+0xa8>)
 8002742:	400a      	ands	r2, r1
 8002744:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	212a      	movs	r1, #42	; 0x2a
 8002752:	438a      	bics	r2, r1
 8002754:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f000 fc1d 	bl	8002fa8 <UART_CheckIdleState>
 800276e:	0003      	movs	r3, r0
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}
 8002778:	ffffb7ff 	.word	0xffffb7ff

0800277c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	; 0x28
 8002780:	af02      	add	r7, sp, #8
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	1dbb      	adds	r3, r7, #6
 800278a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2288      	movs	r2, #136	; 0x88
 8002790:	589b      	ldr	r3, [r3, r2]
 8002792:	2b20      	cmp	r3, #32
 8002794:	d000      	beq.n	8002798 <HAL_UART_Transmit+0x1c>
 8002796:	e090      	b.n	80028ba <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_UART_Transmit+0x2a>
 800279e:	1dbb      	adds	r3, r7, #6
 80027a0:	881b      	ldrh	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e088      	b.n	80028bc <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	015b      	lsls	r3, r3, #5
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d109      	bne.n	80027ca <HAL_UART_Transmit+0x4e>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d105      	bne.n	80027ca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	2201      	movs	r2, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	d001      	beq.n	80027ca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e078      	b.n	80028bc <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2290      	movs	r2, #144	; 0x90
 80027ce:	2100      	movs	r1, #0
 80027d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2288      	movs	r2, #136	; 0x88
 80027d6:	2121      	movs	r1, #33	; 0x21
 80027d8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027da:	f7fe faa7 	bl	8000d2c <HAL_GetTick>
 80027de:	0003      	movs	r3, r0
 80027e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1dba      	adds	r2, r7, #6
 80027e6:	2154      	movs	r1, #84	; 0x54
 80027e8:	8812      	ldrh	r2, [r2, #0]
 80027ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1dba      	adds	r2, r7, #6
 80027f0:	2156      	movs	r1, #86	; 0x56
 80027f2:	8812      	ldrh	r2, [r2, #0]
 80027f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	015b      	lsls	r3, r3, #5
 80027fe:	429a      	cmp	r2, r3
 8002800:	d108      	bne.n	8002814 <HAL_UART_Transmit+0x98>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	e003      	b.n	800281c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800281c:	e030      	b.n	8002880 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	0013      	movs	r3, r2
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	f000 fc66 	bl	80030fc <UART_WaitOnFlagUntilTimeout>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d005      	beq.n	8002840 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2288      	movs	r2, #136	; 0x88
 8002838:	2120      	movs	r1, #32
 800283a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e03d      	b.n	80028bc <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10b      	bne.n	800285e <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	001a      	movs	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	05d2      	lsls	r2, r2, #23
 8002852:	0dd2      	lsrs	r2, r2, #23
 8002854:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	3302      	adds	r3, #2
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	e007      	b.n	800286e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	781a      	ldrb	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	3301      	adds	r3, #1
 800286c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2256      	movs	r2, #86	; 0x56
 8002872:	5a9b      	ldrh	r3, [r3, r2]
 8002874:	b29b      	uxth	r3, r3
 8002876:	3b01      	subs	r3, #1
 8002878:	b299      	uxth	r1, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2256      	movs	r2, #86	; 0x56
 800287e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2256      	movs	r2, #86	; 0x56
 8002884:	5a9b      	ldrh	r3, [r3, r2]
 8002886:	b29b      	uxth	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1c8      	bne.n	800281e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	0013      	movs	r3, r2
 8002896:	2200      	movs	r2, #0
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	f000 fc2f 	bl	80030fc <UART_WaitOnFlagUntilTimeout>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d005      	beq.n	80028ae <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2288      	movs	r2, #136	; 0x88
 80028a6:	2120      	movs	r1, #32
 80028a8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e006      	b.n	80028bc <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2288      	movs	r2, #136	; 0x88
 80028b2:	2120      	movs	r1, #32
 80028b4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
  }
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b008      	add	sp, #32
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028c4:	b5b0      	push	{r4, r5, r7, lr}
 80028c6:	b090      	sub	sp, #64	; 0x40
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028cc:	231a      	movs	r3, #26
 80028ce:	2220      	movs	r2, #32
 80028d0:	189b      	adds	r3, r3, r2
 80028d2:	19db      	adds	r3, r3, r7
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	431a      	orrs	r2, r3
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4aaf      	ldr	r2, [pc, #700]	; (8002bb4 <UART_SetConfig+0x2f0>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002902:	430b      	orrs	r3, r1
 8002904:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	4aaa      	ldr	r2, [pc, #680]	; (8002bb8 <UART_SetConfig+0x2f4>)
 800290e:	4013      	ands	r3, r2
 8002910:	0018      	movs	r0, r3
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	68d9      	ldr	r1, [r3, #12]
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	0003      	movs	r3, r0
 800291c:	430b      	orrs	r3, r1
 800291e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4aa4      	ldr	r2, [pc, #656]	; (8002bbc <UART_SetConfig+0x2f8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d004      	beq.n	800293a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002936:	4313      	orrs	r3, r2
 8002938:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a9f      	ldr	r2, [pc, #636]	; (8002bc0 <UART_SetConfig+0x2fc>)
 8002942:	4013      	ands	r3, r2
 8002944:	0019      	movs	r1, r3
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294c:	430b      	orrs	r3, r1
 800294e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	220f      	movs	r2, #15
 8002958:	4393      	bics	r3, r2
 800295a:	0018      	movs	r0, r3
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	0003      	movs	r3, r0
 8002966:	430b      	orrs	r3, r1
 8002968:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a95      	ldr	r2, [pc, #596]	; (8002bc4 <UART_SetConfig+0x300>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d131      	bne.n	80029d8 <UART_SetConfig+0x114>
 8002974:	4b94      	ldr	r3, [pc, #592]	; (8002bc8 <UART_SetConfig+0x304>)
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	2203      	movs	r2, #3
 800297a:	4013      	ands	r3, r2
 800297c:	2b03      	cmp	r3, #3
 800297e:	d01d      	beq.n	80029bc <UART_SetConfig+0xf8>
 8002980:	d823      	bhi.n	80029ca <UART_SetConfig+0x106>
 8002982:	2b02      	cmp	r3, #2
 8002984:	d00c      	beq.n	80029a0 <UART_SetConfig+0xdc>
 8002986:	d820      	bhi.n	80029ca <UART_SetConfig+0x106>
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <UART_SetConfig+0xce>
 800298c:	2b01      	cmp	r3, #1
 800298e:	d00e      	beq.n	80029ae <UART_SetConfig+0xea>
 8002990:	e01b      	b.n	80029ca <UART_SetConfig+0x106>
 8002992:	231b      	movs	r3, #27
 8002994:	2220      	movs	r2, #32
 8002996:	189b      	adds	r3, r3, r2
 8002998:	19db      	adds	r3, r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	701a      	strb	r2, [r3, #0]
 800299e:	e0b4      	b.n	8002b0a <UART_SetConfig+0x246>
 80029a0:	231b      	movs	r3, #27
 80029a2:	2220      	movs	r2, #32
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	19db      	adds	r3, r3, r7
 80029a8:	2202      	movs	r2, #2
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e0ad      	b.n	8002b0a <UART_SetConfig+0x246>
 80029ae:	231b      	movs	r3, #27
 80029b0:	2220      	movs	r2, #32
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	19db      	adds	r3, r3, r7
 80029b6:	2204      	movs	r2, #4
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e0a6      	b.n	8002b0a <UART_SetConfig+0x246>
 80029bc:	231b      	movs	r3, #27
 80029be:	2220      	movs	r2, #32
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	19db      	adds	r3, r3, r7
 80029c4:	2208      	movs	r2, #8
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	e09f      	b.n	8002b0a <UART_SetConfig+0x246>
 80029ca:	231b      	movs	r3, #27
 80029cc:	2220      	movs	r2, #32
 80029ce:	189b      	adds	r3, r3, r2
 80029d0:	19db      	adds	r3, r3, r7
 80029d2:	2210      	movs	r2, #16
 80029d4:	701a      	strb	r2, [r3, #0]
 80029d6:	e098      	b.n	8002b0a <UART_SetConfig+0x246>
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a7b      	ldr	r2, [pc, #492]	; (8002bcc <UART_SetConfig+0x308>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d131      	bne.n	8002a46 <UART_SetConfig+0x182>
 80029e2:	4b79      	ldr	r3, [pc, #484]	; (8002bc8 <UART_SetConfig+0x304>)
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	220c      	movs	r2, #12
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d01d      	beq.n	8002a2a <UART_SetConfig+0x166>
 80029ee:	d823      	bhi.n	8002a38 <UART_SetConfig+0x174>
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d00c      	beq.n	8002a0e <UART_SetConfig+0x14a>
 80029f4:	d820      	bhi.n	8002a38 <UART_SetConfig+0x174>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <UART_SetConfig+0x13c>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d00e      	beq.n	8002a1c <UART_SetConfig+0x158>
 80029fe:	e01b      	b.n	8002a38 <UART_SetConfig+0x174>
 8002a00:	231b      	movs	r3, #27
 8002a02:	2220      	movs	r2, #32
 8002a04:	189b      	adds	r3, r3, r2
 8002a06:	19db      	adds	r3, r3, r7
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e07d      	b.n	8002b0a <UART_SetConfig+0x246>
 8002a0e:	231b      	movs	r3, #27
 8002a10:	2220      	movs	r2, #32
 8002a12:	189b      	adds	r3, r3, r2
 8002a14:	19db      	adds	r3, r3, r7
 8002a16:	2202      	movs	r2, #2
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e076      	b.n	8002b0a <UART_SetConfig+0x246>
 8002a1c:	231b      	movs	r3, #27
 8002a1e:	2220      	movs	r2, #32
 8002a20:	189b      	adds	r3, r3, r2
 8002a22:	19db      	adds	r3, r3, r7
 8002a24:	2204      	movs	r2, #4
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e06f      	b.n	8002b0a <UART_SetConfig+0x246>
 8002a2a:	231b      	movs	r3, #27
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	19db      	adds	r3, r3, r7
 8002a32:	2208      	movs	r2, #8
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e068      	b.n	8002b0a <UART_SetConfig+0x246>
 8002a38:	231b      	movs	r3, #27
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	19db      	adds	r3, r3, r7
 8002a40:	2210      	movs	r2, #16
 8002a42:	701a      	strb	r2, [r3, #0]
 8002a44:	e061      	b.n	8002b0a <UART_SetConfig+0x246>
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a61      	ldr	r2, [pc, #388]	; (8002bd0 <UART_SetConfig+0x30c>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d106      	bne.n	8002a5e <UART_SetConfig+0x19a>
 8002a50:	231b      	movs	r3, #27
 8002a52:	2220      	movs	r2, #32
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	19db      	adds	r3, r3, r7
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e055      	b.n	8002b0a <UART_SetConfig+0x246>
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5c      	ldr	r2, [pc, #368]	; (8002bd4 <UART_SetConfig+0x310>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d106      	bne.n	8002a76 <UART_SetConfig+0x1b2>
 8002a68:	231b      	movs	r3, #27
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	19db      	adds	r3, r3, r7
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e049      	b.n	8002b0a <UART_SetConfig+0x246>
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a50      	ldr	r2, [pc, #320]	; (8002bbc <UART_SetConfig+0x2f8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d13e      	bne.n	8002afe <UART_SetConfig+0x23a>
 8002a80:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <UART_SetConfig+0x304>)
 8002a82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a84:	23c0      	movs	r3, #192	; 0xc0
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	4013      	ands	r3, r2
 8002a8a:	22c0      	movs	r2, #192	; 0xc0
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d027      	beq.n	8002ae2 <UART_SetConfig+0x21e>
 8002a92:	22c0      	movs	r2, #192	; 0xc0
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d82a      	bhi.n	8002af0 <UART_SetConfig+0x22c>
 8002a9a:	2280      	movs	r2, #128	; 0x80
 8002a9c:	0112      	lsls	r2, r2, #4
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d011      	beq.n	8002ac6 <UART_SetConfig+0x202>
 8002aa2:	2280      	movs	r2, #128	; 0x80
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d822      	bhi.n	8002af0 <UART_SetConfig+0x22c>
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <UART_SetConfig+0x1f4>
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	00d2      	lsls	r2, r2, #3
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <UART_SetConfig+0x210>
 8002ab6:	e01b      	b.n	8002af0 <UART_SetConfig+0x22c>
 8002ab8:	231b      	movs	r3, #27
 8002aba:	2220      	movs	r2, #32
 8002abc:	189b      	adds	r3, r3, r2
 8002abe:	19db      	adds	r3, r3, r7
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	e021      	b.n	8002b0a <UART_SetConfig+0x246>
 8002ac6:	231b      	movs	r3, #27
 8002ac8:	2220      	movs	r2, #32
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	19db      	adds	r3, r3, r7
 8002ace:	2202      	movs	r2, #2
 8002ad0:	701a      	strb	r2, [r3, #0]
 8002ad2:	e01a      	b.n	8002b0a <UART_SetConfig+0x246>
 8002ad4:	231b      	movs	r3, #27
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	189b      	adds	r3, r3, r2
 8002ada:	19db      	adds	r3, r3, r7
 8002adc:	2204      	movs	r2, #4
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e013      	b.n	8002b0a <UART_SetConfig+0x246>
 8002ae2:	231b      	movs	r3, #27
 8002ae4:	2220      	movs	r2, #32
 8002ae6:	189b      	adds	r3, r3, r2
 8002ae8:	19db      	adds	r3, r3, r7
 8002aea:	2208      	movs	r2, #8
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e00c      	b.n	8002b0a <UART_SetConfig+0x246>
 8002af0:	231b      	movs	r3, #27
 8002af2:	2220      	movs	r2, #32
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	19db      	adds	r3, r3, r7
 8002af8:	2210      	movs	r2, #16
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e005      	b.n	8002b0a <UART_SetConfig+0x246>
 8002afe:	231b      	movs	r3, #27
 8002b00:	2220      	movs	r2, #32
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	19db      	adds	r3, r3, r7
 8002b06:	2210      	movs	r2, #16
 8002b08:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <UART_SetConfig+0x2f8>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d000      	beq.n	8002b16 <UART_SetConfig+0x252>
 8002b14:	e0a9      	b.n	8002c6a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b16:	231b      	movs	r3, #27
 8002b18:	2220      	movs	r2, #32
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	19db      	adds	r3, r3, r7
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d015      	beq.n	8002b50 <UART_SetConfig+0x28c>
 8002b24:	dc18      	bgt.n	8002b58 <UART_SetConfig+0x294>
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d00d      	beq.n	8002b46 <UART_SetConfig+0x282>
 8002b2a:	dc15      	bgt.n	8002b58 <UART_SetConfig+0x294>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <UART_SetConfig+0x272>
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d005      	beq.n	8002b40 <UART_SetConfig+0x27c>
 8002b34:	e010      	b.n	8002b58 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b36:	f7ff fbfd 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b3e:	e014      	b.n	8002b6a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b40:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <UART_SetConfig+0x314>)
 8002b42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b44:	e011      	b.n	8002b6a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b46:	f7ff fb69 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b4e:	e00c      	b.n	8002b6a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b56:	e008      	b.n	8002b6a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002b5c:	231a      	movs	r3, #26
 8002b5e:	2220      	movs	r2, #32
 8002b60:	189b      	adds	r3, r3, r2
 8002b62:	19db      	adds	r3, r3, r7
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]
        break;
 8002b68:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d100      	bne.n	8002b72 <UART_SetConfig+0x2ae>
 8002b70:	e14b      	b.n	8002e0a <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <UART_SetConfig+0x318>)
 8002b78:	0052      	lsls	r2, r2, #1
 8002b7a:	5ad3      	ldrh	r3, [r2, r3]
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b80:	f7fd faca 	bl	8000118 <__udivsi3>
 8002b84:	0003      	movs	r3, r0
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	0013      	movs	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	189b      	adds	r3, r3, r2
 8002b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d305      	bcc.n	8002ba4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002b9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d91d      	bls.n	8002be0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002ba4:	231a      	movs	r3, #26
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	189b      	adds	r3, r3, r2
 8002baa:	19db      	adds	r3, r3, r7
 8002bac:	2201      	movs	r2, #1
 8002bae:	701a      	strb	r2, [r3, #0]
 8002bb0:	e12b      	b.n	8002e0a <UART_SetConfig+0x546>
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	cfff69f3 	.word	0xcfff69f3
 8002bb8:	ffffcfff 	.word	0xffffcfff
 8002bbc:	40008000 	.word	0x40008000
 8002bc0:	11fff4ff 	.word	0x11fff4ff
 8002bc4:	40013800 	.word	0x40013800
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	40004400 	.word	0x40004400
 8002bd0:	40004800 	.word	0x40004800
 8002bd4:	40004c00 	.word	0x40004c00
 8002bd8:	00f42400 	.word	0x00f42400
 8002bdc:	08003ea8 	.word	0x08003ea8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bec:	4b92      	ldr	r3, [pc, #584]	; (8002e38 <UART_SetConfig+0x574>)
 8002bee:	0052      	lsls	r2, r2, #1
 8002bf0:	5ad3      	ldrh	r3, [r2, r3]
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	69b8      	ldr	r0, [r7, #24]
 8002bfe:	69f9      	ldr	r1, [r7, #28]
 8002c00:	f7fd fc00 	bl	8000404 <__aeabi_uldivmod>
 8002c04:	0002      	movs	r2, r0
 8002c06:	000b      	movs	r3, r1
 8002c08:	0e11      	lsrs	r1, r2, #24
 8002c0a:	021d      	lsls	r5, r3, #8
 8002c0c:	430d      	orrs	r5, r1
 8002c0e:	0214      	lsls	r4, r2, #8
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68b8      	ldr	r0, [r7, #8]
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	1900      	adds	r0, r0, r4
 8002c22:	4169      	adcs	r1, r5
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	603b      	str	r3, [r7, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f7fd fbe7 	bl	8000404 <__aeabi_uldivmod>
 8002c36:	0002      	movs	r2, r0
 8002c38:	000b      	movs	r3, r1
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c40:	23c0      	movs	r3, #192	; 0xc0
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d309      	bcc.n	8002c5c <UART_SetConfig+0x398>
 8002c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c4a:	2380      	movs	r3, #128	; 0x80
 8002c4c:	035b      	lsls	r3, r3, #13
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d204      	bcs.n	8002c5c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e0d6      	b.n	8002e0a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002c5c:	231a      	movs	r3, #26
 8002c5e:	2220      	movs	r2, #32
 8002c60:	189b      	adds	r3, r3, r2
 8002c62:	19db      	adds	r3, r3, r7
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	e0cf      	b.n	8002e0a <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	021b      	lsls	r3, r3, #8
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d000      	beq.n	8002c78 <UART_SetConfig+0x3b4>
 8002c76:	e070      	b.n	8002d5a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002c78:	231b      	movs	r3, #27
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	189b      	adds	r3, r3, r2
 8002c7e:	19db      	adds	r3, r3, r7
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d015      	beq.n	8002cb2 <UART_SetConfig+0x3ee>
 8002c86:	dc18      	bgt.n	8002cba <UART_SetConfig+0x3f6>
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d00d      	beq.n	8002ca8 <UART_SetConfig+0x3e4>
 8002c8c:	dc15      	bgt.n	8002cba <UART_SetConfig+0x3f6>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <UART_SetConfig+0x3d4>
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d005      	beq.n	8002ca2 <UART_SetConfig+0x3de>
 8002c96:	e010      	b.n	8002cba <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c98:	f7ff fb4c 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8002c9c:	0003      	movs	r3, r0
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ca0:	e014      	b.n	8002ccc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ca2:	4b66      	ldr	r3, [pc, #408]	; (8002e3c <UART_SetConfig+0x578>)
 8002ca4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002ca6:	e011      	b.n	8002ccc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ca8:	f7ff fab8 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8002cac:	0003      	movs	r3, r0
 8002cae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cb0:	e00c      	b.n	8002ccc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	021b      	lsls	r3, r3, #8
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cb8:	e008      	b.n	8002ccc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002cbe:	231a      	movs	r3, #26
 8002cc0:	2220      	movs	r2, #32
 8002cc2:	189b      	adds	r3, r3, r2
 8002cc4:	19db      	adds	r3, r3, r7
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	701a      	strb	r2, [r3, #0]
        break;
 8002cca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d100      	bne.n	8002cd4 <UART_SetConfig+0x410>
 8002cd2:	e09a      	b.n	8002e0a <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd8:	4b57      	ldr	r3, [pc, #348]	; (8002e38 <UART_SetConfig+0x574>)
 8002cda:	0052      	lsls	r2, r2, #1
 8002cdc:	5ad3      	ldrh	r3, [r2, r3]
 8002cde:	0019      	movs	r1, r3
 8002ce0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ce2:	f7fd fa19 	bl	8000118 <__udivsi3>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	005a      	lsls	r2, r3, #1
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	085b      	lsrs	r3, r3, #1
 8002cf0:	18d2      	adds	r2, r2, r3
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	0010      	movs	r0, r2
 8002cfa:	f7fd fa0d 	bl	8000118 <__udivsi3>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d04:	2b0f      	cmp	r3, #15
 8002d06:	d921      	bls.n	8002d4c <UART_SetConfig+0x488>
 8002d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d0a:	2380      	movs	r3, #128	; 0x80
 8002d0c:	025b      	lsls	r3, r3, #9
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d21c      	bcs.n	8002d4c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	200e      	movs	r0, #14
 8002d18:	2420      	movs	r4, #32
 8002d1a:	1903      	adds	r3, r0, r4
 8002d1c:	19db      	adds	r3, r3, r7
 8002d1e:	210f      	movs	r1, #15
 8002d20:	438a      	bics	r2, r1
 8002d22:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2207      	movs	r2, #7
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b299      	uxth	r1, r3
 8002d30:	1903      	adds	r3, r0, r4
 8002d32:	19db      	adds	r3, r3, r7
 8002d34:	1902      	adds	r2, r0, r4
 8002d36:	19d2      	adds	r2, r2, r7
 8002d38:	8812      	ldrh	r2, [r2, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	1902      	adds	r2, r0, r4
 8002d44:	19d2      	adds	r2, r2, r7
 8002d46:	8812      	ldrh	r2, [r2, #0]
 8002d48:	60da      	str	r2, [r3, #12]
 8002d4a:	e05e      	b.n	8002e0a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d4c:	231a      	movs	r3, #26
 8002d4e:	2220      	movs	r2, #32
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	19db      	adds	r3, r3, r7
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
 8002d58:	e057      	b.n	8002e0a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d5a:	231b      	movs	r3, #27
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	189b      	adds	r3, r3, r2
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	d015      	beq.n	8002d94 <UART_SetConfig+0x4d0>
 8002d68:	dc18      	bgt.n	8002d9c <UART_SetConfig+0x4d8>
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d00d      	beq.n	8002d8a <UART_SetConfig+0x4c6>
 8002d6e:	dc15      	bgt.n	8002d9c <UART_SetConfig+0x4d8>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <UART_SetConfig+0x4b6>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d005      	beq.n	8002d84 <UART_SetConfig+0x4c0>
 8002d78:	e010      	b.n	8002d9c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d7a:	f7ff fadb 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d82:	e014      	b.n	8002dae <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <UART_SetConfig+0x578>)
 8002d86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d88:	e011      	b.n	8002dae <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d8a:	f7ff fa47 	bl	800221c <HAL_RCC_GetSysClockFreq>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d92:	e00c      	b.n	8002dae <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d9a:	e008      	b.n	8002dae <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002da0:	231a      	movs	r3, #26
 8002da2:	2220      	movs	r2, #32
 8002da4:	189b      	adds	r3, r3, r2
 8002da6:	19db      	adds	r3, r3, r7
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
        break;
 8002dac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d02a      	beq.n	8002e0a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db8:	4b1f      	ldr	r3, [pc, #124]	; (8002e38 <UART_SetConfig+0x574>)
 8002dba:	0052      	lsls	r2, r2, #1
 8002dbc:	5ad3      	ldrh	r3, [r2, r3]
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dc2:	f7fd f9a9 	bl	8000118 <__udivsi3>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	001a      	movs	r2, r3
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	085b      	lsrs	r3, r3, #1
 8002dd0:	18d2      	adds	r2, r2, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	0010      	movs	r0, r2
 8002dda:	f7fd f99d 	bl	8000118 <__udivsi3>
 8002dde:	0003      	movs	r3, r0
 8002de0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d90a      	bls.n	8002dfe <UART_SetConfig+0x53a>
 8002de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	025b      	lsls	r3, r3, #9
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d205      	bcs.n	8002dfe <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60da      	str	r2, [r3, #12]
 8002dfc:	e005      	b.n	8002e0a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002dfe:	231a      	movs	r3, #26
 8002e00:	2220      	movs	r2, #32
 8002e02:	189b      	adds	r3, r3, r2
 8002e04:	19db      	adds	r3, r3, r7
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	226a      	movs	r2, #106	; 0x6a
 8002e0e:	2101      	movs	r1, #1
 8002e10:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	2268      	movs	r2, #104	; 0x68
 8002e16:	2101      	movs	r1, #1
 8002e18:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	2200      	movs	r2, #0
 8002e24:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002e26:	231a      	movs	r3, #26
 8002e28:	2220      	movs	r2, #32
 8002e2a:	189b      	adds	r3, r3, r2
 8002e2c:	19db      	adds	r3, r3, r7
 8002e2e:	781b      	ldrb	r3, [r3, #0]
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b010      	add	sp, #64	; 0x40
 8002e36:	bdb0      	pop	{r4, r5, r7, pc}
 8002e38:	08003ea8 	.word	0x08003ea8
 8002e3c:	00f42400 	.word	0x00f42400

08002e40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d00b      	beq.n	8002e6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a4a      	ldr	r2, [pc, #296]	; (8002f84 <UART_AdvFeatureConfig+0x144>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4013      	ands	r3, r2
 8002e72:	d00b      	beq.n	8002e8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a43      	ldr	r2, [pc, #268]	; (8002f88 <UART_AdvFeatureConfig+0x148>)
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	0019      	movs	r1, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e90:	2202      	movs	r2, #2
 8002e92:	4013      	ands	r3, r2
 8002e94:	d00b      	beq.n	8002eae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a3b      	ldr	r2, [pc, #236]	; (8002f8c <UART_AdvFeatureConfig+0x14c>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	0019      	movs	r1, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d00b      	beq.n	8002ed0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a34      	ldr	r2, [pc, #208]	; (8002f90 <UART_AdvFeatureConfig+0x150>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	2210      	movs	r2, #16
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	4a2c      	ldr	r2, [pc, #176]	; (8002f94 <UART_AdvFeatureConfig+0x154>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d00b      	beq.n	8002f14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <UART_AdvFeatureConfig+0x158>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	0019      	movs	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	2240      	movs	r2, #64	; 0x40
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d01d      	beq.n	8002f5a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	4a1d      	ldr	r2, [pc, #116]	; (8002f9c <UART_AdvFeatureConfig+0x15c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	0019      	movs	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	035b      	lsls	r3, r3, #13
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d10b      	bne.n	8002f5a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <UART_AdvFeatureConfig+0x160>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	2280      	movs	r2, #128	; 0x80
 8002f60:	4013      	ands	r3, r2
 8002f62:	d00b      	beq.n	8002f7c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4a0e      	ldr	r2, [pc, #56]	; (8002fa4 <UART_AdvFeatureConfig+0x164>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
  }
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	ffff7fff 	.word	0xffff7fff
 8002f88:	fffdffff 	.word	0xfffdffff
 8002f8c:	fffeffff 	.word	0xfffeffff
 8002f90:	fffbffff 	.word	0xfffbffff
 8002f94:	ffffefff 	.word	0xffffefff
 8002f98:	ffffdfff 	.word	0xffffdfff
 8002f9c:	ffefffff 	.word	0xffefffff
 8002fa0:	ff9fffff 	.word	0xff9fffff
 8002fa4:	fff7ffff 	.word	0xfff7ffff

08002fa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b092      	sub	sp, #72	; 0x48
 8002fac:	af02      	add	r7, sp, #8
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2290      	movs	r2, #144	; 0x90
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fb8:	f7fd feb8 	bl	8000d2c <HAL_GetTick>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2208      	movs	r2, #8
 8002fc8:	4013      	ands	r3, r2
 8002fca:	2b08      	cmp	r3, #8
 8002fcc:	d12d      	bne.n	800302a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	0391      	lsls	r1, r2, #14
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	4a47      	ldr	r2, [pc, #284]	; (80030f4 <UART_CheckIdleState+0x14c>)
 8002fd8:	9200      	str	r2, [sp, #0]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f000 f88e 	bl	80030fc <UART_WaitOnFlagUntilTimeout>
 8002fe0:	1e03      	subs	r3, r0, #0
 8002fe2:	d022      	beq.n	800302a <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fee:	2301      	movs	r3, #1
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff4:	f383 8810 	msr	PRIMASK, r3
}
 8002ff8:	46c0      	nop			; (mov r8, r8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2180      	movs	r1, #128	; 0x80
 8003006:	438a      	bics	r2, r1
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2288      	movs	r2, #136	; 0x88
 800301a:	2120      	movs	r1, #32
 800301c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2284      	movs	r2, #132	; 0x84
 8003022:	2100      	movs	r1, #0
 8003024:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e060      	b.n	80030ec <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2204      	movs	r2, #4
 8003032:	4013      	ands	r3, r2
 8003034:	2b04      	cmp	r3, #4
 8003036:	d146      	bne.n	80030c6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303a:	2280      	movs	r2, #128	; 0x80
 800303c:	03d1      	lsls	r1, r2, #15
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4a2c      	ldr	r2, [pc, #176]	; (80030f4 <UART_CheckIdleState+0x14c>)
 8003042:	9200      	str	r2, [sp, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	f000 f859 	bl	80030fc <UART_WaitOnFlagUntilTimeout>
 800304a:	1e03      	subs	r3, r0, #0
 800304c:	d03b      	beq.n	80030c6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800304e:	f3ef 8310 	mrs	r3, PRIMASK
 8003052:	60fb      	str	r3, [r7, #12]
  return(result);
 8003054:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
 8003058:	2301      	movs	r3, #1
 800305a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f383 8810 	msr	PRIMASK, r3
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4922      	ldr	r1, [pc, #136]	; (80030f8 <UART_CheckIdleState+0x150>)
 8003070:	400a      	ands	r2, r1
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003076:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f383 8810 	msr	PRIMASK, r3
}
 800307e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003080:	f3ef 8310 	mrs	r3, PRIMASK
 8003084:	61bb      	str	r3, [r7, #24]
  return(result);
 8003086:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003088:	633b      	str	r3, [r7, #48]	; 0x30
 800308a:	2301      	movs	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	f383 8810 	msr	PRIMASK, r3
}
 8003094:	46c0      	nop			; (mov r8, r8)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689a      	ldr	r2, [r3, #8]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2101      	movs	r1, #1
 80030a2:	438a      	bics	r2, r1
 80030a4:	609a      	str	r2, [r3, #8]
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	f383 8810 	msr	PRIMASK, r3
}
 80030b0:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	228c      	movs	r2, #140	; 0x8c
 80030b6:	2120      	movs	r1, #32
 80030b8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2284      	movs	r2, #132	; 0x84
 80030be:	2100      	movs	r1, #0
 80030c0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e012      	b.n	80030ec <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2288      	movs	r2, #136	; 0x88
 80030ca:	2120      	movs	r1, #32
 80030cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	228c      	movs	r2, #140	; 0x8c
 80030d2:	2120      	movs	r1, #32
 80030d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2284      	movs	r2, #132	; 0x84
 80030e6:	2100      	movs	r1, #0
 80030e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b010      	add	sp, #64	; 0x40
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	01ffffff 	.word	0x01ffffff
 80030f8:	fffffedf 	.word	0xfffffedf

080030fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	1dfb      	adds	r3, r7, #7
 800310a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800310c:	e051      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3301      	adds	r3, #1
 8003112:	d04e      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003114:	f7fd fe0a 	bl	8000d2c <HAL_GetTick>
 8003118:	0002      	movs	r2, r0
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	429a      	cmp	r2, r3
 8003122:	d302      	bcc.n	800312a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e051      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2204      	movs	r2, #4
 8003136:	4013      	ands	r3, r2
 8003138:	d03b      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b80      	cmp	r3, #128	; 0x80
 800313e:	d038      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d035      	beq.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	2208      	movs	r2, #8
 800314e:	4013      	ands	r3, r2
 8003150:	2b08      	cmp	r3, #8
 8003152:	d111      	bne.n	8003178 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2208      	movs	r2, #8
 800315a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	0018      	movs	r0, r3
 8003160:	f000 f83c 	bl	80031dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2290      	movs	r2, #144	; 0x90
 8003168:	2108      	movs	r1, #8
 800316a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2284      	movs	r2, #132	; 0x84
 8003170:	2100      	movs	r1, #0
 8003172:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e02c      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	2380      	movs	r3, #128	; 0x80
 8003180:	011b      	lsls	r3, r3, #4
 8003182:	401a      	ands	r2, r3
 8003184:	2380      	movs	r3, #128	; 0x80
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	429a      	cmp	r2, r3
 800318a:	d112      	bne.n	80031b2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2280      	movs	r2, #128	; 0x80
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0018      	movs	r0, r3
 800319a:	f000 f81f 	bl	80031dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2290      	movs	r2, #144	; 0x90
 80031a2:	2120      	movs	r1, #32
 80031a4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2284      	movs	r2, #132	; 0x84
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e00f      	b.n	80031d2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	425a      	negs	r2, r3
 80031c2:	4153      	adcs	r3, r2
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	001a      	movs	r2, r3
 80031c8:	1dfb      	adds	r3, r7, #7
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d09e      	beq.n	800310e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	0018      	movs	r0, r3
 80031d4:	46bd      	mov	sp, r7
 80031d6:	b004      	add	sp, #16
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08e      	sub	sp, #56	; 0x38
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	617b      	str	r3, [r7, #20]
  return(result);
 80031ea:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80031ec:	637b      	str	r3, [r7, #52]	; 0x34
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			; (mov r8, r8)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4926      	ldr	r1, [pc, #152]	; (80032a0 <UART_EndRxTransfer+0xc4>)
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	f383 8810 	msr	PRIMASK, r3
}
 8003214:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003216:	f3ef 8310 	mrs	r3, PRIMASK
 800321a:	623b      	str	r3, [r7, #32]
  return(result);
 800321c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800321e:	633b      	str	r3, [r7, #48]	; 0x30
 8003220:	2301      	movs	r3, #1
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	f383 8810 	msr	PRIMASK, r3
}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	491b      	ldr	r1, [pc, #108]	; (80032a4 <UART_EndRxTransfer+0xc8>)
 8003238:	400a      	ands	r2, r1
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	f383 8810 	msr	PRIMASK, r3
}
 8003246:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d118      	bne.n	8003282 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003250:	f3ef 8310 	mrs	r3, PRIMASK
 8003254:	60bb      	str	r3, [r7, #8]
  return(result);
 8003256:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325a:	2301      	movs	r3, #1
 800325c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2110      	movs	r1, #16
 8003272:	438a      	bics	r2, r1
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003278:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	228c      	movs	r2, #140	; 0x8c
 8003286:	2120      	movs	r1, #32
 8003288:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	46bd      	mov	sp, r7
 800329a:	b00e      	add	sp, #56	; 0x38
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	fffffedf 	.word	0xfffffedf
 80032a4:	effffffe 	.word	0xeffffffe

080032a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2284      	movs	r2, #132	; 0x84
 80032b4:	5c9b      	ldrb	r3, [r3, r2]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_UARTEx_DisableFifoMode+0x16>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e027      	b.n	800330e <HAL_UARTEx_DisableFifoMode+0x66>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2284      	movs	r2, #132	; 0x84
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2288      	movs	r2, #136	; 0x88
 80032ca:	2124      	movs	r1, #36	; 0x24
 80032cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2101      	movs	r1, #1
 80032e2:	438a      	bics	r2, r1
 80032e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <HAL_UARTEx_DisableFifoMode+0x70>)
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2288      	movs	r2, #136	; 0x88
 8003300:	2120      	movs	r1, #32
 8003302:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2284      	movs	r2, #132	; 0x84
 8003308:	2100      	movs	r1, #0
 800330a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	0018      	movs	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	b004      	add	sp, #16
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	dfffffff 	.word	0xdfffffff

0800331c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2284      	movs	r2, #132	; 0x84
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003330:	2302      	movs	r3, #2
 8003332:	e02e      	b.n	8003392 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2284      	movs	r2, #132	; 0x84
 8003338:	2101      	movs	r1, #1
 800333a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2288      	movs	r2, #136	; 0x88
 8003340:	2124      	movs	r1, #36	; 0x24
 8003342:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	438a      	bics	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	08d9      	lsrs	r1, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 f854 	bl	8003420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2288      	movs	r2, #136	; 0x88
 8003384:	2120      	movs	r1, #32
 8003386:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2284      	movs	r2, #132	; 0x84
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	0018      	movs	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	b004      	add	sp, #16
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2284      	movs	r2, #132	; 0x84
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e02f      	b.n	8003414 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2284      	movs	r2, #132	; 0x84
 80033b8:	2101      	movs	r1, #1
 80033ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2288      	movs	r2, #136	; 0x88
 80033c0:	2124      	movs	r1, #36	; 0x24
 80033c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2101      	movs	r1, #1
 80033d8:	438a      	bics	r2, r1
 80033da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	4a0e      	ldr	r2, [pc, #56]	; (800341c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f813 	bl	8003420 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2288      	movs	r2, #136	; 0x88
 8003406:	2120      	movs	r1, #32
 8003408:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2284      	movs	r2, #132	; 0x84
 800340e:	2100      	movs	r1, #0
 8003410:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	0018      	movs	r0, r3
 8003416:	46bd      	mov	sp, r7
 8003418:	b004      	add	sp, #16
 800341a:	bd80      	pop	{r7, pc}
 800341c:	f1ffffff 	.word	0xf1ffffff

08003420 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800342c:	2b00      	cmp	r3, #0
 800342e:	d108      	bne.n	8003442 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	226a      	movs	r2, #106	; 0x6a
 8003434:	2101      	movs	r1, #1
 8003436:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2268      	movs	r2, #104	; 0x68
 800343c:	2101      	movs	r1, #1
 800343e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003440:	e043      	b.n	80034ca <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003442:	260f      	movs	r6, #15
 8003444:	19bb      	adds	r3, r7, r6
 8003446:	2208      	movs	r2, #8
 8003448:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800344a:	200e      	movs	r0, #14
 800344c:	183b      	adds	r3, r7, r0
 800344e:	2208      	movs	r2, #8
 8003450:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	0e5b      	lsrs	r3, r3, #25
 800345a:	b2da      	uxtb	r2, r3
 800345c:	240d      	movs	r4, #13
 800345e:	193b      	adds	r3, r7, r4
 8003460:	2107      	movs	r1, #7
 8003462:	400a      	ands	r2, r1
 8003464:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	0f5b      	lsrs	r3, r3, #29
 800346e:	b2da      	uxtb	r2, r3
 8003470:	250c      	movs	r5, #12
 8003472:	197b      	adds	r3, r7, r5
 8003474:	2107      	movs	r1, #7
 8003476:	400a      	ands	r2, r1
 8003478:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800347a:	183b      	adds	r3, r7, r0
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	197a      	adds	r2, r7, r5
 8003480:	7812      	ldrb	r2, [r2, #0]
 8003482:	4914      	ldr	r1, [pc, #80]	; (80034d4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003484:	5c8a      	ldrb	r2, [r1, r2]
 8003486:	435a      	muls	r2, r3
 8003488:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800348a:	197b      	adds	r3, r7, r5
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003490:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003492:	0019      	movs	r1, r3
 8003494:	f7fc feca 	bl	800022c <__divsi3>
 8003498:	0003      	movs	r3, r0
 800349a:	b299      	uxth	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	226a      	movs	r2, #106	; 0x6a
 80034a0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034a2:	19bb      	adds	r3, r7, r6
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	193a      	adds	r2, r7, r4
 80034a8:	7812      	ldrb	r2, [r2, #0]
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <UARTEx_SetNbDataToProcess+0xb4>)
 80034ac:	5c8a      	ldrb	r2, [r1, r2]
 80034ae:	435a      	muls	r2, r3
 80034b0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80034b2:	193b      	adds	r3, r7, r4
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4a08      	ldr	r2, [pc, #32]	; (80034d8 <UARTEx_SetNbDataToProcess+0xb8>)
 80034b8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034ba:	0019      	movs	r1, r3
 80034bc:	f7fc feb6 	bl	800022c <__divsi3>
 80034c0:	0003      	movs	r3, r0
 80034c2:	b299      	uxth	r1, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2268      	movs	r2, #104	; 0x68
 80034c8:	5299      	strh	r1, [r3, r2]
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b005      	add	sp, #20
 80034d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	08003ec0 	.word	0x08003ec0
 80034d8:	08003ec8 	.word	0x08003ec8

080034dc <siprintf>:
 80034dc:	b40e      	push	{r1, r2, r3}
 80034de:	b500      	push	{lr}
 80034e0:	490b      	ldr	r1, [pc, #44]	; (8003510 <siprintf+0x34>)
 80034e2:	b09c      	sub	sp, #112	; 0x70
 80034e4:	ab1d      	add	r3, sp, #116	; 0x74
 80034e6:	9002      	str	r0, [sp, #8]
 80034e8:	9006      	str	r0, [sp, #24]
 80034ea:	9107      	str	r1, [sp, #28]
 80034ec:	9104      	str	r1, [sp, #16]
 80034ee:	4809      	ldr	r0, [pc, #36]	; (8003514 <siprintf+0x38>)
 80034f0:	4909      	ldr	r1, [pc, #36]	; (8003518 <siprintf+0x3c>)
 80034f2:	cb04      	ldmia	r3!, {r2}
 80034f4:	9105      	str	r1, [sp, #20]
 80034f6:	6800      	ldr	r0, [r0, #0]
 80034f8:	a902      	add	r1, sp, #8
 80034fa:	9301      	str	r3, [sp, #4]
 80034fc:	f000 f9a2 	bl	8003844 <_svfiprintf_r>
 8003500:	2200      	movs	r2, #0
 8003502:	9b02      	ldr	r3, [sp, #8]
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	b01c      	add	sp, #112	; 0x70
 8003508:	bc08      	pop	{r3}
 800350a:	b003      	add	sp, #12
 800350c:	4718      	bx	r3
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	7fffffff 	.word	0x7fffffff
 8003514:	20000084 	.word	0x20000084
 8003518:	ffff0208 	.word	0xffff0208

0800351c <memset>:
 800351c:	0003      	movs	r3, r0
 800351e:	1882      	adds	r2, r0, r2
 8003520:	4293      	cmp	r3, r2
 8003522:	d100      	bne.n	8003526 <memset+0xa>
 8003524:	4770      	bx	lr
 8003526:	7019      	strb	r1, [r3, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	e7f9      	b.n	8003520 <memset+0x4>

0800352c <__errno>:
 800352c:	4b01      	ldr	r3, [pc, #4]	; (8003534 <__errno+0x8>)
 800352e:	6818      	ldr	r0, [r3, #0]
 8003530:	4770      	bx	lr
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	20000084 	.word	0x20000084

08003538 <__libc_init_array>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	2600      	movs	r6, #0
 800353c:	4c0c      	ldr	r4, [pc, #48]	; (8003570 <__libc_init_array+0x38>)
 800353e:	4d0d      	ldr	r5, [pc, #52]	; (8003574 <__libc_init_array+0x3c>)
 8003540:	1b64      	subs	r4, r4, r5
 8003542:	10a4      	asrs	r4, r4, #2
 8003544:	42a6      	cmp	r6, r4
 8003546:	d109      	bne.n	800355c <__libc_init_array+0x24>
 8003548:	2600      	movs	r6, #0
 800354a:	f000 fc6d 	bl	8003e28 <_init>
 800354e:	4c0a      	ldr	r4, [pc, #40]	; (8003578 <__libc_init_array+0x40>)
 8003550:	4d0a      	ldr	r5, [pc, #40]	; (800357c <__libc_init_array+0x44>)
 8003552:	1b64      	subs	r4, r4, r5
 8003554:	10a4      	asrs	r4, r4, #2
 8003556:	42a6      	cmp	r6, r4
 8003558:	d105      	bne.n	8003566 <__libc_init_array+0x2e>
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	00b3      	lsls	r3, r6, #2
 800355e:	58eb      	ldr	r3, [r5, r3]
 8003560:	4798      	blx	r3
 8003562:	3601      	adds	r6, #1
 8003564:	e7ee      	b.n	8003544 <__libc_init_array+0xc>
 8003566:	00b3      	lsls	r3, r6, #2
 8003568:	58eb      	ldr	r3, [r5, r3]
 800356a:	4798      	blx	r3
 800356c:	3601      	adds	r6, #1
 800356e:	e7f2      	b.n	8003556 <__libc_init_array+0x1e>
 8003570:	08003f0c 	.word	0x08003f0c
 8003574:	08003f0c 	.word	0x08003f0c
 8003578:	08003f10 	.word	0x08003f10
 800357c:	08003f0c 	.word	0x08003f0c

08003580 <__retarget_lock_acquire_recursive>:
 8003580:	4770      	bx	lr

08003582 <__retarget_lock_release_recursive>:
 8003582:	4770      	bx	lr

08003584 <_free_r>:
 8003584:	b570      	push	{r4, r5, r6, lr}
 8003586:	0005      	movs	r5, r0
 8003588:	2900      	cmp	r1, #0
 800358a:	d010      	beq.n	80035ae <_free_r+0x2a>
 800358c:	1f0c      	subs	r4, r1, #4
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	da00      	bge.n	8003596 <_free_r+0x12>
 8003594:	18e4      	adds	r4, r4, r3
 8003596:	0028      	movs	r0, r5
 8003598:	f000 f8e2 	bl	8003760 <__malloc_lock>
 800359c:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <_free_r+0x90>)
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d105      	bne.n	80035b0 <_free_r+0x2c>
 80035a4:	6063      	str	r3, [r4, #4]
 80035a6:	6014      	str	r4, [r2, #0]
 80035a8:	0028      	movs	r0, r5
 80035aa:	f000 f8e1 	bl	8003770 <__malloc_unlock>
 80035ae:	bd70      	pop	{r4, r5, r6, pc}
 80035b0:	42a3      	cmp	r3, r4
 80035b2:	d908      	bls.n	80035c6 <_free_r+0x42>
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	1821      	adds	r1, r4, r0
 80035b8:	428b      	cmp	r3, r1
 80035ba:	d1f3      	bne.n	80035a4 <_free_r+0x20>
 80035bc:	6819      	ldr	r1, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	1809      	adds	r1, r1, r0
 80035c2:	6021      	str	r1, [r4, #0]
 80035c4:	e7ee      	b.n	80035a4 <_free_r+0x20>
 80035c6:	001a      	movs	r2, r3
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <_free_r+0x4e>
 80035ce:	42a3      	cmp	r3, r4
 80035d0:	d9f9      	bls.n	80035c6 <_free_r+0x42>
 80035d2:	6811      	ldr	r1, [r2, #0]
 80035d4:	1850      	adds	r0, r2, r1
 80035d6:	42a0      	cmp	r0, r4
 80035d8:	d10b      	bne.n	80035f2 <_free_r+0x6e>
 80035da:	6820      	ldr	r0, [r4, #0]
 80035dc:	1809      	adds	r1, r1, r0
 80035de:	1850      	adds	r0, r2, r1
 80035e0:	6011      	str	r1, [r2, #0]
 80035e2:	4283      	cmp	r3, r0
 80035e4:	d1e0      	bne.n	80035a8 <_free_r+0x24>
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	1841      	adds	r1, r0, r1
 80035ec:	6011      	str	r1, [r2, #0]
 80035ee:	6053      	str	r3, [r2, #4]
 80035f0:	e7da      	b.n	80035a8 <_free_r+0x24>
 80035f2:	42a0      	cmp	r0, r4
 80035f4:	d902      	bls.n	80035fc <_free_r+0x78>
 80035f6:	230c      	movs	r3, #12
 80035f8:	602b      	str	r3, [r5, #0]
 80035fa:	e7d5      	b.n	80035a8 <_free_r+0x24>
 80035fc:	6820      	ldr	r0, [r4, #0]
 80035fe:	1821      	adds	r1, r4, r0
 8003600:	428b      	cmp	r3, r1
 8003602:	d103      	bne.n	800360c <_free_r+0x88>
 8003604:	6819      	ldr	r1, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	1809      	adds	r1, r1, r0
 800360a:	6021      	str	r1, [r4, #0]
 800360c:	6063      	str	r3, [r4, #4]
 800360e:	6054      	str	r4, [r2, #4]
 8003610:	e7ca      	b.n	80035a8 <_free_r+0x24>
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	200002f0 	.word	0x200002f0

08003618 <sbrk_aligned>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	4e0f      	ldr	r6, [pc, #60]	; (8003658 <sbrk_aligned+0x40>)
 800361c:	000d      	movs	r5, r1
 800361e:	6831      	ldr	r1, [r6, #0]
 8003620:	0004      	movs	r4, r0
 8003622:	2900      	cmp	r1, #0
 8003624:	d102      	bne.n	800362c <sbrk_aligned+0x14>
 8003626:	f000 fba1 	bl	8003d6c <_sbrk_r>
 800362a:	6030      	str	r0, [r6, #0]
 800362c:	0029      	movs	r1, r5
 800362e:	0020      	movs	r0, r4
 8003630:	f000 fb9c 	bl	8003d6c <_sbrk_r>
 8003634:	1c43      	adds	r3, r0, #1
 8003636:	d00a      	beq.n	800364e <sbrk_aligned+0x36>
 8003638:	2303      	movs	r3, #3
 800363a:	1cc5      	adds	r5, r0, #3
 800363c:	439d      	bics	r5, r3
 800363e:	42a8      	cmp	r0, r5
 8003640:	d007      	beq.n	8003652 <sbrk_aligned+0x3a>
 8003642:	1a29      	subs	r1, r5, r0
 8003644:	0020      	movs	r0, r4
 8003646:	f000 fb91 	bl	8003d6c <_sbrk_r>
 800364a:	3001      	adds	r0, #1
 800364c:	d101      	bne.n	8003652 <sbrk_aligned+0x3a>
 800364e:	2501      	movs	r5, #1
 8003650:	426d      	negs	r5, r5
 8003652:	0028      	movs	r0, r5
 8003654:	bd70      	pop	{r4, r5, r6, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	200002f4 	.word	0x200002f4

0800365c <_malloc_r>:
 800365c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800365e:	2203      	movs	r2, #3
 8003660:	1ccb      	adds	r3, r1, #3
 8003662:	4393      	bics	r3, r2
 8003664:	3308      	adds	r3, #8
 8003666:	0006      	movs	r6, r0
 8003668:	001f      	movs	r7, r3
 800366a:	2b0c      	cmp	r3, #12
 800366c:	d238      	bcs.n	80036e0 <_malloc_r+0x84>
 800366e:	270c      	movs	r7, #12
 8003670:	42b9      	cmp	r1, r7
 8003672:	d837      	bhi.n	80036e4 <_malloc_r+0x88>
 8003674:	0030      	movs	r0, r6
 8003676:	f000 f873 	bl	8003760 <__malloc_lock>
 800367a:	4b38      	ldr	r3, [pc, #224]	; (800375c <_malloc_r+0x100>)
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	001c      	movs	r4, r3
 8003682:	2c00      	cmp	r4, #0
 8003684:	d133      	bne.n	80036ee <_malloc_r+0x92>
 8003686:	0039      	movs	r1, r7
 8003688:	0030      	movs	r0, r6
 800368a:	f7ff ffc5 	bl	8003618 <sbrk_aligned>
 800368e:	0004      	movs	r4, r0
 8003690:	1c43      	adds	r3, r0, #1
 8003692:	d15e      	bne.n	8003752 <_malloc_r+0xf6>
 8003694:	9b00      	ldr	r3, [sp, #0]
 8003696:	681c      	ldr	r4, [r3, #0]
 8003698:	0025      	movs	r5, r4
 800369a:	2d00      	cmp	r5, #0
 800369c:	d14e      	bne.n	800373c <_malloc_r+0xe0>
 800369e:	2c00      	cmp	r4, #0
 80036a0:	d051      	beq.n	8003746 <_malloc_r+0xea>
 80036a2:	6823      	ldr	r3, [r4, #0]
 80036a4:	0029      	movs	r1, r5
 80036a6:	18e3      	adds	r3, r4, r3
 80036a8:	0030      	movs	r0, r6
 80036aa:	9301      	str	r3, [sp, #4]
 80036ac:	f000 fb5e 	bl	8003d6c <_sbrk_r>
 80036b0:	9b01      	ldr	r3, [sp, #4]
 80036b2:	4283      	cmp	r3, r0
 80036b4:	d147      	bne.n	8003746 <_malloc_r+0xea>
 80036b6:	6823      	ldr	r3, [r4, #0]
 80036b8:	0030      	movs	r0, r6
 80036ba:	1aff      	subs	r7, r7, r3
 80036bc:	0039      	movs	r1, r7
 80036be:	f7ff ffab 	bl	8003618 <sbrk_aligned>
 80036c2:	3001      	adds	r0, #1
 80036c4:	d03f      	beq.n	8003746 <_malloc_r+0xea>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	19db      	adds	r3, r3, r7
 80036ca:	6023      	str	r3, [r4, #0]
 80036cc:	9b00      	ldr	r3, [sp, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d040      	beq.n	8003756 <_malloc_r+0xfa>
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	42a2      	cmp	r2, r4
 80036d8:	d133      	bne.n	8003742 <_malloc_r+0xe6>
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	e014      	b.n	800370a <_malloc_r+0xae>
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	dac5      	bge.n	8003670 <_malloc_r+0x14>
 80036e4:	230c      	movs	r3, #12
 80036e6:	2500      	movs	r5, #0
 80036e8:	6033      	str	r3, [r6, #0]
 80036ea:	0028      	movs	r0, r5
 80036ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036ee:	6821      	ldr	r1, [r4, #0]
 80036f0:	1bc9      	subs	r1, r1, r7
 80036f2:	d420      	bmi.n	8003736 <_malloc_r+0xda>
 80036f4:	290b      	cmp	r1, #11
 80036f6:	d918      	bls.n	800372a <_malloc_r+0xce>
 80036f8:	19e2      	adds	r2, r4, r7
 80036fa:	6027      	str	r7, [r4, #0]
 80036fc:	42a3      	cmp	r3, r4
 80036fe:	d112      	bne.n	8003726 <_malloc_r+0xca>
 8003700:	9b00      	ldr	r3, [sp, #0]
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	6863      	ldr	r3, [r4, #4]
 8003706:	6011      	str	r1, [r2, #0]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	0030      	movs	r0, r6
 800370c:	0025      	movs	r5, r4
 800370e:	f000 f82f 	bl	8003770 <__malloc_unlock>
 8003712:	2207      	movs	r2, #7
 8003714:	350b      	adds	r5, #11
 8003716:	1d23      	adds	r3, r4, #4
 8003718:	4395      	bics	r5, r2
 800371a:	1aea      	subs	r2, r5, r3
 800371c:	429d      	cmp	r5, r3
 800371e:	d0e4      	beq.n	80036ea <_malloc_r+0x8e>
 8003720:	1b5b      	subs	r3, r3, r5
 8003722:	50a3      	str	r3, [r4, r2]
 8003724:	e7e1      	b.n	80036ea <_malloc_r+0x8e>
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	e7ec      	b.n	8003704 <_malloc_r+0xa8>
 800372a:	6862      	ldr	r2, [r4, #4]
 800372c:	42a3      	cmp	r3, r4
 800372e:	d1d5      	bne.n	80036dc <_malloc_r+0x80>
 8003730:	9b00      	ldr	r3, [sp, #0]
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e7e9      	b.n	800370a <_malloc_r+0xae>
 8003736:	0023      	movs	r3, r4
 8003738:	6864      	ldr	r4, [r4, #4]
 800373a:	e7a2      	b.n	8003682 <_malloc_r+0x26>
 800373c:	002c      	movs	r4, r5
 800373e:	686d      	ldr	r5, [r5, #4]
 8003740:	e7ab      	b.n	800369a <_malloc_r+0x3e>
 8003742:	0013      	movs	r3, r2
 8003744:	e7c4      	b.n	80036d0 <_malloc_r+0x74>
 8003746:	230c      	movs	r3, #12
 8003748:	0030      	movs	r0, r6
 800374a:	6033      	str	r3, [r6, #0]
 800374c:	f000 f810 	bl	8003770 <__malloc_unlock>
 8003750:	e7cb      	b.n	80036ea <_malloc_r+0x8e>
 8003752:	6027      	str	r7, [r4, #0]
 8003754:	e7d9      	b.n	800370a <_malloc_r+0xae>
 8003756:	605b      	str	r3, [r3, #4]
 8003758:	deff      	udf	#255	; 0xff
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	200002f0 	.word	0x200002f0

08003760 <__malloc_lock>:
 8003760:	b510      	push	{r4, lr}
 8003762:	4802      	ldr	r0, [pc, #8]	; (800376c <__malloc_lock+0xc>)
 8003764:	f7ff ff0c 	bl	8003580 <__retarget_lock_acquire_recursive>
 8003768:	bd10      	pop	{r4, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	200002ec 	.word	0x200002ec

08003770 <__malloc_unlock>:
 8003770:	b510      	push	{r4, lr}
 8003772:	4802      	ldr	r0, [pc, #8]	; (800377c <__malloc_unlock+0xc>)
 8003774:	f7ff ff05 	bl	8003582 <__retarget_lock_release_recursive>
 8003778:	bd10      	pop	{r4, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	200002ec 	.word	0x200002ec

08003780 <__ssputs_r>:
 8003780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003782:	b085      	sub	sp, #20
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	9203      	str	r2, [sp, #12]
 8003788:	688e      	ldr	r6, [r1, #8]
 800378a:	9a01      	ldr	r2, [sp, #4]
 800378c:	0007      	movs	r7, r0
 800378e:	000c      	movs	r4, r1
 8003790:	680b      	ldr	r3, [r1, #0]
 8003792:	4296      	cmp	r6, r2
 8003794:	d831      	bhi.n	80037fa <__ssputs_r+0x7a>
 8003796:	898a      	ldrh	r2, [r1, #12]
 8003798:	2190      	movs	r1, #144	; 0x90
 800379a:	00c9      	lsls	r1, r1, #3
 800379c:	420a      	tst	r2, r1
 800379e:	d029      	beq.n	80037f4 <__ssputs_r+0x74>
 80037a0:	2003      	movs	r0, #3
 80037a2:	6921      	ldr	r1, [r4, #16]
 80037a4:	1a5b      	subs	r3, r3, r1
 80037a6:	9302      	str	r3, [sp, #8]
 80037a8:	6963      	ldr	r3, [r4, #20]
 80037aa:	4343      	muls	r3, r0
 80037ac:	0fdd      	lsrs	r5, r3, #31
 80037ae:	18ed      	adds	r5, r5, r3
 80037b0:	9b01      	ldr	r3, [sp, #4]
 80037b2:	9802      	ldr	r0, [sp, #8]
 80037b4:	3301      	adds	r3, #1
 80037b6:	181b      	adds	r3, r3, r0
 80037b8:	106d      	asrs	r5, r5, #1
 80037ba:	42ab      	cmp	r3, r5
 80037bc:	d900      	bls.n	80037c0 <__ssputs_r+0x40>
 80037be:	001d      	movs	r5, r3
 80037c0:	0552      	lsls	r2, r2, #21
 80037c2:	d529      	bpl.n	8003818 <__ssputs_r+0x98>
 80037c4:	0029      	movs	r1, r5
 80037c6:	0038      	movs	r0, r7
 80037c8:	f7ff ff48 	bl	800365c <_malloc_r>
 80037cc:	1e06      	subs	r6, r0, #0
 80037ce:	d02d      	beq.n	800382c <__ssputs_r+0xac>
 80037d0:	9a02      	ldr	r2, [sp, #8]
 80037d2:	6921      	ldr	r1, [r4, #16]
 80037d4:	f000 fae7 	bl	8003da6 <memcpy>
 80037d8:	89a2      	ldrh	r2, [r4, #12]
 80037da:	4b19      	ldr	r3, [pc, #100]	; (8003840 <__ssputs_r+0xc0>)
 80037dc:	401a      	ands	r2, r3
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	4313      	orrs	r3, r2
 80037e2:	81a3      	strh	r3, [r4, #12]
 80037e4:	9b02      	ldr	r3, [sp, #8]
 80037e6:	6126      	str	r6, [r4, #16]
 80037e8:	18f6      	adds	r6, r6, r3
 80037ea:	6026      	str	r6, [r4, #0]
 80037ec:	6165      	str	r5, [r4, #20]
 80037ee:	9e01      	ldr	r6, [sp, #4]
 80037f0:	1aed      	subs	r5, r5, r3
 80037f2:	60a5      	str	r5, [r4, #8]
 80037f4:	9b01      	ldr	r3, [sp, #4]
 80037f6:	429e      	cmp	r6, r3
 80037f8:	d900      	bls.n	80037fc <__ssputs_r+0x7c>
 80037fa:	9e01      	ldr	r6, [sp, #4]
 80037fc:	0032      	movs	r2, r6
 80037fe:	9903      	ldr	r1, [sp, #12]
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	f000 fa9f 	bl	8003d44 <memmove>
 8003806:	2000      	movs	r0, #0
 8003808:	68a3      	ldr	r3, [r4, #8]
 800380a:	1b9b      	subs	r3, r3, r6
 800380c:	60a3      	str	r3, [r4, #8]
 800380e:	6823      	ldr	r3, [r4, #0]
 8003810:	199b      	adds	r3, r3, r6
 8003812:	6023      	str	r3, [r4, #0]
 8003814:	b005      	add	sp, #20
 8003816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003818:	002a      	movs	r2, r5
 800381a:	0038      	movs	r0, r7
 800381c:	f000 facc 	bl	8003db8 <_realloc_r>
 8003820:	1e06      	subs	r6, r0, #0
 8003822:	d1df      	bne.n	80037e4 <__ssputs_r+0x64>
 8003824:	0038      	movs	r0, r7
 8003826:	6921      	ldr	r1, [r4, #16]
 8003828:	f7ff feac 	bl	8003584 <_free_r>
 800382c:	230c      	movs	r3, #12
 800382e:	2001      	movs	r0, #1
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	89a2      	ldrh	r2, [r4, #12]
 8003834:	3334      	adds	r3, #52	; 0x34
 8003836:	4313      	orrs	r3, r2
 8003838:	81a3      	strh	r3, [r4, #12]
 800383a:	4240      	negs	r0, r0
 800383c:	e7ea      	b.n	8003814 <__ssputs_r+0x94>
 800383e:	46c0      	nop			; (mov r8, r8)
 8003840:	fffffb7f 	.word	0xfffffb7f

08003844 <_svfiprintf_r>:
 8003844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003846:	b0a1      	sub	sp, #132	; 0x84
 8003848:	9003      	str	r0, [sp, #12]
 800384a:	001d      	movs	r5, r3
 800384c:	898b      	ldrh	r3, [r1, #12]
 800384e:	000f      	movs	r7, r1
 8003850:	0016      	movs	r6, r2
 8003852:	061b      	lsls	r3, r3, #24
 8003854:	d511      	bpl.n	800387a <_svfiprintf_r+0x36>
 8003856:	690b      	ldr	r3, [r1, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10e      	bne.n	800387a <_svfiprintf_r+0x36>
 800385c:	2140      	movs	r1, #64	; 0x40
 800385e:	f7ff fefd 	bl	800365c <_malloc_r>
 8003862:	6038      	str	r0, [r7, #0]
 8003864:	6138      	str	r0, [r7, #16]
 8003866:	2800      	cmp	r0, #0
 8003868:	d105      	bne.n	8003876 <_svfiprintf_r+0x32>
 800386a:	230c      	movs	r3, #12
 800386c:	9a03      	ldr	r2, [sp, #12]
 800386e:	3801      	subs	r0, #1
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	b021      	add	sp, #132	; 0x84
 8003874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003876:	2340      	movs	r3, #64	; 0x40
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	2300      	movs	r3, #0
 800387c:	ac08      	add	r4, sp, #32
 800387e:	6163      	str	r3, [r4, #20]
 8003880:	3320      	adds	r3, #32
 8003882:	7663      	strb	r3, [r4, #25]
 8003884:	3310      	adds	r3, #16
 8003886:	76a3      	strb	r3, [r4, #26]
 8003888:	9507      	str	r5, [sp, #28]
 800388a:	0035      	movs	r5, r6
 800388c:	782b      	ldrb	r3, [r5, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <_svfiprintf_r+0x52>
 8003892:	2b25      	cmp	r3, #37	; 0x25
 8003894:	d148      	bne.n	8003928 <_svfiprintf_r+0xe4>
 8003896:	1bab      	subs	r3, r5, r6
 8003898:	9305      	str	r3, [sp, #20]
 800389a:	42b5      	cmp	r5, r6
 800389c:	d00b      	beq.n	80038b6 <_svfiprintf_r+0x72>
 800389e:	0032      	movs	r2, r6
 80038a0:	0039      	movs	r1, r7
 80038a2:	9803      	ldr	r0, [sp, #12]
 80038a4:	f7ff ff6c 	bl	8003780 <__ssputs_r>
 80038a8:	3001      	adds	r0, #1
 80038aa:	d100      	bne.n	80038ae <_svfiprintf_r+0x6a>
 80038ac:	e0af      	b.n	8003a0e <_svfiprintf_r+0x1ca>
 80038ae:	6963      	ldr	r3, [r4, #20]
 80038b0:	9a05      	ldr	r2, [sp, #20]
 80038b2:	189b      	adds	r3, r3, r2
 80038b4:	6163      	str	r3, [r4, #20]
 80038b6:	782b      	ldrb	r3, [r5, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d100      	bne.n	80038be <_svfiprintf_r+0x7a>
 80038bc:	e0a7      	b.n	8003a0e <_svfiprintf_r+0x1ca>
 80038be:	2201      	movs	r2, #1
 80038c0:	2300      	movs	r3, #0
 80038c2:	4252      	negs	r2, r2
 80038c4:	6062      	str	r2, [r4, #4]
 80038c6:	a904      	add	r1, sp, #16
 80038c8:	3254      	adds	r2, #84	; 0x54
 80038ca:	1852      	adds	r2, r2, r1
 80038cc:	1c6e      	adds	r6, r5, #1
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	60e3      	str	r3, [r4, #12]
 80038d2:	60a3      	str	r3, [r4, #8]
 80038d4:	7013      	strb	r3, [r2, #0]
 80038d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80038d8:	4b55      	ldr	r3, [pc, #340]	; (8003a30 <_svfiprintf_r+0x1ec>)
 80038da:	2205      	movs	r2, #5
 80038dc:	0018      	movs	r0, r3
 80038de:	7831      	ldrb	r1, [r6, #0]
 80038e0:	9305      	str	r3, [sp, #20]
 80038e2:	f000 fa55 	bl	8003d90 <memchr>
 80038e6:	1c75      	adds	r5, r6, #1
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d11f      	bne.n	800392c <_svfiprintf_r+0xe8>
 80038ec:	6822      	ldr	r2, [r4, #0]
 80038ee:	06d3      	lsls	r3, r2, #27
 80038f0:	d504      	bpl.n	80038fc <_svfiprintf_r+0xb8>
 80038f2:	2353      	movs	r3, #83	; 0x53
 80038f4:	a904      	add	r1, sp, #16
 80038f6:	185b      	adds	r3, r3, r1
 80038f8:	2120      	movs	r1, #32
 80038fa:	7019      	strb	r1, [r3, #0]
 80038fc:	0713      	lsls	r3, r2, #28
 80038fe:	d504      	bpl.n	800390a <_svfiprintf_r+0xc6>
 8003900:	2353      	movs	r3, #83	; 0x53
 8003902:	a904      	add	r1, sp, #16
 8003904:	185b      	adds	r3, r3, r1
 8003906:	212b      	movs	r1, #43	; 0x2b
 8003908:	7019      	strb	r1, [r3, #0]
 800390a:	7833      	ldrb	r3, [r6, #0]
 800390c:	2b2a      	cmp	r3, #42	; 0x2a
 800390e:	d016      	beq.n	800393e <_svfiprintf_r+0xfa>
 8003910:	0035      	movs	r5, r6
 8003912:	2100      	movs	r1, #0
 8003914:	200a      	movs	r0, #10
 8003916:	68e3      	ldr	r3, [r4, #12]
 8003918:	782a      	ldrb	r2, [r5, #0]
 800391a:	1c6e      	adds	r6, r5, #1
 800391c:	3a30      	subs	r2, #48	; 0x30
 800391e:	2a09      	cmp	r2, #9
 8003920:	d94e      	bls.n	80039c0 <_svfiprintf_r+0x17c>
 8003922:	2900      	cmp	r1, #0
 8003924:	d111      	bne.n	800394a <_svfiprintf_r+0x106>
 8003926:	e017      	b.n	8003958 <_svfiprintf_r+0x114>
 8003928:	3501      	adds	r5, #1
 800392a:	e7af      	b.n	800388c <_svfiprintf_r+0x48>
 800392c:	9b05      	ldr	r3, [sp, #20]
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	1ac0      	subs	r0, r0, r3
 8003932:	2301      	movs	r3, #1
 8003934:	4083      	lsls	r3, r0
 8003936:	4313      	orrs	r3, r2
 8003938:	002e      	movs	r6, r5
 800393a:	6023      	str	r3, [r4, #0]
 800393c:	e7cc      	b.n	80038d8 <_svfiprintf_r+0x94>
 800393e:	9b07      	ldr	r3, [sp, #28]
 8003940:	1d19      	adds	r1, r3, #4
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	9107      	str	r1, [sp, #28]
 8003946:	2b00      	cmp	r3, #0
 8003948:	db01      	blt.n	800394e <_svfiprintf_r+0x10a>
 800394a:	930b      	str	r3, [sp, #44]	; 0x2c
 800394c:	e004      	b.n	8003958 <_svfiprintf_r+0x114>
 800394e:	425b      	negs	r3, r3
 8003950:	60e3      	str	r3, [r4, #12]
 8003952:	2302      	movs	r3, #2
 8003954:	4313      	orrs	r3, r2
 8003956:	6023      	str	r3, [r4, #0]
 8003958:	782b      	ldrb	r3, [r5, #0]
 800395a:	2b2e      	cmp	r3, #46	; 0x2e
 800395c:	d10a      	bne.n	8003974 <_svfiprintf_r+0x130>
 800395e:	786b      	ldrb	r3, [r5, #1]
 8003960:	2b2a      	cmp	r3, #42	; 0x2a
 8003962:	d135      	bne.n	80039d0 <_svfiprintf_r+0x18c>
 8003964:	9b07      	ldr	r3, [sp, #28]
 8003966:	3502      	adds	r5, #2
 8003968:	1d1a      	adds	r2, r3, #4
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	9207      	str	r2, [sp, #28]
 800396e:	2b00      	cmp	r3, #0
 8003970:	db2b      	blt.n	80039ca <_svfiprintf_r+0x186>
 8003972:	9309      	str	r3, [sp, #36]	; 0x24
 8003974:	4e2f      	ldr	r6, [pc, #188]	; (8003a34 <_svfiprintf_r+0x1f0>)
 8003976:	2203      	movs	r2, #3
 8003978:	0030      	movs	r0, r6
 800397a:	7829      	ldrb	r1, [r5, #0]
 800397c:	f000 fa08 	bl	8003d90 <memchr>
 8003980:	2800      	cmp	r0, #0
 8003982:	d006      	beq.n	8003992 <_svfiprintf_r+0x14e>
 8003984:	2340      	movs	r3, #64	; 0x40
 8003986:	1b80      	subs	r0, r0, r6
 8003988:	4083      	lsls	r3, r0
 800398a:	6822      	ldr	r2, [r4, #0]
 800398c:	3501      	adds	r5, #1
 800398e:	4313      	orrs	r3, r2
 8003990:	6023      	str	r3, [r4, #0]
 8003992:	7829      	ldrb	r1, [r5, #0]
 8003994:	2206      	movs	r2, #6
 8003996:	4828      	ldr	r0, [pc, #160]	; (8003a38 <_svfiprintf_r+0x1f4>)
 8003998:	1c6e      	adds	r6, r5, #1
 800399a:	7621      	strb	r1, [r4, #24]
 800399c:	f000 f9f8 	bl	8003d90 <memchr>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d03c      	beq.n	8003a1e <_svfiprintf_r+0x1da>
 80039a4:	4b25      	ldr	r3, [pc, #148]	; (8003a3c <_svfiprintf_r+0x1f8>)
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d125      	bne.n	80039f6 <_svfiprintf_r+0x1b2>
 80039aa:	2207      	movs	r2, #7
 80039ac:	9b07      	ldr	r3, [sp, #28]
 80039ae:	3307      	adds	r3, #7
 80039b0:	4393      	bics	r3, r2
 80039b2:	3308      	adds	r3, #8
 80039b4:	9307      	str	r3, [sp, #28]
 80039b6:	6963      	ldr	r3, [r4, #20]
 80039b8:	9a04      	ldr	r2, [sp, #16]
 80039ba:	189b      	adds	r3, r3, r2
 80039bc:	6163      	str	r3, [r4, #20]
 80039be:	e764      	b.n	800388a <_svfiprintf_r+0x46>
 80039c0:	4343      	muls	r3, r0
 80039c2:	0035      	movs	r5, r6
 80039c4:	2101      	movs	r1, #1
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	e7a6      	b.n	8003918 <_svfiprintf_r+0xd4>
 80039ca:	2301      	movs	r3, #1
 80039cc:	425b      	negs	r3, r3
 80039ce:	e7d0      	b.n	8003972 <_svfiprintf_r+0x12e>
 80039d0:	2300      	movs	r3, #0
 80039d2:	200a      	movs	r0, #10
 80039d4:	001a      	movs	r2, r3
 80039d6:	3501      	adds	r5, #1
 80039d8:	6063      	str	r3, [r4, #4]
 80039da:	7829      	ldrb	r1, [r5, #0]
 80039dc:	1c6e      	adds	r6, r5, #1
 80039de:	3930      	subs	r1, #48	; 0x30
 80039e0:	2909      	cmp	r1, #9
 80039e2:	d903      	bls.n	80039ec <_svfiprintf_r+0x1a8>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d0c5      	beq.n	8003974 <_svfiprintf_r+0x130>
 80039e8:	9209      	str	r2, [sp, #36]	; 0x24
 80039ea:	e7c3      	b.n	8003974 <_svfiprintf_r+0x130>
 80039ec:	4342      	muls	r2, r0
 80039ee:	0035      	movs	r5, r6
 80039f0:	2301      	movs	r3, #1
 80039f2:	1852      	adds	r2, r2, r1
 80039f4:	e7f1      	b.n	80039da <_svfiprintf_r+0x196>
 80039f6:	aa07      	add	r2, sp, #28
 80039f8:	9200      	str	r2, [sp, #0]
 80039fa:	0021      	movs	r1, r4
 80039fc:	003a      	movs	r2, r7
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <_svfiprintf_r+0x1fc>)
 8003a00:	9803      	ldr	r0, [sp, #12]
 8003a02:	e000      	b.n	8003a06 <_svfiprintf_r+0x1c2>
 8003a04:	bf00      	nop
 8003a06:	9004      	str	r0, [sp, #16]
 8003a08:	9b04      	ldr	r3, [sp, #16]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	d1d3      	bne.n	80039b6 <_svfiprintf_r+0x172>
 8003a0e:	89bb      	ldrh	r3, [r7, #12]
 8003a10:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a12:	065b      	lsls	r3, r3, #25
 8003a14:	d400      	bmi.n	8003a18 <_svfiprintf_r+0x1d4>
 8003a16:	e72c      	b.n	8003872 <_svfiprintf_r+0x2e>
 8003a18:	2001      	movs	r0, #1
 8003a1a:	4240      	negs	r0, r0
 8003a1c:	e729      	b.n	8003872 <_svfiprintf_r+0x2e>
 8003a1e:	aa07      	add	r2, sp, #28
 8003a20:	9200      	str	r2, [sp, #0]
 8003a22:	0021      	movs	r1, r4
 8003a24:	003a      	movs	r2, r7
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <_svfiprintf_r+0x1fc>)
 8003a28:	9803      	ldr	r0, [sp, #12]
 8003a2a:	f000 f87b 	bl	8003b24 <_printf_i>
 8003a2e:	e7ea      	b.n	8003a06 <_svfiprintf_r+0x1c2>
 8003a30:	08003ed0 	.word	0x08003ed0
 8003a34:	08003ed6 	.word	0x08003ed6
 8003a38:	08003eda 	.word	0x08003eda
 8003a3c:	00000000 	.word	0x00000000
 8003a40:	08003781 	.word	0x08003781

08003a44 <_printf_common>:
 8003a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a46:	0016      	movs	r6, r2
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	688a      	ldr	r2, [r1, #8]
 8003a4c:	690b      	ldr	r3, [r1, #16]
 8003a4e:	000c      	movs	r4, r1
 8003a50:	9000      	str	r0, [sp, #0]
 8003a52:	4293      	cmp	r3, r2
 8003a54:	da00      	bge.n	8003a58 <_printf_common+0x14>
 8003a56:	0013      	movs	r3, r2
 8003a58:	0022      	movs	r2, r4
 8003a5a:	6033      	str	r3, [r6, #0]
 8003a5c:	3243      	adds	r2, #67	; 0x43
 8003a5e:	7812      	ldrb	r2, [r2, #0]
 8003a60:	2a00      	cmp	r2, #0
 8003a62:	d001      	beq.n	8003a68 <_printf_common+0x24>
 8003a64:	3301      	adds	r3, #1
 8003a66:	6033      	str	r3, [r6, #0]
 8003a68:	6823      	ldr	r3, [r4, #0]
 8003a6a:	069b      	lsls	r3, r3, #26
 8003a6c:	d502      	bpl.n	8003a74 <_printf_common+0x30>
 8003a6e:	6833      	ldr	r3, [r6, #0]
 8003a70:	3302      	adds	r3, #2
 8003a72:	6033      	str	r3, [r6, #0]
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	2306      	movs	r3, #6
 8003a78:	0015      	movs	r5, r2
 8003a7a:	401d      	ands	r5, r3
 8003a7c:	421a      	tst	r2, r3
 8003a7e:	d027      	beq.n	8003ad0 <_printf_common+0x8c>
 8003a80:	0023      	movs	r3, r4
 8003a82:	3343      	adds	r3, #67	; 0x43
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	1e5a      	subs	r2, r3, #1
 8003a88:	4193      	sbcs	r3, r2
 8003a8a:	6822      	ldr	r2, [r4, #0]
 8003a8c:	0692      	lsls	r2, r2, #26
 8003a8e:	d430      	bmi.n	8003af2 <_printf_common+0xae>
 8003a90:	0022      	movs	r2, r4
 8003a92:	9901      	ldr	r1, [sp, #4]
 8003a94:	9800      	ldr	r0, [sp, #0]
 8003a96:	9d08      	ldr	r5, [sp, #32]
 8003a98:	3243      	adds	r2, #67	; 0x43
 8003a9a:	47a8      	blx	r5
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d025      	beq.n	8003aec <_printf_common+0xa8>
 8003aa0:	2206      	movs	r2, #6
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	2500      	movs	r5, #0
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d105      	bne.n	8003ab8 <_printf_common+0x74>
 8003aac:	6833      	ldr	r3, [r6, #0]
 8003aae:	68e5      	ldr	r5, [r4, #12]
 8003ab0:	1aed      	subs	r5, r5, r3
 8003ab2:	43eb      	mvns	r3, r5
 8003ab4:	17db      	asrs	r3, r3, #31
 8003ab6:	401d      	ands	r5, r3
 8003ab8:	68a3      	ldr	r3, [r4, #8]
 8003aba:	6922      	ldr	r2, [r4, #16]
 8003abc:	4293      	cmp	r3, r2
 8003abe:	dd01      	ble.n	8003ac4 <_printf_common+0x80>
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	18ed      	adds	r5, r5, r3
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	42b5      	cmp	r5, r6
 8003ac8:	d120      	bne.n	8003b0c <_printf_common+0xc8>
 8003aca:	2000      	movs	r0, #0
 8003acc:	e010      	b.n	8003af0 <_printf_common+0xac>
 8003ace:	3501      	adds	r5, #1
 8003ad0:	68e3      	ldr	r3, [r4, #12]
 8003ad2:	6832      	ldr	r2, [r6, #0]
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	42ab      	cmp	r3, r5
 8003ad8:	ddd2      	ble.n	8003a80 <_printf_common+0x3c>
 8003ada:	0022      	movs	r2, r4
 8003adc:	2301      	movs	r3, #1
 8003ade:	9901      	ldr	r1, [sp, #4]
 8003ae0:	9800      	ldr	r0, [sp, #0]
 8003ae2:	9f08      	ldr	r7, [sp, #32]
 8003ae4:	3219      	adds	r2, #25
 8003ae6:	47b8      	blx	r7
 8003ae8:	3001      	adds	r0, #1
 8003aea:	d1f0      	bne.n	8003ace <_printf_common+0x8a>
 8003aec:	2001      	movs	r0, #1
 8003aee:	4240      	negs	r0, r0
 8003af0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003af2:	2030      	movs	r0, #48	; 0x30
 8003af4:	18e1      	adds	r1, r4, r3
 8003af6:	3143      	adds	r1, #67	; 0x43
 8003af8:	7008      	strb	r0, [r1, #0]
 8003afa:	0021      	movs	r1, r4
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	3145      	adds	r1, #69	; 0x45
 8003b00:	7809      	ldrb	r1, [r1, #0]
 8003b02:	18a2      	adds	r2, r4, r2
 8003b04:	3243      	adds	r2, #67	; 0x43
 8003b06:	3302      	adds	r3, #2
 8003b08:	7011      	strb	r1, [r2, #0]
 8003b0a:	e7c1      	b.n	8003a90 <_printf_common+0x4c>
 8003b0c:	0022      	movs	r2, r4
 8003b0e:	2301      	movs	r3, #1
 8003b10:	9901      	ldr	r1, [sp, #4]
 8003b12:	9800      	ldr	r0, [sp, #0]
 8003b14:	9f08      	ldr	r7, [sp, #32]
 8003b16:	321a      	adds	r2, #26
 8003b18:	47b8      	blx	r7
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	d0e6      	beq.n	8003aec <_printf_common+0xa8>
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7d1      	b.n	8003ac6 <_printf_common+0x82>
	...

08003b24 <_printf_i>:
 8003b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b26:	b08b      	sub	sp, #44	; 0x2c
 8003b28:	9206      	str	r2, [sp, #24]
 8003b2a:	000a      	movs	r2, r1
 8003b2c:	3243      	adds	r2, #67	; 0x43
 8003b2e:	9307      	str	r3, [sp, #28]
 8003b30:	9005      	str	r0, [sp, #20]
 8003b32:	9204      	str	r2, [sp, #16]
 8003b34:	7e0a      	ldrb	r2, [r1, #24]
 8003b36:	000c      	movs	r4, r1
 8003b38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b3a:	2a78      	cmp	r2, #120	; 0x78
 8003b3c:	d809      	bhi.n	8003b52 <_printf_i+0x2e>
 8003b3e:	2a62      	cmp	r2, #98	; 0x62
 8003b40:	d80b      	bhi.n	8003b5a <_printf_i+0x36>
 8003b42:	2a00      	cmp	r2, #0
 8003b44:	d100      	bne.n	8003b48 <_printf_i+0x24>
 8003b46:	e0be      	b.n	8003cc6 <_printf_i+0x1a2>
 8003b48:	497c      	ldr	r1, [pc, #496]	; (8003d3c <_printf_i+0x218>)
 8003b4a:	9103      	str	r1, [sp, #12]
 8003b4c:	2a58      	cmp	r2, #88	; 0x58
 8003b4e:	d100      	bne.n	8003b52 <_printf_i+0x2e>
 8003b50:	e093      	b.n	8003c7a <_printf_i+0x156>
 8003b52:	0026      	movs	r6, r4
 8003b54:	3642      	adds	r6, #66	; 0x42
 8003b56:	7032      	strb	r2, [r6, #0]
 8003b58:	e022      	b.n	8003ba0 <_printf_i+0x7c>
 8003b5a:	0010      	movs	r0, r2
 8003b5c:	3863      	subs	r0, #99	; 0x63
 8003b5e:	2815      	cmp	r0, #21
 8003b60:	d8f7      	bhi.n	8003b52 <_printf_i+0x2e>
 8003b62:	f7fc facf 	bl	8000104 <__gnu_thumb1_case_shi>
 8003b66:	0016      	.short	0x0016
 8003b68:	fff6001f 	.word	0xfff6001f
 8003b6c:	fff6fff6 	.word	0xfff6fff6
 8003b70:	001ffff6 	.word	0x001ffff6
 8003b74:	fff6fff6 	.word	0xfff6fff6
 8003b78:	fff6fff6 	.word	0xfff6fff6
 8003b7c:	003600a3 	.word	0x003600a3
 8003b80:	fff60083 	.word	0xfff60083
 8003b84:	00b4fff6 	.word	0x00b4fff6
 8003b88:	0036fff6 	.word	0x0036fff6
 8003b8c:	fff6fff6 	.word	0xfff6fff6
 8003b90:	0087      	.short	0x0087
 8003b92:	0026      	movs	r6, r4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	3642      	adds	r6, #66	; 0x42
 8003b98:	1d11      	adds	r1, r2, #4
 8003b9a:	6019      	str	r1, [r3, #0]
 8003b9c:	6813      	ldr	r3, [r2, #0]
 8003b9e:	7033      	strb	r3, [r6, #0]
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e0a2      	b.n	8003cea <_printf_i+0x1c6>
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	6809      	ldr	r1, [r1, #0]
 8003ba8:	1d02      	adds	r2, r0, #4
 8003baa:	060d      	lsls	r5, r1, #24
 8003bac:	d50b      	bpl.n	8003bc6 <_printf_i+0xa2>
 8003bae:	6805      	ldr	r5, [r0, #0]
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	2d00      	cmp	r5, #0
 8003bb4:	da03      	bge.n	8003bbe <_printf_i+0x9a>
 8003bb6:	232d      	movs	r3, #45	; 0x2d
 8003bb8:	9a04      	ldr	r2, [sp, #16]
 8003bba:	426d      	negs	r5, r5
 8003bbc:	7013      	strb	r3, [r2, #0]
 8003bbe:	4b5f      	ldr	r3, [pc, #380]	; (8003d3c <_printf_i+0x218>)
 8003bc0:	270a      	movs	r7, #10
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	e01b      	b.n	8003bfe <_printf_i+0xda>
 8003bc6:	6805      	ldr	r5, [r0, #0]
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	0649      	lsls	r1, r1, #25
 8003bcc:	d5f1      	bpl.n	8003bb2 <_printf_i+0x8e>
 8003bce:	b22d      	sxth	r5, r5
 8003bd0:	e7ef      	b.n	8003bb2 <_printf_i+0x8e>
 8003bd2:	680d      	ldr	r5, [r1, #0]
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	1d08      	adds	r0, r1, #4
 8003bd8:	6018      	str	r0, [r3, #0]
 8003bda:	062e      	lsls	r6, r5, #24
 8003bdc:	d501      	bpl.n	8003be2 <_printf_i+0xbe>
 8003bde:	680d      	ldr	r5, [r1, #0]
 8003be0:	e003      	b.n	8003bea <_printf_i+0xc6>
 8003be2:	066d      	lsls	r5, r5, #25
 8003be4:	d5fb      	bpl.n	8003bde <_printf_i+0xba>
 8003be6:	680d      	ldr	r5, [r1, #0]
 8003be8:	b2ad      	uxth	r5, r5
 8003bea:	4b54      	ldr	r3, [pc, #336]	; (8003d3c <_printf_i+0x218>)
 8003bec:	2708      	movs	r7, #8
 8003bee:	9303      	str	r3, [sp, #12]
 8003bf0:	2a6f      	cmp	r2, #111	; 0x6f
 8003bf2:	d000      	beq.n	8003bf6 <_printf_i+0xd2>
 8003bf4:	3702      	adds	r7, #2
 8003bf6:	0023      	movs	r3, r4
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	3343      	adds	r3, #67	; 0x43
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	6863      	ldr	r3, [r4, #4]
 8003c00:	60a3      	str	r3, [r4, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	db03      	blt.n	8003c0e <_printf_i+0xea>
 8003c06:	2104      	movs	r1, #4
 8003c08:	6822      	ldr	r2, [r4, #0]
 8003c0a:	438a      	bics	r2, r1
 8003c0c:	6022      	str	r2, [r4, #0]
 8003c0e:	2d00      	cmp	r5, #0
 8003c10:	d102      	bne.n	8003c18 <_printf_i+0xf4>
 8003c12:	9e04      	ldr	r6, [sp, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00c      	beq.n	8003c32 <_printf_i+0x10e>
 8003c18:	9e04      	ldr	r6, [sp, #16]
 8003c1a:	0028      	movs	r0, r5
 8003c1c:	0039      	movs	r1, r7
 8003c1e:	f7fc fb01 	bl	8000224 <__aeabi_uidivmod>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	3e01      	subs	r6, #1
 8003c26:	5c5b      	ldrb	r3, [r3, r1]
 8003c28:	7033      	strb	r3, [r6, #0]
 8003c2a:	002b      	movs	r3, r5
 8003c2c:	0005      	movs	r5, r0
 8003c2e:	429f      	cmp	r7, r3
 8003c30:	d9f3      	bls.n	8003c1a <_printf_i+0xf6>
 8003c32:	2f08      	cmp	r7, #8
 8003c34:	d109      	bne.n	8003c4a <_printf_i+0x126>
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	07db      	lsls	r3, r3, #31
 8003c3a:	d506      	bpl.n	8003c4a <_printf_i+0x126>
 8003c3c:	6862      	ldr	r2, [r4, #4]
 8003c3e:	6923      	ldr	r3, [r4, #16]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	dc02      	bgt.n	8003c4a <_printf_i+0x126>
 8003c44:	2330      	movs	r3, #48	; 0x30
 8003c46:	3e01      	subs	r6, #1
 8003c48:	7033      	strb	r3, [r6, #0]
 8003c4a:	9b04      	ldr	r3, [sp, #16]
 8003c4c:	1b9b      	subs	r3, r3, r6
 8003c4e:	6123      	str	r3, [r4, #16]
 8003c50:	9b07      	ldr	r3, [sp, #28]
 8003c52:	0021      	movs	r1, r4
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	9805      	ldr	r0, [sp, #20]
 8003c58:	9b06      	ldr	r3, [sp, #24]
 8003c5a:	aa09      	add	r2, sp, #36	; 0x24
 8003c5c:	f7ff fef2 	bl	8003a44 <_printf_common>
 8003c60:	3001      	adds	r0, #1
 8003c62:	d147      	bne.n	8003cf4 <_printf_i+0x1d0>
 8003c64:	2001      	movs	r0, #1
 8003c66:	4240      	negs	r0, r0
 8003c68:	b00b      	add	sp, #44	; 0x2c
 8003c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	6809      	ldr	r1, [r1, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	6022      	str	r2, [r4, #0]
 8003c74:	2278      	movs	r2, #120	; 0x78
 8003c76:	4932      	ldr	r1, [pc, #200]	; (8003d40 <_printf_i+0x21c>)
 8003c78:	9103      	str	r1, [sp, #12]
 8003c7a:	0021      	movs	r1, r4
 8003c7c:	3145      	adds	r1, #69	; 0x45
 8003c7e:	700a      	strb	r2, [r1, #0]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	6822      	ldr	r2, [r4, #0]
 8003c84:	c920      	ldmia	r1!, {r5}
 8003c86:	0610      	lsls	r0, r2, #24
 8003c88:	d402      	bmi.n	8003c90 <_printf_i+0x16c>
 8003c8a:	0650      	lsls	r0, r2, #25
 8003c8c:	d500      	bpl.n	8003c90 <_printf_i+0x16c>
 8003c8e:	b2ad      	uxth	r5, r5
 8003c90:	6019      	str	r1, [r3, #0]
 8003c92:	07d3      	lsls	r3, r2, #31
 8003c94:	d502      	bpl.n	8003c9c <_printf_i+0x178>
 8003c96:	2320      	movs	r3, #32
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	6023      	str	r3, [r4, #0]
 8003c9c:	2710      	movs	r7, #16
 8003c9e:	2d00      	cmp	r5, #0
 8003ca0:	d1a9      	bne.n	8003bf6 <_printf_i+0xd2>
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	4393      	bics	r3, r2
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	e7a4      	b.n	8003bf6 <_printf_i+0xd2>
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	680d      	ldr	r5, [r1, #0]
 8003cb0:	1d10      	adds	r0, r2, #4
 8003cb2:	6949      	ldr	r1, [r1, #20]
 8003cb4:	6018      	str	r0, [r3, #0]
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	062e      	lsls	r6, r5, #24
 8003cba:	d501      	bpl.n	8003cc0 <_printf_i+0x19c>
 8003cbc:	6019      	str	r1, [r3, #0]
 8003cbe:	e002      	b.n	8003cc6 <_printf_i+0x1a2>
 8003cc0:	066d      	lsls	r5, r5, #25
 8003cc2:	d5fb      	bpl.n	8003cbc <_printf_i+0x198>
 8003cc4:	8019      	strh	r1, [r3, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	9e04      	ldr	r6, [sp, #16]
 8003cca:	6123      	str	r3, [r4, #16]
 8003ccc:	e7c0      	b.n	8003c50 <_printf_i+0x12c>
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	1d11      	adds	r1, r2, #4
 8003cd2:	6019      	str	r1, [r3, #0]
 8003cd4:	6816      	ldr	r6, [r2, #0]
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	0030      	movs	r0, r6
 8003cda:	6862      	ldr	r2, [r4, #4]
 8003cdc:	f000 f858 	bl	8003d90 <memchr>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d001      	beq.n	8003ce8 <_printf_i+0x1c4>
 8003ce4:	1b80      	subs	r0, r0, r6
 8003ce6:	6060      	str	r0, [r4, #4]
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	6123      	str	r3, [r4, #16]
 8003cec:	2300      	movs	r3, #0
 8003cee:	9a04      	ldr	r2, [sp, #16]
 8003cf0:	7013      	strb	r3, [r2, #0]
 8003cf2:	e7ad      	b.n	8003c50 <_printf_i+0x12c>
 8003cf4:	0032      	movs	r2, r6
 8003cf6:	6923      	ldr	r3, [r4, #16]
 8003cf8:	9906      	ldr	r1, [sp, #24]
 8003cfa:	9805      	ldr	r0, [sp, #20]
 8003cfc:	9d07      	ldr	r5, [sp, #28]
 8003cfe:	47a8      	blx	r5
 8003d00:	3001      	adds	r0, #1
 8003d02:	d0af      	beq.n	8003c64 <_printf_i+0x140>
 8003d04:	6823      	ldr	r3, [r4, #0]
 8003d06:	079b      	lsls	r3, r3, #30
 8003d08:	d415      	bmi.n	8003d36 <_printf_i+0x212>
 8003d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d0c:	68e0      	ldr	r0, [r4, #12]
 8003d0e:	4298      	cmp	r0, r3
 8003d10:	daaa      	bge.n	8003c68 <_printf_i+0x144>
 8003d12:	0018      	movs	r0, r3
 8003d14:	e7a8      	b.n	8003c68 <_printf_i+0x144>
 8003d16:	0022      	movs	r2, r4
 8003d18:	2301      	movs	r3, #1
 8003d1a:	9906      	ldr	r1, [sp, #24]
 8003d1c:	9805      	ldr	r0, [sp, #20]
 8003d1e:	9e07      	ldr	r6, [sp, #28]
 8003d20:	3219      	adds	r2, #25
 8003d22:	47b0      	blx	r6
 8003d24:	3001      	adds	r0, #1
 8003d26:	d09d      	beq.n	8003c64 <_printf_i+0x140>
 8003d28:	3501      	adds	r5, #1
 8003d2a:	68e3      	ldr	r3, [r4, #12]
 8003d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	42ab      	cmp	r3, r5
 8003d32:	dcf0      	bgt.n	8003d16 <_printf_i+0x1f2>
 8003d34:	e7e9      	b.n	8003d0a <_printf_i+0x1e6>
 8003d36:	2500      	movs	r5, #0
 8003d38:	e7f7      	b.n	8003d2a <_printf_i+0x206>
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	08003ee1 	.word	0x08003ee1
 8003d40:	08003ef2 	.word	0x08003ef2

08003d44 <memmove>:
 8003d44:	b510      	push	{r4, lr}
 8003d46:	4288      	cmp	r0, r1
 8003d48:	d902      	bls.n	8003d50 <memmove+0xc>
 8003d4a:	188b      	adds	r3, r1, r2
 8003d4c:	4298      	cmp	r0, r3
 8003d4e:	d303      	bcc.n	8003d58 <memmove+0x14>
 8003d50:	2300      	movs	r3, #0
 8003d52:	e007      	b.n	8003d64 <memmove+0x20>
 8003d54:	5c8b      	ldrb	r3, [r1, r2]
 8003d56:	5483      	strb	r3, [r0, r2]
 8003d58:	3a01      	subs	r2, #1
 8003d5a:	d2fb      	bcs.n	8003d54 <memmove+0x10>
 8003d5c:	bd10      	pop	{r4, pc}
 8003d5e:	5ccc      	ldrb	r4, [r1, r3]
 8003d60:	54c4      	strb	r4, [r0, r3]
 8003d62:	3301      	adds	r3, #1
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1fa      	bne.n	8003d5e <memmove+0x1a>
 8003d68:	e7f8      	b.n	8003d5c <memmove+0x18>
	...

08003d6c <_sbrk_r>:
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	b570      	push	{r4, r5, r6, lr}
 8003d70:	4d06      	ldr	r5, [pc, #24]	; (8003d8c <_sbrk_r+0x20>)
 8003d72:	0004      	movs	r4, r0
 8003d74:	0008      	movs	r0, r1
 8003d76:	602b      	str	r3, [r5, #0]
 8003d78:	f7fc fef6 	bl	8000b68 <_sbrk>
 8003d7c:	1c43      	adds	r3, r0, #1
 8003d7e:	d103      	bne.n	8003d88 <_sbrk_r+0x1c>
 8003d80:	682b      	ldr	r3, [r5, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d000      	beq.n	8003d88 <_sbrk_r+0x1c>
 8003d86:	6023      	str	r3, [r4, #0]
 8003d88:	bd70      	pop	{r4, r5, r6, pc}
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	200002e8 	.word	0x200002e8

08003d90 <memchr>:
 8003d90:	b2c9      	uxtb	r1, r1
 8003d92:	1882      	adds	r2, r0, r2
 8003d94:	4290      	cmp	r0, r2
 8003d96:	d101      	bne.n	8003d9c <memchr+0xc>
 8003d98:	2000      	movs	r0, #0
 8003d9a:	4770      	bx	lr
 8003d9c:	7803      	ldrb	r3, [r0, #0]
 8003d9e:	428b      	cmp	r3, r1
 8003da0:	d0fb      	beq.n	8003d9a <memchr+0xa>
 8003da2:	3001      	adds	r0, #1
 8003da4:	e7f6      	b.n	8003d94 <memchr+0x4>

08003da6 <memcpy>:
 8003da6:	2300      	movs	r3, #0
 8003da8:	b510      	push	{r4, lr}
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d100      	bne.n	8003db0 <memcpy+0xa>
 8003dae:	bd10      	pop	{r4, pc}
 8003db0:	5ccc      	ldrb	r4, [r1, r3]
 8003db2:	54c4      	strb	r4, [r0, r3]
 8003db4:	3301      	adds	r3, #1
 8003db6:	e7f8      	b.n	8003daa <memcpy+0x4>

08003db8 <_realloc_r>:
 8003db8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dba:	0007      	movs	r7, r0
 8003dbc:	000e      	movs	r6, r1
 8003dbe:	0014      	movs	r4, r2
 8003dc0:	2900      	cmp	r1, #0
 8003dc2:	d105      	bne.n	8003dd0 <_realloc_r+0x18>
 8003dc4:	0011      	movs	r1, r2
 8003dc6:	f7ff fc49 	bl	800365c <_malloc_r>
 8003dca:	0005      	movs	r5, r0
 8003dcc:	0028      	movs	r0, r5
 8003dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003dd0:	2a00      	cmp	r2, #0
 8003dd2:	d103      	bne.n	8003ddc <_realloc_r+0x24>
 8003dd4:	f7ff fbd6 	bl	8003584 <_free_r>
 8003dd8:	0025      	movs	r5, r4
 8003dda:	e7f7      	b.n	8003dcc <_realloc_r+0x14>
 8003ddc:	f000 f81b 	bl	8003e16 <_malloc_usable_size_r>
 8003de0:	9001      	str	r0, [sp, #4]
 8003de2:	4284      	cmp	r4, r0
 8003de4:	d803      	bhi.n	8003dee <_realloc_r+0x36>
 8003de6:	0035      	movs	r5, r6
 8003de8:	0843      	lsrs	r3, r0, #1
 8003dea:	42a3      	cmp	r3, r4
 8003dec:	d3ee      	bcc.n	8003dcc <_realloc_r+0x14>
 8003dee:	0021      	movs	r1, r4
 8003df0:	0038      	movs	r0, r7
 8003df2:	f7ff fc33 	bl	800365c <_malloc_r>
 8003df6:	1e05      	subs	r5, r0, #0
 8003df8:	d0e8      	beq.n	8003dcc <_realloc_r+0x14>
 8003dfa:	9b01      	ldr	r3, [sp, #4]
 8003dfc:	0022      	movs	r2, r4
 8003dfe:	429c      	cmp	r4, r3
 8003e00:	d900      	bls.n	8003e04 <_realloc_r+0x4c>
 8003e02:	001a      	movs	r2, r3
 8003e04:	0031      	movs	r1, r6
 8003e06:	0028      	movs	r0, r5
 8003e08:	f7ff ffcd 	bl	8003da6 <memcpy>
 8003e0c:	0031      	movs	r1, r6
 8003e0e:	0038      	movs	r0, r7
 8003e10:	f7ff fbb8 	bl	8003584 <_free_r>
 8003e14:	e7da      	b.n	8003dcc <_realloc_r+0x14>

08003e16 <_malloc_usable_size_r>:
 8003e16:	1f0b      	subs	r3, r1, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	1f18      	subs	r0, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	da01      	bge.n	8003e24 <_malloc_usable_size_r+0xe>
 8003e20:	580b      	ldr	r3, [r1, r0]
 8003e22:	18c0      	adds	r0, r0, r3
 8003e24:	4770      	bx	lr
	...

08003e28 <_init>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr

08003e34 <_fini>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr
