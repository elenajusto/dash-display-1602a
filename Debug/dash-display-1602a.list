
dash-display-1602a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005e64  08005e64  00015e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fe0  08005fe0  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005fe0  08005fe0  00015fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fe8  08005fe8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fe8  08005fe8  00015fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000088  08006078  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08006078  00020330  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f48c  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000241c  00000000  00000000  0002f57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c08  00000000  00000000  000319a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000958  00000000  00000000  000325a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000189e0  00000000  00000000  00032f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ddc  00000000  00000000  0004b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099d49  00000000  00000000  0005c6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000304c  00000000  00000000  000f6408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f9454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005e4c 	.word	0x08005e4c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08005e4c 	.word	0x08005e4c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 ff86 	bl	8001384 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 ff81 	bl	8001384 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__aeabi_dadd>:
 80005ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ee:	464f      	mov	r7, r9
 80005f0:	4646      	mov	r6, r8
 80005f2:	46d6      	mov	lr, sl
 80005f4:	0004      	movs	r4, r0
 80005f6:	b5c0      	push	{r6, r7, lr}
 80005f8:	001f      	movs	r7, r3
 80005fa:	030b      	lsls	r3, r1, #12
 80005fc:	0010      	movs	r0, r2
 80005fe:	004e      	lsls	r6, r1, #1
 8000600:	0a5b      	lsrs	r3, r3, #9
 8000602:	0fcd      	lsrs	r5, r1, #31
 8000604:	0f61      	lsrs	r1, r4, #29
 8000606:	007a      	lsls	r2, r7, #1
 8000608:	4319      	orrs	r1, r3
 800060a:	00e3      	lsls	r3, r4, #3
 800060c:	033c      	lsls	r4, r7, #12
 800060e:	0fff      	lsrs	r7, r7, #31
 8000610:	46bc      	mov	ip, r7
 8000612:	0a64      	lsrs	r4, r4, #9
 8000614:	0f47      	lsrs	r7, r0, #29
 8000616:	4327      	orrs	r7, r4
 8000618:	0d76      	lsrs	r6, r6, #21
 800061a:	0d52      	lsrs	r2, r2, #21
 800061c:	00c0      	lsls	r0, r0, #3
 800061e:	46b9      	mov	r9, r7
 8000620:	4680      	mov	r8, r0
 8000622:	1ab7      	subs	r7, r6, r2
 8000624:	4565      	cmp	r5, ip
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x3e>
 8000628:	e09b      	b.n	8000762 <__aeabi_dadd+0x176>
 800062a:	2f00      	cmp	r7, #0
 800062c:	dc00      	bgt.n	8000630 <__aeabi_dadd+0x44>
 800062e:	e084      	b.n	800073a <__aeabi_dadd+0x14e>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0x4a>
 8000634:	e0be      	b.n	80007b4 <__aeabi_dadd+0x1c8>
 8000636:	4ac8      	ldr	r2, [pc, #800]	; (8000958 <__aeabi_dadd+0x36c>)
 8000638:	4296      	cmp	r6, r2
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x52>
 800063c:	e124      	b.n	8000888 <__aeabi_dadd+0x29c>
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	464c      	mov	r4, r9
 8000642:	0412      	lsls	r2, r2, #16
 8000644:	4314      	orrs	r4, r2
 8000646:	46a1      	mov	r9, r4
 8000648:	2f38      	cmp	r7, #56	; 0x38
 800064a:	dd00      	ble.n	800064e <__aeabi_dadd+0x62>
 800064c:	e167      	b.n	800091e <__aeabi_dadd+0x332>
 800064e:	2f1f      	cmp	r7, #31
 8000650:	dd00      	ble.n	8000654 <__aeabi_dadd+0x68>
 8000652:	e1d6      	b.n	8000a02 <__aeabi_dadd+0x416>
 8000654:	2220      	movs	r2, #32
 8000656:	464c      	mov	r4, r9
 8000658:	1bd2      	subs	r2, r2, r7
 800065a:	4094      	lsls	r4, r2
 800065c:	46a2      	mov	sl, r4
 800065e:	4644      	mov	r4, r8
 8000660:	40fc      	lsrs	r4, r7
 8000662:	0020      	movs	r0, r4
 8000664:	4654      	mov	r4, sl
 8000666:	4304      	orrs	r4, r0
 8000668:	4640      	mov	r0, r8
 800066a:	4090      	lsls	r0, r2
 800066c:	1e42      	subs	r2, r0, #1
 800066e:	4190      	sbcs	r0, r2
 8000670:	464a      	mov	r2, r9
 8000672:	40fa      	lsrs	r2, r7
 8000674:	4304      	orrs	r4, r0
 8000676:	1a89      	subs	r1, r1, r2
 8000678:	1b1c      	subs	r4, r3, r4
 800067a:	42a3      	cmp	r3, r4
 800067c:	4192      	sbcs	r2, r2
 800067e:	4252      	negs	r2, r2
 8000680:	1a8b      	subs	r3, r1, r2
 8000682:	469a      	mov	sl, r3
 8000684:	4653      	mov	r3, sl
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	d400      	bmi.n	800068c <__aeabi_dadd+0xa0>
 800068a:	e0d4      	b.n	8000836 <__aeabi_dadd+0x24a>
 800068c:	4653      	mov	r3, sl
 800068e:	025a      	lsls	r2, r3, #9
 8000690:	0a53      	lsrs	r3, r2, #9
 8000692:	469a      	mov	sl, r3
 8000694:	4653      	mov	r3, sl
 8000696:	2b00      	cmp	r3, #0
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0xb0>
 800069a:	e104      	b.n	80008a6 <__aeabi_dadd+0x2ba>
 800069c:	4650      	mov	r0, sl
 800069e:	f000 fe53 	bl	8001348 <__clzsi2>
 80006a2:	0003      	movs	r3, r0
 80006a4:	3b08      	subs	r3, #8
 80006a6:	2220      	movs	r2, #32
 80006a8:	0020      	movs	r0, r4
 80006aa:	1ad2      	subs	r2, r2, r3
 80006ac:	4651      	mov	r1, sl
 80006ae:	40d0      	lsrs	r0, r2
 80006b0:	4099      	lsls	r1, r3
 80006b2:	0002      	movs	r2, r0
 80006b4:	409c      	lsls	r4, r3
 80006b6:	430a      	orrs	r2, r1
 80006b8:	42b3      	cmp	r3, r6
 80006ba:	da00      	bge.n	80006be <__aeabi_dadd+0xd2>
 80006bc:	e102      	b.n	80008c4 <__aeabi_dadd+0x2d8>
 80006be:	1b9b      	subs	r3, r3, r6
 80006c0:	1c59      	adds	r1, r3, #1
 80006c2:	291f      	cmp	r1, #31
 80006c4:	dd00      	ble.n	80006c8 <__aeabi_dadd+0xdc>
 80006c6:	e0a7      	b.n	8000818 <__aeabi_dadd+0x22c>
 80006c8:	2320      	movs	r3, #32
 80006ca:	0010      	movs	r0, r2
 80006cc:	0026      	movs	r6, r4
 80006ce:	1a5b      	subs	r3, r3, r1
 80006d0:	409c      	lsls	r4, r3
 80006d2:	4098      	lsls	r0, r3
 80006d4:	40ce      	lsrs	r6, r1
 80006d6:	40ca      	lsrs	r2, r1
 80006d8:	1e63      	subs	r3, r4, #1
 80006da:	419c      	sbcs	r4, r3
 80006dc:	4330      	orrs	r0, r6
 80006de:	4692      	mov	sl, r2
 80006e0:	2600      	movs	r6, #0
 80006e2:	4304      	orrs	r4, r0
 80006e4:	0763      	lsls	r3, r4, #29
 80006e6:	d009      	beq.n	80006fc <__aeabi_dadd+0x110>
 80006e8:	230f      	movs	r3, #15
 80006ea:	4023      	ands	r3, r4
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d005      	beq.n	80006fc <__aeabi_dadd+0x110>
 80006f0:	1d23      	adds	r3, r4, #4
 80006f2:	42a3      	cmp	r3, r4
 80006f4:	41a4      	sbcs	r4, r4
 80006f6:	4264      	negs	r4, r4
 80006f8:	44a2      	add	sl, r4
 80006fa:	001c      	movs	r4, r3
 80006fc:	4653      	mov	r3, sl
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	d400      	bmi.n	8000704 <__aeabi_dadd+0x118>
 8000702:	e09b      	b.n	800083c <__aeabi_dadd+0x250>
 8000704:	4b94      	ldr	r3, [pc, #592]	; (8000958 <__aeabi_dadd+0x36c>)
 8000706:	3601      	adds	r6, #1
 8000708:	429e      	cmp	r6, r3
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x122>
 800070c:	e0b8      	b.n	8000880 <__aeabi_dadd+0x294>
 800070e:	4653      	mov	r3, sl
 8000710:	4992      	ldr	r1, [pc, #584]	; (800095c <__aeabi_dadd+0x370>)
 8000712:	08e4      	lsrs	r4, r4, #3
 8000714:	400b      	ands	r3, r1
 8000716:	0019      	movs	r1, r3
 8000718:	075b      	lsls	r3, r3, #29
 800071a:	4323      	orrs	r3, r4
 800071c:	0572      	lsls	r2, r6, #21
 800071e:	024c      	lsls	r4, r1, #9
 8000720:	0b24      	lsrs	r4, r4, #12
 8000722:	0d52      	lsrs	r2, r2, #21
 8000724:	0512      	lsls	r2, r2, #20
 8000726:	07ed      	lsls	r5, r5, #31
 8000728:	4322      	orrs	r2, r4
 800072a:	432a      	orrs	r2, r5
 800072c:	0018      	movs	r0, r3
 800072e:	0011      	movs	r1, r2
 8000730:	bce0      	pop	{r5, r6, r7}
 8000732:	46ba      	mov	sl, r7
 8000734:	46b1      	mov	r9, r6
 8000736:	46a8      	mov	r8, r5
 8000738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073a:	2f00      	cmp	r7, #0
 800073c:	d048      	beq.n	80007d0 <__aeabi_dadd+0x1e4>
 800073e:	1b97      	subs	r7, r2, r6
 8000740:	2e00      	cmp	r6, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x15a>
 8000744:	e10e      	b.n	8000964 <__aeabi_dadd+0x378>
 8000746:	000c      	movs	r4, r1
 8000748:	431c      	orrs	r4, r3
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x162>
 800074c:	e1b7      	b.n	8000abe <__aeabi_dadd+0x4d2>
 800074e:	1e7c      	subs	r4, r7, #1
 8000750:	2f01      	cmp	r7, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x16a>
 8000754:	e226      	b.n	8000ba4 <__aeabi_dadd+0x5b8>
 8000756:	4d80      	ldr	r5, [pc, #512]	; (8000958 <__aeabi_dadd+0x36c>)
 8000758:	42af      	cmp	r7, r5
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x172>
 800075c:	e1d5      	b.n	8000b0a <__aeabi_dadd+0x51e>
 800075e:	0027      	movs	r7, r4
 8000760:	e107      	b.n	8000972 <__aeabi_dadd+0x386>
 8000762:	2f00      	cmp	r7, #0
 8000764:	dc00      	bgt.n	8000768 <__aeabi_dadd+0x17c>
 8000766:	e0b2      	b.n	80008ce <__aeabi_dadd+0x2e2>
 8000768:	2a00      	cmp	r2, #0
 800076a:	d047      	beq.n	80007fc <__aeabi_dadd+0x210>
 800076c:	4a7a      	ldr	r2, [pc, #488]	; (8000958 <__aeabi_dadd+0x36c>)
 800076e:	4296      	cmp	r6, r2
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x188>
 8000772:	e089      	b.n	8000888 <__aeabi_dadd+0x29c>
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	464c      	mov	r4, r9
 8000778:	0412      	lsls	r2, r2, #16
 800077a:	4314      	orrs	r4, r2
 800077c:	46a1      	mov	r9, r4
 800077e:	2f38      	cmp	r7, #56	; 0x38
 8000780:	dc6b      	bgt.n	800085a <__aeabi_dadd+0x26e>
 8000782:	2f1f      	cmp	r7, #31
 8000784:	dc00      	bgt.n	8000788 <__aeabi_dadd+0x19c>
 8000786:	e16e      	b.n	8000a66 <__aeabi_dadd+0x47a>
 8000788:	003a      	movs	r2, r7
 800078a:	4648      	mov	r0, r9
 800078c:	3a20      	subs	r2, #32
 800078e:	40d0      	lsrs	r0, r2
 8000790:	4684      	mov	ip, r0
 8000792:	2f20      	cmp	r7, #32
 8000794:	d007      	beq.n	80007a6 <__aeabi_dadd+0x1ba>
 8000796:	2240      	movs	r2, #64	; 0x40
 8000798:	4648      	mov	r0, r9
 800079a:	1bd2      	subs	r2, r2, r7
 800079c:	4090      	lsls	r0, r2
 800079e:	0002      	movs	r2, r0
 80007a0:	4640      	mov	r0, r8
 80007a2:	4310      	orrs	r0, r2
 80007a4:	4680      	mov	r8, r0
 80007a6:	4640      	mov	r0, r8
 80007a8:	1e42      	subs	r2, r0, #1
 80007aa:	4190      	sbcs	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	0004      	movs	r4, r0
 80007b0:	4314      	orrs	r4, r2
 80007b2:	e057      	b.n	8000864 <__aeabi_dadd+0x278>
 80007b4:	464a      	mov	r2, r9
 80007b6:	4302      	orrs	r2, r0
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x1d0>
 80007ba:	e103      	b.n	80009c4 <__aeabi_dadd+0x3d8>
 80007bc:	1e7a      	subs	r2, r7, #1
 80007be:	2f01      	cmp	r7, #1
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dadd+0x1d8>
 80007c2:	e193      	b.n	8000aec <__aeabi_dadd+0x500>
 80007c4:	4c64      	ldr	r4, [pc, #400]	; (8000958 <__aeabi_dadd+0x36c>)
 80007c6:	42a7      	cmp	r7, r4
 80007c8:	d100      	bne.n	80007cc <__aeabi_dadd+0x1e0>
 80007ca:	e18a      	b.n	8000ae2 <__aeabi_dadd+0x4f6>
 80007cc:	0017      	movs	r7, r2
 80007ce:	e73b      	b.n	8000648 <__aeabi_dadd+0x5c>
 80007d0:	4c63      	ldr	r4, [pc, #396]	; (8000960 <__aeabi_dadd+0x374>)
 80007d2:	1c72      	adds	r2, r6, #1
 80007d4:	4222      	tst	r2, r4
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x1ee>
 80007d8:	e0e0      	b.n	800099c <__aeabi_dadd+0x3b0>
 80007da:	000a      	movs	r2, r1
 80007dc:	431a      	orrs	r2, r3
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_dadd+0x1f8>
 80007e2:	e174      	b.n	8000ace <__aeabi_dadd+0x4e2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x1fe>
 80007e8:	e1d0      	b.n	8000b8c <__aeabi_dadd+0x5a0>
 80007ea:	464a      	mov	r2, r9
 80007ec:	4302      	orrs	r2, r0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x206>
 80007f0:	e1e3      	b.n	8000bba <__aeabi_dadd+0x5ce>
 80007f2:	074a      	lsls	r2, r1, #29
 80007f4:	08db      	lsrs	r3, r3, #3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	08c9      	lsrs	r1, r1, #3
 80007fa:	e029      	b.n	8000850 <__aeabi_dadd+0x264>
 80007fc:	464a      	mov	r2, r9
 80007fe:	4302      	orrs	r2, r0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x218>
 8000802:	e17d      	b.n	8000b00 <__aeabi_dadd+0x514>
 8000804:	1e7a      	subs	r2, r7, #1
 8000806:	2f01      	cmp	r7, #1
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x220>
 800080a:	e0e0      	b.n	80009ce <__aeabi_dadd+0x3e2>
 800080c:	4c52      	ldr	r4, [pc, #328]	; (8000958 <__aeabi_dadd+0x36c>)
 800080e:	42a7      	cmp	r7, r4
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x228>
 8000812:	e166      	b.n	8000ae2 <__aeabi_dadd+0x4f6>
 8000814:	0017      	movs	r7, r2
 8000816:	e7b2      	b.n	800077e <__aeabi_dadd+0x192>
 8000818:	0010      	movs	r0, r2
 800081a:	3b1f      	subs	r3, #31
 800081c:	40d8      	lsrs	r0, r3
 800081e:	2920      	cmp	r1, #32
 8000820:	d003      	beq.n	800082a <__aeabi_dadd+0x23e>
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	1a5b      	subs	r3, r3, r1
 8000826:	409a      	lsls	r2, r3
 8000828:	4314      	orrs	r4, r2
 800082a:	1e63      	subs	r3, r4, #1
 800082c:	419c      	sbcs	r4, r3
 800082e:	2300      	movs	r3, #0
 8000830:	2600      	movs	r6, #0
 8000832:	469a      	mov	sl, r3
 8000834:	4304      	orrs	r4, r0
 8000836:	0763      	lsls	r3, r4, #29
 8000838:	d000      	beq.n	800083c <__aeabi_dadd+0x250>
 800083a:	e755      	b.n	80006e8 <__aeabi_dadd+0xfc>
 800083c:	4652      	mov	r2, sl
 800083e:	08e3      	lsrs	r3, r4, #3
 8000840:	0752      	lsls	r2, r2, #29
 8000842:	4313      	orrs	r3, r2
 8000844:	4652      	mov	r2, sl
 8000846:	0037      	movs	r7, r6
 8000848:	08d1      	lsrs	r1, r2, #3
 800084a:	4a43      	ldr	r2, [pc, #268]	; (8000958 <__aeabi_dadd+0x36c>)
 800084c:	4297      	cmp	r7, r2
 800084e:	d01f      	beq.n	8000890 <__aeabi_dadd+0x2a4>
 8000850:	0309      	lsls	r1, r1, #12
 8000852:	057a      	lsls	r2, r7, #21
 8000854:	0b0c      	lsrs	r4, r1, #12
 8000856:	0d52      	lsrs	r2, r2, #21
 8000858:	e764      	b.n	8000724 <__aeabi_dadd+0x138>
 800085a:	4642      	mov	r2, r8
 800085c:	464c      	mov	r4, r9
 800085e:	4314      	orrs	r4, r2
 8000860:	1e62      	subs	r2, r4, #1
 8000862:	4194      	sbcs	r4, r2
 8000864:	18e4      	adds	r4, r4, r3
 8000866:	429c      	cmp	r4, r3
 8000868:	4192      	sbcs	r2, r2
 800086a:	4252      	negs	r2, r2
 800086c:	4692      	mov	sl, r2
 800086e:	448a      	add	sl, r1
 8000870:	4653      	mov	r3, sl
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	d5df      	bpl.n	8000836 <__aeabi_dadd+0x24a>
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <__aeabi_dadd+0x36c>)
 8000878:	3601      	adds	r6, #1
 800087a:	429e      	cmp	r6, r3
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x294>
 800087e:	e0b3      	b.n	80009e8 <__aeabi_dadd+0x3fc>
 8000880:	0032      	movs	r2, r6
 8000882:	2400      	movs	r4, #0
 8000884:	2300      	movs	r3, #0
 8000886:	e74d      	b.n	8000724 <__aeabi_dadd+0x138>
 8000888:	074a      	lsls	r2, r1, #29
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	4313      	orrs	r3, r2
 800088e:	08c9      	lsrs	r1, r1, #3
 8000890:	001a      	movs	r2, r3
 8000892:	430a      	orrs	r2, r1
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x2ac>
 8000896:	e200      	b.n	8000c9a <__aeabi_dadd+0x6ae>
 8000898:	2480      	movs	r4, #128	; 0x80
 800089a:	0324      	lsls	r4, r4, #12
 800089c:	430c      	orrs	r4, r1
 800089e:	0324      	lsls	r4, r4, #12
 80008a0:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <__aeabi_dadd+0x36c>)
 80008a2:	0b24      	lsrs	r4, r4, #12
 80008a4:	e73e      	b.n	8000724 <__aeabi_dadd+0x138>
 80008a6:	0020      	movs	r0, r4
 80008a8:	f000 fd4e 	bl	8001348 <__clzsi2>
 80008ac:	0003      	movs	r3, r0
 80008ae:	3318      	adds	r3, #24
 80008b0:	2b1f      	cmp	r3, #31
 80008b2:	dc00      	bgt.n	80008b6 <__aeabi_dadd+0x2ca>
 80008b4:	e6f7      	b.n	80006a6 <__aeabi_dadd+0xba>
 80008b6:	0022      	movs	r2, r4
 80008b8:	3808      	subs	r0, #8
 80008ba:	4082      	lsls	r2, r0
 80008bc:	2400      	movs	r4, #0
 80008be:	42b3      	cmp	r3, r6
 80008c0:	db00      	blt.n	80008c4 <__aeabi_dadd+0x2d8>
 80008c2:	e6fc      	b.n	80006be <__aeabi_dadd+0xd2>
 80008c4:	1af6      	subs	r6, r6, r3
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <__aeabi_dadd+0x370>)
 80008c8:	401a      	ands	r2, r3
 80008ca:	4692      	mov	sl, r2
 80008cc:	e70a      	b.n	80006e4 <__aeabi_dadd+0xf8>
 80008ce:	2f00      	cmp	r7, #0
 80008d0:	d02b      	beq.n	800092a <__aeabi_dadd+0x33e>
 80008d2:	1b97      	subs	r7, r2, r6
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x2ee>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x460>
 80008da:	4c1f      	ldr	r4, [pc, #124]	; (8000958 <__aeabi_dadd+0x36c>)
 80008dc:	42a2      	cmp	r2, r4
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x2f6>
 80008e0:	e11c      	b.n	8000b1c <__aeabi_dadd+0x530>
 80008e2:	2480      	movs	r4, #128	; 0x80
 80008e4:	0424      	lsls	r4, r4, #16
 80008e6:	4321      	orrs	r1, r4
 80008e8:	2f38      	cmp	r7, #56	; 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x302>
 80008ec:	e11e      	b.n	8000b2c <__aeabi_dadd+0x540>
 80008ee:	2f1f      	cmp	r7, #31
 80008f0:	dd00      	ble.n	80008f4 <__aeabi_dadd+0x308>
 80008f2:	e19e      	b.n	8000c32 <__aeabi_dadd+0x646>
 80008f4:	2620      	movs	r6, #32
 80008f6:	000c      	movs	r4, r1
 80008f8:	1bf6      	subs	r6, r6, r7
 80008fa:	0018      	movs	r0, r3
 80008fc:	40b3      	lsls	r3, r6
 80008fe:	40b4      	lsls	r4, r6
 8000900:	40f8      	lsrs	r0, r7
 8000902:	1e5e      	subs	r6, r3, #1
 8000904:	41b3      	sbcs	r3, r6
 8000906:	40f9      	lsrs	r1, r7
 8000908:	4304      	orrs	r4, r0
 800090a:	431c      	orrs	r4, r3
 800090c:	4489      	add	r9, r1
 800090e:	4444      	add	r4, r8
 8000910:	4544      	cmp	r4, r8
 8000912:	419b      	sbcs	r3, r3
 8000914:	425b      	negs	r3, r3
 8000916:	444b      	add	r3, r9
 8000918:	469a      	mov	sl, r3
 800091a:	0016      	movs	r6, r2
 800091c:	e7a8      	b.n	8000870 <__aeabi_dadd+0x284>
 800091e:	4642      	mov	r2, r8
 8000920:	464c      	mov	r4, r9
 8000922:	4314      	orrs	r4, r2
 8000924:	1e62      	subs	r2, r4, #1
 8000926:	4194      	sbcs	r4, r2
 8000928:	e6a6      	b.n	8000678 <__aeabi_dadd+0x8c>
 800092a:	4c0d      	ldr	r4, [pc, #52]	; (8000960 <__aeabi_dadd+0x374>)
 800092c:	1c72      	adds	r2, r6, #1
 800092e:	4222      	tst	r2, r4
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x348>
 8000932:	e0a8      	b.n	8000a86 <__aeabi_dadd+0x49a>
 8000934:	000a      	movs	r2, r1
 8000936:	431a      	orrs	r2, r3
 8000938:	2e00      	cmp	r6, #0
 800093a:	d000      	beq.n	800093e <__aeabi_dadd+0x352>
 800093c:	e10a      	b.n	8000b54 <__aeabi_dadd+0x568>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x358>
 8000942:	e15e      	b.n	8000c02 <__aeabi_dadd+0x616>
 8000944:	464a      	mov	r2, r9
 8000946:	4302      	orrs	r2, r0
 8000948:	d000      	beq.n	800094c <__aeabi_dadd+0x360>
 800094a:	e161      	b.n	8000c10 <__aeabi_dadd+0x624>
 800094c:	074a      	lsls	r2, r1, #29
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	4313      	orrs	r3, r2
 8000952:	08c9      	lsrs	r1, r1, #3
 8000954:	e77c      	b.n	8000850 <__aeabi_dadd+0x264>
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	000007ff 	.word	0x000007ff
 800095c:	ff7fffff 	.word	0xff7fffff
 8000960:	000007fe 	.word	0x000007fe
 8000964:	4ccf      	ldr	r4, [pc, #828]	; (8000ca4 <__aeabi_dadd+0x6b8>)
 8000966:	42a2      	cmp	r2, r4
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x380>
 800096a:	e0ce      	b.n	8000b0a <__aeabi_dadd+0x51e>
 800096c:	2480      	movs	r4, #128	; 0x80
 800096e:	0424      	lsls	r4, r4, #16
 8000970:	4321      	orrs	r1, r4
 8000972:	2f38      	cmp	r7, #56	; 0x38
 8000974:	dc5b      	bgt.n	8000a2e <__aeabi_dadd+0x442>
 8000976:	2f1f      	cmp	r7, #31
 8000978:	dd00      	ble.n	800097c <__aeabi_dadd+0x390>
 800097a:	e0dc      	b.n	8000b36 <__aeabi_dadd+0x54a>
 800097c:	2520      	movs	r5, #32
 800097e:	000c      	movs	r4, r1
 8000980:	1bed      	subs	r5, r5, r7
 8000982:	001e      	movs	r6, r3
 8000984:	40ab      	lsls	r3, r5
 8000986:	40ac      	lsls	r4, r5
 8000988:	40fe      	lsrs	r6, r7
 800098a:	1e5d      	subs	r5, r3, #1
 800098c:	41ab      	sbcs	r3, r5
 800098e:	4334      	orrs	r4, r6
 8000990:	40f9      	lsrs	r1, r7
 8000992:	431c      	orrs	r4, r3
 8000994:	464b      	mov	r3, r9
 8000996:	1a5b      	subs	r3, r3, r1
 8000998:	4699      	mov	r9, r3
 800099a:	e04c      	b.n	8000a36 <__aeabi_dadd+0x44a>
 800099c:	464a      	mov	r2, r9
 800099e:	1a1c      	subs	r4, r3, r0
 80009a0:	1a88      	subs	r0, r1, r2
 80009a2:	42a3      	cmp	r3, r4
 80009a4:	4192      	sbcs	r2, r2
 80009a6:	4252      	negs	r2, r2
 80009a8:	4692      	mov	sl, r2
 80009aa:	0002      	movs	r2, r0
 80009ac:	4650      	mov	r0, sl
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	4692      	mov	sl, r2
 80009b2:	0212      	lsls	r2, r2, #8
 80009b4:	d478      	bmi.n	8000aa8 <__aeabi_dadd+0x4bc>
 80009b6:	4653      	mov	r3, sl
 80009b8:	4323      	orrs	r3, r4
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x3d2>
 80009bc:	e66a      	b.n	8000694 <__aeabi_dadd+0xa8>
 80009be:	2100      	movs	r1, #0
 80009c0:	2500      	movs	r5, #0
 80009c2:	e745      	b.n	8000850 <__aeabi_dadd+0x264>
 80009c4:	074a      	lsls	r2, r1, #29
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	e73d      	b.n	800084a <__aeabi_dadd+0x25e>
 80009ce:	181c      	adds	r4, r3, r0
 80009d0:	429c      	cmp	r4, r3
 80009d2:	419b      	sbcs	r3, r3
 80009d4:	4449      	add	r1, r9
 80009d6:	468a      	mov	sl, r1
 80009d8:	425b      	negs	r3, r3
 80009da:	449a      	add	sl, r3
 80009dc:	4653      	mov	r3, sl
 80009de:	2601      	movs	r6, #1
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	d400      	bmi.n	80009e6 <__aeabi_dadd+0x3fa>
 80009e4:	e727      	b.n	8000836 <__aeabi_dadd+0x24a>
 80009e6:	2602      	movs	r6, #2
 80009e8:	4652      	mov	r2, sl
 80009ea:	4baf      	ldr	r3, [pc, #700]	; (8000ca8 <__aeabi_dadd+0x6bc>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	401a      	ands	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	4021      	ands	r1, r4
 80009f4:	0862      	lsrs	r2, r4, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	07dc      	lsls	r4, r3, #31
 80009fa:	085b      	lsrs	r3, r3, #1
 80009fc:	469a      	mov	sl, r3
 80009fe:	4314      	orrs	r4, r2
 8000a00:	e670      	b.n	80006e4 <__aeabi_dadd+0xf8>
 8000a02:	003a      	movs	r2, r7
 8000a04:	464c      	mov	r4, r9
 8000a06:	3a20      	subs	r2, #32
 8000a08:	40d4      	lsrs	r4, r2
 8000a0a:	46a4      	mov	ip, r4
 8000a0c:	2f20      	cmp	r7, #32
 8000a0e:	d007      	beq.n	8000a20 <__aeabi_dadd+0x434>
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	4648      	mov	r0, r9
 8000a14:	1bd2      	subs	r2, r2, r7
 8000a16:	4090      	lsls	r0, r2
 8000a18:	0002      	movs	r2, r0
 8000a1a:	4640      	mov	r0, r8
 8000a1c:	4310      	orrs	r0, r2
 8000a1e:	4680      	mov	r8, r0
 8000a20:	4640      	mov	r0, r8
 8000a22:	1e42      	subs	r2, r0, #1
 8000a24:	4190      	sbcs	r0, r2
 8000a26:	4662      	mov	r2, ip
 8000a28:	0004      	movs	r4, r0
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	e624      	b.n	8000678 <__aeabi_dadd+0x8c>
 8000a2e:	4319      	orrs	r1, r3
 8000a30:	000c      	movs	r4, r1
 8000a32:	1e63      	subs	r3, r4, #1
 8000a34:	419c      	sbcs	r4, r3
 8000a36:	4643      	mov	r3, r8
 8000a38:	1b1c      	subs	r4, r3, r4
 8000a3a:	45a0      	cmp	r8, r4
 8000a3c:	419b      	sbcs	r3, r3
 8000a3e:	4649      	mov	r1, r9
 8000a40:	425b      	negs	r3, r3
 8000a42:	1acb      	subs	r3, r1, r3
 8000a44:	469a      	mov	sl, r3
 8000a46:	4665      	mov	r5, ip
 8000a48:	0016      	movs	r6, r2
 8000a4a:	e61b      	b.n	8000684 <__aeabi_dadd+0x98>
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	431c      	orrs	r4, r3
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dadd+0x468>
 8000a52:	e0c7      	b.n	8000be4 <__aeabi_dadd+0x5f8>
 8000a54:	1e7c      	subs	r4, r7, #1
 8000a56:	2f01      	cmp	r7, #1
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x470>
 8000a5a:	e0f9      	b.n	8000c50 <__aeabi_dadd+0x664>
 8000a5c:	4e91      	ldr	r6, [pc, #580]	; (8000ca4 <__aeabi_dadd+0x6b8>)
 8000a5e:	42b7      	cmp	r7, r6
 8000a60:	d05c      	beq.n	8000b1c <__aeabi_dadd+0x530>
 8000a62:	0027      	movs	r7, r4
 8000a64:	e740      	b.n	80008e8 <__aeabi_dadd+0x2fc>
 8000a66:	2220      	movs	r2, #32
 8000a68:	464c      	mov	r4, r9
 8000a6a:	4640      	mov	r0, r8
 8000a6c:	1bd2      	subs	r2, r2, r7
 8000a6e:	4094      	lsls	r4, r2
 8000a70:	40f8      	lsrs	r0, r7
 8000a72:	4304      	orrs	r4, r0
 8000a74:	4640      	mov	r0, r8
 8000a76:	4090      	lsls	r0, r2
 8000a78:	1e42      	subs	r2, r0, #1
 8000a7a:	4190      	sbcs	r0, r2
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	40fa      	lsrs	r2, r7
 8000a80:	4304      	orrs	r4, r0
 8000a82:	1889      	adds	r1, r1, r2
 8000a84:	e6ee      	b.n	8000864 <__aeabi_dadd+0x278>
 8000a86:	4c87      	ldr	r4, [pc, #540]	; (8000ca4 <__aeabi_dadd+0x6b8>)
 8000a88:	42a2      	cmp	r2, r4
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x4a2>
 8000a8c:	e6f9      	b.n	8000882 <__aeabi_dadd+0x296>
 8000a8e:	1818      	adds	r0, r3, r0
 8000a90:	4298      	cmp	r0, r3
 8000a92:	419b      	sbcs	r3, r3
 8000a94:	4449      	add	r1, r9
 8000a96:	425b      	negs	r3, r3
 8000a98:	18cb      	adds	r3, r1, r3
 8000a9a:	07dc      	lsls	r4, r3, #31
 8000a9c:	0840      	lsrs	r0, r0, #1
 8000a9e:	085b      	lsrs	r3, r3, #1
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	0016      	movs	r6, r2
 8000aa4:	4304      	orrs	r4, r0
 8000aa6:	e6c6      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000aa8:	4642      	mov	r2, r8
 8000aaa:	1ad4      	subs	r4, r2, r3
 8000aac:	45a0      	cmp	r8, r4
 8000aae:	4180      	sbcs	r0, r0
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	1a59      	subs	r1, r3, r1
 8000ab6:	1a0b      	subs	r3, r1, r0
 8000ab8:	469a      	mov	sl, r3
 8000aba:	4665      	mov	r5, ip
 8000abc:	e5ea      	b.n	8000694 <__aeabi_dadd+0xa8>
 8000abe:	464b      	mov	r3, r9
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08c0      	lsrs	r0, r0, #3
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	4665      	mov	r5, ip
 8000ac8:	4303      	orrs	r3, r0
 8000aca:	08d1      	lsrs	r1, r2, #3
 8000acc:	e6bd      	b.n	800084a <__aeabi_dadd+0x25e>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_dadd+0x4e8>
 8000ad2:	e08e      	b.n	8000bf2 <__aeabi_dadd+0x606>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	4303      	orrs	r3, r0
 8000ad8:	d117      	bne.n	8000b0a <__aeabi_dadd+0x51e>
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	2500      	movs	r5, #0
 8000ade:	0309      	lsls	r1, r1, #12
 8000ae0:	e6da      	b.n	8000898 <__aeabi_dadd+0x2ac>
 8000ae2:	074a      	lsls	r2, r1, #29
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	08c9      	lsrs	r1, r1, #3
 8000aea:	e6d1      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000aec:	1a1c      	subs	r4, r3, r0
 8000aee:	464a      	mov	r2, r9
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	419b      	sbcs	r3, r3
 8000af4:	1a89      	subs	r1, r1, r2
 8000af6:	425b      	negs	r3, r3
 8000af8:	1acb      	subs	r3, r1, r3
 8000afa:	469a      	mov	sl, r3
 8000afc:	2601      	movs	r6, #1
 8000afe:	e5c1      	b.n	8000684 <__aeabi_dadd+0x98>
 8000b00:	074a      	lsls	r2, r1, #29
 8000b02:	08db      	lsrs	r3, r3, #3
 8000b04:	4313      	orrs	r3, r2
 8000b06:	08c9      	lsrs	r1, r1, #3
 8000b08:	e69f      	b.n	800084a <__aeabi_dadd+0x25e>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	08d8      	lsrs	r0, r3, #3
 8000b0e:	464b      	mov	r3, r9
 8000b10:	464a      	mov	r2, r9
 8000b12:	075b      	lsls	r3, r3, #29
 8000b14:	4665      	mov	r5, ip
 8000b16:	4303      	orrs	r3, r0
 8000b18:	08d1      	lsrs	r1, r2, #3
 8000b1a:	e6b9      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	08d8      	lsrs	r0, r3, #3
 8000b20:	464b      	mov	r3, r9
 8000b22:	464a      	mov	r2, r9
 8000b24:	075b      	lsls	r3, r3, #29
 8000b26:	4303      	orrs	r3, r0
 8000b28:	08d1      	lsrs	r1, r2, #3
 8000b2a:	e6b1      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	000c      	movs	r4, r1
 8000b30:	1e63      	subs	r3, r4, #1
 8000b32:	419c      	sbcs	r4, r3
 8000b34:	e6eb      	b.n	800090e <__aeabi_dadd+0x322>
 8000b36:	003c      	movs	r4, r7
 8000b38:	000d      	movs	r5, r1
 8000b3a:	3c20      	subs	r4, #32
 8000b3c:	40e5      	lsrs	r5, r4
 8000b3e:	2f20      	cmp	r7, #32
 8000b40:	d003      	beq.n	8000b4a <__aeabi_dadd+0x55e>
 8000b42:	2440      	movs	r4, #64	; 0x40
 8000b44:	1be4      	subs	r4, r4, r7
 8000b46:	40a1      	lsls	r1, r4
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	001c      	movs	r4, r3
 8000b4c:	1e63      	subs	r3, r4, #1
 8000b4e:	419c      	sbcs	r4, r3
 8000b50:	432c      	orrs	r4, r5
 8000b52:	e770      	b.n	8000a36 <__aeabi_dadd+0x44a>
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d0e1      	beq.n	8000b1c <__aeabi_dadd+0x530>
 8000b58:	464a      	mov	r2, r9
 8000b5a:	4302      	orrs	r2, r0
 8000b5c:	d0c1      	beq.n	8000ae2 <__aeabi_dadd+0x4f6>
 8000b5e:	074a      	lsls	r2, r1, #29
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	08c9      	lsrs	r1, r1, #3
 8000b68:	0312      	lsls	r2, r2, #12
 8000b6a:	4211      	tst	r1, r2
 8000b6c:	d008      	beq.n	8000b80 <__aeabi_dadd+0x594>
 8000b6e:	4648      	mov	r0, r9
 8000b70:	08c4      	lsrs	r4, r0, #3
 8000b72:	4214      	tst	r4, r2
 8000b74:	d104      	bne.n	8000b80 <__aeabi_dadd+0x594>
 8000b76:	4643      	mov	r3, r8
 8000b78:	0021      	movs	r1, r4
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	0742      	lsls	r2, r0, #29
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	0f5a      	lsrs	r2, r3, #29
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	0752      	lsls	r2, r2, #29
 8000b86:	08db      	lsrs	r3, r3, #3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	e681      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000b8c:	464b      	mov	r3, r9
 8000b8e:	4303      	orrs	r3, r0
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x5a8>
 8000b92:	e714      	b.n	80009be <__aeabi_dadd+0x3d2>
 8000b94:	464b      	mov	r3, r9
 8000b96:	464a      	mov	r2, r9
 8000b98:	08c0      	lsrs	r0, r0, #3
 8000b9a:	075b      	lsls	r3, r3, #29
 8000b9c:	4665      	mov	r5, ip
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	08d1      	lsrs	r1, r2, #3
 8000ba2:	e655      	b.n	8000850 <__aeabi_dadd+0x264>
 8000ba4:	1ac4      	subs	r4, r0, r3
 8000ba6:	45a0      	cmp	r8, r4
 8000ba8:	4180      	sbcs	r0, r0
 8000baa:	464b      	mov	r3, r9
 8000bac:	4240      	negs	r0, r0
 8000bae:	1a59      	subs	r1, r3, r1
 8000bb0:	1a0b      	subs	r3, r1, r0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	4665      	mov	r5, ip
 8000bb6:	2601      	movs	r6, #1
 8000bb8:	e564      	b.n	8000684 <__aeabi_dadd+0x98>
 8000bba:	1a1c      	subs	r4, r3, r0
 8000bbc:	464a      	mov	r2, r9
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	4180      	sbcs	r0, r0
 8000bc2:	1a8a      	subs	r2, r1, r2
 8000bc4:	4240      	negs	r0, r0
 8000bc6:	1a12      	subs	r2, r2, r0
 8000bc8:	4692      	mov	sl, r2
 8000bca:	0212      	lsls	r2, r2, #8
 8000bcc:	d549      	bpl.n	8000c62 <__aeabi_dadd+0x676>
 8000bce:	4642      	mov	r2, r8
 8000bd0:	1ad4      	subs	r4, r2, r3
 8000bd2:	45a0      	cmp	r8, r4
 8000bd4:	4180      	sbcs	r0, r0
 8000bd6:	464b      	mov	r3, r9
 8000bd8:	4240      	negs	r0, r0
 8000bda:	1a59      	subs	r1, r3, r1
 8000bdc:	1a0b      	subs	r3, r1, r0
 8000bde:	469a      	mov	sl, r3
 8000be0:	4665      	mov	r5, ip
 8000be2:	e57f      	b.n	80006e4 <__aeabi_dadd+0xf8>
 8000be4:	464b      	mov	r3, r9
 8000be6:	464a      	mov	r2, r9
 8000be8:	08c0      	lsrs	r0, r0, #3
 8000bea:	075b      	lsls	r3, r3, #29
 8000bec:	4303      	orrs	r3, r0
 8000bee:	08d1      	lsrs	r1, r2, #3
 8000bf0:	e62b      	b.n	800084a <__aeabi_dadd+0x25e>
 8000bf2:	464a      	mov	r2, r9
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	4302      	orrs	r2, r0
 8000bf8:	d138      	bne.n	8000c6c <__aeabi_dadd+0x680>
 8000bfa:	074a      	lsls	r2, r1, #29
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	08c9      	lsrs	r1, r1, #3
 8000c00:	e646      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000c02:	464b      	mov	r3, r9
 8000c04:	464a      	mov	r2, r9
 8000c06:	08c0      	lsrs	r0, r0, #3
 8000c08:	075b      	lsls	r3, r3, #29
 8000c0a:	4303      	orrs	r3, r0
 8000c0c:	08d1      	lsrs	r1, r2, #3
 8000c0e:	e61f      	b.n	8000850 <__aeabi_dadd+0x264>
 8000c10:	181c      	adds	r4, r3, r0
 8000c12:	429c      	cmp	r4, r3
 8000c14:	419b      	sbcs	r3, r3
 8000c16:	4449      	add	r1, r9
 8000c18:	468a      	mov	sl, r1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	449a      	add	sl, r3
 8000c1e:	4653      	mov	r3, sl
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	d400      	bmi.n	8000c26 <__aeabi_dadd+0x63a>
 8000c24:	e607      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000c26:	4652      	mov	r2, sl
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <__aeabi_dadd+0x6bc>)
 8000c2a:	2601      	movs	r6, #1
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	4692      	mov	sl, r2
 8000c30:	e601      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000c32:	003c      	movs	r4, r7
 8000c34:	000e      	movs	r6, r1
 8000c36:	3c20      	subs	r4, #32
 8000c38:	40e6      	lsrs	r6, r4
 8000c3a:	2f20      	cmp	r7, #32
 8000c3c:	d003      	beq.n	8000c46 <__aeabi_dadd+0x65a>
 8000c3e:	2440      	movs	r4, #64	; 0x40
 8000c40:	1be4      	subs	r4, r4, r7
 8000c42:	40a1      	lsls	r1, r4
 8000c44:	430b      	orrs	r3, r1
 8000c46:	001c      	movs	r4, r3
 8000c48:	1e63      	subs	r3, r4, #1
 8000c4a:	419c      	sbcs	r4, r3
 8000c4c:	4334      	orrs	r4, r6
 8000c4e:	e65e      	b.n	800090e <__aeabi_dadd+0x322>
 8000c50:	4443      	add	r3, r8
 8000c52:	4283      	cmp	r3, r0
 8000c54:	4180      	sbcs	r0, r0
 8000c56:	4449      	add	r1, r9
 8000c58:	468a      	mov	sl, r1
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	001c      	movs	r4, r3
 8000c5e:	4482      	add	sl, r0
 8000c60:	e6bc      	b.n	80009dc <__aeabi_dadd+0x3f0>
 8000c62:	4653      	mov	r3, sl
 8000c64:	4323      	orrs	r3, r4
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x67e>
 8000c68:	e6a9      	b.n	80009be <__aeabi_dadd+0x3d2>
 8000c6a:	e5e4      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000c6c:	074a      	lsls	r2, r1, #29
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	08c9      	lsrs	r1, r1, #3
 8000c74:	0312      	lsls	r2, r2, #12
 8000c76:	4211      	tst	r1, r2
 8000c78:	d009      	beq.n	8000c8e <__aeabi_dadd+0x6a2>
 8000c7a:	4648      	mov	r0, r9
 8000c7c:	08c4      	lsrs	r4, r0, #3
 8000c7e:	4214      	tst	r4, r2
 8000c80:	d105      	bne.n	8000c8e <__aeabi_dadd+0x6a2>
 8000c82:	4643      	mov	r3, r8
 8000c84:	4665      	mov	r5, ip
 8000c86:	0021      	movs	r1, r4
 8000c88:	08db      	lsrs	r3, r3, #3
 8000c8a:	0742      	lsls	r2, r0, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	0f5a      	lsrs	r2, r3, #29
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	0752      	lsls	r2, r2, #29
 8000c96:	4313      	orrs	r3, r2
 8000c98:	e5fa      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	4a01      	ldr	r2, [pc, #4]	; (8000ca4 <__aeabi_dadd+0x6b8>)
 8000c9e:	001c      	movs	r4, r3
 8000ca0:	e540      	b.n	8000724 <__aeabi_dadd+0x138>
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	000007ff 	.word	0x000007ff
 8000ca8:	ff7fffff 	.word	0xff7fffff

08000cac <__aeabi_dmul>:
 8000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cae:	4645      	mov	r5, r8
 8000cb0:	46de      	mov	lr, fp
 8000cb2:	4657      	mov	r7, sl
 8000cb4:	464e      	mov	r6, r9
 8000cb6:	b5e0      	push	{r5, r6, r7, lr}
 8000cb8:	001f      	movs	r7, r3
 8000cba:	030b      	lsls	r3, r1, #12
 8000cbc:	0b1b      	lsrs	r3, r3, #12
 8000cbe:	469b      	mov	fp, r3
 8000cc0:	004d      	lsls	r5, r1, #1
 8000cc2:	0fcb      	lsrs	r3, r1, #31
 8000cc4:	0004      	movs	r4, r0
 8000cc6:	4691      	mov	r9, r2
 8000cc8:	4698      	mov	r8, r3
 8000cca:	b087      	sub	sp, #28
 8000ccc:	0d6d      	lsrs	r5, r5, #21
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dmul+0x26>
 8000cd0:	e1cd      	b.n	800106e <__aeabi_dmul+0x3c2>
 8000cd2:	4bce      	ldr	r3, [pc, #824]	; (800100c <__aeabi_dmul+0x360>)
 8000cd4:	429d      	cmp	r5, r3
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dmul+0x2e>
 8000cd8:	e1e9      	b.n	80010ae <__aeabi_dmul+0x402>
 8000cda:	465a      	mov	r2, fp
 8000cdc:	0f43      	lsrs	r3, r0, #29
 8000cde:	00d2      	lsls	r2, r2, #3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	0412      	lsls	r2, r2, #16
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	00c3      	lsls	r3, r0, #3
 8000cea:	469a      	mov	sl, r3
 8000cec:	4bc8      	ldr	r3, [pc, #800]	; (8001010 <__aeabi_dmul+0x364>)
 8000cee:	4693      	mov	fp, r2
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	4465      	add	r5, ip
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	033c      	lsls	r4, r7, #12
 8000cfc:	007b      	lsls	r3, r7, #1
 8000cfe:	4648      	mov	r0, r9
 8000d00:	0b24      	lsrs	r4, r4, #12
 8000d02:	0d5b      	lsrs	r3, r3, #21
 8000d04:	0fff      	lsrs	r7, r7, #31
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dmul+0x60>
 8000d0a:	e189      	b.n	8001020 <__aeabi_dmul+0x374>
 8000d0c:	4abf      	ldr	r2, [pc, #764]	; (800100c <__aeabi_dmul+0x360>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d019      	beq.n	8000d46 <__aeabi_dmul+0x9a>
 8000d12:	0f42      	lsrs	r2, r0, #29
 8000d14:	00e4      	lsls	r4, r4, #3
 8000d16:	4322      	orrs	r2, r4
 8000d18:	2480      	movs	r4, #128	; 0x80
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	4314      	orrs	r4, r2
 8000d1e:	4abc      	ldr	r2, [pc, #752]	; (8001010 <__aeabi_dmul+0x364>)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4694      	mov	ip, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	4463      	add	r3, ip
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	9b01      	ldr	r3, [sp, #4]
 8000d2e:	407a      	eors	r2, r7
 8000d30:	3301      	adds	r3, #1
 8000d32:	00c0      	lsls	r0, r0, #3
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	2e0a      	cmp	r6, #10
 8000d3a:	dd1c      	ble.n	8000d76 <__aeabi_dmul+0xca>
 8000d3c:	003a      	movs	r2, r7
 8000d3e:	2e0b      	cmp	r6, #11
 8000d40:	d05e      	beq.n	8000e00 <__aeabi_dmul+0x154>
 8000d42:	4647      	mov	r7, r8
 8000d44:	e056      	b.n	8000df4 <__aeabi_dmul+0x148>
 8000d46:	4649      	mov	r1, r9
 8000d48:	4bb0      	ldr	r3, [pc, #704]	; (800100c <__aeabi_dmul+0x360>)
 8000d4a:	4321      	orrs	r1, r4
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	2900      	cmp	r1, #0
 8000d52:	d12a      	bne.n	8000daa <__aeabi_dmul+0xfe>
 8000d54:	2080      	movs	r0, #128	; 0x80
 8000d56:	2202      	movs	r2, #2
 8000d58:	0100      	lsls	r0, r0, #4
 8000d5a:	002b      	movs	r3, r5
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4316      	orrs	r6, r2
 8000d60:	4642      	mov	r2, r8
 8000d62:	4463      	add	r3, ip
 8000d64:	407a      	eors	r2, r7
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	2e0a      	cmp	r6, #10
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_dmul+0xc4>
 8000d6e:	e231      	b.n	80011d4 <__aeabi_dmul+0x528>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2400      	movs	r4, #0
 8000d74:	2102      	movs	r1, #2
 8000d76:	2e02      	cmp	r6, #2
 8000d78:	dc26      	bgt.n	8000dc8 <__aeabi_dmul+0x11c>
 8000d7a:	3e01      	subs	r6, #1
 8000d7c:	2e01      	cmp	r6, #1
 8000d7e:	d852      	bhi.n	8000e26 <__aeabi_dmul+0x17a>
 8000d80:	2902      	cmp	r1, #2
 8000d82:	d04c      	beq.n	8000e1e <__aeabi_dmul+0x172>
 8000d84:	2901      	cmp	r1, #1
 8000d86:	d000      	beq.n	8000d8a <__aeabi_dmul+0xde>
 8000d88:	e118      	b.n	8000fbc <__aeabi_dmul+0x310>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2400      	movs	r4, #0
 8000d8e:	2500      	movs	r5, #0
 8000d90:	051b      	lsls	r3, r3, #20
 8000d92:	4323      	orrs	r3, r4
 8000d94:	07d2      	lsls	r2, r2, #31
 8000d96:	4313      	orrs	r3, r2
 8000d98:	0028      	movs	r0, r5
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	b007      	add	sp, #28
 8000d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000da0:	46bb      	mov	fp, r7
 8000da2:	46b2      	mov	sl, r6
 8000da4:	46a9      	mov	r9, r5
 8000da6:	46a0      	mov	r8, r4
 8000da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	2203      	movs	r2, #3
 8000dae:	0109      	lsls	r1, r1, #4
 8000db0:	002b      	movs	r3, r5
 8000db2:	468c      	mov	ip, r1
 8000db4:	4316      	orrs	r6, r2
 8000db6:	4642      	mov	r2, r8
 8000db8:	4463      	add	r3, ip
 8000dba:	407a      	eors	r2, r7
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	2e0a      	cmp	r6, #10
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_dmul+0x11a>
 8000dc4:	e228      	b.n	8001218 <__aeabi_dmul+0x56c>
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	2501      	movs	r5, #1
 8000dca:	40b5      	lsls	r5, r6
 8000dcc:	46ac      	mov	ip, r5
 8000dce:	26a6      	movs	r6, #166	; 0xa6
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	00f6      	lsls	r6, r6, #3
 8000dd4:	4035      	ands	r5, r6
 8000dd6:	4233      	tst	r3, r6
 8000dd8:	d10b      	bne.n	8000df2 <__aeabi_dmul+0x146>
 8000dda:	2690      	movs	r6, #144	; 0x90
 8000ddc:	00b6      	lsls	r6, r6, #2
 8000dde:	4233      	tst	r3, r6
 8000de0:	d118      	bne.n	8000e14 <__aeabi_dmul+0x168>
 8000de2:	3eb9      	subs	r6, #185	; 0xb9
 8000de4:	3eff      	subs	r6, #255	; 0xff
 8000de6:	421e      	tst	r6, r3
 8000de8:	d01d      	beq.n	8000e26 <__aeabi_dmul+0x17a>
 8000dea:	46a3      	mov	fp, r4
 8000dec:	4682      	mov	sl, r0
 8000dee:	9100      	str	r1, [sp, #0]
 8000df0:	e000      	b.n	8000df4 <__aeabi_dmul+0x148>
 8000df2:	0017      	movs	r7, r2
 8000df4:	9900      	ldr	r1, [sp, #0]
 8000df6:	003a      	movs	r2, r7
 8000df8:	2902      	cmp	r1, #2
 8000dfa:	d010      	beq.n	8000e1e <__aeabi_dmul+0x172>
 8000dfc:	465c      	mov	r4, fp
 8000dfe:	4650      	mov	r0, sl
 8000e00:	2903      	cmp	r1, #3
 8000e02:	d1bf      	bne.n	8000d84 <__aeabi_dmul+0xd8>
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	031b      	lsls	r3, r3, #12
 8000e08:	431c      	orrs	r4, r3
 8000e0a:	0324      	lsls	r4, r4, #12
 8000e0c:	0005      	movs	r5, r0
 8000e0e:	4b7f      	ldr	r3, [pc, #508]	; (800100c <__aeabi_dmul+0x360>)
 8000e10:	0b24      	lsrs	r4, r4, #12
 8000e12:	e7bd      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8000e14:	2480      	movs	r4, #128	; 0x80
 8000e16:	2200      	movs	r2, #0
 8000e18:	4b7c      	ldr	r3, [pc, #496]	; (800100c <__aeabi_dmul+0x360>)
 8000e1a:	0324      	lsls	r4, r4, #12
 8000e1c:	e7b8      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4b7a      	ldr	r3, [pc, #488]	; (800100c <__aeabi_dmul+0x360>)
 8000e24:	e7b4      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8000e26:	4653      	mov	r3, sl
 8000e28:	041e      	lsls	r6, r3, #16
 8000e2a:	0c36      	lsrs	r6, r6, #16
 8000e2c:	0c1f      	lsrs	r7, r3, #16
 8000e2e:	0033      	movs	r3, r6
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	0400      	lsls	r0, r0, #16
 8000e34:	0c00      	lsrs	r0, r0, #16
 8000e36:	4343      	muls	r3, r0
 8000e38:	4698      	mov	r8, r3
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	437b      	muls	r3, r7
 8000e3e:	4699      	mov	r9, r3
 8000e40:	0033      	movs	r3, r6
 8000e42:	434b      	muls	r3, r1
 8000e44:	469c      	mov	ip, r3
 8000e46:	4643      	mov	r3, r8
 8000e48:	000d      	movs	r5, r1
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	437d      	muls	r5, r7
 8000e50:	44cc      	add	ip, r9
 8000e52:	44d4      	add	ip, sl
 8000e54:	9500      	str	r5, [sp, #0]
 8000e56:	45e1      	cmp	r9, ip
 8000e58:	d904      	bls.n	8000e64 <__aeabi_dmul+0x1b8>
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	025b      	lsls	r3, r3, #9
 8000e5e:	4699      	mov	r9, r3
 8000e60:	444d      	add	r5, r9
 8000e62:	9500      	str	r5, [sp, #0]
 8000e64:	4663      	mov	r3, ip
 8000e66:	0c1b      	lsrs	r3, r3, #16
 8000e68:	001d      	movs	r5, r3
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	041b      	lsls	r3, r3, #16
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4643      	mov	r3, r8
 8000e72:	041b      	lsls	r3, r3, #16
 8000e74:	0c1b      	lsrs	r3, r3, #16
 8000e76:	4698      	mov	r8, r3
 8000e78:	4663      	mov	r3, ip
 8000e7a:	4443      	add	r3, r8
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	0c23      	lsrs	r3, r4, #16
 8000e80:	4698      	mov	r8, r3
 8000e82:	0033      	movs	r3, r6
 8000e84:	0424      	lsls	r4, r4, #16
 8000e86:	0c24      	lsrs	r4, r4, #16
 8000e88:	4363      	muls	r3, r4
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	0023      	movs	r3, r4
 8000e8e:	437b      	muls	r3, r7
 8000e90:	4699      	mov	r9, r3
 8000e92:	4643      	mov	r3, r8
 8000e94:	435e      	muls	r6, r3
 8000e96:	435f      	muls	r7, r3
 8000e98:	444e      	add	r6, r9
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	46b2      	mov	sl, r6
 8000e9e:	0c1e      	lsrs	r6, r3, #16
 8000ea0:	4456      	add	r6, sl
 8000ea2:	45b1      	cmp	r9, r6
 8000ea4:	d903      	bls.n	8000eae <__aeabi_dmul+0x202>
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	4699      	mov	r9, r3
 8000eac:	444f      	add	r7, r9
 8000eae:	0c33      	lsrs	r3, r6, #16
 8000eb0:	4699      	mov	r9, r3
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	444b      	add	r3, r9
 8000eb6:	9305      	str	r3, [sp, #20]
 8000eb8:	4663      	mov	r3, ip
 8000eba:	46ac      	mov	ip, r5
 8000ebc:	041f      	lsls	r7, r3, #16
 8000ebe:	0c3f      	lsrs	r7, r7, #16
 8000ec0:	0436      	lsls	r6, r6, #16
 8000ec2:	19f6      	adds	r6, r6, r7
 8000ec4:	44b4      	add	ip, r6
 8000ec6:	4663      	mov	r3, ip
 8000ec8:	9304      	str	r3, [sp, #16]
 8000eca:	465b      	mov	r3, fp
 8000ecc:	0c1b      	lsrs	r3, r3, #16
 8000ece:	469c      	mov	ip, r3
 8000ed0:	465b      	mov	r3, fp
 8000ed2:	041f      	lsls	r7, r3, #16
 8000ed4:	0c3f      	lsrs	r7, r7, #16
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	4343      	muls	r3, r0
 8000eda:	4699      	mov	r9, r3
 8000edc:	4663      	mov	r3, ip
 8000ede:	4343      	muls	r3, r0
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	4660      	mov	r0, ip
 8000ee6:	0c1b      	lsrs	r3, r3, #16
 8000ee8:	469b      	mov	fp, r3
 8000eea:	4348      	muls	r0, r1
 8000eec:	4379      	muls	r1, r7
 8000eee:	4451      	add	r1, sl
 8000ef0:	4459      	add	r1, fp
 8000ef2:	458a      	cmp	sl, r1
 8000ef4:	d903      	bls.n	8000efe <__aeabi_dmul+0x252>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	025b      	lsls	r3, r3, #9
 8000efa:	469a      	mov	sl, r3
 8000efc:	4450      	add	r0, sl
 8000efe:	0c0b      	lsrs	r3, r1, #16
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	4699      	mov	r9, r3
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	4363      	muls	r3, r4
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	4645      	mov	r5, r8
 8000f12:	4449      	add	r1, r9
 8000f14:	4699      	mov	r9, r3
 8000f16:	4663      	mov	r3, ip
 8000f18:	435c      	muls	r4, r3
 8000f1a:	436b      	muls	r3, r5
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	464b      	mov	r3, r9
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	4698      	mov	r8, r3
 8000f24:	436f      	muls	r7, r5
 8000f26:	193f      	adds	r7, r7, r4
 8000f28:	4447      	add	r7, r8
 8000f2a:	4450      	add	r0, sl
 8000f2c:	42bc      	cmp	r4, r7
 8000f2e:	d903      	bls.n	8000f38 <__aeabi_dmul+0x28c>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	025b      	lsls	r3, r3, #9
 8000f34:	4698      	mov	r8, r3
 8000f36:	44c4      	add	ip, r8
 8000f38:	9b04      	ldr	r3, [sp, #16]
 8000f3a:	9d00      	ldr	r5, [sp, #0]
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	4445      	add	r5, r8
 8000f40:	42b5      	cmp	r5, r6
 8000f42:	41b6      	sbcs	r6, r6
 8000f44:	4273      	negs	r3, r6
 8000f46:	4698      	mov	r8, r3
 8000f48:	464b      	mov	r3, r9
 8000f4a:	041e      	lsls	r6, r3, #16
 8000f4c:	9b05      	ldr	r3, [sp, #20]
 8000f4e:	043c      	lsls	r4, r7, #16
 8000f50:	4699      	mov	r9, r3
 8000f52:	0c36      	lsrs	r6, r6, #16
 8000f54:	19a4      	adds	r4, r4, r6
 8000f56:	444c      	add	r4, r9
 8000f58:	46a1      	mov	r9, r4
 8000f5a:	4683      	mov	fp, r0
 8000f5c:	186e      	adds	r6, r5, r1
 8000f5e:	44c1      	add	r9, r8
 8000f60:	428e      	cmp	r6, r1
 8000f62:	4189      	sbcs	r1, r1
 8000f64:	44cb      	add	fp, r9
 8000f66:	465d      	mov	r5, fp
 8000f68:	4249      	negs	r1, r1
 8000f6a:	186d      	adds	r5, r5, r1
 8000f6c:	429c      	cmp	r4, r3
 8000f6e:	41a4      	sbcs	r4, r4
 8000f70:	45c1      	cmp	r9, r8
 8000f72:	419b      	sbcs	r3, r3
 8000f74:	4583      	cmp	fp, r0
 8000f76:	4180      	sbcs	r0, r0
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	4189      	sbcs	r1, r1
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	4264      	negs	r4, r4
 8000f80:	431c      	orrs	r4, r3
 8000f82:	4240      	negs	r0, r0
 8000f84:	9b03      	ldr	r3, [sp, #12]
 8000f86:	4249      	negs	r1, r1
 8000f88:	4301      	orrs	r1, r0
 8000f8a:	0270      	lsls	r0, r6, #9
 8000f8c:	0c3f      	lsrs	r7, r7, #16
 8000f8e:	4318      	orrs	r0, r3
 8000f90:	19e4      	adds	r4, r4, r7
 8000f92:	1e47      	subs	r7, r0, #1
 8000f94:	41b8      	sbcs	r0, r7
 8000f96:	1864      	adds	r4, r4, r1
 8000f98:	4464      	add	r4, ip
 8000f9a:	0df6      	lsrs	r6, r6, #23
 8000f9c:	0261      	lsls	r1, r4, #9
 8000f9e:	4330      	orrs	r0, r6
 8000fa0:	0dec      	lsrs	r4, r5, #23
 8000fa2:	026e      	lsls	r6, r5, #9
 8000fa4:	430c      	orrs	r4, r1
 8000fa6:	4330      	orrs	r0, r6
 8000fa8:	01c9      	lsls	r1, r1, #7
 8000faa:	d400      	bmi.n	8000fae <__aeabi_dmul+0x302>
 8000fac:	e0f1      	b.n	8001192 <__aeabi_dmul+0x4e6>
 8000fae:	2101      	movs	r1, #1
 8000fb0:	0843      	lsrs	r3, r0, #1
 8000fb2:	4001      	ands	r1, r0
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	07e0      	lsls	r0, r4, #31
 8000fb8:	4318      	orrs	r0, r3
 8000fba:	0864      	lsrs	r4, r4, #1
 8000fbc:	4915      	ldr	r1, [pc, #84]	; (8001014 <__aeabi_dmul+0x368>)
 8000fbe:	9b02      	ldr	r3, [sp, #8]
 8000fc0:	468c      	mov	ip, r1
 8000fc2:	4463      	add	r3, ip
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dc00      	bgt.n	8000fca <__aeabi_dmul+0x31e>
 8000fc8:	e097      	b.n	80010fa <__aeabi_dmul+0x44e>
 8000fca:	0741      	lsls	r1, r0, #29
 8000fcc:	d009      	beq.n	8000fe2 <__aeabi_dmul+0x336>
 8000fce:	210f      	movs	r1, #15
 8000fd0:	4001      	ands	r1, r0
 8000fd2:	2904      	cmp	r1, #4
 8000fd4:	d005      	beq.n	8000fe2 <__aeabi_dmul+0x336>
 8000fd6:	1d01      	adds	r1, r0, #4
 8000fd8:	4281      	cmp	r1, r0
 8000fda:	4180      	sbcs	r0, r0
 8000fdc:	4240      	negs	r0, r0
 8000fde:	1824      	adds	r4, r4, r0
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	01e1      	lsls	r1, r4, #7
 8000fe4:	d506      	bpl.n	8000ff4 <__aeabi_dmul+0x348>
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	00c9      	lsls	r1, r1, #3
 8000fea:	468c      	mov	ip, r1
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <__aeabi_dmul+0x36c>)
 8000fee:	401c      	ands	r4, r3
 8000ff0:	9b02      	ldr	r3, [sp, #8]
 8000ff2:	4463      	add	r3, ip
 8000ff4:	4909      	ldr	r1, [pc, #36]	; (800101c <__aeabi_dmul+0x370>)
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	dd00      	ble.n	8000ffc <__aeabi_dmul+0x350>
 8000ffa:	e710      	b.n	8000e1e <__aeabi_dmul+0x172>
 8000ffc:	0761      	lsls	r1, r4, #29
 8000ffe:	08c5      	lsrs	r5, r0, #3
 8001000:	0264      	lsls	r4, r4, #9
 8001002:	055b      	lsls	r3, r3, #21
 8001004:	430d      	orrs	r5, r1
 8001006:	0b24      	lsrs	r4, r4, #12
 8001008:	0d5b      	lsrs	r3, r3, #21
 800100a:	e6c1      	b.n	8000d90 <__aeabi_dmul+0xe4>
 800100c:	000007ff 	.word	0x000007ff
 8001010:	fffffc01 	.word	0xfffffc01
 8001014:	000003ff 	.word	0x000003ff
 8001018:	feffffff 	.word	0xfeffffff
 800101c:	000007fe 	.word	0x000007fe
 8001020:	464b      	mov	r3, r9
 8001022:	4323      	orrs	r3, r4
 8001024:	d059      	beq.n	80010da <__aeabi_dmul+0x42e>
 8001026:	2c00      	cmp	r4, #0
 8001028:	d100      	bne.n	800102c <__aeabi_dmul+0x380>
 800102a:	e0a3      	b.n	8001174 <__aeabi_dmul+0x4c8>
 800102c:	0020      	movs	r0, r4
 800102e:	f000 f98b 	bl	8001348 <__clzsi2>
 8001032:	0001      	movs	r1, r0
 8001034:	0003      	movs	r3, r0
 8001036:	390b      	subs	r1, #11
 8001038:	221d      	movs	r2, #29
 800103a:	1a52      	subs	r2, r2, r1
 800103c:	4649      	mov	r1, r9
 800103e:	0018      	movs	r0, r3
 8001040:	40d1      	lsrs	r1, r2
 8001042:	464a      	mov	r2, r9
 8001044:	3808      	subs	r0, #8
 8001046:	4082      	lsls	r2, r0
 8001048:	4084      	lsls	r4, r0
 800104a:	0010      	movs	r0, r2
 800104c:	430c      	orrs	r4, r1
 800104e:	4a74      	ldr	r2, [pc, #464]	; (8001220 <__aeabi_dmul+0x574>)
 8001050:	1aeb      	subs	r3, r5, r3
 8001052:	4694      	mov	ip, r2
 8001054:	4642      	mov	r2, r8
 8001056:	4463      	add	r3, ip
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	9b01      	ldr	r3, [sp, #4]
 800105c:	407a      	eors	r2, r7
 800105e:	3301      	adds	r3, #1
 8001060:	2100      	movs	r1, #0
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2e0a      	cmp	r6, #10
 8001068:	dd00      	ble.n	800106c <__aeabi_dmul+0x3c0>
 800106a:	e667      	b.n	8000d3c <__aeabi_dmul+0x90>
 800106c:	e683      	b.n	8000d76 <__aeabi_dmul+0xca>
 800106e:	465b      	mov	r3, fp
 8001070:	4303      	orrs	r3, r0
 8001072:	469a      	mov	sl, r3
 8001074:	d02a      	beq.n	80010cc <__aeabi_dmul+0x420>
 8001076:	465b      	mov	r3, fp
 8001078:	2b00      	cmp	r3, #0
 800107a:	d06d      	beq.n	8001158 <__aeabi_dmul+0x4ac>
 800107c:	4658      	mov	r0, fp
 800107e:	f000 f963 	bl	8001348 <__clzsi2>
 8001082:	0001      	movs	r1, r0
 8001084:	0003      	movs	r3, r0
 8001086:	390b      	subs	r1, #11
 8001088:	221d      	movs	r2, #29
 800108a:	1a52      	subs	r2, r2, r1
 800108c:	0021      	movs	r1, r4
 800108e:	0018      	movs	r0, r3
 8001090:	465d      	mov	r5, fp
 8001092:	40d1      	lsrs	r1, r2
 8001094:	3808      	subs	r0, #8
 8001096:	4085      	lsls	r5, r0
 8001098:	000a      	movs	r2, r1
 800109a:	4084      	lsls	r4, r0
 800109c:	432a      	orrs	r2, r5
 800109e:	4693      	mov	fp, r2
 80010a0:	46a2      	mov	sl, r4
 80010a2:	4d5f      	ldr	r5, [pc, #380]	; (8001220 <__aeabi_dmul+0x574>)
 80010a4:	2600      	movs	r6, #0
 80010a6:	1aed      	subs	r5, r5, r3
 80010a8:	2300      	movs	r3, #0
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	e625      	b.n	8000cfa <__aeabi_dmul+0x4e>
 80010ae:	465b      	mov	r3, fp
 80010b0:	4303      	orrs	r3, r0
 80010b2:	469a      	mov	sl, r3
 80010b4:	d105      	bne.n	80010c2 <__aeabi_dmul+0x416>
 80010b6:	2300      	movs	r3, #0
 80010b8:	469b      	mov	fp, r3
 80010ba:	3302      	adds	r3, #2
 80010bc:	2608      	movs	r6, #8
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	e61b      	b.n	8000cfa <__aeabi_dmul+0x4e>
 80010c2:	2303      	movs	r3, #3
 80010c4:	4682      	mov	sl, r0
 80010c6:	260c      	movs	r6, #12
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	e616      	b.n	8000cfa <__aeabi_dmul+0x4e>
 80010cc:	2300      	movs	r3, #0
 80010ce:	469b      	mov	fp, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	2604      	movs	r6, #4
 80010d4:	2500      	movs	r5, #0
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	e60f      	b.n	8000cfa <__aeabi_dmul+0x4e>
 80010da:	4642      	mov	r2, r8
 80010dc:	3301      	adds	r3, #1
 80010de:	9501      	str	r5, [sp, #4]
 80010e0:	431e      	orrs	r6, r3
 80010e2:	9b01      	ldr	r3, [sp, #4]
 80010e4:	407a      	eors	r2, r7
 80010e6:	3301      	adds	r3, #1
 80010e8:	2400      	movs	r4, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2e0a      	cmp	r6, #10
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_dmul+0x44c>
 80010f6:	e621      	b.n	8000d3c <__aeabi_dmul+0x90>
 80010f8:	e63d      	b.n	8000d76 <__aeabi_dmul+0xca>
 80010fa:	2101      	movs	r1, #1
 80010fc:	1ac9      	subs	r1, r1, r3
 80010fe:	2938      	cmp	r1, #56	; 0x38
 8001100:	dd00      	ble.n	8001104 <__aeabi_dmul+0x458>
 8001102:	e642      	b.n	8000d8a <__aeabi_dmul+0xde>
 8001104:	291f      	cmp	r1, #31
 8001106:	dd47      	ble.n	8001198 <__aeabi_dmul+0x4ec>
 8001108:	261f      	movs	r6, #31
 800110a:	0025      	movs	r5, r4
 800110c:	4276      	negs	r6, r6
 800110e:	1af3      	subs	r3, r6, r3
 8001110:	40dd      	lsrs	r5, r3
 8001112:	002b      	movs	r3, r5
 8001114:	2920      	cmp	r1, #32
 8001116:	d005      	beq.n	8001124 <__aeabi_dmul+0x478>
 8001118:	4942      	ldr	r1, [pc, #264]	; (8001224 <__aeabi_dmul+0x578>)
 800111a:	9d02      	ldr	r5, [sp, #8]
 800111c:	468c      	mov	ip, r1
 800111e:	4465      	add	r5, ip
 8001120:	40ac      	lsls	r4, r5
 8001122:	4320      	orrs	r0, r4
 8001124:	1e41      	subs	r1, r0, #1
 8001126:	4188      	sbcs	r0, r1
 8001128:	4318      	orrs	r0, r3
 800112a:	2307      	movs	r3, #7
 800112c:	001d      	movs	r5, r3
 800112e:	2400      	movs	r4, #0
 8001130:	4005      	ands	r5, r0
 8001132:	4203      	tst	r3, r0
 8001134:	d04a      	beq.n	80011cc <__aeabi_dmul+0x520>
 8001136:	230f      	movs	r3, #15
 8001138:	2400      	movs	r4, #0
 800113a:	4003      	ands	r3, r0
 800113c:	2b04      	cmp	r3, #4
 800113e:	d042      	beq.n	80011c6 <__aeabi_dmul+0x51a>
 8001140:	1d03      	adds	r3, r0, #4
 8001142:	4283      	cmp	r3, r0
 8001144:	4180      	sbcs	r0, r0
 8001146:	4240      	negs	r0, r0
 8001148:	1824      	adds	r4, r4, r0
 800114a:	0018      	movs	r0, r3
 800114c:	0223      	lsls	r3, r4, #8
 800114e:	d53a      	bpl.n	80011c6 <__aeabi_dmul+0x51a>
 8001150:	2301      	movs	r3, #1
 8001152:	2400      	movs	r4, #0
 8001154:	2500      	movs	r5, #0
 8001156:	e61b      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8001158:	f000 f8f6 	bl	8001348 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0003      	movs	r3, r0
 8001160:	3115      	adds	r1, #21
 8001162:	3320      	adds	r3, #32
 8001164:	291c      	cmp	r1, #28
 8001166:	dd8f      	ble.n	8001088 <__aeabi_dmul+0x3dc>
 8001168:	3808      	subs	r0, #8
 800116a:	2200      	movs	r2, #0
 800116c:	4084      	lsls	r4, r0
 800116e:	4692      	mov	sl, r2
 8001170:	46a3      	mov	fp, r4
 8001172:	e796      	b.n	80010a2 <__aeabi_dmul+0x3f6>
 8001174:	f000 f8e8 	bl	8001348 <__clzsi2>
 8001178:	0001      	movs	r1, r0
 800117a:	0003      	movs	r3, r0
 800117c:	3115      	adds	r1, #21
 800117e:	3320      	adds	r3, #32
 8001180:	291c      	cmp	r1, #28
 8001182:	dc00      	bgt.n	8001186 <__aeabi_dmul+0x4da>
 8001184:	e758      	b.n	8001038 <__aeabi_dmul+0x38c>
 8001186:	0002      	movs	r2, r0
 8001188:	464c      	mov	r4, r9
 800118a:	3a08      	subs	r2, #8
 800118c:	2000      	movs	r0, #0
 800118e:	4094      	lsls	r4, r2
 8001190:	e75d      	b.n	800104e <__aeabi_dmul+0x3a2>
 8001192:	9b01      	ldr	r3, [sp, #4]
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	e711      	b.n	8000fbc <__aeabi_dmul+0x310>
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <__aeabi_dmul+0x57c>)
 800119a:	0026      	movs	r6, r4
 800119c:	469c      	mov	ip, r3
 800119e:	0003      	movs	r3, r0
 80011a0:	9d02      	ldr	r5, [sp, #8]
 80011a2:	40cb      	lsrs	r3, r1
 80011a4:	4465      	add	r5, ip
 80011a6:	40ae      	lsls	r6, r5
 80011a8:	431e      	orrs	r6, r3
 80011aa:	0003      	movs	r3, r0
 80011ac:	40ab      	lsls	r3, r5
 80011ae:	1e58      	subs	r0, r3, #1
 80011b0:	4183      	sbcs	r3, r0
 80011b2:	0030      	movs	r0, r6
 80011b4:	4318      	orrs	r0, r3
 80011b6:	40cc      	lsrs	r4, r1
 80011b8:	0743      	lsls	r3, r0, #29
 80011ba:	d0c7      	beq.n	800114c <__aeabi_dmul+0x4a0>
 80011bc:	230f      	movs	r3, #15
 80011be:	4003      	ands	r3, r0
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d1bd      	bne.n	8001140 <__aeabi_dmul+0x494>
 80011c4:	e7c2      	b.n	800114c <__aeabi_dmul+0x4a0>
 80011c6:	0765      	lsls	r5, r4, #29
 80011c8:	0264      	lsls	r4, r4, #9
 80011ca:	0b24      	lsrs	r4, r4, #12
 80011cc:	08c0      	lsrs	r0, r0, #3
 80011ce:	2300      	movs	r3, #0
 80011d0:	4305      	orrs	r5, r0
 80011d2:	e5dd      	b.n	8000d90 <__aeabi_dmul+0xe4>
 80011d4:	2500      	movs	r5, #0
 80011d6:	2302      	movs	r3, #2
 80011d8:	2e0f      	cmp	r6, #15
 80011da:	d10c      	bne.n	80011f6 <__aeabi_dmul+0x54a>
 80011dc:	2480      	movs	r4, #128	; 0x80
 80011de:	465b      	mov	r3, fp
 80011e0:	0324      	lsls	r4, r4, #12
 80011e2:	4223      	tst	r3, r4
 80011e4:	d00e      	beq.n	8001204 <__aeabi_dmul+0x558>
 80011e6:	4221      	tst	r1, r4
 80011e8:	d10c      	bne.n	8001204 <__aeabi_dmul+0x558>
 80011ea:	430c      	orrs	r4, r1
 80011ec:	0324      	lsls	r4, r4, #12
 80011ee:	003a      	movs	r2, r7
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <__aeabi_dmul+0x580>)
 80011f2:	0b24      	lsrs	r4, r4, #12
 80011f4:	e5cc      	b.n	8000d90 <__aeabi_dmul+0xe4>
 80011f6:	2e0b      	cmp	r6, #11
 80011f8:	d000      	beq.n	80011fc <__aeabi_dmul+0x550>
 80011fa:	e5a2      	b.n	8000d42 <__aeabi_dmul+0x96>
 80011fc:	468b      	mov	fp, r1
 80011fe:	46aa      	mov	sl, r5
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	e5f7      	b.n	8000df4 <__aeabi_dmul+0x148>
 8001204:	2480      	movs	r4, #128	; 0x80
 8001206:	465b      	mov	r3, fp
 8001208:	0324      	lsls	r4, r4, #12
 800120a:	431c      	orrs	r4, r3
 800120c:	0324      	lsls	r4, r4, #12
 800120e:	4642      	mov	r2, r8
 8001210:	4655      	mov	r5, sl
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <__aeabi_dmul+0x580>)
 8001214:	0b24      	lsrs	r4, r4, #12
 8001216:	e5bb      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8001218:	464d      	mov	r5, r9
 800121a:	0021      	movs	r1, r4
 800121c:	2303      	movs	r3, #3
 800121e:	e7db      	b.n	80011d8 <__aeabi_dmul+0x52c>
 8001220:	fffffc0d 	.word	0xfffffc0d
 8001224:	0000043e 	.word	0x0000043e
 8001228:	0000041e 	.word	0x0000041e
 800122c:	000007ff 	.word	0x000007ff

08001230 <__aeabi_d2iz>:
 8001230:	000a      	movs	r2, r1
 8001232:	b530      	push	{r4, r5, lr}
 8001234:	4c13      	ldr	r4, [pc, #76]	; (8001284 <__aeabi_d2iz+0x54>)
 8001236:	0053      	lsls	r3, r2, #1
 8001238:	0309      	lsls	r1, r1, #12
 800123a:	0005      	movs	r5, r0
 800123c:	0b09      	lsrs	r1, r1, #12
 800123e:	2000      	movs	r0, #0
 8001240:	0d5b      	lsrs	r3, r3, #21
 8001242:	0fd2      	lsrs	r2, r2, #31
 8001244:	42a3      	cmp	r3, r4
 8001246:	dd04      	ble.n	8001252 <__aeabi_d2iz+0x22>
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <__aeabi_d2iz+0x58>)
 800124a:	4283      	cmp	r3, r0
 800124c:	dd02      	ble.n	8001254 <__aeabi_d2iz+0x24>
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <__aeabi_d2iz+0x5c>)
 8001250:	18d0      	adds	r0, r2, r3
 8001252:	bd30      	pop	{r4, r5, pc}
 8001254:	2080      	movs	r0, #128	; 0x80
 8001256:	0340      	lsls	r0, r0, #13
 8001258:	4301      	orrs	r1, r0
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <__aeabi_d2iz+0x60>)
 800125c:	1ac0      	subs	r0, r0, r3
 800125e:	281f      	cmp	r0, #31
 8001260:	dd08      	ble.n	8001274 <__aeabi_d2iz+0x44>
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <__aeabi_d2iz+0x64>)
 8001264:	1ac3      	subs	r3, r0, r3
 8001266:	40d9      	lsrs	r1, r3
 8001268:	000b      	movs	r3, r1
 800126a:	4258      	negs	r0, r3
 800126c:	2a00      	cmp	r2, #0
 800126e:	d1f0      	bne.n	8001252 <__aeabi_d2iz+0x22>
 8001270:	0018      	movs	r0, r3
 8001272:	e7ee      	b.n	8001252 <__aeabi_d2iz+0x22>
 8001274:	4c08      	ldr	r4, [pc, #32]	; (8001298 <__aeabi_d2iz+0x68>)
 8001276:	40c5      	lsrs	r5, r0
 8001278:	46a4      	mov	ip, r4
 800127a:	4463      	add	r3, ip
 800127c:	4099      	lsls	r1, r3
 800127e:	000b      	movs	r3, r1
 8001280:	432b      	orrs	r3, r5
 8001282:	e7f2      	b.n	800126a <__aeabi_d2iz+0x3a>
 8001284:	000003fe 	.word	0x000003fe
 8001288:	0000041d 	.word	0x0000041d
 800128c:	7fffffff 	.word	0x7fffffff
 8001290:	00000433 	.word	0x00000433
 8001294:	00000413 	.word	0x00000413
 8001298:	fffffbed 	.word	0xfffffbed

0800129c <__aeabi_i2d>:
 800129c:	b570      	push	{r4, r5, r6, lr}
 800129e:	2800      	cmp	r0, #0
 80012a0:	d016      	beq.n	80012d0 <__aeabi_i2d+0x34>
 80012a2:	17c3      	asrs	r3, r0, #31
 80012a4:	18c5      	adds	r5, r0, r3
 80012a6:	405d      	eors	r5, r3
 80012a8:	0fc4      	lsrs	r4, r0, #31
 80012aa:	0028      	movs	r0, r5
 80012ac:	f000 f84c 	bl	8001348 <__clzsi2>
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <__aeabi_i2d+0x5c>)
 80012b2:	1a1b      	subs	r3, r3, r0
 80012b4:	280a      	cmp	r0, #10
 80012b6:	dc16      	bgt.n	80012e6 <__aeabi_i2d+0x4a>
 80012b8:	0002      	movs	r2, r0
 80012ba:	002e      	movs	r6, r5
 80012bc:	3215      	adds	r2, #21
 80012be:	4096      	lsls	r6, r2
 80012c0:	220b      	movs	r2, #11
 80012c2:	1a12      	subs	r2, r2, r0
 80012c4:	40d5      	lsrs	r5, r2
 80012c6:	055b      	lsls	r3, r3, #21
 80012c8:	032d      	lsls	r5, r5, #12
 80012ca:	0b2d      	lsrs	r5, r5, #12
 80012cc:	0d5b      	lsrs	r3, r3, #21
 80012ce:	e003      	b.n	80012d8 <__aeabi_i2d+0x3c>
 80012d0:	2400      	movs	r4, #0
 80012d2:	2300      	movs	r3, #0
 80012d4:	2500      	movs	r5, #0
 80012d6:	2600      	movs	r6, #0
 80012d8:	051b      	lsls	r3, r3, #20
 80012da:	432b      	orrs	r3, r5
 80012dc:	07e4      	lsls	r4, r4, #31
 80012de:	4323      	orrs	r3, r4
 80012e0:	0030      	movs	r0, r6
 80012e2:	0019      	movs	r1, r3
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
 80012e6:	380b      	subs	r0, #11
 80012e8:	4085      	lsls	r5, r0
 80012ea:	055b      	lsls	r3, r3, #21
 80012ec:	032d      	lsls	r5, r5, #12
 80012ee:	2600      	movs	r6, #0
 80012f0:	0b2d      	lsrs	r5, r5, #12
 80012f2:	0d5b      	lsrs	r3, r3, #21
 80012f4:	e7f0      	b.n	80012d8 <__aeabi_i2d+0x3c>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	0000041e 	.word	0x0000041e

080012fc <__aeabi_ui2d>:
 80012fc:	b510      	push	{r4, lr}
 80012fe:	1e04      	subs	r4, r0, #0
 8001300:	d010      	beq.n	8001324 <__aeabi_ui2d+0x28>
 8001302:	f000 f821 	bl	8001348 <__clzsi2>
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <__aeabi_ui2d+0x48>)
 8001308:	1a1b      	subs	r3, r3, r0
 800130a:	280a      	cmp	r0, #10
 800130c:	dc11      	bgt.n	8001332 <__aeabi_ui2d+0x36>
 800130e:	220b      	movs	r2, #11
 8001310:	0021      	movs	r1, r4
 8001312:	1a12      	subs	r2, r2, r0
 8001314:	40d1      	lsrs	r1, r2
 8001316:	3015      	adds	r0, #21
 8001318:	030a      	lsls	r2, r1, #12
 800131a:	055b      	lsls	r3, r3, #21
 800131c:	4084      	lsls	r4, r0
 800131e:	0b12      	lsrs	r2, r2, #12
 8001320:	0d5b      	lsrs	r3, r3, #21
 8001322:	e001      	b.n	8001328 <__aeabi_ui2d+0x2c>
 8001324:	2300      	movs	r3, #0
 8001326:	2200      	movs	r2, #0
 8001328:	051b      	lsls	r3, r3, #20
 800132a:	4313      	orrs	r3, r2
 800132c:	0020      	movs	r0, r4
 800132e:	0019      	movs	r1, r3
 8001330:	bd10      	pop	{r4, pc}
 8001332:	0022      	movs	r2, r4
 8001334:	380b      	subs	r0, #11
 8001336:	4082      	lsls	r2, r0
 8001338:	055b      	lsls	r3, r3, #21
 800133a:	0312      	lsls	r2, r2, #12
 800133c:	2400      	movs	r4, #0
 800133e:	0b12      	lsrs	r2, r2, #12
 8001340:	0d5b      	lsrs	r3, r3, #21
 8001342:	e7f1      	b.n	8001328 <__aeabi_ui2d+0x2c>
 8001344:	0000041e 	.word	0x0000041e

08001348 <__clzsi2>:
 8001348:	211c      	movs	r1, #28
 800134a:	2301      	movs	r3, #1
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	4298      	cmp	r0, r3
 8001350:	d301      	bcc.n	8001356 <__clzsi2+0xe>
 8001352:	0c00      	lsrs	r0, r0, #16
 8001354:	3910      	subs	r1, #16
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	4298      	cmp	r0, r3
 800135a:	d301      	bcc.n	8001360 <__clzsi2+0x18>
 800135c:	0a00      	lsrs	r0, r0, #8
 800135e:	3908      	subs	r1, #8
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	4298      	cmp	r0, r3
 8001364:	d301      	bcc.n	800136a <__clzsi2+0x22>
 8001366:	0900      	lsrs	r0, r0, #4
 8001368:	3904      	subs	r1, #4
 800136a:	a202      	add	r2, pc, #8	; (adr r2, 8001374 <__clzsi2+0x2c>)
 800136c:	5c10      	ldrb	r0, [r2, r0]
 800136e:	1840      	adds	r0, r0, r1
 8001370:	4770      	bx	lr
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	02020304 	.word	0x02020304
 8001378:	01010101 	.word	0x01010101
	...

08001384 <__clzdi2>:
 8001384:	b510      	push	{r4, lr}
 8001386:	2900      	cmp	r1, #0
 8001388:	d103      	bne.n	8001392 <__clzdi2+0xe>
 800138a:	f7ff ffdd 	bl	8001348 <__clzsi2>
 800138e:	3020      	adds	r0, #32
 8001390:	e002      	b.n	8001398 <__clzdi2+0x14>
 8001392:	0008      	movs	r0, r1
 8001394:	f7ff ffd8 	bl	8001348 <__clzsi2>
 8001398:	bd10      	pop	{r4, pc}
 800139a:	46c0      	nop			; (mov r8, r8)

0800139c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E  // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b087      	sub	sp, #28
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	0002      	movs	r2, r0
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80013a8:	200f      	movs	r0, #15
 80013aa:	183b      	adds	r3, r7, r0
 80013ac:	1dfa      	adds	r2, r7, #7
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	210f      	movs	r1, #15
 80013b2:	438a      	bics	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	011a      	lsls	r2, r3, #4
 80013bc:	240e      	movs	r4, #14
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	220c      	movs	r2, #12
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	2108      	movs	r1, #8
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80013d2:	183b      	adds	r3, r7, r0
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2208      	movs	r2, #8
 80013d8:	4313      	orrs	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2208      	movs	r2, #8
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80013fc:	187a      	adds	r2, r7, r1
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <lcd_send_cmd+0x78>)
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2304      	movs	r3, #4
 8001406:	214e      	movs	r1, #78	; 0x4e
 8001408:	f001 fa88 	bl	800291c <HAL_I2C_Master_Transmit>
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b005      	add	sp, #20
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	200000a4 	.word	0x200000a4

08001418 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af02      	add	r7, sp, #8
 800141e:	0002      	movs	r2, r0
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001424:	200f      	movs	r0, #15
 8001426:	183b      	adds	r3, r7, r0
 8001428:	1dfa      	adds	r2, r7, #7
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	210f      	movs	r1, #15
 800142e:	438a      	bics	r2, r1
 8001430:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	011a      	lsls	r2, r3, #4
 8001438:	240e      	movs	r4, #14
 800143a:	193b      	adds	r3, r7, r4
 800143c:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800143e:	183b      	adds	r3, r7, r0
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	220d      	movs	r2, #13
 8001444:	4313      	orrs	r3, r2
 8001446:	b2da      	uxtb	r2, r3
 8001448:	2108      	movs	r1, #8
 800144a:	187b      	adds	r3, r7, r1
 800144c:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800144e:	183b      	adds	r3, r7, r0
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2209      	movs	r2, #9
 8001454:	4313      	orrs	r3, r2
 8001456:	b2da      	uxtb	r2, r3
 8001458:	187b      	adds	r3, r7, r1
 800145a:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800145c:	193b      	adds	r3, r7, r4
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	220d      	movs	r2, #13
 8001462:	4313      	orrs	r3, r2
 8001464:	b2da      	uxtb	r2, r3
 8001466:	187b      	adds	r3, r7, r1
 8001468:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800146a:	193b      	adds	r3, r7, r4
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2209      	movs	r2, #9
 8001470:	4313      	orrs	r3, r2
 8001472:	b2da      	uxtb	r2, r3
 8001474:	187b      	adds	r3, r7, r1
 8001476:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001478:	187a      	adds	r2, r7, r1
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <lcd_send_data+0x78>)
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2304      	movs	r3, #4
 8001482:	214e      	movs	r1, #78	; 0x4e
 8001484:	f001 fa4a 	bl	800291c <HAL_I2C_Master_Transmit>
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b005      	add	sp, #20
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	200000a4 	.word	0x200000a4

08001494 <lcd_clear>:

void lcd_clear (void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800149a:	2080      	movs	r0, #128	; 0x80
 800149c:	f7ff ff7e 	bl	800139c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	e005      	b.n	80014b2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80014a6:	2020      	movs	r0, #32
 80014a8:	f7ff ffb6 	bl	8001418 <lcd_send_data>
	for (int i=0; i<70; i++)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3301      	adds	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b45      	cmp	r3, #69	; 0x45
 80014b6:	ddf6      	ble.n	80014a6 <lcd_clear+0x12>
	}
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
    switch (row)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <lcd_put_cur+0x18>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d005      	beq.n	80014e4 <lcd_put_cur+0x22>
 80014d8:	e009      	b.n	80014ee <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	4313      	orrs	r3, r2
 80014e0:	603b      	str	r3, [r7, #0]
            break;
 80014e2:	e004      	b.n	80014ee <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	22c0      	movs	r2, #192	; 0xc0
 80014e8:	4313      	orrs	r3, r2
 80014ea:	603b      	str	r3, [r7, #0]
            break;
 80014ec:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff52 	bl	800139c <lcd_send_cmd>
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}

08001500 <lcd_init>:


void lcd_init (void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001504:	2032      	movs	r0, #50	; 0x32
 8001506:	f000 fef3 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800150a:	2030      	movs	r0, #48	; 0x30
 800150c:	f7ff ff46 	bl	800139c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001510:	2005      	movs	r0, #5
 8001512:	f000 feed 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001516:	2030      	movs	r0, #48	; 0x30
 8001518:	f7ff ff40 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800151c:	2001      	movs	r0, #1
 800151e:	f000 fee7 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001522:	2030      	movs	r0, #48	; 0x30
 8001524:	f7ff ff3a 	bl	800139c <lcd_send_cmd>
	HAL_Delay(10);
 8001528:	200a      	movs	r0, #10
 800152a:	f000 fee1 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800152e:	2020      	movs	r0, #32
 8001530:	f7ff ff34 	bl	800139c <lcd_send_cmd>
	HAL_Delay(10);
 8001534:	200a      	movs	r0, #10
 8001536:	f000 fedb 	bl	80022f0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800153a:	2028      	movs	r0, #40	; 0x28
 800153c:	f7ff ff2e 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f000 fed5 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001546:	2008      	movs	r0, #8
 8001548:	f7ff ff28 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f000 fecf 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff ff22 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f000 fec9 	bl	80022f0 <HAL_Delay>
	HAL_Delay(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f000 fec6 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001564:	2006      	movs	r0, #6
 8001566:	f7ff ff19 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f000 fec0 	bl	80022f0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001570:	200c      	movs	r0, #12
 8001572:	f7ff ff13 	bl	800139c <lcd_send_cmd>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001584:	e006      	b.n	8001594 <lcd_send_string+0x18>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff ff42 	bl	8001418 <lcd_send_data>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f4      	bne.n	8001586 <lcd_send_string+0xa>
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fe19 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f903 	bl	80017bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f000 f9d7 	bl	8001968 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80015ba:	f000 f987 	bl	80018cc <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015be:	f000 f945 	bl	800184c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  	  /* Start I2C Scan */
  	  i2cScanner();
 80015c2:	f000 fa2d 	bl	8001a20 <i2cScanner>

  	  /* LCD Init */
  	  lcd_init();
 80015c6:	f7ff ff9b 	bl	8001500 <lcd_init>

  	  /* LCD Messaging */
	  lcd_send_string ("Design Challenge");
 80015ca:	4b6e      	ldr	r3, [pc, #440]	; (8001784 <main+0x1dc>)
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ffd5 	bl	800157c <lcd_send_string>
	  HAL_Delay(500);
 80015d2:	23fa      	movs	r3, #250	; 0xfa
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 fe8a 	bl	80022f0 <HAL_Delay>
	  lcd_put_cur(1, 0);
 80015dc:	2100      	movs	r1, #0
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff ff6f 	bl	80014c2 <lcd_put_cur>
	  lcd_send_string("Vehicle Online");
 80015e4:	4b68      	ldr	r3, [pc, #416]	; (8001788 <main+0x1e0>)
 80015e6:	0018      	movs	r0, r3
 80015e8:	f7ff ffc8 	bl	800157c <lcd_send_string>
	  HAL_Delay(2000);
 80015ec:	23fa      	movs	r3, #250	; 0xfa
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 fe7d 	bl	80022f0 <HAL_Delay>
	  lcd_clear ();
 80015f6:	f7ff ff4d 	bl	8001494 <lcd_clear>

	  /* Initialise pressure sensor */
	  uint8_t ret = SPL06_007_Initialise( &pressureSensor, &hi2c1 );
 80015fa:	250f      	movs	r5, #15
 80015fc:	197c      	adds	r4, r7, r5
 80015fe:	4a63      	ldr	r2, [pc, #396]	; (800178c <main+0x1e4>)
 8001600:	4b63      	ldr	r3, [pc, #396]	; (8001790 <main+0x1e8>)
 8001602:	0011      	movs	r1, r2
 8001604:	0018      	movs	r0, r3
 8001606:	f000 fa6e 	bl	8001ae6 <SPL06_007_Initialise>
 800160a:	0003      	movs	r3, r0
 800160c:	7023      	strb	r3, [r4, #0]
	  if (ret == 0){
 800160e:	197b      	adds	r3, r7, r5
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d112      	bne.n	800163c <main+0x94>
		  // Success
		  sprintf(msg, "Successfully Connected to SPL006. \r\n");
 8001616:	4a5f      	ldr	r2, [pc, #380]	; (8001794 <main+0x1ec>)
 8001618:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <main+0x1f0>)
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f003 ff6f 	bl	8005500 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <main+0x1f0>)
 8001624:	0018      	movs	r0, r3
 8001626:	f7fe fd6d 	bl	8000104 <strlen>
 800162a:	0003      	movs	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	2301      	movs	r3, #1
 8001630:	425b      	negs	r3, r3
 8001632:	4959      	ldr	r1, [pc, #356]	; (8001798 <main+0x1f0>)
 8001634:	4859      	ldr	r0, [pc, #356]	; (800179c <main+0x1f4>)
 8001636:	f003 f8b3 	bl	80047a0 <HAL_UART_Transmit>
 800163a:	e013      	b.n	8001664 <main+0xbc>
	  } else {
		  // Errors
		  sprintf(msg, "Number of errors: %d\r\n", ret);
 800163c:	230f      	movs	r3, #15
 800163e:	18fb      	adds	r3, r7, r3
 8001640:	781a      	ldrb	r2, [r3, #0]
 8001642:	4957      	ldr	r1, [pc, #348]	; (80017a0 <main+0x1f8>)
 8001644:	4b54      	ldr	r3, [pc, #336]	; (8001798 <main+0x1f0>)
 8001646:	0018      	movs	r0, r3
 8001648:	f003 ff5a 	bl	8005500 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800164c:	4b52      	ldr	r3, [pc, #328]	; (8001798 <main+0x1f0>)
 800164e:	0018      	movs	r0, r3
 8001650:	f7fe fd58 	bl	8000104 <strlen>
 8001654:	0003      	movs	r3, r0
 8001656:	b29a      	uxth	r2, r3
 8001658:	2301      	movs	r3, #1
 800165a:	425b      	negs	r3, r3
 800165c:	494e      	ldr	r1, [pc, #312]	; (8001798 <main+0x1f0>)
 800165e:	484f      	ldr	r0, [pc, #316]	; (800179c <main+0x1f4>)
 8001660:	f003 f89e 	bl	80047a0 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Reading Raw Temperature */
	  uint32_t rawTemp = SPL06_007_getRawTemp(&pressureSensor);
 8001664:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <main+0x1e8>)
 8001666:	0018      	movs	r0, r3
 8001668:	f000 fb2a 	bl	8001cc0 <SPL06_007_getRawTemp>
 800166c:	0003      	movs	r3, r0
 800166e:	60bb      	str	r3, [r7, #8]
	  sprintf(msg, "RAW TEMP: %d\r\n", rawTemp);
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	494c      	ldr	r1, [pc, #304]	; (80017a4 <main+0x1fc>)
 8001674:	4b48      	ldr	r3, [pc, #288]	; (8001798 <main+0x1f0>)
 8001676:	0018      	movs	r0, r3
 8001678:	f003 ff42 	bl	8005500 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <main+0x1f0>)
 800167e:	0018      	movs	r0, r3
 8001680:	f7fe fd40 	bl	8000104 <strlen>
 8001684:	0003      	movs	r3, r0
 8001686:	b29a      	uxth	r2, r3
 8001688:	2301      	movs	r3, #1
 800168a:	425b      	negs	r3, r3
 800168c:	4942      	ldr	r1, [pc, #264]	; (8001798 <main+0x1f0>)
 800168e:	4843      	ldr	r0, [pc, #268]	; (800179c <main+0x1f4>)
 8001690:	f003 f886 	bl	80047a0 <HAL_UART_Transmit>

	  /* Reading Compensated Temperature */
	  uint32_t compTemp = SPL06_007_calcCompTemp(&pressureSensor, rawTemp);
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	4b3e      	ldr	r3, [pc, #248]	; (8001790 <main+0x1e8>)
 8001698:	0011      	movs	r1, r2
 800169a:	0018      	movs	r0, r3
 800169c:	f000 fac4 	bl	8001c28 <SPL06_007_calcCompTemp>
 80016a0:	0003      	movs	r3, r0
 80016a2:	607b      	str	r3, [r7, #4]
	  sprintf(msg, "COMP TEMP: %d\r\n", compTemp);
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	4940      	ldr	r1, [pc, #256]	; (80017a8 <main+0x200>)
 80016a8:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <main+0x1f0>)
 80016aa:	0018      	movs	r0, r3
 80016ac:	f003 ff28 	bl	8005500 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <main+0x1f0>)
 80016b2:	0018      	movs	r0, r3
 80016b4:	f7fe fd26 	bl	8000104 <strlen>
 80016b8:	0003      	movs	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	2301      	movs	r3, #1
 80016be:	425b      	negs	r3, r3
 80016c0:	4935      	ldr	r1, [pc, #212]	; (8001798 <main+0x1f0>)
 80016c2:	4836      	ldr	r0, [pc, #216]	; (800179c <main+0x1f4>)
 80016c4:	f003 f86c 	bl	80047a0 <HAL_UART_Transmit>

	  /* DEBUG - Print coefficient 0 */
	  int16_t  c0 = SPL06_007_getSplitHighCoefficient(&pressureSensor, SPL06_REG_C0, SPL06_REG_C01C1);
 80016c8:	1cbc      	adds	r4, r7, #2
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <main+0x1e8>)
 80016cc:	2211      	movs	r2, #17
 80016ce:	2110      	movs	r1, #16
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 fb31 	bl	8001d38 <SPL06_007_getSplitHighCoefficient>
 80016d6:	0003      	movs	r3, r0
 80016d8:	8023      	strh	r3, [r4, #0]
	  sprintf(msg, "C0: 0x%02X\r\n", c0);
 80016da:	1cbb      	adds	r3, r7, #2
 80016dc:	2200      	movs	r2, #0
 80016de:	5e9a      	ldrsh	r2, [r3, r2]
 80016e0:	4932      	ldr	r1, [pc, #200]	; (80017ac <main+0x204>)
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <main+0x1f0>)
 80016e4:	0018      	movs	r0, r3
 80016e6:	f003 ff0b 	bl	8005500 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016ea:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <main+0x1f0>)
 80016ec:	0018      	movs	r0, r3
 80016ee:	f7fe fd09 	bl	8000104 <strlen>
 80016f2:	0003      	movs	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	2301      	movs	r3, #1
 80016f8:	425b      	negs	r3, r3
 80016fa:	4927      	ldr	r1, [pc, #156]	; (8001798 <main+0x1f0>)
 80016fc:	4827      	ldr	r0, [pc, #156]	; (800179c <main+0x1f4>)
 80016fe:	f003 f84f 	bl	80047a0 <HAL_UART_Transmit>

	  /* DEBUG - Print coefficient 1 */
	  int16_t  c1 = SPL06_007_getSplitLowCoefficient(&pressureSensor, SPL06_REG_C01C1, SPL06_REG_C1);
 8001702:	003c      	movs	r4, r7
 8001704:	4b22      	ldr	r3, [pc, #136]	; (8001790 <main+0x1e8>)
 8001706:	2212      	movs	r2, #18
 8001708:	2111      	movs	r1, #17
 800170a:	0018      	movs	r0, r3
 800170c:	f000 fb4c 	bl	8001da8 <SPL06_007_getSplitLowCoefficient>
 8001710:	0003      	movs	r3, r0
 8001712:	8023      	strh	r3, [r4, #0]
	  sprintf(msg, "C1: 0x%02X\r\n", c1);
 8001714:	003b      	movs	r3, r7
 8001716:	2200      	movs	r2, #0
 8001718:	5e9a      	ldrsh	r2, [r3, r2]
 800171a:	4925      	ldr	r1, [pc, #148]	; (80017b0 <main+0x208>)
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <main+0x1f0>)
 800171e:	0018      	movs	r0, r3
 8001720:	f003 feee 	bl	8005500 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <main+0x1f0>)
 8001726:	0018      	movs	r0, r3
 8001728:	f7fe fcec 	bl	8000104 <strlen>
 800172c:	0003      	movs	r3, r0
 800172e:	b29a      	uxth	r2, r3
 8001730:	2301      	movs	r3, #1
 8001732:	425b      	negs	r3, r3
 8001734:	4918      	ldr	r1, [pc, #96]	; (8001798 <main+0x1f0>)
 8001736:	4819      	ldr	r0, [pc, #100]	; (800179c <main+0x1f4>)
 8001738:	f003 f832 	bl	80047a0 <HAL_UART_Transmit>

	  /* LCD Messaging */
	  lcd_put_cur(0, 0);
 800173c:	2100      	movs	r1, #0
 800173e:	2000      	movs	r0, #0
 8001740:	f7ff febf 	bl	80014c2 <lcd_put_cur>
	  lcd_send_string ("State A");
 8001744:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <main+0x20c>)
 8001746:	0018      	movs	r0, r3
 8001748:	f7ff ff18 	bl	800157c <lcd_send_string>
	  lcd_put_cur(1, 0);
 800174c:	2100      	movs	r1, #0
 800174e:	2001      	movs	r0, #1
 8001750:	f7ff feb7 	bl	80014c2 <lcd_put_cur>
	  sprintf(msg, "Temp: %d", rawTemp);
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	4918      	ldr	r1, [pc, #96]	; (80017b8 <main+0x210>)
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <main+0x1f0>)
 800175a:	0018      	movs	r0, r3
 800175c:	f003 fed0 	bl	8005500 <siprintf>
	  lcd_send_string (msg);
 8001760:	4b0d      	ldr	r3, [pc, #52]	; (8001798 <main+0x1f0>)
 8001762:	0018      	movs	r0, r3
 8001764:	f7ff ff0a 	bl	800157c <lcd_send_string>
	  HAL_Delay(1000);
 8001768:	23fa      	movs	r3, #250	; 0xfa
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	0018      	movs	r0, r3
 800176e:	f000 fdbf 	bl	80022f0 <HAL_Delay>
	  lcd_clear ();
 8001772:	f7ff fe8f 	bl	8001494 <lcd_clear>

	  HAL_Delay(500);
 8001776:	23fa      	movs	r3, #250	; 0xfa
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	0018      	movs	r0, r3
 800177c:	f000 fdb8 	bl	80022f0 <HAL_Delay>
  {
 8001780:	e770      	b.n	8001664 <main+0xbc>
 8001782:	46c0      	nop			; (mov r8, r8)
 8001784:	08005e64 	.word	0x08005e64
 8001788:	08005e78 	.word	0x08005e78
 800178c:	200000a4 	.word	0x200000a4
 8001790:	200001a8 	.word	0x200001a8
 8001794:	08005e88 	.word	0x08005e88
 8001798:	200001b8 	.word	0x200001b8
 800179c:	200000f8 	.word	0x200000f8
 80017a0:	08005eb0 	.word	0x08005eb0
 80017a4:	08005ec8 	.word	0x08005ec8
 80017a8:	08005ed8 	.word	0x08005ed8
 80017ac:	08005ee8 	.word	0x08005ee8
 80017b0:	08005ef8 	.word	0x08005ef8
 80017b4:	08005f08 	.word	0x08005f08
 80017b8:	08005f10 	.word	0x08005f10

080017bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b093      	sub	sp, #76	; 0x4c
 80017c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c2:	2410      	movs	r4, #16
 80017c4:	193b      	adds	r3, r7, r4
 80017c6:	0018      	movs	r0, r3
 80017c8:	2338      	movs	r3, #56	; 0x38
 80017ca:	001a      	movs	r2, r3
 80017cc:	2100      	movs	r1, #0
 80017ce:	f003 feb7 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017d2:	003b      	movs	r3, r7
 80017d4:	0018      	movs	r0, r3
 80017d6:	2310      	movs	r3, #16
 80017d8:	001a      	movs	r2, r3
 80017da:	2100      	movs	r1, #0
 80017dc:	f003 feb0 	bl	8005540 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	0018      	movs	r0, r3
 80017e6:	f002 f8bd 	bl	8003964 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	2202      	movs	r2, #2
 80017ee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f0:	193b      	adds	r3, r7, r4
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	0052      	lsls	r2, r2, #1
 80017f6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80017f8:	193b      	adds	r3, r7, r4
 80017fa:	2200      	movs	r2, #0
 80017fc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fe:	193b      	adds	r3, r7, r4
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001804:	193b      	adds	r3, r7, r4
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180a:	193b      	adds	r3, r7, r4
 800180c:	0018      	movs	r0, r3
 800180e:	f002 f8f5 	bl	80039fc <HAL_RCC_OscConfig>
 8001812:	1e03      	subs	r3, r0, #0
 8001814:	d001      	beq.n	800181a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001816:	f000 f961 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	003b      	movs	r3, r7
 800181c:	2207      	movs	r2, #7
 800181e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001820:	003b      	movs	r3, r7
 8001822:	2200      	movs	r2, #0
 8001824:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001826:	003b      	movs	r3, r7
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800182c:	003b      	movs	r3, r7
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001832:	003b      	movs	r3, r7
 8001834:	2100      	movs	r1, #0
 8001836:	0018      	movs	r0, r3
 8001838:	f002 fbfa 	bl	8004030 <HAL_RCC_ClockConfig>
 800183c:	1e03      	subs	r3, r0, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001840:	f000 f94c 	bl	8001adc <Error_Handler>
  }
}
 8001844:	46c0      	nop			; (mov r8, r8)
 8001846:	46bd      	mov	sp, r7
 8001848:	b013      	add	sp, #76	; 0x4c
 800184a:	bd90      	pop	{r4, r7, pc}

0800184c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_I2C1_Init+0x74>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <MX_I2C1_Init+0x78>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_I2C1_Init+0x74>)
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <MX_I2C1_Init+0x7c>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800185c:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_I2C1_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001862:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <MX_I2C1_Init+0x74>)
 8001864:	2201      	movs	r2, #1
 8001866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <MX_I2C1_Init+0x74>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800186e:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_I2C1_Init+0x74>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MX_I2C1_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_I2C1_Init+0x74>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_I2C1_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_I2C1_Init+0x74>)
 8001888:	0018      	movs	r0, r3
 800188a:	f000 ffa1 	bl	80027d0 <HAL_I2C_Init>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d001      	beq.n	8001896 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001892:	f000 f923 	bl	8001adc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001896:	4b0a      	ldr	r3, [pc, #40]	; (80018c0 <MX_I2C1_Init+0x74>)
 8001898:	2100      	movs	r1, #0
 800189a:	0018      	movs	r0, r3
 800189c:	f001 ffca 	bl	8003834 <HAL_I2CEx_ConfigAnalogFilter>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80018a4:	f000 f91a 	bl	8001adc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <MX_I2C1_Init+0x74>)
 80018aa:	2100      	movs	r1, #0
 80018ac:	0018      	movs	r0, r3
 80018ae:	f002 f80d 	bl	80038cc <HAL_I2CEx_ConfigDigitalFilter>
 80018b2:	1e03      	subs	r3, r0, #0
 80018b4:	d001      	beq.n	80018ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018b6:	f000 f911 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	200000a4 	.word	0x200000a4
 80018c4:	40005400 	.word	0x40005400
 80018c8:	00303d5b 	.word	0x00303d5b

080018cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <MX_USART2_UART_Init+0x94>)
 80018d2:	4a24      	ldr	r2, [pc, #144]	; (8001964 <MX_USART2_UART_Init+0x98>)
 80018d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018d6:	4b22      	ldr	r3, [pc, #136]	; (8001960 <MX_USART2_UART_Init+0x94>)
 80018d8:	22e1      	movs	r2, #225	; 0xe1
 80018da:	0252      	lsls	r2, r2, #9
 80018dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <MX_USART2_UART_Init+0x94>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <MX_USART2_UART_Init+0x94>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ea:	4b1d      	ldr	r3, [pc, #116]	; (8001960 <MX_USART2_UART_Init+0x94>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <MX_USART2_UART_Init+0x94>)
 80018f2:	220c      	movs	r2, #12
 80018f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <MX_USART2_UART_Init+0x94>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018fc:	4b18      	ldr	r3, [pc, #96]	; (8001960 <MX_USART2_UART_Init+0x94>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001902:	4b17      	ldr	r3, [pc, #92]	; (8001960 <MX_USART2_UART_Init+0x94>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_USART2_UART_Init+0x94>)
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_USART2_UART_Init+0x94>)
 8001910:	2200      	movs	r2, #0
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_USART2_UART_Init+0x94>)
 8001916:	0018      	movs	r0, r3
 8001918:	f002 feec 	bl	80046f4 <HAL_UART_Init>
 800191c:	1e03      	subs	r3, r0, #0
 800191e:	d001      	beq.n	8001924 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001920:	f000 f8dc 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001924:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_USART2_UART_Init+0x94>)
 8001926:	2100      	movs	r1, #0
 8001928:	0018      	movs	r0, r3
 800192a:	f003 fd09 	bl	8005340 <HAL_UARTEx_SetTxFifoThreshold>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d001      	beq.n	8001936 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001932:	f000 f8d3 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001936:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <MX_USART2_UART_Init+0x94>)
 8001938:	2100      	movs	r1, #0
 800193a:	0018      	movs	r0, r3
 800193c:	f003 fd40 	bl	80053c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001940:	1e03      	subs	r3, r0, #0
 8001942:	d001      	beq.n	8001948 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001944:	f000 f8ca 	bl	8001adc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <MX_USART2_UART_Init+0x94>)
 800194a:	0018      	movs	r0, r3
 800194c:	f003 fcbe 	bl	80052cc <HAL_UARTEx_DisableFifoMode>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d001      	beq.n	8001958 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001954:	f000 f8c2 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001958:	46c0      	nop			; (mov r8, r8)
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	200000f8 	.word	0x200000f8
 8001964:	40004400 	.word	0x40004400

08001968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b08b      	sub	sp, #44	; 0x2c
 800196c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800196e:	2414      	movs	r4, #20
 8001970:	193b      	adds	r3, r7, r4
 8001972:	0018      	movs	r0, r3
 8001974:	2314      	movs	r3, #20
 8001976:	001a      	movs	r2, r3
 8001978:	2100      	movs	r1, #0
 800197a:	f003 fde1 	bl	8005540 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <MX_GPIO_Init+0xb4>)
 8001980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_GPIO_Init+0xb4>)
 8001984:	2104      	movs	r1, #4
 8001986:	430a      	orrs	r2, r1
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_GPIO_Init+0xb4>)
 800198c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198e:	2204      	movs	r2, #4
 8001990:	4013      	ands	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001996:	4b21      	ldr	r3, [pc, #132]	; (8001a1c <MX_GPIO_Init+0xb4>)
 8001998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199a:	4b20      	ldr	r3, [pc, #128]	; (8001a1c <MX_GPIO_Init+0xb4>)
 800199c:	2120      	movs	r1, #32
 800199e:	430a      	orrs	r2, r1
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <MX_GPIO_Init+0xb4>)
 80019a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a6:	2220      	movs	r2, #32
 80019a8:	4013      	ands	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b1b      	ldr	r3, [pc, #108]	; (8001a1c <MX_GPIO_Init+0xb4>)
 80019b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b2:	4b1a      	ldr	r3, [pc, #104]	; (8001a1c <MX_GPIO_Init+0xb4>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	430a      	orrs	r2, r1
 80019b8:	635a      	str	r2, [r3, #52]	; 0x34
 80019ba:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <MX_GPIO_Init+0xb4>)
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	2201      	movs	r2, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <MX_GPIO_Init+0xb4>)
 80019c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <MX_GPIO_Init+0xb4>)
 80019cc:	2102      	movs	r1, #2
 80019ce:	430a      	orrs	r2, r1
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
 80019d2:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <MX_GPIO_Init+0xb4>)
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	2202      	movs	r2, #2
 80019d8:	4013      	ands	r3, r2
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80019de:	23a0      	movs	r3, #160	; 0xa0
 80019e0:	05db      	lsls	r3, r3, #23
 80019e2:	2200      	movs	r2, #0
 80019e4:	2120      	movs	r1, #32
 80019e6:	0018      	movs	r0, r3
 80019e8:	f000 fed4 	bl	8002794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80019ec:	0021      	movs	r1, r4
 80019ee:	187b      	adds	r3, r7, r1
 80019f0:	2220      	movs	r2, #32
 80019f2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	187b      	adds	r3, r7, r1
 80019f6:	2201      	movs	r2, #1
 80019f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	187b      	adds	r3, r7, r1
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2202      	movs	r2, #2
 8001a04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8001a06:	187a      	adds	r2, r7, r1
 8001a08:	23a0      	movs	r3, #160	; 0xa0
 8001a0a:	05db      	lsls	r3, r3, #23
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f000 fd5c 	bl	80024cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b00b      	add	sp, #44	; 0x2c
 8001a1a:	bd90      	pop	{r4, r7, pc}
 8001a1c:	40021000 	.word	0x40021000

08001a20 <i2cScanner>:

/* USER CODE BEGIN 4 */

	void i2cScanner(){
 8001a20:	b590      	push	{r4, r7, lr}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
		uint8_t i = 0, ret;
 8001a26:	1dfb      	adds	r3, r7, #7
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 8001a2c:	4b23      	ldr	r3, [pc, #140]	; (8001abc <i2cScanner+0x9c>)
 8001a2e:	4924      	ldr	r1, [pc, #144]	; (8001ac0 <i2cScanner+0xa0>)
 8001a30:	4824      	ldr	r0, [pc, #144]	; (8001ac4 <i2cScanner+0xa4>)
 8001a32:	221a      	movs	r2, #26
 8001a34:	f002 feb4 	bl	80047a0 <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8001a38:	1dfb      	adds	r3, r7, #7
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	e02d      	b.n	8001a9c <i2cScanner+0x7c>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8001a40:	1dfb      	adds	r3, r7, #7
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	18db      	adds	r3, r3, r3
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	1dbc      	adds	r4, r7, #6
 8001a4c:	481e      	ldr	r0, [pc, #120]	; (8001ac8 <i2cScanner+0xa8>)
 8001a4e:	2305      	movs	r3, #5
 8001a50:	2203      	movs	r2, #3
 8001a52:	f001 faef 	bl	8003034 <HAL_I2C_IsDeviceReady>
 8001a56:	0003      	movs	r3, r0
 8001a58:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 8001a5a:	1dbb      	adds	r3, r7, #6
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <i2cScanner+0x50>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 8001a62:	4b16      	ldr	r3, [pc, #88]	; (8001abc <i2cScanner+0x9c>)
 8001a64:	4919      	ldr	r1, [pc, #100]	; (8001acc <i2cScanner+0xac>)
 8001a66:	4817      	ldr	r0, [pc, #92]	; (8001ac4 <i2cScanner+0xa4>)
 8001a68:	2204      	movs	r2, #4
 8001a6a:	f002 fe99 	bl	80047a0 <HAL_UART_Transmit>
 8001a6e:	e010      	b.n	8001a92 <i2cScanner+0x72>
			}
			else if(ret == HAL_OK)
 8001a70:	1dbb      	adds	r3, r7, #6
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10c      	bne.n	8001a92 <i2cScanner+0x72>
			{
				sprintf(Buffer, "0x%X", i);
 8001a78:	1dfb      	adds	r3, r7, #7
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	4914      	ldr	r1, [pc, #80]	; (8001ad0 <i2cScanner+0xb0>)
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <i2cScanner+0xb4>)
 8001a80:	0018      	movs	r0, r3
 8001a82:	f003 fd3d 	bl	8005500 <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 8001a86:	4b0d      	ldr	r3, [pc, #52]	; (8001abc <i2cScanner+0x9c>)
 8001a88:	4912      	ldr	r1, [pc, #72]	; (8001ad4 <i2cScanner+0xb4>)
 8001a8a:	480e      	ldr	r0, [pc, #56]	; (8001ac4 <i2cScanner+0xa4>)
 8001a8c:	2219      	movs	r2, #25
 8001a8e:	f002 fe87 	bl	80047a0 <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	1dfb      	adds	r3, r7, #7
 8001a98:	3201      	adds	r2, #1
 8001a9a:	701a      	strb	r2, [r3, #0]
 8001a9c:	1dfb      	adds	r3, r7, #7
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dacc      	bge.n	8001a40 <i2cScanner+0x20>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 8001aa6:	4b05      	ldr	r3, [pc, #20]	; (8001abc <i2cScanner+0x9c>)
 8001aa8:	490b      	ldr	r1, [pc, #44]	; (8001ad8 <i2cScanner+0xb8>)
 8001aaa:	4806      	ldr	r0, [pc, #24]	; (8001ac4 <i2cScanner+0xa4>)
 8001aac:	220b      	movs	r2, #11
 8001aae:	f002 fe77 	bl	80047a0 <HAL_UART_Transmit>
	}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	b003      	add	sp, #12
 8001ab8:	bd90      	pop	{r4, r7, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	00002710 	.word	0x00002710
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	200000f8 	.word	0x200000f8
 8001ac8:	200000a4 	.word	0x200000a4
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	08005f1c 	.word	0x08005f1c
 8001ad4:	2000018c 	.word	0x2000018c
 8001ad8:	20000020 	.word	0x20000020

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <Error_Handler+0x8>

08001ae6 <SPL06_007_Initialise>:
#include "spl06-007.h"

/*
 * INITIALISATION
 */
uint8_t SPL06_007_Initialise( SPL06_007 *dev, I2C_HandleTypeDef *i2cHandle ){
 8001ae6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]

	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	601a      	str	r2, [r3, #0]

	dev->compensatedPressure = 0.0f;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]

	dev->compensatedTemperature = 0.0f;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]

	dev->scaleFactor = 2088960;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	22ff      	movs	r2, #255	; 0xff
 8001b06:	0352      	lsls	r2, r2, #13
 8001b08:	60da      	str	r2, [r3, #12]

	/* Store number of transaction errors (to be returned at end of function */
	uint8_t errNum = 0;
 8001b0a:	250f      	movs	r5, #15
 8001b0c:	197b      	adds	r3, r7, r5
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	/* Check device Product and Revision ID (DATASHEET PAGE 27) */
	uint8_t regData;
	status = SPL06_007_ReadRegister( dev, SPL06007_I2C_ID_ADDR, &regData);
 8001b12:	260e      	movs	r6, #14
 8001b14:	19bc      	adds	r4, r7, r6
 8001b16:	230d      	movs	r3, #13
 8001b18:	18fa      	adds	r2, r7, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	210d      	movs	r1, #13
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f000 f9bc 	bl	8001e9c <SPL06_007_ReadRegister>
 8001b24:	0003      	movs	r3, r0
 8001b26:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001b28:	19bb      	adds	r3, r7, r6
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	1e5a      	subs	r2, r3, #1
 8001b2e:	4193      	sbcs	r3, r2
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	0019      	movs	r1, r3
 8001b34:	197b      	adds	r3, r7, r5
 8001b36:	197a      	adds	r2, r7, r5
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	188a      	adds	r2, r1, r2
 8001b3c:	701a      	strb	r2, [r3, #0]

	if ( regData != SPL06007_I2C_REV_ID){
 8001b3e:	230d      	movs	r3, #13
 8001b40:	18fb      	adds	r3, r7, r3
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d001      	beq.n	8001b4c <SPL06_007_Initialise+0x66>
		return 255;
 8001b48:	23ff      	movs	r3, #255	; 0xff
 8001b4a:	e069      	b.n	8001c20 <SPL06_007_Initialise+0x13a>
	}

	/* Set Pressure Configuration (PRS_CFG) measurement rate and over sampling rate */
	/* Hard coded to: PM_RATE[2:0] = 111 - 128 measurements pr. sec.
					  PM_PRC[3:0] = 0110 *) - 64 times (High Precision) */
	uint8_t setRegValuePRS = 0x77;
 8001b4c:	210c      	movs	r1, #12
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	2277      	movs	r2, #119	; 0x77
 8001b52:	701a      	strb	r2, [r3, #0]
	status = SPL06_007_WriteRegister(dev, SPL06_REG_PRS_CFG_ADDR, &setRegValuePRS);
 8001b54:	250e      	movs	r5, #14
 8001b56:	197c      	adds	r4, r7, r5
 8001b58:	187a      	adds	r2, r7, r1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2106      	movs	r1, #6
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 f9ba 	bl	8001ed8 <SPL06_007_WriteRegister>
 8001b64:	0003      	movs	r3, r0
 8001b66:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001b68:	0028      	movs	r0, r5
 8001b6a:	183b      	adds	r3, r7, r0
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	1e5a      	subs	r2, r3, #1
 8001b70:	4193      	sbcs	r3, r2
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	0019      	movs	r1, r3
 8001b76:	250f      	movs	r5, #15
 8001b78:	197b      	adds	r3, r7, r5
 8001b7a:	197a      	adds	r2, r7, r5
 8001b7c:	7812      	ldrb	r2, [r2, #0]
 8001b7e:	188a      	adds	r2, r1, r2
 8001b80:	701a      	strb	r2, [r3, #0]

	/* Set Temperature Configuration (TMP_CFG) measurement rate and over sampling rate */
	/* Hard coded to: TMP_RATE[2:0] = 111 - 128 measurements pr. sec.
					  TMP_PRC[2:0] = 111 - 128 times. */
	uint8_t setRegValueTMP = 0xF7;
 8001b82:	210b      	movs	r1, #11
 8001b84:	187b      	adds	r3, r7, r1
 8001b86:	22f7      	movs	r2, #247	; 0xf7
 8001b88:	701a      	strb	r2, [r3, #0]
	status = SPL06_007_WriteRegister(dev, SPL06_REG_TMP_CFG_ADDR, &setRegValueTMP);
 8001b8a:	0006      	movs	r6, r0
 8001b8c:	183c      	adds	r4, r7, r0
 8001b8e:	187a      	adds	r2, r7, r1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2107      	movs	r1, #7
 8001b94:	0018      	movs	r0, r3
 8001b96:	f000 f99f 	bl	8001ed8 <SPL06_007_WriteRegister>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001b9e:	0030      	movs	r0, r6
 8001ba0:	183b      	adds	r3, r7, r0
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	1e5a      	subs	r2, r3, #1
 8001ba6:	4193      	sbcs	r3, r2
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	0019      	movs	r1, r3
 8001bac:	197b      	adds	r3, r7, r5
 8001bae:	197a      	adds	r2, r7, r5
 8001bb0:	7812      	ldrb	r2, [r2, #0]
 8001bb2:	188a      	adds	r2, r1, r2
 8001bb4:	701a      	strb	r2, [r3, #0]

	/* Set Interrupt and FIFO configuration (CFG_REG) */
	/* Hard coded to: T_SHIFT = Must be set to '1' when the oversampling rate is >8 times.
					  P_SHIFT = Must be set to '1' when the oversampling rate is >8 times. */
	uint8_t setRegValueCFG = 0xC;
 8001bb6:	210a      	movs	r1, #10
 8001bb8:	187b      	adds	r3, r7, r1
 8001bba:	220c      	movs	r2, #12
 8001bbc:	701a      	strb	r2, [r3, #0]
	status = SPL06_007_WriteRegister(dev, SPL06_REG_CFG_REG_ADDR, &setRegValueCFG);
 8001bbe:	0006      	movs	r6, r0
 8001bc0:	183c      	adds	r4, r7, r0
 8001bc2:	187a      	adds	r2, r7, r1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2109      	movs	r1, #9
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f000 f985 	bl	8001ed8 <SPL06_007_WriteRegister>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001bd2:	0030      	movs	r0, r6
 8001bd4:	183b      	adds	r3, r7, r0
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	4193      	sbcs	r3, r2
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	0019      	movs	r1, r3
 8001be0:	197b      	adds	r3, r7, r5
 8001be2:	197a      	adds	r2, r7, r5
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	188a      	adds	r2, r1, r2
 8001be8:	701a      	strb	r2, [r3, #0]

	/* Set Sensor Operating Mode and Status (MEAS_CFG) */
	/* Hard coded to: 111 - Continuous pressure and temperature measurement */
	uint8_t setRegValueMEAS = 0xC7;
 8001bea:	2109      	movs	r1, #9
 8001bec:	187b      	adds	r3, r7, r1
 8001bee:	22c7      	movs	r2, #199	; 0xc7
 8001bf0:	701a      	strb	r2, [r3, #0]
	status = SPL06_007_WriteRegister(dev, SPL06_REG_MEAS_CFG_ADDR, &setRegValueMEAS);
 8001bf2:	0006      	movs	r6, r0
 8001bf4:	183c      	adds	r4, r7, r0
 8001bf6:	187a      	adds	r2, r7, r1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2108      	movs	r1, #8
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 f96b 	bl	8001ed8 <SPL06_007_WriteRegister>
 8001c02:	0003      	movs	r3, r0
 8001c04:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001c06:	19bb      	adds	r3, r7, r6
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	1e5a      	subs	r2, r3, #1
 8001c0c:	4193      	sbcs	r3, r2
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	0019      	movs	r1, r3
 8001c12:	197b      	adds	r3, r7, r5
 8001c14:	197a      	adds	r2, r7, r5
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	188a      	adds	r2, r1, r2
 8001c1a:	701a      	strb	r2, [r3, #0]

	/* Return number of errors */
	return errNum;					/* 0 means successful setup */
 8001c1c:	197b      	adds	r3, r7, r5
 8001c1e:	781b      	ldrb	r3, [r3, #0]
}
 8001c20:	0018      	movs	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b005      	add	sp, #20
 8001c26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c28 <SPL06_007_calcCompTemp>:
 */
uint8_t SPL06_007_calcCompPressure( SPL06_007 *dev ){

}

uint32_t SPL06_007_calcCompTemp( SPL06_007 *dev, int32_t rawTemp ){
 8001c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
	uint32_t compTemp;
	int16_t c0 = SPL06_007_getSplitHighCoefficient(dev, SPL06_REG_C0, SPL06_REG_C01C1);
 8001c32:	250e      	movs	r5, #14
 8001c34:	197c      	adds	r4, r7, r5
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2211      	movs	r2, #17
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f000 f87b 	bl	8001d38 <SPL06_007_getSplitHighCoefficient>
 8001c42:	0003      	movs	r3, r0
 8001c44:	8023      	strh	r3, [r4, #0]
	int16_t c1 = SPL06_007_getSplitLowCoefficient(dev, SPL06_REG_C01C1, SPL06_REG_C1);
 8001c46:	260c      	movs	r6, #12
 8001c48:	19bc      	adds	r4, r7, r6
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2212      	movs	r2, #18
 8001c4e:	2111      	movs	r1, #17
 8001c50:	0018      	movs	r0, r3
 8001c52:	f000 f8a9 	bl	8001da8 <SPL06_007_getSplitLowCoefficient>
 8001c56:	0003      	movs	r3, r0
 8001c58:	8023      	strh	r3, [r4, #0]

	compTemp = rawTemp / 2088960;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	22ff      	movs	r2, #255	; 0xff
 8001c5e:	0351      	lsls	r1, r2, #13
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7fe faeb 	bl	800023c <__divsi3>
 8001c66:	0003      	movs	r3, r0
 8001c68:	60bb      	str	r3, [r7, #8]

	compTemp = (int32_t)((c0 * 0.5) + (c1 * compTemp));
 8001c6a:	197b      	adds	r3, r7, r5
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	5e9b      	ldrsh	r3, [r3, r2]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff fb13 	bl	800129c <__aeabi_i2d>
 8001c76:	2200      	movs	r2, #0
 8001c78:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <SPL06_007_calcCompTemp+0x94>)
 8001c7a:	f7ff f817 	bl	8000cac <__aeabi_dmul>
 8001c7e:	0002      	movs	r2, r0
 8001c80:	000b      	movs	r3, r1
 8001c82:	0014      	movs	r4, r2
 8001c84:	001d      	movs	r5, r3
 8001c86:	19bb      	adds	r3, r7, r6
 8001c88:	2200      	movs	r2, #0
 8001c8a:	5e9b      	ldrsh	r3, [r3, r2]
 8001c8c:	68ba      	ldr	r2, [r7, #8]
 8001c8e:	4353      	muls	r3, r2
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff fb33 	bl	80012fc <__aeabi_ui2d>
 8001c96:	0002      	movs	r2, r0
 8001c98:	000b      	movs	r3, r1
 8001c9a:	0020      	movs	r0, r4
 8001c9c:	0029      	movs	r1, r5
 8001c9e:	f7fe fca5 	bl	80005ec <__aeabi_dadd>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	000b      	movs	r3, r1
 8001ca6:	0010      	movs	r0, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	f7ff fac1 	bl	8001230 <__aeabi_d2iz>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	60bb      	str	r3, [r7, #8]

	return (int32_t)compTemp;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b005      	add	sp, #20
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbc:	3fe00000 	.word	0x3fe00000

08001cc0 <SPL06_007_getRawTemp>:

uint8_t SPL06_007_getRawPressure( SPL06_007 *dev ){

}

int32_t SPL06_007_getRawTemp( SPL06_007 *dev ){
 8001cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	int32_t rawTemp;

	uint8_t TMP_B2 = SPL06_007_getRegisterValue(dev, SPL06_REG_TMP_B2_ADDR);
 8001cc8:	250b      	movs	r5, #11
 8001cca:	197c      	adds	r4, r7, r5
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2103      	movs	r1, #3
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f000 f8ce 	bl	8001e72 <SPL06_007_getRegisterValue>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	7023      	strb	r3, [r4, #0]
	uint8_t TMP_B1 = SPL06_007_getRegisterValue(dev, SPL06_REG_TMP_B1_ADDR);
 8001cda:	260a      	movs	r6, #10
 8001cdc:	19bc      	adds	r4, r7, r6
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f000 f8c5 	bl	8001e72 <SPL06_007_getRegisterValue>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	7023      	strb	r3, [r4, #0]
	uint8_t TMP_B0 = SPL06_007_getRegisterValue(dev, SPL06_REG_TMP_B0_ADDR);
 8001cec:	2309      	movs	r3, #9
 8001cee:	18fc      	adds	r4, r7, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2105      	movs	r1, #5
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f000 f8bc 	bl	8001e72 <SPL06_007_getRegisterValue>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	7023      	strb	r3, [r4, #0]

	rawTemp = (TMP_B2 << 8) | TMP_B1;
 8001cfe:	197b      	adds	r3, r7, r5
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	021a      	lsls	r2, r3, #8
 8001d04:	19bb      	adds	r3, r7, r6
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]
	rawTemp = (rawTemp << 8) | TMP_B0;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
 8001d10:	2309      	movs	r3, #9
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]

	if(rawTemp & (1 << 23))
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	2380      	movs	r3, #128	; 0x80
 8001d1e:	041b      	lsls	r3, r3, #16
 8001d20:	4013      	ands	r3, r2
 8001d22:	d004      	beq.n	8001d2e <SPL06_007_getRawTemp+0x6e>
		rawTemp = rawTemp | 0XFF000000; // Set left bits to one for 2's complement conversion of negitive number
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	22ff      	movs	r2, #255	; 0xff
 8001d28:	0612      	lsls	r2, r2, #24
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]


	return rawTemp;
 8001d2e:	68fb      	ldr	r3, [r7, #12]

}
 8001d30:	0018      	movs	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b005      	add	sp, #20
 8001d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d38 <SPL06_007_getSplitHighCoefficient>:

int16_t SPL06_007_getSplitHighCoefficient( SPL06_007 *dev, uint8_t regHigh, uint8_t regLow){
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	0008      	movs	r0, r1
 8001d42:	0011      	movs	r1, r2
 8001d44:	1cfb      	adds	r3, r7, #3
 8001d46:	1c02      	adds	r2, r0, #0
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	1cbb      	adds	r3, r7, #2
 8001d4c:	1c0a      	adds	r2, r1, #0
 8001d4e:	701a      	strb	r2, [r3, #0]

	uint8_t cHigh = SPL06_007_getRegisterValue(dev, regHigh);
 8001d50:	250f      	movs	r5, #15
 8001d52:	197c      	adds	r4, r7, r5
 8001d54:	1cfb      	adds	r3, r7, #3
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	0011      	movs	r1, r2
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 f888 	bl	8001e72 <SPL06_007_getRegisterValue>
 8001d62:	0003      	movs	r3, r0
 8001d64:	7023      	strb	r3, [r4, #0]
	uint8_t cLow = (SPL06_007_getRegisterValue(dev, regLow) >> 4);
 8001d66:	1cbb      	adds	r3, r7, #2
 8001d68:	781a      	ldrb	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	0011      	movs	r1, r2
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f87f 	bl	8001e72 <SPL06_007_getRegisterValue>
 8001d74:	0003      	movs	r3, r0
 8001d76:	001a      	movs	r2, r3
 8001d78:	210e      	movs	r1, #14
 8001d7a:	187b      	adds	r3, r7, r1
 8001d7c:	0912      	lsrs	r2, r2, #4
 8001d7e:	701a      	strb	r2, [r3, #0]

	int16_t c = read_12_bit_value(cHigh, cLow);
 8001d80:	187b      	adds	r3, r7, r1
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	197b      	adds	r3, r7, r5
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	0011      	movs	r1, r2
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 f856 	bl	8001e3c <read_12_bit_value>
 8001d90:	0003      	movs	r3, r0
 8001d92:	001a      	movs	r2, r3
 8001d94:	210c      	movs	r1, #12
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	801a      	strh	r2, [r3, #0]
	return c;
 8001d9a:	187b      	adds	r3, r7, r1
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b004      	add	sp, #16
 8001da6:	bdb0      	pop	{r4, r5, r7, pc}

08001da8 <SPL06_007_getSplitLowCoefficient>:

int16_t SPL06_007_getSplitLowCoefficient( SPL06_007 *dev, uint8_t regHigh, uint8_t regLow){
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	0008      	movs	r0, r1
 8001db2:	0011      	movs	r1, r2
 8001db4:	1cfb      	adds	r3, r7, #3
 8001db6:	1c02      	adds	r2, r0, #0
 8001db8:	701a      	strb	r2, [r3, #0]
 8001dba:	1cbb      	adds	r3, r7, #2
 8001dbc:	1c0a      	adds	r2, r1, #0
 8001dbe:	701a      	strb	r2, [r3, #0]

	uint8_t cHigh = SPL06_007_getRegisterValue(dev, regHigh);
 8001dc0:	250d      	movs	r5, #13
 8001dc2:	197c      	adds	r4, r7, r5
 8001dc4:	1cfb      	adds	r3, r7, #3
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	0011      	movs	r1, r2
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 f850 	bl	8001e72 <SPL06_007_getRegisterValue>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	7023      	strb	r3, [r4, #0]
	uint8_t cLow = (SPL06_007_getRegisterValue(dev, regLow) & 0x0F);
 8001dd6:	1cbb      	adds	r3, r7, #2
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0011      	movs	r1, r2
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 f847 	bl	8001e72 <SPL06_007_getRegisterValue>
 8001de4:	0003      	movs	r3, r0
 8001de6:	0019      	movs	r1, r3
 8001de8:	200c      	movs	r0, #12
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	220f      	movs	r2, #15
 8001dee:	400a      	ands	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]

	int16_t c = read_12_bit_value(cHigh, cLow);
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	197b      	adds	r3, r7, r5
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	0011      	movs	r1, r2
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	f000 f81d 	bl	8001e3c <read_12_bit_value>
 8001e02:	0003      	movs	r3, r0
 8001e04:	001a      	movs	r2, r3
 8001e06:	210e      	movs	r1, #14
 8001e08:	187b      	adds	r3, r7, r1
 8001e0a:	801a      	strh	r2, [r3, #0]
	if(c & (1 << 11)) 		// Check for 2's complement negative number
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	001a      	movs	r2, r3
 8001e12:	2380      	movs	r3, #128	; 0x80
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	4013      	ands	r3, r2
 8001e18:	d005      	beq.n	8001e26 <SPL06_007_getSplitLowCoefficient+0x7e>
	    c = c | 0XF000; 	// Set left bits to one for 2's complement conversion of negitive number
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	187a      	adds	r2, r7, r1
 8001e1e:	8812      	ldrh	r2, [r2, #0]
 8001e20:	4905      	ldr	r1, [pc, #20]	; (8001e38 <SPL06_007_getSplitLowCoefficient+0x90>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	801a      	strh	r2, [r3, #0]

	return c;
 8001e26:	230e      	movs	r3, #14
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	fffff000 	.word	0xfffff000

08001e3c <read_12_bit_value>:

/*
 * LOW-LEVEL FUNCTIONS
 */
uint16_t read_12_bit_value(uint8_t high_byte, uint8_t low_byte) {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	0002      	movs	r2, r0
 8001e44:	1dfb      	adds	r3, r7, #7
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	1dbb      	adds	r3, r7, #6
 8001e4a:	1c0a      	adds	r2, r1, #0
 8001e4c:	701a      	strb	r2, [r3, #0]

    /* Combine the high_byte and low_byte to form the 12-bit value */
    uint16_t value = (high_byte << 4) | low_byte;
 8001e4e:	1dfb      	adds	r3, r7, #7
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	011b      	lsls	r3, r3, #4
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	1dbb      	adds	r3, r7, #6
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	b21a      	sxth	r2, r3
 8001e60:	210e      	movs	r1, #14
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	801a      	strh	r2, [r3, #0]

    return value;
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	881b      	ldrh	r3, [r3, #0]
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <SPL06_007_getRegisterValue>:

uint8_t SPL06_007_getRegisterValue( SPL06_007 *dev, uint8_t reg ){
 8001e72:	b590      	push	{r4, r7, lr}
 8001e74:	b085      	sub	sp, #20
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	000a      	movs	r2, r1
 8001e7c:	1cfb      	adds	r3, r7, #3
 8001e7e:	701a      	strb	r2, [r3, #0]

	uint8_t regData;
	SPL06_007_ReadRegister( dev, reg, &regData);
 8001e80:	240f      	movs	r4, #15
 8001e82:	193a      	adds	r2, r7, r4
 8001e84:	1cfb      	adds	r3, r7, #3
 8001e86:	7819      	ldrb	r1, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f000 f806 	bl	8001e9c <SPL06_007_ReadRegister>

	return regData;
 8001e90:	193b      	adds	r3, r7, r4
 8001e92:	781b      	ldrb	r3, [r3, #0]
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b005      	add	sp, #20
 8001e9a:	bd90      	pop	{r4, r7, pc}

08001e9c <SPL06_007_ReadRegister>:

HAL_StatusTypeDef SPL06_007_ReadRegister( SPL06_007 *dev, uint8_t reg, uint8_t *data ){
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af04      	add	r7, sp, #16
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	607a      	str	r2, [r7, #4]
 8001ea6:	240b      	movs	r4, #11
 8001ea8:	193b      	adds	r3, r7, r4
 8001eaa:	1c0a      	adds	r2, r1, #0
 8001eac:	701a      	strb	r2, [r3, #0]

	return HAL_I2C_Mem_Read(dev->i2cHandle, SPL06007_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	193b      	adds	r3, r7, r4
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2301      	movs	r3, #1
 8001eba:	425b      	negs	r3, r3
 8001ebc:	9302      	str	r3, [sp, #8]
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	21ec      	movs	r1, #236	; 0xec
 8001eca:	f000 ff7f 	bl	8002dcc <HAL_I2C_Mem_Read>
 8001ece:	0003      	movs	r3, r0

}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b005      	add	sp, #20
 8001ed6:	bd90      	pop	{r4, r7, pc}

08001ed8 <SPL06_007_WriteRegister>:

HAL_StatusTypeDef SPL06_007_WriteRegister( SPL06_007 *dev, uint8_t reg, uint8_t *data ){
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af04      	add	r7, sp, #16
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	240b      	movs	r4, #11
 8001ee4:	193b      	adds	r3, r7, r4
 8001ee6:	1c0a      	adds	r2, r1, #0
 8001ee8:	701a      	strb	r2, [r3, #0]

	return HAL_I2C_Mem_Write(dev->i2cHandle, SPL06007_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6818      	ldr	r0, [r3, #0]
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	425b      	negs	r3, r3
 8001ef8:	9302      	str	r3, [sp, #8]
 8001efa:	2301      	movs	r3, #1
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2301      	movs	r3, #1
 8001f04:	21ec      	movs	r1, #236	; 0xec
 8001f06:	f000 fe33 	bl	8002b70 <HAL_I2C_Mem_Write>
 8001f0a:	0003      	movs	r3, r0
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b005      	add	sp, #20
 8001f12:	bd90      	pop	{r4, r7, pc}

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f1e:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f20:	2101      	movs	r1, #1
 8001f22:	430a      	orrs	r2, r1
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b0b      	ldr	r3, [pc, #44]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f36:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	0549      	lsls	r1, r1, #21
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <HAL_MspInit+0x4c>)
 8001f42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f44:	2380      	movs	r3, #128	; 0x80
 8001f46:	055b      	lsls	r3, r3, #21
 8001f48:	4013      	ands	r3, r2
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001f4e:	23c0      	movs	r3, #192	; 0xc0
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	0018      	movs	r0, r3
 8001f54:	f000 f9f0 	bl	8002338 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000

08001f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b097      	sub	sp, #92	; 0x5c
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6c:	2344      	movs	r3, #68	; 0x44
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	0018      	movs	r0, r3
 8001f72:	2314      	movs	r3, #20
 8001f74:	001a      	movs	r2, r3
 8001f76:	2100      	movs	r1, #0
 8001f78:	f003 fae2 	bl	8005540 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f7c:	2410      	movs	r4, #16
 8001f7e:	193b      	adds	r3, r7, r4
 8001f80:	0018      	movs	r0, r3
 8001f82:	2334      	movs	r3, #52	; 0x34
 8001f84:	001a      	movs	r2, r3
 8001f86:	2100      	movs	r1, #0
 8001f88:	f003 fada 	bl	8005540 <memset>
  if(hi2c->Instance==I2C1)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a22      	ldr	r2, [pc, #136]	; (800201c <HAL_I2C_MspInit+0xb8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d13e      	bne.n	8002014 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f96:	193b      	adds	r3, r7, r4
 8001f98:	2220      	movs	r2, #32
 8001f9a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f9c:	193b      	adds	r3, r7, r4
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fa2:	193b      	adds	r3, r7, r4
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f002 f9ed 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 8001faa:	1e03      	subs	r3, r0, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001fae:	f7ff fd95 	bl	8001adc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_I2C_MspInit+0xbc>)
 8001fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <HAL_I2C_MspInit+0xbc>)
 8001fb8:	2102      	movs	r1, #2
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_I2C_MspInit+0xbc>)
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fca:	2144      	movs	r1, #68	; 0x44
 8001fcc:	187b      	adds	r3, r7, r1
 8001fce:	22c0      	movs	r2, #192	; 0xc0
 8001fd0:	0092      	lsls	r2, r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2212      	movs	r2, #18
 8001fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	2206      	movs	r2, #6
 8001fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_I2C_MspInit+0xc0>)
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	0010      	movs	r0, r2
 8001ff4:	f000 fa6a 	bl	80024cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_I2C_MspInit+0xbc>)
 8001ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0xbc>)
 8001ffe:	2180      	movs	r1, #128	; 0x80
 8002000:	0389      	lsls	r1, r1, #14
 8002002:	430a      	orrs	r2, r1
 8002004:	63da      	str	r2, [r3, #60]	; 0x3c
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_I2C_MspInit+0xbc>)
 8002008:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	039b      	lsls	r3, r3, #14
 800200e:	4013      	ands	r3, r2
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b017      	add	sp, #92	; 0x5c
 800201a:	bd90      	pop	{r4, r7, pc}
 800201c:	40005400 	.word	0x40005400
 8002020:	40021000 	.word	0x40021000
 8002024:	50000400 	.word	0x50000400

08002028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b097      	sub	sp, #92	; 0x5c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	2344      	movs	r3, #68	; 0x44
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	0018      	movs	r0, r3
 8002036:	2314      	movs	r3, #20
 8002038:	001a      	movs	r2, r3
 800203a:	2100      	movs	r1, #0
 800203c:	f003 fa80 	bl	8005540 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002040:	2410      	movs	r4, #16
 8002042:	193b      	adds	r3, r7, r4
 8002044:	0018      	movs	r0, r3
 8002046:	2334      	movs	r3, #52	; 0x34
 8002048:	001a      	movs	r2, r3
 800204a:	2100      	movs	r1, #0
 800204c:	f003 fa78 	bl	8005540 <memset>
  if(huart->Instance==USART2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a22      	ldr	r2, [pc, #136]	; (80020e0 <HAL_UART_MspInit+0xb8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d13e      	bne.n	80020d8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800205a:	193b      	adds	r3, r7, r4
 800205c:	2202      	movs	r2, #2
 800205e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002060:	193b      	adds	r3, r7, r4
 8002062:	2200      	movs	r2, #0
 8002064:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002066:	193b      	adds	r3, r7, r4
 8002068:	0018      	movs	r0, r3
 800206a:	f002 f98b 	bl	8004384 <HAL_RCCEx_PeriphCLKConfig>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d001      	beq.n	8002076 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002072:	f7ff fd33 	bl	8001adc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_UART_MspInit+0xbc>)
 8002078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800207a:	4b1a      	ldr	r3, [pc, #104]	; (80020e4 <HAL_UART_MspInit+0xbc>)
 800207c:	2180      	movs	r1, #128	; 0x80
 800207e:	0289      	lsls	r1, r1, #10
 8002080:	430a      	orrs	r2, r1
 8002082:	63da      	str	r2, [r3, #60]	; 0x3c
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <HAL_UART_MspInit+0xbc>)
 8002086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	029b      	lsls	r3, r3, #10
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <HAL_UART_MspInit+0xbc>)
 8002094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <HAL_UART_MspInit+0xbc>)
 8002098:	2101      	movs	r1, #1
 800209a:	430a      	orrs	r2, r1
 800209c:	635a      	str	r2, [r3, #52]	; 0x34
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <HAL_UART_MspInit+0xbc>)
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	2201      	movs	r2, #1
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80020aa:	2144      	movs	r1, #68	; 0x44
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	2202      	movs	r2, #2
 80020b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	2201      	movs	r2, #1
 80020bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2201      	movs	r2, #1
 80020c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ca:	187a      	adds	r2, r7, r1
 80020cc:	23a0      	movs	r3, #160	; 0xa0
 80020ce:	05db      	lsls	r3, r3, #23
 80020d0:	0011      	movs	r1, r2
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 f9fa 	bl	80024cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b017      	add	sp, #92	; 0x5c
 80020de:	bd90      	pop	{r4, r7, pc}
 80020e0:	40004400 	.word	0x40004400
 80020e4:	40021000 	.word	0x40021000

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020ec:	e7fe      	b.n	80020ec <NMI_Handler+0x4>

080020ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <HardFault_Handler+0x4>

080020f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020f8:	46c0      	nop			; (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210c:	f000 f8d4 	bl	80022b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002110:	46c0      	nop			; (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002120:	4a14      	ldr	r2, [pc, #80]	; (8002174 <_sbrk+0x5c>)
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <_sbrk+0x60>)
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <_sbrk+0x64>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d102      	bne.n	800213a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002134:	4b11      	ldr	r3, [pc, #68]	; (800217c <_sbrk+0x64>)
 8002136:	4a12      	ldr	r2, [pc, #72]	; (8002180 <_sbrk+0x68>)
 8002138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	18d3      	adds	r3, r2, r3
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d207      	bcs.n	8002158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002148:	f003 fa02 	bl	8005550 <__errno>
 800214c:	0003      	movs	r3, r0
 800214e:	220c      	movs	r2, #12
 8002150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002152:	2301      	movs	r3, #1
 8002154:	425b      	negs	r3, r3
 8002156:	e009      	b.n	800216c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800215e:	4b07      	ldr	r3, [pc, #28]	; (800217c <_sbrk+0x64>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	18d2      	adds	r2, r2, r3
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <_sbrk+0x64>)
 8002168:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800216a:	68fb      	ldr	r3, [r7, #12]
}
 800216c:	0018      	movs	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	b006      	add	sp, #24
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20009000 	.word	0x20009000
 8002178:	00000400 	.word	0x00000400
 800217c:	200001e0 	.word	0x200001e0
 8002180:	20000330 	.word	0x20000330

08002184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	46c0      	nop			; (mov r8, r8)
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002192:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002194:	f7ff fff6 	bl	8002184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	; (80021cc <LoopForever+0x6>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	; (80021d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <LoopForever+0xe>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	; (80021dc <LoopForever+0x16>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021be:	f003 f9cd 	bl	800555c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80021c2:	f7ff f9f1 	bl	80015a8 <main>

080021c6 <LoopForever>:

LoopForever:
  b LoopForever
 80021c6:	e7fe      	b.n	80021c6 <LoopForever>
  ldr   r0, =_estack
 80021c8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80021d4:	08005ff0 	.word	0x08005ff0
  ldr r2, =_sbss
 80021d8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80021dc:	20000330 	.word	0x20000330

080021e0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC1_COMP_IRQHandler>
	...

080021e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_Init+0x3c>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_Init+0x3c>)
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0049      	lsls	r1, r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021fe:	2000      	movs	r0, #0
 8002200:	f000 f810 	bl	8002224 <HAL_InitTick>
 8002204:	1e03      	subs	r3, r0, #0
 8002206:	d003      	beq.n	8002210 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002208:	1dfb      	adds	r3, r7, #7
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e001      	b.n	8002214 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff fe80 	bl	8001f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002214:	1dfb      	adds	r3, r7, #7
 8002216:	781b      	ldrb	r3, [r3, #0]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40022000 	.word	0x40022000

08002224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b590      	push	{r4, r7, lr}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800222c:	230f      	movs	r3, #15
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002234:	4b1d      	ldr	r3, [pc, #116]	; (80022ac <HAL_InitTick+0x88>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d02b      	beq.n	8002294 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <HAL_InitTick+0x8c>)
 800223e:	681c      	ldr	r4, [r3, #0]
 8002240:	4b1a      	ldr	r3, [pc, #104]	; (80022ac <HAL_InitTick+0x88>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	0019      	movs	r1, r3
 8002246:	23fa      	movs	r3, #250	; 0xfa
 8002248:	0098      	lsls	r0, r3, #2
 800224a:	f7fd ff6d 	bl	8000128 <__udivsi3>
 800224e:	0003      	movs	r3, r0
 8002250:	0019      	movs	r1, r3
 8002252:	0020      	movs	r0, r4
 8002254:	f7fd ff68 	bl	8000128 <__udivsi3>
 8002258:	0003      	movs	r3, r0
 800225a:	0018      	movs	r0, r3
 800225c:	f000 f929 	bl	80024b2 <HAL_SYSTICK_Config>
 8002260:	1e03      	subs	r3, r0, #0
 8002262:	d112      	bne.n	800228a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b03      	cmp	r3, #3
 8002268:	d80a      	bhi.n	8002280 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	2301      	movs	r3, #1
 800226e:	425b      	negs	r3, r3
 8002270:	2200      	movs	r2, #0
 8002272:	0018      	movs	r0, r3
 8002274:	f000 f908 	bl	8002488 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002278:	4b0e      	ldr	r3, [pc, #56]	; (80022b4 <HAL_InitTick+0x90>)
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e00d      	b.n	800229c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002280:	230f      	movs	r3, #15
 8002282:	18fb      	adds	r3, r7, r3
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e008      	b.n	800229c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800228a:	230f      	movs	r3, #15
 800228c:	18fb      	adds	r3, r7, r3
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	e003      	b.n	800229c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002294:	230f      	movs	r3, #15
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800229c:	230f      	movs	r3, #15
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	781b      	ldrb	r3, [r3, #0]
}
 80022a2:	0018      	movs	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	b005      	add	sp, #20
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	20000034 	.word	0x20000034
 80022b0:	2000002c 	.word	0x2000002c
 80022b4:	20000030 	.word	0x20000030

080022b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_IncTick+0x1c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	001a      	movs	r2, r3
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_IncTick+0x20>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	18d2      	adds	r2, r2, r3
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_IncTick+0x20>)
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	20000034 	.word	0x20000034
 80022d8:	200001e4 	.word	0x200001e4

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <HAL_GetTick+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	200001e4 	.word	0x200001e4

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff fff0 	bl	80022dc <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3301      	adds	r3, #1
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	001a      	movs	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	189b      	adds	r3, r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	f7ff ffe0 	bl	80022dc <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b004      	add	sp, #16
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000034 	.word	0x20000034

08002338 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a06      	ldr	r2, [pc, #24]	; (8002360 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	430a      	orrs	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	40010000 	.word	0x40010000
 8002360:	fffff9ff 	.word	0xfffff9ff

08002364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002364:	b590      	push	{r4, r7, lr}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	0002      	movs	r2, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b7f      	cmp	r3, #127	; 0x7f
 8002378:	d828      	bhi.n	80023cc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800237a:	4a2f      	ldr	r2, [pc, #188]	; (8002438 <__NVIC_SetPriority+0xd4>)
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b25b      	sxtb	r3, r3
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	33c0      	adds	r3, #192	; 0xc0
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	589b      	ldr	r3, [r3, r2]
 800238a:	1dfa      	adds	r2, r7, #7
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	0011      	movs	r1, r2
 8002390:	2203      	movs	r2, #3
 8002392:	400a      	ands	r2, r1
 8002394:	00d2      	lsls	r2, r2, #3
 8002396:	21ff      	movs	r1, #255	; 0xff
 8002398:	4091      	lsls	r1, r2
 800239a:	000a      	movs	r2, r1
 800239c:	43d2      	mvns	r2, r2
 800239e:	401a      	ands	r2, r3
 80023a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	019b      	lsls	r3, r3, #6
 80023a6:	22ff      	movs	r2, #255	; 0xff
 80023a8:	401a      	ands	r2, r3
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	0018      	movs	r0, r3
 80023b0:	2303      	movs	r3, #3
 80023b2:	4003      	ands	r3, r0
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b8:	481f      	ldr	r0, [pc, #124]	; (8002438 <__NVIC_SetPriority+0xd4>)
 80023ba:	1dfb      	adds	r3, r7, #7
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	b25b      	sxtb	r3, r3
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	430a      	orrs	r2, r1
 80023c4:	33c0      	adds	r3, #192	; 0xc0
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023ca:	e031      	b.n	8002430 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023cc:	4a1b      	ldr	r2, [pc, #108]	; (800243c <__NVIC_SetPriority+0xd8>)
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	0019      	movs	r1, r3
 80023d4:	230f      	movs	r3, #15
 80023d6:	400b      	ands	r3, r1
 80023d8:	3b08      	subs	r3, #8
 80023da:	089b      	lsrs	r3, r3, #2
 80023dc:	3306      	adds	r3, #6
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	18d3      	adds	r3, r2, r3
 80023e2:	3304      	adds	r3, #4
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1dfa      	adds	r2, r7, #7
 80023e8:	7812      	ldrb	r2, [r2, #0]
 80023ea:	0011      	movs	r1, r2
 80023ec:	2203      	movs	r2, #3
 80023ee:	400a      	ands	r2, r1
 80023f0:	00d2      	lsls	r2, r2, #3
 80023f2:	21ff      	movs	r1, #255	; 0xff
 80023f4:	4091      	lsls	r1, r2
 80023f6:	000a      	movs	r2, r1
 80023f8:	43d2      	mvns	r2, r2
 80023fa:	401a      	ands	r2, r3
 80023fc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	22ff      	movs	r2, #255	; 0xff
 8002404:	401a      	ands	r2, r3
 8002406:	1dfb      	adds	r3, r7, #7
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	0018      	movs	r0, r3
 800240c:	2303      	movs	r3, #3
 800240e:	4003      	ands	r3, r0
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002414:	4809      	ldr	r0, [pc, #36]	; (800243c <__NVIC_SetPriority+0xd8>)
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	001c      	movs	r4, r3
 800241c:	230f      	movs	r3, #15
 800241e:	4023      	ands	r3, r4
 8002420:	3b08      	subs	r3, #8
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	430a      	orrs	r2, r1
 8002426:	3306      	adds	r3, #6
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	18c3      	adds	r3, r0, r3
 800242c:	3304      	adds	r3, #4
 800242e:	601a      	str	r2, [r3, #0]
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b003      	add	sp, #12
 8002436:	bd90      	pop	{r4, r7, pc}
 8002438:	e000e100 	.word	0xe000e100
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	1e5a      	subs	r2, r3, #1
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	045b      	lsls	r3, r3, #17
 8002450:	429a      	cmp	r2, r3
 8002452:	d301      	bcc.n	8002458 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002454:	2301      	movs	r3, #1
 8002456:	e010      	b.n	800247a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002458:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <SysTick_Config+0x44>)
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	3a01      	subs	r2, #1
 800245e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002460:	2301      	movs	r3, #1
 8002462:	425b      	negs	r3, r3
 8002464:	2103      	movs	r1, #3
 8002466:	0018      	movs	r0, r3
 8002468:	f7ff ff7c 	bl	8002364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <SysTick_Config+0x44>)
 800246e:	2200      	movs	r2, #0
 8002470:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002472:	4b04      	ldr	r3, [pc, #16]	; (8002484 <SysTick_Config+0x44>)
 8002474:	2207      	movs	r2, #7
 8002476:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b002      	add	sp, #8
 8002480:	bd80      	pop	{r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	e000e010 	.word	0xe000e010

08002488 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	210f      	movs	r1, #15
 8002494:	187b      	adds	r3, r7, r1
 8002496:	1c02      	adds	r2, r0, #0
 8002498:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	187b      	adds	r3, r7, r1
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	b25b      	sxtb	r3, r3
 80024a2:	0011      	movs	r1, r2
 80024a4:	0018      	movs	r0, r3
 80024a6:	f7ff ff5d 	bl	8002364 <__NVIC_SetPriority>
}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	46bd      	mov	sp, r7
 80024ae:	b004      	add	sp, #16
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b082      	sub	sp, #8
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff ffbf 	bl	8002440 <SysTick_Config>
 80024c2:	0003      	movs	r3, r0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024da:	e147      	b.n	800276c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2101      	movs	r1, #1
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4091      	lsls	r1, r2
 80024e6:	000a      	movs	r2, r1
 80024e8:	4013      	ands	r3, r2
 80024ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d100      	bne.n	80024f4 <HAL_GPIO_Init+0x28>
 80024f2:	e138      	b.n	8002766 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2203      	movs	r2, #3
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d005      	beq.n	800250c <HAL_GPIO_Init+0x40>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	4013      	ands	r3, r2
 8002508:	2b02      	cmp	r3, #2
 800250a:	d130      	bne.n	800256e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	409a      	lsls	r2, r3
 800251a:	0013      	movs	r3, r2
 800251c:	43da      	mvns	r2, r3
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	409a      	lsls	r2, r3
 800252e:	0013      	movs	r3, r2
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002542:	2201      	movs	r2, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	409a      	lsls	r2, r3
 8002548:	0013      	movs	r3, r2
 800254a:	43da      	mvns	r2, r3
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4013      	ands	r3, r2
 8002550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	091b      	lsrs	r3, r3, #4
 8002558:	2201      	movs	r2, #1
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
 8002560:	0013      	movs	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2203      	movs	r2, #3
 8002574:	4013      	ands	r3, r2
 8002576:	2b03      	cmp	r3, #3
 8002578:	d017      	beq.n	80025aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	2203      	movs	r2, #3
 8002586:	409a      	lsls	r2, r3
 8002588:	0013      	movs	r3, r2
 800258a:	43da      	mvns	r2, r3
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4013      	ands	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	0013      	movs	r3, r2
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2203      	movs	r2, #3
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d123      	bne.n	80025fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	08da      	lsrs	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3208      	adds	r2, #8
 80025be:	0092      	lsls	r2, r2, #2
 80025c0:	58d3      	ldr	r3, [r2, r3]
 80025c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	2207      	movs	r2, #7
 80025c8:	4013      	ands	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	409a      	lsls	r2, r3
 80025d0:	0013      	movs	r3, r2
 80025d2:	43da      	mvns	r2, r3
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4013      	ands	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	2107      	movs	r1, #7
 80025e2:	400b      	ands	r3, r1
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	409a      	lsls	r2, r3
 80025e8:	0013      	movs	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	08da      	lsrs	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3208      	adds	r2, #8
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	6939      	ldr	r1, [r7, #16]
 80025fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	005b      	lsls	r3, r3, #1
 8002608:	2203      	movs	r2, #3
 800260a:	409a      	lsls	r2, r3
 800260c:	0013      	movs	r3, r2
 800260e:	43da      	mvns	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2203      	movs	r2, #3
 800261c:	401a      	ands	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	409a      	lsls	r2, r3
 8002624:	0013      	movs	r3, r2
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	23c0      	movs	r3, #192	; 0xc0
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	4013      	ands	r3, r2
 800263c:	d100      	bne.n	8002640 <HAL_GPIO_Init+0x174>
 800263e:	e092      	b.n	8002766 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002640:	4a50      	ldr	r2, [pc, #320]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	089b      	lsrs	r3, r3, #2
 8002646:	3318      	adds	r3, #24
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	589b      	ldr	r3, [r3, r2]
 800264c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	2203      	movs	r2, #3
 8002652:	4013      	ands	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	220f      	movs	r2, #15
 8002658:	409a      	lsls	r2, r3
 800265a:	0013      	movs	r3, r2
 800265c:	43da      	mvns	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	23a0      	movs	r3, #160	; 0xa0
 8002668:	05db      	lsls	r3, r3, #23
 800266a:	429a      	cmp	r2, r3
 800266c:	d013      	beq.n	8002696 <HAL_GPIO_Init+0x1ca>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a45      	ldr	r2, [pc, #276]	; (8002788 <HAL_GPIO_Init+0x2bc>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d00d      	beq.n	8002692 <HAL_GPIO_Init+0x1c6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a44      	ldr	r2, [pc, #272]	; (800278c <HAL_GPIO_Init+0x2c0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d007      	beq.n	800268e <HAL_GPIO_Init+0x1c2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a43      	ldr	r2, [pc, #268]	; (8002790 <HAL_GPIO_Init+0x2c4>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_GPIO_Init+0x1be>
 8002686:	2303      	movs	r3, #3
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x1cc>
 800268a:	2305      	movs	r3, #5
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x1cc>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x1cc>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x1cc>
 8002696:	2300      	movs	r3, #0
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	2103      	movs	r1, #3
 800269c:	400a      	ands	r2, r1
 800269e:	00d2      	lsls	r2, r2, #3
 80026a0:	4093      	lsls	r3, r2
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80026a8:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3318      	adds	r3, #24
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43da      	mvns	r2, r3
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	035b      	lsls	r3, r3, #13
 80026ce:	4013      	ands	r3, r2
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	039b      	lsls	r3, r3, #14
 80026f8:	4013      	ands	r3, r2
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002704:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 800270c:	2384      	movs	r3, #132	; 0x84
 800270e:	58d3      	ldr	r3, [r2, r3]
 8002710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	43da      	mvns	r2, r3
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4013      	ands	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	029b      	lsls	r3, r3, #10
 8002724:	4013      	ands	r3, r2
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002730:	4914      	ldr	r1, [pc, #80]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 8002732:	2284      	movs	r2, #132	; 0x84
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002738:	4a12      	ldr	r2, [pc, #72]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	58d3      	ldr	r3, [r2, r3]
 800273e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	43da      	mvns	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4013      	ands	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	025b      	lsls	r3, r3, #9
 8002752:	4013      	ands	r3, r2
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800275e:	4909      	ldr	r1, [pc, #36]	; (8002784 <HAL_GPIO_Init+0x2b8>)
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	40da      	lsrs	r2, r3
 8002774:	1e13      	subs	r3, r2, #0
 8002776:	d000      	beq.n	800277a <HAL_GPIO_Init+0x2ae>
 8002778:	e6b0      	b.n	80024dc <HAL_GPIO_Init+0x10>
  }
}
 800277a:	46c0      	nop			; (mov r8, r8)
 800277c:	46c0      	nop			; (mov r8, r8)
 800277e:	46bd      	mov	sp, r7
 8002780:	b006      	add	sp, #24
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40021800 	.word	0x40021800
 8002788:	50000400 	.word	0x50000400
 800278c:	50000800 	.word	0x50000800
 8002790:	50000c00 	.word	0x50000c00

08002794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	0008      	movs	r0, r1
 800279e:	0011      	movs	r1, r2
 80027a0:	1cbb      	adds	r3, r7, #2
 80027a2:	1c02      	adds	r2, r0, #0
 80027a4:	801a      	strh	r2, [r3, #0]
 80027a6:	1c7b      	adds	r3, r7, #1
 80027a8:	1c0a      	adds	r2, r1, #0
 80027aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027ac:	1c7b      	adds	r3, r7, #1
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d004      	beq.n	80027be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b4:	1cbb      	adds	r3, r7, #2
 80027b6:	881a      	ldrh	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027bc:	e003      	b.n	80027c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027be:	1cbb      	adds	r3, r7, #2
 80027c0:	881a      	ldrh	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027c6:	46c0      	nop			; (mov r8, r8)
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b002      	add	sp, #8
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e08f      	b.n	8002902 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2241      	movs	r2, #65	; 0x41
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d107      	bne.n	80027fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2240      	movs	r2, #64	; 0x40
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7ff fbb3 	bl	8001f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2241      	movs	r2, #65	; 0x41
 8002802:	2124      	movs	r1, #36	; 0x24
 8002804:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	438a      	bics	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	493b      	ldr	r1, [pc, #236]	; (800290c <HAL_I2C_Init+0x13c>)
 8002820:	400a      	ands	r2, r1
 8002822:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4938      	ldr	r1, [pc, #224]	; (8002910 <HAL_I2C_Init+0x140>)
 8002830:	400a      	ands	r2, r1
 8002832:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d108      	bne.n	800284e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2180      	movs	r1, #128	; 0x80
 8002846:	0209      	lsls	r1, r1, #8
 8002848:	430a      	orrs	r2, r1
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	e007      	b.n	800285e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	689a      	ldr	r2, [r3, #8]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2184      	movs	r1, #132	; 0x84
 8002858:	0209      	lsls	r1, r1, #8
 800285a:	430a      	orrs	r2, r1
 800285c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d109      	bne.n	800287a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2180      	movs	r1, #128	; 0x80
 8002872:	0109      	lsls	r1, r1, #4
 8002874:	430a      	orrs	r2, r1
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	e007      	b.n	800288a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4923      	ldr	r1, [pc, #140]	; (8002914 <HAL_I2C_Init+0x144>)
 8002886:	400a      	ands	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4920      	ldr	r1, [pc, #128]	; (8002918 <HAL_I2C_Init+0x148>)
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	491a      	ldr	r1, [pc, #104]	; (8002910 <HAL_I2C_Init+0x140>)
 80028a6:	400a      	ands	r2, r1
 80028a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691a      	ldr	r2, [r3, #16]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	431a      	orrs	r2, r3
 80028b4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69d9      	ldr	r1, [r3, #28]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2101      	movs	r1, #1
 80028e0:	430a      	orrs	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2241      	movs	r2, #65	; 0x41
 80028ee:	2120      	movs	r1, #32
 80028f0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2242      	movs	r2, #66	; 0x42
 80028fc:	2100      	movs	r1, #0
 80028fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b002      	add	sp, #8
 8002908:	bd80      	pop	{r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	f0ffffff 	.word	0xf0ffffff
 8002910:	ffff7fff 	.word	0xffff7fff
 8002914:	fffff7ff 	.word	0xfffff7ff
 8002918:	02008000 	.word	0x02008000

0800291c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b089      	sub	sp, #36	; 0x24
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	0008      	movs	r0, r1
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	0019      	movs	r1, r3
 800292a:	230a      	movs	r3, #10
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	1c02      	adds	r2, r0, #0
 8002930:	801a      	strh	r2, [r3, #0]
 8002932:	2308      	movs	r3, #8
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	1c0a      	adds	r2, r1, #0
 8002938:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2241      	movs	r2, #65	; 0x41
 800293e:	5c9b      	ldrb	r3, [r3, r2]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b20      	cmp	r3, #32
 8002944:	d000      	beq.n	8002948 <HAL_I2C_Master_Transmit+0x2c>
 8002946:	e10a      	b.n	8002b5e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2240      	movs	r2, #64	; 0x40
 800294c:	5c9b      	ldrb	r3, [r3, r2]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Master_Transmit+0x3a>
 8002952:	2302      	movs	r3, #2
 8002954:	e104      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2240      	movs	r2, #64	; 0x40
 800295a:	2101      	movs	r1, #1
 800295c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800295e:	f7ff fcbd 	bl	80022dc <HAL_GetTick>
 8002962:	0003      	movs	r3, r0
 8002964:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	0219      	lsls	r1, r3, #8
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2319      	movs	r3, #25
 8002972:	2201      	movs	r2, #1
 8002974:	f000 fd42 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0ef      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2241      	movs	r2, #65	; 0x41
 8002984:	2121      	movs	r1, #33	; 0x21
 8002986:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2242      	movs	r2, #66	; 0x42
 800298c:	2110      	movs	r1, #16
 800298e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2208      	movs	r2, #8
 80029a0:	18ba      	adds	r2, r7, r2
 80029a2:	8812      	ldrh	r2, [r2, #0]
 80029a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2bff      	cmp	r3, #255	; 0xff
 80029b4:	d906      	bls.n	80029c4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	22ff      	movs	r2, #255	; 0xff
 80029ba:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	045b      	lsls	r3, r3, #17
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e007      	b.n	80029d4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	049b      	lsls	r3, r3, #18
 80029d2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d027      	beq.n	8002a2c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	781a      	ldrb	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	3301      	adds	r3, #1
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	697c      	ldr	r4, [r7, #20]
 8002a18:	230a      	movs	r3, #10
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	8819      	ldrh	r1, [r3, #0]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	4b51      	ldr	r3, [pc, #324]	; (8002b68 <HAL_I2C_Master_Transmit+0x24c>)
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	0023      	movs	r3, r4
 8002a26:	f000 fecb 	bl	80037c0 <I2C_TransferConfig>
 8002a2a:	e06f      	b.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	697c      	ldr	r4, [r7, #20]
 8002a34:	230a      	movs	r3, #10
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	8819      	ldrh	r1, [r3, #0]
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	4b4a      	ldr	r3, [pc, #296]	; (8002b68 <HAL_I2C_Master_Transmit+0x24c>)
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	0023      	movs	r3, r4
 8002a42:	f000 febd 	bl	80037c0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a46:	e061      	b.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 fd2c 	bl	80034ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e081      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03a      	beq.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d136      	bne.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	0013      	movs	r3, r2
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	f000 fca6 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e053      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2bff      	cmp	r3, #255	; 0xff
 8002ac0:	d911      	bls.n	8002ae6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	; 0xff
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	045c      	lsls	r4, r3, #17
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	8819      	ldrh	r1, [r3, #0]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	2300      	movs	r3, #0
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	0023      	movs	r3, r4
 8002ae0:	f000 fe6e 	bl	80037c0 <I2C_TransferConfig>
 8002ae4:	e012      	b.n	8002b0c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	049c      	lsls	r4, r3, #18
 8002afa:	230a      	movs	r3, #10
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	8819      	ldrh	r1, [r3, #0]
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	2300      	movs	r3, #0
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	0023      	movs	r3, r4
 8002b08:	f000 fe5a 	bl	80037c0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d198      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	f000 fd0b 	bl	8003538 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b22:	1e03      	subs	r3, r0, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e01a      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	490b      	ldr	r1, [pc, #44]	; (8002b6c <HAL_I2C_Master_Transmit+0x250>)
 8002b3e:	400a      	ands	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2241      	movs	r2, #65	; 0x41
 8002b46:	2120      	movs	r1, #32
 8002b48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2242      	movs	r2, #66	; 0x42
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2240      	movs	r2, #64	; 0x40
 8002b56:	2100      	movs	r1, #0
 8002b58:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
  }
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b007      	add	sp, #28
 8002b66:	bd90      	pop	{r4, r7, pc}
 8002b68:	80002000 	.word	0x80002000
 8002b6c:	fe00e800 	.word	0xfe00e800

08002b70 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b089      	sub	sp, #36	; 0x24
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	000c      	movs	r4, r1
 8002b7a:	0010      	movs	r0, r2
 8002b7c:	0019      	movs	r1, r3
 8002b7e:	230a      	movs	r3, #10
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	1c22      	adds	r2, r4, #0
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	2308      	movs	r3, #8
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	1c02      	adds	r2, r0, #0
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	1dbb      	adds	r3, r7, #6
 8002b90:	1c0a      	adds	r2, r1, #0
 8002b92:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2241      	movs	r2, #65	; 0x41
 8002b98:	5c9b      	ldrb	r3, [r3, r2]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d000      	beq.n	8002ba2 <HAL_I2C_Mem_Write+0x32>
 8002ba0:	e10c      	b.n	8002dbc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_I2C_Mem_Write+0x42>
 8002ba8:	232c      	movs	r3, #44	; 0x2c
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d105      	bne.n	8002bbe <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2280      	movs	r2, #128	; 0x80
 8002bb6:	0092      	lsls	r2, r2, #2
 8002bb8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e0ff      	b.n	8002dbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2240      	movs	r2, #64	; 0x40
 8002bc2:	5c9b      	ldrb	r3, [r3, r2]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2C_Mem_Write+0x5c>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0f8      	b.n	8002dbe <HAL_I2C_Mem_Write+0x24e>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd4:	f7ff fb82 	bl	80022dc <HAL_GetTick>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bdc:	2380      	movs	r3, #128	; 0x80
 8002bde:	0219      	lsls	r1, r3, #8
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2319      	movs	r3, #25
 8002be8:	2201      	movs	r2, #1
 8002bea:	f000 fc07 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0e3      	b.n	8002dbe <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2241      	movs	r2, #65	; 0x41
 8002bfa:	2121      	movs	r1, #33	; 0x21
 8002bfc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2242      	movs	r2, #66	; 0x42
 8002c02:	2140      	movs	r1, #64	; 0x40
 8002c04:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	222c      	movs	r2, #44	; 0x2c
 8002c16:	18ba      	adds	r2, r7, r2
 8002c18:	8812      	ldrh	r2, [r2, #0]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c22:	1dbb      	adds	r3, r7, #6
 8002c24:	881c      	ldrh	r4, [r3, #0]
 8002c26:	2308      	movs	r3, #8
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	881a      	ldrh	r2, [r3, #0]
 8002c2c:	230a      	movs	r3, #10
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	8819      	ldrh	r1, [r3, #0]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	0023      	movs	r3, r4
 8002c3e:	f000 faf5 	bl	800322c <I2C_RequestMemoryWrite>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2240      	movs	r2, #64	; 0x40
 8002c4a:	2100      	movs	r1, #0
 8002c4c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0b5      	b.n	8002dbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2bff      	cmp	r3, #255	; 0xff
 8002c5a:	d911      	bls.n	8002c80 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	22ff      	movs	r2, #255	; 0xff
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	045c      	lsls	r4, r3, #17
 8002c6c:	230a      	movs	r3, #10
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	8819      	ldrh	r1, [r3, #0]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	2300      	movs	r3, #0
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	0023      	movs	r3, r4
 8002c7a:	f000 fda1 	bl	80037c0 <I2C_TransferConfig>
 8002c7e:	e012      	b.n	8002ca6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	2380      	movs	r3, #128	; 0x80
 8002c92:	049c      	lsls	r4, r3, #18
 8002c94:	230a      	movs	r3, #10
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	8819      	ldrh	r1, [r3, #0]
 8002c9a:	68f8      	ldr	r0, [r7, #12]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	0023      	movs	r3, r4
 8002ca2:	f000 fd8d 	bl	80037c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 fbfd 	bl	80034ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d001      	beq.n	8002cba <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e081      	b.n	8002dbe <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	781a      	ldrb	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d03a      	beq.n	8002d6a <HAL_I2C_Mem_Write+0x1fa>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d136      	bne.n	8002d6a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	0013      	movs	r3, r2
 8002d06:	2200      	movs	r2, #0
 8002d08:	2180      	movs	r1, #128	; 0x80
 8002d0a:	f000 fb77 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	1e03      	subs	r3, r0, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e053      	b.n	8002dbe <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2bff      	cmp	r3, #255	; 0xff
 8002d1e:	d911      	bls.n	8002d44 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	22ff      	movs	r2, #255	; 0xff
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	045c      	lsls	r4, r3, #17
 8002d30:	230a      	movs	r3, #10
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	8819      	ldrh	r1, [r3, #0]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	0023      	movs	r3, r4
 8002d3e:	f000 fd3f 	bl	80037c0 <I2C_TransferConfig>
 8002d42:	e012      	b.n	8002d6a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	049c      	lsls	r4, r3, #18
 8002d58:	230a      	movs	r3, #10
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	8819      	ldrh	r1, [r3, #0]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	2300      	movs	r3, #0
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	0023      	movs	r3, r4
 8002d66:	f000 fd2b 	bl	80037c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d198      	bne.n	8002ca6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 fbdc 	bl	8003538 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d80:	1e03      	subs	r3, r0, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e01a      	b.n	8002dbe <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	490b      	ldr	r1, [pc, #44]	; (8002dc8 <HAL_I2C_Mem_Write+0x258>)
 8002d9c:	400a      	ands	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2241      	movs	r2, #65	; 0x41
 8002da4:	2120      	movs	r1, #32
 8002da6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2242      	movs	r2, #66	; 0x42
 8002dac:	2100      	movs	r1, #0
 8002dae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2240      	movs	r2, #64	; 0x40
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b007      	add	sp, #28
 8002dc4:	bd90      	pop	{r4, r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	fe00e800 	.word	0xfe00e800

08002dcc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af02      	add	r7, sp, #8
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	000c      	movs	r4, r1
 8002dd6:	0010      	movs	r0, r2
 8002dd8:	0019      	movs	r1, r3
 8002dda:	230a      	movs	r3, #10
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	1c22      	adds	r2, r4, #0
 8002de0:	801a      	strh	r2, [r3, #0]
 8002de2:	2308      	movs	r3, #8
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	1c02      	adds	r2, r0, #0
 8002de8:	801a      	strh	r2, [r3, #0]
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	1c0a      	adds	r2, r1, #0
 8002dee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2241      	movs	r2, #65	; 0x41
 8002df4:	5c9b      	ldrb	r3, [r3, r2]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d000      	beq.n	8002dfe <HAL_I2C_Mem_Read+0x32>
 8002dfc:	e110      	b.n	8003020 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_I2C_Mem_Read+0x42>
 8002e04:	232c      	movs	r3, #44	; 0x2c
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d105      	bne.n	8002e1a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e103      	b.n	8003022 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2240      	movs	r2, #64	; 0x40
 8002e1e:	5c9b      	ldrb	r3, [r3, r2]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d101      	bne.n	8002e28 <HAL_I2C_Mem_Read+0x5c>
 8002e24:	2302      	movs	r3, #2
 8002e26:	e0fc      	b.n	8003022 <HAL_I2C_Mem_Read+0x256>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2240      	movs	r2, #64	; 0x40
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e30:	f7ff fa54 	bl	80022dc <HAL_GetTick>
 8002e34:	0003      	movs	r3, r0
 8002e36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	0219      	lsls	r1, r3, #8
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	2319      	movs	r3, #25
 8002e44:	2201      	movs	r2, #1
 8002e46:	f000 fad9 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	1e03      	subs	r3, r0, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0e7      	b.n	8003022 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2241      	movs	r2, #65	; 0x41
 8002e56:	2122      	movs	r1, #34	; 0x22
 8002e58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2242      	movs	r2, #66	; 0x42
 8002e5e:	2140      	movs	r1, #64	; 0x40
 8002e60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2200      	movs	r2, #0
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	222c      	movs	r2, #44	; 0x2c
 8002e72:	18ba      	adds	r2, r7, r2
 8002e74:	8812      	ldrh	r2, [r2, #0]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e7e:	1dbb      	adds	r3, r7, #6
 8002e80:	881c      	ldrh	r4, [r3, #0]
 8002e82:	2308      	movs	r3, #8
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	881a      	ldrh	r2, [r3, #0]
 8002e88:	230a      	movs	r3, #10
 8002e8a:	18fb      	adds	r3, r7, r3
 8002e8c:	8819      	ldrh	r1, [r3, #0]
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	0023      	movs	r3, r4
 8002e9a:	f000 fa2b 	bl	80032f4 <I2C_RequestMemoryRead>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2240      	movs	r2, #64	; 0x40
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0b9      	b.n	8003022 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2bff      	cmp	r3, #255	; 0xff
 8002eb6:	d911      	bls.n	8002edc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	22ff      	movs	r2, #255	; 0xff
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	045c      	lsls	r4, r3, #17
 8002ec8:	230a      	movs	r3, #10
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	8819      	ldrh	r1, [r3, #0]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	4b56      	ldr	r3, [pc, #344]	; (800302c <HAL_I2C_Mem_Read+0x260>)
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	0023      	movs	r3, r4
 8002ed6:	f000 fc73 	bl	80037c0 <I2C_TransferConfig>
 8002eda:	e012      	b.n	8002f02 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	049c      	lsls	r4, r3, #18
 8002ef0:	230a      	movs	r3, #10
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	8819      	ldrh	r1, [r3, #0]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_I2C_Mem_Read+0x260>)
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	0023      	movs	r3, r4
 8002efe:	f000 fc5f 	bl	80037c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	0013      	movs	r3, r2
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2104      	movs	r1, #4
 8002f10:	f000 fa74 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002f14:	1e03      	subs	r3, r0, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e082      	b.n	8003022 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	b2d2      	uxtb	r2, r2
 8002f28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d03a      	beq.n	8002fce <HAL_I2C_Mem_Read+0x202>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d136      	bne.n	8002fce <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	0013      	movs	r3, r2
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2180      	movs	r1, #128	; 0x80
 8002f6e:	f000 fa45 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002f72:	1e03      	subs	r3, r0, #0
 8002f74:	d001      	beq.n	8002f7a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e053      	b.n	8003022 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2bff      	cmp	r3, #255	; 0xff
 8002f82:	d911      	bls.n	8002fa8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	22ff      	movs	r2, #255	; 0xff
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	b2da      	uxtb	r2, r3
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	045c      	lsls	r4, r3, #17
 8002f94:	230a      	movs	r3, #10
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	8819      	ldrh	r1, [r3, #0]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	0023      	movs	r3, r4
 8002fa2:	f000 fc0d 	bl	80037c0 <I2C_TransferConfig>
 8002fa6:	e012      	b.n	8002fce <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29a      	uxth	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb6:	b2da      	uxtb	r2, r3
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	049c      	lsls	r4, r3, #18
 8002fbc:	230a      	movs	r3, #10
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	8819      	ldrh	r1, [r3, #0]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	0023      	movs	r3, r4
 8002fca:	f000 fbf9 	bl	80037c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d194      	bne.n	8002f02 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	0018      	movs	r0, r3
 8002fe0:	f000 faaa 	bl	8003538 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e01a      	b.n	8003022 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	490c      	ldr	r1, [pc, #48]	; (8003030 <HAL_I2C_Mem_Read+0x264>)
 8003000:	400a      	ands	r2, r1
 8003002:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2241      	movs	r2, #65	; 0x41
 8003008:	2120      	movs	r1, #32
 800300a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2242      	movs	r2, #66	; 0x42
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	2100      	movs	r1, #0
 800301a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	e000      	b.n	8003022 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003020:	2302      	movs	r3, #2
  }
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b007      	add	sp, #28
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	80002400 	.word	0x80002400
 8003030:	fe00e800 	.word	0xfe00e800

08003034 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	; 0x28
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	230a      	movs	r3, #10
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	1c0a      	adds	r2, r1, #0
 8003046:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2241      	movs	r2, #65	; 0x41
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b20      	cmp	r3, #32
 8003056:	d000      	beq.n	800305a <HAL_I2C_IsDeviceReady+0x26>
 8003058:	e0df      	b.n	800321a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	021b      	lsls	r3, r3, #8
 8003064:	401a      	ands	r2, r3
 8003066:	2380      	movs	r3, #128	; 0x80
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	429a      	cmp	r2, r3
 800306c:	d101      	bne.n	8003072 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	e0d4      	b.n	800321c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2240      	movs	r2, #64	; 0x40
 8003076:	5c9b      	ldrb	r3, [r3, r2]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d101      	bne.n	8003080 <HAL_I2C_IsDeviceReady+0x4c>
 800307c:	2302      	movs	r3, #2
 800307e:	e0cd      	b.n	800321c <HAL_I2C_IsDeviceReady+0x1e8>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2240      	movs	r2, #64	; 0x40
 8003084:	2101      	movs	r1, #1
 8003086:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2241      	movs	r2, #65	; 0x41
 800308c:	2124      	movs	r1, #36	; 0x24
 800308e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_I2C_IsDeviceReady+0x7a>
 800309e:	230a      	movs	r3, #10
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	059b      	lsls	r3, r3, #22
 80030a6:	0d9b      	lsrs	r3, r3, #22
 80030a8:	4a5e      	ldr	r2, [pc, #376]	; (8003224 <HAL_I2C_IsDeviceReady+0x1f0>)
 80030aa:	431a      	orrs	r2, r3
 80030ac:	e006      	b.n	80030bc <HAL_I2C_IsDeviceReady+0x88>
 80030ae:	230a      	movs	r3, #10
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	059b      	lsls	r3, r3, #22
 80030b6:	0d9b      	lsrs	r3, r3, #22
 80030b8:	4a5b      	ldr	r2, [pc, #364]	; (8003228 <HAL_I2C_IsDeviceReady+0x1f4>)
 80030ba:	431a      	orrs	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80030c2:	f7ff f90b 	bl	80022dc <HAL_GetTick>
 80030c6:	0003      	movs	r3, r0
 80030c8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	2220      	movs	r2, #32
 80030d2:	4013      	ands	r3, r2
 80030d4:	3b20      	subs	r3, #32
 80030d6:	425a      	negs	r2, r3
 80030d8:	4153      	adcs	r3, r2
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	231f      	movs	r3, #31
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2210      	movs	r2, #16
 80030ea:	4013      	ands	r3, r2
 80030ec:	3b10      	subs	r3, #16
 80030ee:	425a      	negs	r2, r3
 80030f0:	4153      	adcs	r3, r2
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	231e      	movs	r3, #30
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030fa:	e035      	b.n	8003168 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	3301      	adds	r3, #1
 8003100:	d01a      	beq.n	8003138 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7ff f8eb 	bl	80022dc <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <HAL_I2C_IsDeviceReady+0xe4>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10f      	bne.n	8003138 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2241      	movs	r2, #65	; 0x41
 800311c:	2120      	movs	r1, #32
 800311e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003124:	2220      	movs	r2, #32
 8003126:	431a      	orrs	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	2100      	movs	r1, #0
 8003132:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e071      	b.n	800321c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2220      	movs	r2, #32
 8003140:	4013      	ands	r3, r2
 8003142:	3b20      	subs	r3, #32
 8003144:	425a      	negs	r2, r3
 8003146:	4153      	adcs	r3, r2
 8003148:	b2da      	uxtb	r2, r3
 800314a:	231f      	movs	r3, #31
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	2210      	movs	r2, #16
 8003158:	4013      	ands	r3, r2
 800315a:	3b10      	subs	r3, #16
 800315c:	425a      	negs	r2, r3
 800315e:	4153      	adcs	r3, r2
 8003160:	b2da      	uxtb	r2, r3
 8003162:	231e      	movs	r3, #30
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003168:	231f      	movs	r3, #31
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d104      	bne.n	800317c <HAL_I2C_IsDeviceReady+0x148>
 8003172:	231e      	movs	r3, #30
 8003174:	18fb      	adds	r3, r7, r3
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0bf      	beq.n	80030fc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2210      	movs	r2, #16
 8003184:	4013      	ands	r3, r2
 8003186:	2b10      	cmp	r3, #16
 8003188:	d01a      	beq.n	80031c0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	0013      	movs	r3, r2
 8003194:	2200      	movs	r2, #0
 8003196:	2120      	movs	r1, #32
 8003198:	f000 f930 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 800319c:	1e03      	subs	r3, r0, #0
 800319e:	d001      	beq.n	80031a4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e03b      	b.n	800321c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2220      	movs	r2, #32
 80031aa:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2241      	movs	r2, #65	; 0x41
 80031b0:	2120      	movs	r1, #32
 80031b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2240      	movs	r2, #64	; 0x40
 80031b8:	2100      	movs	r1, #0
 80031ba:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e02d      	b.n	800321c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	0013      	movs	r3, r2
 80031ca:	2200      	movs	r2, #0
 80031cc:	2120      	movs	r1, #32
 80031ce:	f000 f915 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80031d2:	1e03      	subs	r3, r0, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e020      	b.n	800321c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2210      	movs	r2, #16
 80031e0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2220      	movs	r2, #32
 80031e8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	3301      	adds	r3, #1
 80031ee:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d900      	bls.n	80031fa <HAL_I2C_IsDeviceReady+0x1c6>
 80031f8:	e74d      	b.n	8003096 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2241      	movs	r2, #65	; 0x41
 80031fe:	2120      	movs	r1, #32
 8003200:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	2220      	movs	r2, #32
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2240      	movs	r2, #64	; 0x40
 8003212:	2100      	movs	r1, #0
 8003214:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800321a:	2302      	movs	r3, #2
  }
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b008      	add	sp, #32
 8003222:	bd80      	pop	{r7, pc}
 8003224:	02002000 	.word	0x02002000
 8003228:	02002800 	.word	0x02002800

0800322c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800322c:	b5b0      	push	{r4, r5, r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	000c      	movs	r4, r1
 8003236:	0010      	movs	r0, r2
 8003238:	0019      	movs	r1, r3
 800323a:	250a      	movs	r5, #10
 800323c:	197b      	adds	r3, r7, r5
 800323e:	1c22      	adds	r2, r4, #0
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	2308      	movs	r3, #8
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	1c02      	adds	r2, r0, #0
 8003248:	801a      	strh	r2, [r3, #0]
 800324a:	1dbb      	adds	r3, r7, #6
 800324c:	1c0a      	adds	r2, r1, #0
 800324e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	2380      	movs	r3, #128	; 0x80
 8003258:	045c      	lsls	r4, r3, #17
 800325a:	197b      	adds	r3, r7, r5
 800325c:	8819      	ldrh	r1, [r3, #0]
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <I2C_RequestMemoryWrite+0xc4>)
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	0023      	movs	r3, r4
 8003266:	f000 faab 	bl	80037c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800326c:	6a39      	ldr	r1, [r7, #32]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 f91b 	bl	80034ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003276:	1e03      	subs	r3, r0, #0
 8003278:	d001      	beq.n	800327e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e033      	b.n	80032e6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800327e:	1dbb      	adds	r3, r7, #6
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d107      	bne.n	8003296 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003286:	2308      	movs	r3, #8
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	629a      	str	r2, [r3, #40]	; 0x28
 8003294:	e019      	b.n	80032ca <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003296:	2308      	movs	r3, #8
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	b29b      	uxth	r3, r3
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032aa:	6a39      	ldr	r1, [r7, #32]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 f8fc 	bl	80034ac <I2C_WaitOnTXISFlagUntilTimeout>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d001      	beq.n	80032bc <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e014      	b.n	80032e6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032bc:	2308      	movs	r3, #8
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a3a      	ldr	r2, [r7, #32]
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	0013      	movs	r3, r2
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	f000 f890 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80032dc:	1e03      	subs	r3, r0, #0
 80032de:	d001      	beq.n	80032e4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bdb0      	pop	{r4, r5, r7, pc}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	80002000 	.word	0x80002000

080032f4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032f4:	b5b0      	push	{r4, r5, r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	000c      	movs	r4, r1
 80032fe:	0010      	movs	r0, r2
 8003300:	0019      	movs	r1, r3
 8003302:	250a      	movs	r5, #10
 8003304:	197b      	adds	r3, r7, r5
 8003306:	1c22      	adds	r2, r4, #0
 8003308:	801a      	strh	r2, [r3, #0]
 800330a:	2308      	movs	r3, #8
 800330c:	18fb      	adds	r3, r7, r3
 800330e:	1c02      	adds	r2, r0, #0
 8003310:	801a      	strh	r2, [r3, #0]
 8003312:	1dbb      	adds	r3, r7, #6
 8003314:	1c0a      	adds	r2, r1, #0
 8003316:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003318:	1dbb      	adds	r3, r7, #6
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	197b      	adds	r3, r7, r5
 8003320:	8819      	ldrh	r1, [r3, #0]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <I2C_RequestMemoryRead+0xc0>)
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	2300      	movs	r3, #0
 800332a:	f000 fa49 	bl	80037c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	0018      	movs	r0, r3
 8003336:	f000 f8b9 	bl	80034ac <I2C_WaitOnTXISFlagUntilTimeout>
 800333a:	1e03      	subs	r3, r0, #0
 800333c:	d001      	beq.n	8003342 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e033      	b.n	80033aa <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003342:	1dbb      	adds	r3, r7, #6
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800334a:	2308      	movs	r3, #8
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
 8003358:	e019      	b.n	800338e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800335a:	2308      	movs	r3, #8
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	0a1b      	lsrs	r3, r3, #8
 8003362:	b29b      	uxth	r3, r3
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	6a39      	ldr	r1, [r7, #32]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	0018      	movs	r0, r3
 8003374:	f000 f89a 	bl	80034ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d001      	beq.n	8003380 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e014      	b.n	80033aa <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003380:	2308      	movs	r3, #8
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	0013      	movs	r3, r2
 8003398:	2200      	movs	r2, #0
 800339a:	2140      	movs	r1, #64	; 0x40
 800339c:	f000 f82e 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d001      	beq.n	80033a8 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bdb0      	pop	{r4, r5, r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	80002000 	.word	0x80002000

080033b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	2202      	movs	r2, #2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d103      	bne.n	80033d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2200      	movs	r2, #0
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2201      	movs	r2, #1
 80033de:	4013      	ands	r3, r2
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d007      	beq.n	80033f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	430a      	orrs	r2, r1
 80033f2:	619a      	str	r2, [r3, #24]
  }
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	1dfb      	adds	r3, r7, #7
 800340a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800340c:	e03a      	b.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	6839      	ldr	r1, [r7, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	0018      	movs	r0, r3
 8003416:	f000 f8d3 	bl	80035c0 <I2C_IsErrorOccurred>
 800341a:	1e03      	subs	r3, r0, #0
 800341c:	d001      	beq.n	8003422 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e040      	b.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	d02d      	beq.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003428:	f7fe ff58 	bl	80022dc <HAL_GetTick>
 800342c:	0002      	movs	r2, r0
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d302      	bcc.n	800343e <I2C_WaitOnFlagUntilTimeout+0x42>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d122      	bne.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	68ba      	ldr	r2, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	425a      	negs	r2, r3
 800344e:	4153      	adcs	r3, r2
 8003450:	b2db      	uxtb	r3, r3
 8003452:	001a      	movs	r2, r3
 8003454:	1dfb      	adds	r3, r7, #7
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d113      	bne.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	2220      	movs	r2, #32
 8003462:	431a      	orrs	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2241      	movs	r2, #65	; 0x41
 800346c:	2120      	movs	r1, #32
 800346e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2242      	movs	r2, #66	; 0x42
 8003474:	2100      	movs	r1, #0
 8003476:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2240      	movs	r2, #64	; 0x40
 800347c:	2100      	movs	r1, #0
 800347e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e00f      	b.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4013      	ands	r3, r2
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	425a      	negs	r2, r3
 8003494:	4153      	adcs	r3, r2
 8003496:	b2db      	uxtb	r3, r3
 8003498:	001a      	movs	r2, r3
 800349a:	1dfb      	adds	r3, r7, #7
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d0b5      	beq.n	800340e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b004      	add	sp, #16
 80034aa:	bd80      	pop	{r7, pc}

080034ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034b8:	e032      	b.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68b9      	ldr	r1, [r7, #8]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f87d 	bl	80035c0 <I2C_IsErrorOccurred>
 80034c6:	1e03      	subs	r3, r0, #0
 80034c8:	d001      	beq.n	80034ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e030      	b.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	3301      	adds	r3, #1
 80034d2:	d025      	beq.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d4:	f7fe ff02 	bl	80022dc <HAL_GetTick>
 80034d8:	0002      	movs	r2, r0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d302      	bcc.n	80034ea <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d11a      	bne.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2202      	movs	r2, #2
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d013      	beq.n	8003520 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	2220      	movs	r2, #32
 80034fe:	431a      	orrs	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2241      	movs	r2, #65	; 0x41
 8003508:	2120      	movs	r1, #32
 800350a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2242      	movs	r2, #66	; 0x42
 8003510:	2100      	movs	r1, #0
 8003512:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2240      	movs	r2, #64	; 0x40
 8003518:	2100      	movs	r1, #0
 800351a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e007      	b.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2202      	movs	r2, #2
 8003528:	4013      	ands	r3, r2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d1c5      	bne.n	80034ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b004      	add	sp, #16
 8003536:	bd80      	pop	{r7, pc}

08003538 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003544:	e02f      	b.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	0018      	movs	r0, r3
 800354e:	f000 f837 	bl	80035c0 <I2C_IsErrorOccurred>
 8003552:	1e03      	subs	r3, r0, #0
 8003554:	d001      	beq.n	800355a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e02d      	b.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800355a:	f7fe febf 	bl	80022dc <HAL_GetTick>
 800355e:	0002      	movs	r2, r0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	429a      	cmp	r2, r3
 8003568:	d302      	bcc.n	8003570 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d11a      	bne.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2220      	movs	r2, #32
 8003578:	4013      	ands	r3, r2
 800357a:	2b20      	cmp	r3, #32
 800357c:	d013      	beq.n	80035a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	2220      	movs	r2, #32
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2241      	movs	r2, #65	; 0x41
 800358e:	2120      	movs	r1, #32
 8003590:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2242      	movs	r2, #66	; 0x42
 8003596:	2100      	movs	r1, #0
 8003598:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2240      	movs	r2, #64	; 0x40
 800359e:	2100      	movs	r1, #0
 80035a0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e007      	b.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	2220      	movs	r2, #32
 80035ae:	4013      	ands	r3, r2
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d1c8      	bne.n	8003546 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	0018      	movs	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}
	...

080035c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035c0:	b590      	push	{r4, r7, lr}
 80035c2:	b08b      	sub	sp, #44	; 0x2c
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2327      	movs	r3, #39	; 0x27
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2210      	movs	r2, #16
 80035e8:	4013      	ands	r3, r2
 80035ea:	d100      	bne.n	80035ee <I2C_IsErrorOccurred+0x2e>
 80035ec:	e082      	b.n	80036f4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2210      	movs	r2, #16
 80035f4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035f6:	e060      	b.n	80036ba <I2C_IsErrorOccurred+0xfa>
 80035f8:	2427      	movs	r4, #39	; 0x27
 80035fa:	193b      	adds	r3, r7, r4
 80035fc:	193a      	adds	r2, r7, r4
 80035fe:	7812      	ldrb	r2, [r2, #0]
 8003600:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3301      	adds	r3, #1
 8003606:	d058      	beq.n	80036ba <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003608:	f7fe fe68 	bl	80022dc <HAL_GetTick>
 800360c:	0002      	movs	r2, r0
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	d306      	bcc.n	8003626 <I2C_IsErrorOccurred+0x66>
 8003618:	193b      	adds	r3, r7, r4
 800361a:	193a      	adds	r2, r7, r4
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d149      	bne.n	80036ba <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	01db      	lsls	r3, r3, #7
 8003630:	4013      	ands	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003634:	2013      	movs	r0, #19
 8003636:	183b      	adds	r3, r7, r0
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	2142      	movs	r1, #66	; 0x42
 800363c:	5c52      	ldrb	r2, [r2, r1]
 800363e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	401a      	ands	r2, r3
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	021b      	lsls	r3, r3, #8
 8003650:	429a      	cmp	r2, r3
 8003652:	d126      	bne.n	80036a2 <I2C_IsErrorOccurred+0xe2>
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	2380      	movs	r3, #128	; 0x80
 8003658:	01db      	lsls	r3, r3, #7
 800365a:	429a      	cmp	r2, r3
 800365c:	d021      	beq.n	80036a2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800365e:	183b      	adds	r3, r7, r0
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b20      	cmp	r3, #32
 8003664:	d01d      	beq.n	80036a2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2180      	movs	r1, #128	; 0x80
 8003672:	01c9      	lsls	r1, r1, #7
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003678:	f7fe fe30 	bl	80022dc <HAL_GetTick>
 800367c:	0003      	movs	r3, r0
 800367e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003680:	e00f      	b.n	80036a2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003682:	f7fe fe2b 	bl	80022dc <HAL_GetTick>
 8003686:	0002      	movs	r2, r0
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b19      	cmp	r3, #25
 800368e:	d908      	bls.n	80036a2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	2220      	movs	r2, #32
 8003694:	4313      	orrs	r3, r2
 8003696:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003698:	2327      	movs	r3, #39	; 0x27
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]

              break;
 80036a0:	e00b      	b.n	80036ba <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	2220      	movs	r2, #32
 80036aa:	4013      	ands	r3, r2
 80036ac:	2127      	movs	r1, #39	; 0x27
 80036ae:	187a      	adds	r2, r7, r1
 80036b0:	1879      	adds	r1, r7, r1
 80036b2:	7809      	ldrb	r1, [r1, #0]
 80036b4:	7011      	strb	r1, [r2, #0]
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d1e3      	bne.n	8003682 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2220      	movs	r2, #32
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d004      	beq.n	80036d2 <I2C_IsErrorOccurred+0x112>
 80036c8:	2327      	movs	r3, #39	; 0x27
 80036ca:	18fb      	adds	r3, r7, r3
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d092      	beq.n	80035f8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036d2:	2327      	movs	r3, #39	; 0x27
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d103      	bne.n	80036e4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2220      	movs	r2, #32
 80036e2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	2204      	movs	r2, #4
 80036e8:	4313      	orrs	r3, r2
 80036ea:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036ec:	2327      	movs	r3, #39	; 0x27
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4013      	ands	r3, r2
 8003704:	d00c      	beq.n	8003720 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	2201      	movs	r2, #1
 800370a:	4313      	orrs	r3, r2
 800370c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2280      	movs	r2, #128	; 0x80
 8003714:	0052      	lsls	r2, r2, #1
 8003716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003718:	2327      	movs	r3, #39	; 0x27
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2201      	movs	r2, #1
 800371e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	4013      	ands	r3, r2
 8003728:	d00c      	beq.n	8003744 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	2208      	movs	r2, #8
 800372e:	4313      	orrs	r3, r2
 8003730:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	00d2      	lsls	r2, r2, #3
 800373a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800373c:	2327      	movs	r3, #39	; 0x27
 800373e:	18fb      	adds	r3, r7, r3
 8003740:	2201      	movs	r2, #1
 8003742:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	2380      	movs	r3, #128	; 0x80
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4013      	ands	r3, r2
 800374c:	d00c      	beq.n	8003768 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	2202      	movs	r2, #2
 8003752:	4313      	orrs	r3, r2
 8003754:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	0092      	lsls	r2, r2, #2
 800375e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003760:	2327      	movs	r3, #39	; 0x27
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003768:	2327      	movs	r3, #39	; 0x27
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d01d      	beq.n	80037ae <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	0018      	movs	r0, r3
 8003776:	f7ff fe1f 	bl	80033b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	490d      	ldr	r1, [pc, #52]	; (80037bc <I2C_IsErrorOccurred+0x1fc>)
 8003786:	400a      	ands	r2, r1
 8003788:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	431a      	orrs	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2241      	movs	r2, #65	; 0x41
 800379a:	2120      	movs	r1, #32
 800379c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2242      	movs	r2, #66	; 0x42
 80037a2:	2100      	movs	r1, #0
 80037a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2240      	movs	r2, #64	; 0x40
 80037aa:	2100      	movs	r1, #0
 80037ac:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80037ae:	2327      	movs	r3, #39	; 0x27
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
}
 80037b4:	0018      	movs	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	b00b      	add	sp, #44	; 0x2c
 80037ba:	bd90      	pop	{r4, r7, pc}
 80037bc:	fe00e800 	.word	0xfe00e800

080037c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	0008      	movs	r0, r1
 80037ca:	0011      	movs	r1, r2
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	240a      	movs	r4, #10
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	1c02      	adds	r2, r0, #0
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	2009      	movs	r0, #9
 80037d8:	183b      	adds	r3, r7, r0
 80037da:	1c0a      	adds	r2, r1, #0
 80037dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	059b      	lsls	r3, r3, #22
 80037e4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	0419      	lsls	r1, r3, #16
 80037ec:	23ff      	movs	r3, #255	; 0xff
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fa:	4313      	orrs	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380a:	0d51      	lsrs	r1, r2, #21
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	00d2      	lsls	r2, r2, #3
 8003810:	400a      	ands	r2, r1
 8003812:	4907      	ldr	r1, [pc, #28]	; (8003830 <I2C_TransferConfig+0x70>)
 8003814:	430a      	orrs	r2, r1
 8003816:	43d2      	mvns	r2, r2
 8003818:	401a      	ands	r2, r3
 800381a:	0011      	movs	r1, r2
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b007      	add	sp, #28
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	03ff63ff 	.word	0x03ff63ff

08003834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2241      	movs	r2, #65	; 0x41
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	d138      	bne.n	80038bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2240      	movs	r2, #64	; 0x40
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003854:	2302      	movs	r3, #2
 8003856:	e032      	b.n	80038be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2240      	movs	r2, #64	; 0x40
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2241      	movs	r2, #65	; 0x41
 8003864:	2124      	movs	r1, #36	; 0x24
 8003866:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	438a      	bics	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4911      	ldr	r1, [pc, #68]	; (80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003884:	400a      	ands	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2101      	movs	r1, #1
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2241      	movs	r2, #65	; 0x41
 80038ac:	2120      	movs	r1, #32
 80038ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	; 0x40
 80038b4:	2100      	movs	r1, #0
 80038b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	ffffefff 	.word	0xffffefff

080038cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2241      	movs	r2, #65	; 0x41
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d139      	bne.n	8003956 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2240      	movs	r2, #64	; 0x40
 80038e6:	5c9b      	ldrb	r3, [r3, r2]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e033      	b.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	2101      	movs	r1, #1
 80038f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2241      	movs	r2, #65	; 0x41
 80038fc:	2124      	movs	r1, #36	; 0x24
 80038fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2101      	movs	r1, #1
 800390c:	438a      	bics	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a11      	ldr	r2, [pc, #68]	; (8003960 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2241      	movs	r2, #65	; 0x41
 8003946:	2120      	movs	r1, #32
 8003948:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2240      	movs	r2, #64	; 0x40
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	fffff0ff 	.word	0xfffff0ff

08003964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800396c:	4b19      	ldr	r3, [pc, #100]	; (80039d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003972:	4013      	ands	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	430a      	orrs	r2, r1
 800397c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d11f      	bne.n	80039c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003988:	4b14      	ldr	r3, [pc, #80]	; (80039dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	0013      	movs	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	189b      	adds	r3, r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4912      	ldr	r1, [pc, #72]	; (80039e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003996:	0018      	movs	r0, r3
 8003998:	f7fc fbc6 	bl	8000128 <__udivsi3>
 800399c:	0003      	movs	r3, r0
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039a2:	e008      	b.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e001      	b.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e009      	b.n	80039ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039b6:	4b07      	ldr	r3, [pc, #28]	; (80039d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	401a      	ands	r2, r3
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d0ed      	beq.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	40007000 	.word	0x40007000
 80039d8:	fffff9ff 	.word	0xfffff9ff
 80039dc:	2000002c 	.word	0x2000002c
 80039e0:	000f4240 	.word	0x000f4240

080039e4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	23e0      	movs	r3, #224	; 0xe0
 80039ee:	01db      	lsls	r3, r3, #7
 80039f0:	4013      	ands	r3, r2
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40021000 	.word	0x40021000

080039fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e2fe      	b.n	800400c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2201      	movs	r2, #1
 8003a14:	4013      	ands	r3, r2
 8003a16:	d100      	bne.n	8003a1a <HAL_RCC_OscConfig+0x1e>
 8003a18:	e07c      	b.n	8003b14 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a1a:	4bc3      	ldr	r3, [pc, #780]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	2238      	movs	r2, #56	; 0x38
 8003a20:	4013      	ands	r3, r2
 8003a22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a24:	4bc0      	ldr	r3, [pc, #768]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	2203      	movs	r2, #3
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	d102      	bne.n	8003a3a <HAL_RCC_OscConfig+0x3e>
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a40:	4bb9      	ldr	r3, [pc, #740]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	029b      	lsls	r3, r3, #10
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d062      	beq.n	8003b12 <HAL_RCC_OscConfig+0x116>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d15e      	bne.n	8003b12 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e2d9      	b.n	800400c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	025b      	lsls	r3, r3, #9
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d107      	bne.n	8003a74 <HAL_RCC_OscConfig+0x78>
 8003a64:	4bb0      	ldr	r3, [pc, #704]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4baf      	ldr	r3, [pc, #700]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a6a:	2180      	movs	r1, #128	; 0x80
 8003a6c:	0249      	lsls	r1, r1, #9
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	e020      	b.n	8003ab6 <HAL_RCC_OscConfig+0xba>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	23a0      	movs	r3, #160	; 0xa0
 8003a7a:	02db      	lsls	r3, r3, #11
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d10e      	bne.n	8003a9e <HAL_RCC_OscConfig+0xa2>
 8003a80:	4ba9      	ldr	r3, [pc, #676]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	4ba8      	ldr	r3, [pc, #672]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a86:	2180      	movs	r1, #128	; 0x80
 8003a88:	02c9      	lsls	r1, r1, #11
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	4ba6      	ldr	r3, [pc, #664]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4ba5      	ldr	r3, [pc, #660]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	2180      	movs	r1, #128	; 0x80
 8003a96:	0249      	lsls	r1, r1, #9
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
 8003a9c:	e00b      	b.n	8003ab6 <HAL_RCC_OscConfig+0xba>
 8003a9e:	4ba2      	ldr	r3, [pc, #648]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	4ba1      	ldr	r3, [pc, #644]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003aa4:	49a1      	ldr	r1, [pc, #644]	; (8003d2c <HAL_RCC_OscConfig+0x330>)
 8003aa6:	400a      	ands	r2, r1
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	4b9f      	ldr	r3, [pc, #636]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	4b9e      	ldr	r3, [pc, #632]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003ab0:	499f      	ldr	r1, [pc, #636]	; (8003d30 <HAL_RCC_OscConfig+0x334>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d014      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abe:	f7fe fc0d 	bl	80022dc <HAL_GetTick>
 8003ac2:	0003      	movs	r3, r0
 8003ac4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fe fc08 	bl	80022dc <HAL_GetTick>
 8003acc:	0002      	movs	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e298      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ada:	4b93      	ldr	r3, [pc, #588]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	029b      	lsls	r3, r3, #10
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0xcc>
 8003ae6:	e015      	b.n	8003b14 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae8:	f7fe fbf8 	bl	80022dc <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af2:	f7fe fbf3 	bl	80022dc <HAL_GetTick>
 8003af6:	0002      	movs	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b64      	cmp	r3, #100	; 0x64
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e283      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b04:	4b88      	ldr	r3, [pc, #544]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	029b      	lsls	r3, r3, #10
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d1f0      	bne.n	8003af2 <HAL_RCC_OscConfig+0xf6>
 8003b10:	e000      	b.n	8003b14 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d100      	bne.n	8003b20 <HAL_RCC_OscConfig+0x124>
 8003b1e:	e099      	b.n	8003c54 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b20:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2238      	movs	r2, #56	; 0x38
 8003b26:	4013      	ands	r3, r2
 8003b28:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b2a:	4b7f      	ldr	r3, [pc, #508]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2203      	movs	r2, #3
 8003b30:	4013      	ands	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d102      	bne.n	8003b40 <HAL_RCC_OscConfig+0x144>
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d002      	beq.n	8003b46 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d135      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b46:	4b78      	ldr	r3, [pc, #480]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	2380      	movs	r3, #128	; 0x80
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4013      	ands	r3, r2
 8003b50:	d005      	beq.n	8003b5e <HAL_RCC_OscConfig+0x162>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e256      	b.n	800400c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5e:	4b72      	ldr	r3, [pc, #456]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4a74      	ldr	r2, [pc, #464]	; (8003d34 <HAL_RCC_OscConfig+0x338>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	0019      	movs	r1, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	021a      	lsls	r2, r3, #8
 8003b6e:	4b6e      	ldr	r3, [pc, #440]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b70:	430a      	orrs	r2, r1
 8003b72:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d112      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b7a:	4b6b      	ldr	r3, [pc, #428]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a6e      	ldr	r2, [pc, #440]	; (8003d38 <HAL_RCC_OscConfig+0x33c>)
 8003b80:	4013      	ands	r3, r2
 8003b82:	0019      	movs	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	4b67      	ldr	r3, [pc, #412]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b8e:	4b66      	ldr	r3, [pc, #408]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	0adb      	lsrs	r3, r3, #11
 8003b94:	2207      	movs	r2, #7
 8003b96:	4013      	ands	r3, r2
 8003b98:	4a68      	ldr	r2, [pc, #416]	; (8003d3c <HAL_RCC_OscConfig+0x340>)
 8003b9a:	40da      	lsrs	r2, r3
 8003b9c:	4b68      	ldr	r3, [pc, #416]	; (8003d40 <HAL_RCC_OscConfig+0x344>)
 8003b9e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ba0:	4b68      	ldr	r3, [pc, #416]	; (8003d44 <HAL_RCC_OscConfig+0x348>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7fe fb3d 	bl	8002224 <HAL_InitTick>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d051      	beq.n	8003c52 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e22c      	b.n	800400c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d030      	beq.n	8003c1c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003bba:	4b5b      	ldr	r3, [pc, #364]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a5e      	ldr	r2, [pc, #376]	; (8003d38 <HAL_RCC_OscConfig+0x33c>)
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	0019      	movs	r1, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	4b57      	ldr	r3, [pc, #348]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bce:	4b56      	ldr	r3, [pc, #344]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4b55      	ldr	r3, [pc, #340]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003bd4:	2180      	movs	r1, #128	; 0x80
 8003bd6:	0049      	lsls	r1, r1, #1
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fb7e 	bl	80022dc <HAL_GetTick>
 8003be0:	0003      	movs	r3, r0
 8003be2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be4:	e008      	b.n	8003bf8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003be6:	f7fe fb79 	bl	80022dc <HAL_GetTick>
 8003bea:	0002      	movs	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e209      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bf8:	4b4b      	ldr	r3, [pc, #300]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4013      	ands	r3, r2
 8003c02:	d0f0      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	4b48      	ldr	r3, [pc, #288]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a4a      	ldr	r2, [pc, #296]	; (8003d34 <HAL_RCC_OscConfig+0x338>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	0019      	movs	r1, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	4b44      	ldr	r3, [pc, #272]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
 8003c1a:	e01b      	b.n	8003c54 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c1c:	4b42      	ldr	r3, [pc, #264]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4b41      	ldr	r3, [pc, #260]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c22:	4949      	ldr	r1, [pc, #292]	; (8003d48 <HAL_RCC_OscConfig+0x34c>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe fb58 	bl	80022dc <HAL_GetTick>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c32:	f7fe fb53 	bl	80022dc <HAL_GetTick>
 8003c36:	0002      	movs	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1e3      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c44:	4b38      	ldr	r3, [pc, #224]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	d1f0      	bne.n	8003c32 <HAL_RCC_OscConfig+0x236>
 8003c50:	e000      	b.n	8003c54 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c52:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d047      	beq.n	8003cee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c5e:	4b32      	ldr	r3, [pc, #200]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2238      	movs	r2, #56	; 0x38
 8003c64:	4013      	ands	r3, r2
 8003c66:	2b18      	cmp	r3, #24
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6e:	2202      	movs	r2, #2
 8003c70:	4013      	ands	r3, r2
 8003c72:	d03c      	beq.n	8003cee <HAL_RCC_OscConfig+0x2f2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d138      	bne.n	8003cee <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e1c5      	b.n	800400c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d019      	beq.n	8003cbc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c88:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c8a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c8c:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003c8e:	2101      	movs	r1, #1
 8003c90:	430a      	orrs	r2, r1
 8003c92:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c94:	f7fe fb22 	bl	80022dc <HAL_GetTick>
 8003c98:	0003      	movs	r3, r0
 8003c9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fb1d 	bl	80022dc <HAL_GetTick>
 8003ca2:	0002      	movs	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1ad      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003cb0:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d0f1      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2a2>
 8003cba:	e018      	b.n	8003cee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003cbe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003cc0:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	438a      	bics	r2, r1
 8003cc6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fb08 	bl	80022dc <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fe fb03 	bl	80022dc <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e193      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce8:	2202      	movs	r2, #2
 8003cea:	4013      	ands	r3, r2
 8003cec:	d1f1      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d100      	bne.n	8003cfa <HAL_RCC_OscConfig+0x2fe>
 8003cf8:	e0c6      	b.n	8003e88 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfa:	231f      	movs	r3, #31
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2238      	movs	r2, #56	; 0x38
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d11e      	bne.n	8003d4c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_OscConfig+0x32c>)
 8003d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d12:	2202      	movs	r2, #2
 8003d14:	4013      	ands	r3, r2
 8003d16:	d100      	bne.n	8003d1a <HAL_RCC_OscConfig+0x31e>
 8003d18:	e0b6      	b.n	8003e88 <HAL_RCC_OscConfig+0x48c>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d000      	beq.n	8003d24 <HAL_RCC_OscConfig+0x328>
 8003d22:	e0b1      	b.n	8003e88 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e171      	b.n	800400c <HAL_RCC_OscConfig+0x610>
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	fffeffff 	.word	0xfffeffff
 8003d30:	fffbffff 	.word	0xfffbffff
 8003d34:	ffff80ff 	.word	0xffff80ff
 8003d38:	ffffc7ff 	.word	0xffffc7ff
 8003d3c:	00f42400 	.word	0x00f42400
 8003d40:	2000002c 	.word	0x2000002c
 8003d44:	20000030 	.word	0x20000030
 8003d48:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d4c:	4bb1      	ldr	r3, [pc, #708]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	055b      	lsls	r3, r3, #21
 8003d54:	4013      	ands	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_RCC_OscConfig+0x360>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_RCC_OscConfig+0x362>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d011      	beq.n	8003d86 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d62:	4bac      	ldr	r3, [pc, #688]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d66:	4bab      	ldr	r3, [pc, #684]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003d68:	2180      	movs	r1, #128	; 0x80
 8003d6a:	0549      	lsls	r1, r1, #21
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d70:	4ba8      	ldr	r3, [pc, #672]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	055b      	lsls	r3, r3, #21
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d7e:	231f      	movs	r3, #31
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	2201      	movs	r2, #1
 8003d84:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d86:	4ba4      	ldr	r3, [pc, #656]	; (8004018 <HAL_RCC_OscConfig+0x61c>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d11a      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d92:	4ba1      	ldr	r3, [pc, #644]	; (8004018 <HAL_RCC_OscConfig+0x61c>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4ba0      	ldr	r3, [pc, #640]	; (8004018 <HAL_RCC_OscConfig+0x61c>)
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	0049      	lsls	r1, r1, #1
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003da0:	f7fe fa9c 	bl	80022dc <HAL_GetTick>
 8003da4:	0003      	movs	r3, r0
 8003da6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003daa:	f7fe fa97 	bl	80022dc <HAL_GetTick>
 8003dae:	0002      	movs	r2, r0
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e127      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbc:	4b96      	ldr	r3, [pc, #600]	; (8004018 <HAL_RCC_OscConfig+0x61c>)
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2380      	movs	r3, #128	; 0x80
 8003dc2:	005b      	lsls	r3, r3, #1
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	d0f0      	beq.n	8003daa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d106      	bne.n	8003dde <HAL_RCC_OscConfig+0x3e2>
 8003dd0:	4b90      	ldr	r3, [pc, #576]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003dd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dd4:	4b8f      	ldr	r3, [pc, #572]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ddc:	e01c      	b.n	8003e18 <HAL_RCC_OscConfig+0x41c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	2b05      	cmp	r3, #5
 8003de4:	d10c      	bne.n	8003e00 <HAL_RCC_OscConfig+0x404>
 8003de6:	4b8b      	ldr	r3, [pc, #556]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dea:	4b8a      	ldr	r3, [pc, #552]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003dec:	2104      	movs	r1, #4
 8003dee:	430a      	orrs	r2, r1
 8003df0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003df2:	4b88      	ldr	r3, [pc, #544]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003df4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003df6:	4b87      	ldr	r3, [pc, #540]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003df8:	2101      	movs	r1, #1
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dfe:	e00b      	b.n	8003e18 <HAL_RCC_OscConfig+0x41c>
 8003e00:	4b84      	ldr	r3, [pc, #528]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e04:	4b83      	ldr	r3, [pc, #524]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	438a      	bics	r2, r1
 8003e0a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e0c:	4b81      	ldr	r3, [pc, #516]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e10:	4b80      	ldr	r3, [pc, #512]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e12:	2104      	movs	r1, #4
 8003e14:	438a      	bics	r2, r1
 8003e16:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d014      	beq.n	8003e4a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fa5c 	bl	80022dc <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e28:	e009      	b.n	8003e3e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e2a:	f7fe fa57 	bl	80022dc <HAL_GetTick>
 8003e2e:	0002      	movs	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	4a79      	ldr	r2, [pc, #484]	; (800401c <HAL_RCC_OscConfig+0x620>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e0e6      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e3e:	4b75      	ldr	r3, [pc, #468]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e42:	2202      	movs	r2, #2
 8003e44:	4013      	ands	r3, r2
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x42e>
 8003e48:	e013      	b.n	8003e72 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fa47 	bl	80022dc <HAL_GetTick>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e52:	e009      	b.n	8003e68 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe fa42 	bl	80022dc <HAL_GetTick>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	4a6f      	ldr	r2, [pc, #444]	; (800401c <HAL_RCC_OscConfig+0x620>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e0d1      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e68:	4b6a      	ldr	r3, [pc, #424]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e72:	231f      	movs	r3, #31
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d105      	bne.n	8003e88 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e7c:	4b65      	ldr	r3, [pc, #404]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e80:	4b64      	ldr	r3, [pc, #400]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e82:	4967      	ldr	r1, [pc, #412]	; (8004020 <HAL_RCC_OscConfig+0x624>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d100      	bne.n	8003e92 <HAL_RCC_OscConfig+0x496>
 8003e90:	e0bb      	b.n	800400a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e92:	4b60      	ldr	r3, [pc, #384]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2238      	movs	r2, #56	; 0x38
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b10      	cmp	r3, #16
 8003e9c:	d100      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x4a4>
 8003e9e:	e07b      	b.n	8003f98 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d156      	bne.n	8003f56 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea8:	4b5a      	ldr	r3, [pc, #360]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b59      	ldr	r3, [pc, #356]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003eae:	495d      	ldr	r1, [pc, #372]	; (8004024 <HAL_RCC_OscConfig+0x628>)
 8003eb0:	400a      	ands	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fe fa12 	bl	80022dc <HAL_GetTick>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebe:	f7fe fa0d 	bl	80022dc <HAL_GetTick>
 8003ec2:	0002      	movs	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e09d      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ed0:	4b50      	ldr	r3, [pc, #320]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	049b      	lsls	r3, r3, #18
 8003ed8:	4013      	ands	r3, r2
 8003eda:	d1f0      	bne.n	8003ebe <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003edc:	4b4d      	ldr	r3, [pc, #308]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	4a51      	ldr	r2, [pc, #324]	; (8004028 <HAL_RCC_OscConfig+0x62c>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1a      	ldr	r2, [r3, #32]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	4b42      	ldr	r3, [pc, #264]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f10:	4b40      	ldr	r3, [pc, #256]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	4b3f      	ldr	r3, [pc, #252]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f16:	2180      	movs	r1, #128	; 0x80
 8003f18:	0449      	lsls	r1, r1, #17
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f1e:	4b3d      	ldr	r3, [pc, #244]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	4b3c      	ldr	r3, [pc, #240]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f24:	2180      	movs	r1, #128	; 0x80
 8003f26:	0549      	lsls	r1, r1, #21
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe f9d6 	bl	80022dc <HAL_GetTick>
 8003f30:	0003      	movs	r3, r0
 8003f32:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fe f9d1 	bl	80022dc <HAL_GetTick>
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e061      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f48:	4b32      	ldr	r3, [pc, #200]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	049b      	lsls	r3, r3, #18
 8003f50:	4013      	ands	r3, r2
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x53a>
 8003f54:	e059      	b.n	800400a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b2f      	ldr	r3, [pc, #188]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	4b2e      	ldr	r3, [pc, #184]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f5c:	4931      	ldr	r1, [pc, #196]	; (8004024 <HAL_RCC_OscConfig+0x628>)
 8003f5e:	400a      	ands	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fe f9bb 	bl	80022dc <HAL_GetTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fe f9b6 	bl	80022dc <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e046      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f7e:	4b25      	ldr	r3, [pc, #148]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	2380      	movs	r3, #128	; 0x80
 8003f84:	049b      	lsls	r3, r3, #18
 8003f86:	4013      	ands	r3, r2
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	4b21      	ldr	r3, [pc, #132]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003f90:	4926      	ldr	r1, [pc, #152]	; (800402c <HAL_RCC_OscConfig+0x630>)
 8003f92:	400a      	ands	r2, r1
 8003f94:	60da      	str	r2, [r3, #12]
 8003f96:	e038      	b.n	800400a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69db      	ldr	r3, [r3, #28]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e033      	b.n	800400c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003fa4:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_RCC_OscConfig+0x618>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2203      	movs	r2, #3
 8003fae:	401a      	ands	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d126      	bne.n	8004006 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2270      	movs	r2, #112	; 0x70
 8003fbc:	401a      	ands	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d11f      	bne.n	8004006 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	23fe      	movs	r3, #254	; 0xfe
 8003fca:	01db      	lsls	r3, r3, #7
 8003fcc:	401a      	ands	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d116      	bne.n	8004006 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	23f8      	movs	r3, #248	; 0xf8
 8003fdc:	039b      	lsls	r3, r3, #14
 8003fde:	401a      	ands	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d10e      	bne.n	8004006 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	23e0      	movs	r3, #224	; 0xe0
 8003fec:	051b      	lsls	r3, r3, #20
 8003fee:	401a      	ands	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	0f5b      	lsrs	r3, r3, #29
 8003ffc:	075a      	lsls	r2, r3, #29
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004002:	429a      	cmp	r2, r3
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e000      	b.n	800400c <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b008      	add	sp, #32
 8004012:	bd80      	pop	{r7, pc}
 8004014:	40021000 	.word	0x40021000
 8004018:	40007000 	.word	0x40007000
 800401c:	00001388 	.word	0x00001388
 8004020:	efffffff 	.word	0xefffffff
 8004024:	feffffff 	.word	0xfeffffff
 8004028:	11c1808c 	.word	0x11c1808c
 800402c:	eefefffc 	.word	0xeefefffc

08004030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0e9      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004044:	4b76      	ldr	r3, [pc, #472]	; (8004220 <HAL_RCC_ClockConfig+0x1f0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2207      	movs	r2, #7
 800404a:	4013      	ands	r3, r2
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d91e      	bls.n	8004090 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004052:	4b73      	ldr	r3, [pc, #460]	; (8004220 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2207      	movs	r2, #7
 8004058:	4393      	bics	r3, r2
 800405a:	0019      	movs	r1, r3
 800405c:	4b70      	ldr	r3, [pc, #448]	; (8004220 <HAL_RCC_ClockConfig+0x1f0>)
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	430a      	orrs	r2, r1
 8004062:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004064:	f7fe f93a 	bl	80022dc <HAL_GetTick>
 8004068:	0003      	movs	r3, r0
 800406a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800406c:	e009      	b.n	8004082 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406e:	f7fe f935 	bl	80022dc <HAL_GetTick>
 8004072:	0002      	movs	r2, r0
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	4a6a      	ldr	r2, [pc, #424]	; (8004224 <HAL_RCC_ClockConfig+0x1f4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e0ca      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004082:	4b67      	ldr	r3, [pc, #412]	; (8004220 <HAL_RCC_ClockConfig+0x1f0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2207      	movs	r2, #7
 8004088:	4013      	ands	r3, r2
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d1ee      	bne.n	800406e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2202      	movs	r2, #2
 8004096:	4013      	ands	r3, r2
 8004098:	d015      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2204      	movs	r2, #4
 80040a0:	4013      	ands	r3, r2
 80040a2:	d006      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80040a4:	4b60      	ldr	r3, [pc, #384]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4b5f      	ldr	r3, [pc, #380]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80040aa:	21e0      	movs	r1, #224	; 0xe0
 80040ac:	01c9      	lsls	r1, r1, #7
 80040ae:	430a      	orrs	r2, r1
 80040b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b2:	4b5d      	ldr	r3, [pc, #372]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	4a5d      	ldr	r2, [pc, #372]	; (800422c <HAL_RCC_ClockConfig+0x1fc>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	0019      	movs	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80040c2:	430a      	orrs	r2, r1
 80040c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2201      	movs	r2, #1
 80040cc:	4013      	ands	r3, r2
 80040ce:	d057      	beq.n	8004180 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d8:	4b53      	ldr	r3, [pc, #332]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	029b      	lsls	r3, r3, #10
 80040e0:	4013      	ands	r3, r2
 80040e2:	d12b      	bne.n	800413c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e097      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f0:	4b4d      	ldr	r3, [pc, #308]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	2380      	movs	r3, #128	; 0x80
 80040f6:	049b      	lsls	r3, r3, #18
 80040f8:	4013      	ands	r3, r2
 80040fa:	d11f      	bne.n	800413c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e08b      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d107      	bne.n	8004118 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004108:	4b47      	ldr	r3, [pc, #284]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4013      	ands	r3, r2
 8004112:	d113      	bne.n	800413c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e07f      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b03      	cmp	r3, #3
 800411e:	d106      	bne.n	800412e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004120:	4b41      	ldr	r3, [pc, #260]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 8004122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004124:	2202      	movs	r2, #2
 8004126:	4013      	ands	r3, r2
 8004128:	d108      	bne.n	800413c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e074      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800412e:	4b3e      	ldr	r3, [pc, #248]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	2202      	movs	r2, #2
 8004134:	4013      	ands	r3, r2
 8004136:	d101      	bne.n	800413c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e06d      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800413c:	4b3a      	ldr	r3, [pc, #232]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2207      	movs	r2, #7
 8004142:	4393      	bics	r3, r2
 8004144:	0019      	movs	r1, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	4b37      	ldr	r3, [pc, #220]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 800414c:	430a      	orrs	r2, r1
 800414e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004150:	f7fe f8c4 	bl	80022dc <HAL_GetTick>
 8004154:	0003      	movs	r3, r0
 8004156:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004158:	e009      	b.n	800416e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800415a:	f7fe f8bf 	bl	80022dc <HAL_GetTick>
 800415e:	0002      	movs	r2, r0
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	4a2f      	ldr	r2, [pc, #188]	; (8004224 <HAL_RCC_ClockConfig+0x1f4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d901      	bls.n	800416e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	e054      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416e:	4b2e      	ldr	r3, [pc, #184]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2238      	movs	r2, #56	; 0x38
 8004174:	401a      	ands	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	429a      	cmp	r2, r3
 800417e:	d1ec      	bne.n	800415a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004180:	4b27      	ldr	r3, [pc, #156]	; (8004220 <HAL_RCC_ClockConfig+0x1f0>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2207      	movs	r2, #7
 8004186:	4013      	ands	r3, r2
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d21e      	bcs.n	80041cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_RCC_ClockConfig+0x1f0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2207      	movs	r2, #7
 8004194:	4393      	bics	r3, r2
 8004196:	0019      	movs	r1, r3
 8004198:	4b21      	ldr	r3, [pc, #132]	; (8004220 <HAL_RCC_ClockConfig+0x1f0>)
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80041a0:	f7fe f89c 	bl	80022dc <HAL_GetTick>
 80041a4:	0003      	movs	r3, r0
 80041a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041a8:	e009      	b.n	80041be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041aa:	f7fe f897 	bl	80022dc <HAL_GetTick>
 80041ae:	0002      	movs	r2, r0
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	4a1b      	ldr	r2, [pc, #108]	; (8004224 <HAL_RCC_ClockConfig+0x1f4>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e02c      	b.n	8004218 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041be:	4b18      	ldr	r3, [pc, #96]	; (8004220 <HAL_RCC_ClockConfig+0x1f0>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2207      	movs	r2, #7
 80041c4:	4013      	ands	r3, r2
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d1ee      	bne.n	80041aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2204      	movs	r2, #4
 80041d2:	4013      	ands	r3, r2
 80041d4:	d009      	beq.n	80041ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041d6:	4b14      	ldr	r3, [pc, #80]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <HAL_RCC_ClockConfig+0x200>)
 80041dc:	4013      	ands	r3, r2
 80041de:	0019      	movs	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68da      	ldr	r2, [r3, #12]
 80041e4:	4b10      	ldr	r3, [pc, #64]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80041e6:	430a      	orrs	r2, r1
 80041e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80041ea:	f000 f829 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 80041ee:	0001      	movs	r1, r0
 80041f0:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <HAL_RCC_ClockConfig+0x1f8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	220f      	movs	r2, #15
 80041f8:	401a      	ands	r2, r3
 80041fa:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <HAL_RCC_ClockConfig+0x204>)
 80041fc:	0092      	lsls	r2, r2, #2
 80041fe:	58d3      	ldr	r3, [r2, r3]
 8004200:	221f      	movs	r2, #31
 8004202:	4013      	ands	r3, r2
 8004204:	000a      	movs	r2, r1
 8004206:	40da      	lsrs	r2, r3
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_ClockConfig+0x208>)
 800420a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x20c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	0018      	movs	r0, r3
 8004212:	f7fe f807 	bl	8002224 <HAL_InitTick>
 8004216:	0003      	movs	r3, r0
}
 8004218:	0018      	movs	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	b004      	add	sp, #16
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40022000 	.word	0x40022000
 8004224:	00001388 	.word	0x00001388
 8004228:	40021000 	.word	0x40021000
 800422c:	fffff0ff 	.word	0xfffff0ff
 8004230:	ffff8fff 	.word	0xffff8fff
 8004234:	08005f24 	.word	0x08005f24
 8004238:	2000002c 	.word	0x2000002c
 800423c:	20000030 	.word	0x20000030

08004240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004246:	4b3c      	ldr	r3, [pc, #240]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2238      	movs	r2, #56	; 0x38
 800424c:	4013      	ands	r3, r2
 800424e:	d10f      	bne.n	8004270 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004250:	4b39      	ldr	r3, [pc, #228]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	0adb      	lsrs	r3, r3, #11
 8004256:	2207      	movs	r2, #7
 8004258:	4013      	ands	r3, r2
 800425a:	2201      	movs	r2, #1
 800425c:	409a      	lsls	r2, r3
 800425e:	0013      	movs	r3, r2
 8004260:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004262:	6839      	ldr	r1, [r7, #0]
 8004264:	4835      	ldr	r0, [pc, #212]	; (800433c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004266:	f7fb ff5f 	bl	8000128 <__udivsi3>
 800426a:	0003      	movs	r3, r0
 800426c:	613b      	str	r3, [r7, #16]
 800426e:	e05d      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2238      	movs	r2, #56	; 0x38
 8004276:	4013      	ands	r3, r2
 8004278:	2b08      	cmp	r3, #8
 800427a:	d102      	bne.n	8004282 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800427c:	4b30      	ldr	r3, [pc, #192]	; (8004340 <HAL_RCC_GetSysClockFreq+0x100>)
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	e054      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004282:	4b2d      	ldr	r3, [pc, #180]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2238      	movs	r2, #56	; 0x38
 8004288:	4013      	ands	r3, r2
 800428a:	2b10      	cmp	r3, #16
 800428c:	d138      	bne.n	8004300 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800428e:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2203      	movs	r2, #3
 8004294:	4013      	ands	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004298:	4b27      	ldr	r3, [pc, #156]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	2207      	movs	r2, #7
 80042a0:	4013      	ands	r3, r2
 80042a2:	3301      	adds	r3, #1
 80042a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d10d      	bne.n	80042c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042ac:	68b9      	ldr	r1, [r7, #8]
 80042ae:	4824      	ldr	r0, [pc, #144]	; (8004340 <HAL_RCC_GetSysClockFreq+0x100>)
 80042b0:	f7fb ff3a 	bl	8000128 <__udivsi3>
 80042b4:	0003      	movs	r3, r0
 80042b6:	0019      	movs	r1, r3
 80042b8:	4b1f      	ldr	r3, [pc, #124]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	0a1b      	lsrs	r3, r3, #8
 80042be:	227f      	movs	r2, #127	; 0x7f
 80042c0:	4013      	ands	r3, r2
 80042c2:	434b      	muls	r3, r1
 80042c4:	617b      	str	r3, [r7, #20]
        break;
 80042c6:	e00d      	b.n	80042e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042c8:	68b9      	ldr	r1, [r7, #8]
 80042ca:	481c      	ldr	r0, [pc, #112]	; (800433c <HAL_RCC_GetSysClockFreq+0xfc>)
 80042cc:	f7fb ff2c 	bl	8000128 <__udivsi3>
 80042d0:	0003      	movs	r3, r0
 80042d2:	0019      	movs	r1, r3
 80042d4:	4b18      	ldr	r3, [pc, #96]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	227f      	movs	r2, #127	; 0x7f
 80042dc:	4013      	ands	r3, r2
 80042de:	434b      	muls	r3, r1
 80042e0:	617b      	str	r3, [r7, #20]
        break;
 80042e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80042e4:	4b14      	ldr	r3, [pc, #80]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0f5b      	lsrs	r3, r3, #29
 80042ea:	2207      	movs	r2, #7
 80042ec:	4013      	ands	r3, r2
 80042ee:	3301      	adds	r3, #1
 80042f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	6978      	ldr	r0, [r7, #20]
 80042f6:	f7fb ff17 	bl	8000128 <__udivsi3>
 80042fa:	0003      	movs	r3, r0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e015      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004300:	4b0d      	ldr	r3, [pc, #52]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2238      	movs	r2, #56	; 0x38
 8004306:	4013      	ands	r3, r2
 8004308:	2b20      	cmp	r3, #32
 800430a:	d103      	bne.n	8004314 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	e00b      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004314:	4b08      	ldr	r3, [pc, #32]	; (8004338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2238      	movs	r2, #56	; 0x38
 800431a:	4013      	ands	r3, r2
 800431c:	2b18      	cmp	r3, #24
 800431e:	d103      	bne.n	8004328 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004320:	23fa      	movs	r3, #250	; 0xfa
 8004322:	01db      	lsls	r3, r3, #7
 8004324:	613b      	str	r3, [r7, #16]
 8004326:	e001      	b.n	800432c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800432c:	693b      	ldr	r3, [r7, #16]
}
 800432e:	0018      	movs	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	b006      	add	sp, #24
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	40021000 	.word	0x40021000
 800433c:	00f42400 	.word	0x00f42400
 8004340:	007a1200 	.word	0x007a1200

08004344 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004348:	4b02      	ldr	r3, [pc, #8]	; (8004354 <HAL_RCC_GetHCLKFreq+0x10>)
 800434a:	681b      	ldr	r3, [r3, #0]
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	2000002c 	.word	0x2000002c

08004358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004358:	b5b0      	push	{r4, r5, r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800435c:	f7ff fff2 	bl	8004344 <HAL_RCC_GetHCLKFreq>
 8004360:	0004      	movs	r4, r0
 8004362:	f7ff fb3f 	bl	80039e4 <LL_RCC_GetAPB1Prescaler>
 8004366:	0003      	movs	r3, r0
 8004368:	0b1a      	lsrs	r2, r3, #12
 800436a:	4b05      	ldr	r3, [pc, #20]	; (8004380 <HAL_RCC_GetPCLK1Freq+0x28>)
 800436c:	0092      	lsls	r2, r2, #2
 800436e:	58d3      	ldr	r3, [r2, r3]
 8004370:	221f      	movs	r2, #31
 8004372:	4013      	ands	r3, r2
 8004374:	40dc      	lsrs	r4, r3
 8004376:	0023      	movs	r3, r4
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	bdb0      	pop	{r4, r5, r7, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	08005f64 	.word	0x08005f64

08004384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800438c:	2313      	movs	r3, #19
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004394:	2312      	movs	r3, #18
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	029b      	lsls	r3, r3, #10
 80043a4:	4013      	ands	r3, r2
 80043a6:	d100      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80043a8:	e0a3      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043aa:	2011      	movs	r0, #17
 80043ac:	183b      	adds	r3, r7, r0
 80043ae:	2200      	movs	r2, #0
 80043b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043b2:	4bc3      	ldr	r3, [pc, #780]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	055b      	lsls	r3, r3, #21
 80043ba:	4013      	ands	r3, r2
 80043bc:	d110      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043be:	4bc0      	ldr	r3, [pc, #768]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c2:	4bbf      	ldr	r3, [pc, #764]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043c4:	2180      	movs	r1, #128	; 0x80
 80043c6:	0549      	lsls	r1, r1, #21
 80043c8:	430a      	orrs	r2, r1
 80043ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80043cc:	4bbc      	ldr	r3, [pc, #752]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80043ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	055b      	lsls	r3, r3, #21
 80043d4:	4013      	ands	r3, r2
 80043d6:	60bb      	str	r3, [r7, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043da:	183b      	adds	r3, r7, r0
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043e0:	4bb8      	ldr	r3, [pc, #736]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4bb7      	ldr	r3, [pc, #732]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80043e6:	2180      	movs	r1, #128	; 0x80
 80043e8:	0049      	lsls	r1, r1, #1
 80043ea:	430a      	orrs	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043ee:	f7fd ff75 	bl	80022dc <HAL_GetTick>
 80043f2:	0003      	movs	r3, r0
 80043f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043f6:	e00b      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fd ff70 	bl	80022dc <HAL_GetTick>
 80043fc:	0002      	movs	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d904      	bls.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004406:	2313      	movs	r3, #19
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	2203      	movs	r2, #3
 800440c:	701a      	strb	r2, [r3, #0]
        break;
 800440e:	e005      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004410:	4bac      	ldr	r3, [pc, #688]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	2380      	movs	r3, #128	; 0x80
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	4013      	ands	r3, r2
 800441a:	d0ed      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800441c:	2313      	movs	r3, #19
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d154      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004426:	4ba6      	ldr	r3, [pc, #664]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800442a:	23c0      	movs	r3, #192	; 0xc0
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4013      	ands	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d019      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	429a      	cmp	r2, r3
 8004440:	d014      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004442:	4b9f      	ldr	r3, [pc, #636]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004446:	4aa0      	ldr	r2, [pc, #640]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004448:	4013      	ands	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800444c:	4b9c      	ldr	r3, [pc, #624]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800444e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004450:	4b9b      	ldr	r3, [pc, #620]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004452:	2180      	movs	r1, #128	; 0x80
 8004454:	0249      	lsls	r1, r1, #9
 8004456:	430a      	orrs	r2, r1
 8004458:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800445a:	4b99      	ldr	r3, [pc, #612]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800445c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800445e:	4b98      	ldr	r3, [pc, #608]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004460:	499a      	ldr	r1, [pc, #616]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004462:	400a      	ands	r2, r1
 8004464:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004466:	4b96      	ldr	r3, [pc, #600]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	2201      	movs	r2, #1
 8004470:	4013      	ands	r3, r2
 8004472:	d016      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd ff32 	bl	80022dc <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800447c:	e00c      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800447e:	f7fd ff2d 	bl	80022dc <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	4a91      	ldr	r2, [pc, #580]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d904      	bls.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800448e:	2313      	movs	r3, #19
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2203      	movs	r2, #3
 8004494:	701a      	strb	r2, [r3, #0]
            break;
 8004496:	e004      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004498:	4b89      	ldr	r3, [pc, #548]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	2202      	movs	r2, #2
 800449e:	4013      	ands	r3, r2
 80044a0:	d0ed      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80044a2:	2313      	movs	r3, #19
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10a      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044ac:	4b84      	ldr	r3, [pc, #528]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b0:	4a85      	ldr	r2, [pc, #532]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	0019      	movs	r1, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ba:	4b81      	ldr	r3, [pc, #516]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044bc:	430a      	orrs	r2, r1
 80044be:	65da      	str	r2, [r3, #92]	; 0x5c
 80044c0:	e00c      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044c2:	2312      	movs	r3, #18
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	2213      	movs	r2, #19
 80044c8:	18ba      	adds	r2, r7, r2
 80044ca:	7812      	ldrb	r2, [r2, #0]
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e005      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	2312      	movs	r3, #18
 80044d2:	18fb      	adds	r3, r7, r3
 80044d4:	2213      	movs	r2, #19
 80044d6:	18ba      	adds	r2, r7, r2
 80044d8:	7812      	ldrb	r2, [r2, #0]
 80044da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044dc:	2311      	movs	r3, #17
 80044de:	18fb      	adds	r3, r7, r3
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d105      	bne.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e6:	4b76      	ldr	r3, [pc, #472]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ea:	4b75      	ldr	r3, [pc, #468]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044ec:	4979      	ldr	r1, [pc, #484]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80044ee:	400a      	ands	r2, r1
 80044f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2201      	movs	r2, #1
 80044f8:	4013      	ands	r3, r2
 80044fa:	d009      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044fc:	4b70      	ldr	r3, [pc, #448]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80044fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004500:	2203      	movs	r2, #3
 8004502:	4393      	bics	r3, r2
 8004504:	0019      	movs	r1, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685a      	ldr	r2, [r3, #4]
 800450a:	4b6d      	ldr	r3, [pc, #436]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800450c:	430a      	orrs	r2, r1
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2202      	movs	r2, #2
 8004516:	4013      	ands	r3, r2
 8004518:	d009      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800451a:	4b69      	ldr	r3, [pc, #420]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800451c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451e:	220c      	movs	r2, #12
 8004520:	4393      	bics	r3, r2
 8004522:	0019      	movs	r1, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689a      	ldr	r2, [r3, #8]
 8004528:	4b65      	ldr	r3, [pc, #404]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800452a:	430a      	orrs	r2, r1
 800452c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2210      	movs	r2, #16
 8004534:	4013      	ands	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004538:	4b61      	ldr	r3, [pc, #388]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800453a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453c:	4a66      	ldr	r2, [pc, #408]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800453e:	4013      	ands	r3, r2
 8004540:	0019      	movs	r1, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	4b5e      	ldr	r3, [pc, #376]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004548:	430a      	orrs	r2, r1
 800454a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4013      	ands	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	4a5f      	ldr	r2, [pc, #380]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800455e:	4013      	ands	r3, r2
 8004560:	0019      	movs	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699a      	ldr	r2, [r3, #24]
 8004566:	4b56      	ldr	r3, [pc, #344]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004568:	430a      	orrs	r2, r1
 800456a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	; 0x80
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	4013      	ands	r3, r2
 8004576:	d009      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004578:	4b51      	ldr	r3, [pc, #324]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	4b4e      	ldr	r3, [pc, #312]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004588:	430a      	orrs	r2, r1
 800458a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2220      	movs	r2, #32
 8004592:	4013      	ands	r3, r2
 8004594:	d009      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004596:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459a:	4a52      	ldr	r2, [pc, #328]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800459c:	4013      	ands	r3, r2
 800459e:	0019      	movs	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045a6:	430a      	orrs	r2, r1
 80045a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	01db      	lsls	r3, r3, #7
 80045b2:	4013      	ands	r3, r2
 80045b4:	d015      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b6:	4b42      	ldr	r3, [pc, #264]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	0899      	lsrs	r1, r3, #2
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a1a      	ldr	r2, [r3, #32]
 80045c2:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045c4:	430a      	orrs	r2, r1
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a1a      	ldr	r2, [r3, #32]
 80045cc:	2380      	movs	r3, #128	; 0x80
 80045ce:	05db      	lsls	r3, r3, #23
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d106      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045d4:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	4b39      	ldr	r3, [pc, #228]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045da:	2180      	movs	r1, #128	; 0x80
 80045dc:	0249      	lsls	r1, r1, #9
 80045de:	430a      	orrs	r2, r1
 80045e0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	031b      	lsls	r3, r3, #12
 80045ea:	4013      	ands	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045ee:	4b34      	ldr	r3, [pc, #208]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f2:	2240      	movs	r2, #64	; 0x40
 80045f4:	4393      	bics	r3, r2
 80045f6:	0019      	movs	r1, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045fc:	4b30      	ldr	r3, [pc, #192]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80045fe:	430a      	orrs	r2, r1
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	039b      	lsls	r3, r3, #14
 800460a:	4013      	ands	r3, r2
 800460c:	d016      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800460e:	4b2c      	ldr	r3, [pc, #176]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004612:	4a35      	ldr	r2, [pc, #212]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004614:	4013      	ands	r3, r2
 8004616:	0019      	movs	r1, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461c:	4b28      	ldr	r3, [pc, #160]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800461e:	430a      	orrs	r2, r1
 8004620:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	03db      	lsls	r3, r3, #15
 800462a:	429a      	cmp	r2, r3
 800462c:	d106      	bne.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800462e:	4b24      	ldr	r3, [pc, #144]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004634:	2180      	movs	r1, #128	; 0x80
 8004636:	0449      	lsls	r1, r1, #17
 8004638:	430a      	orrs	r2, r1
 800463a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	03db      	lsls	r3, r3, #15
 8004644:	4013      	ands	r3, r2
 8004646:	d016      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004648:	4b1d      	ldr	r3, [pc, #116]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464c:	4a27      	ldr	r2, [pc, #156]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800464e:	4013      	ands	r3, r2
 8004650:	0019      	movs	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004658:	430a      	orrs	r2, r1
 800465a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	045b      	lsls	r3, r3, #17
 8004664:	429a      	cmp	r2, r3
 8004666:	d106      	bne.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004668:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800466e:	2180      	movs	r1, #128	; 0x80
 8004670:	0449      	lsls	r1, r1, #17
 8004672:	430a      	orrs	r2, r1
 8004674:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	2380      	movs	r3, #128	; 0x80
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	4013      	ands	r3, r2
 8004680:	d016      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004686:	4a1a      	ldr	r2, [pc, #104]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8004688:	4013      	ands	r3, r2
 800468a:	0019      	movs	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004692:	430a      	orrs	r2, r1
 8004694:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695a      	ldr	r2, [r3, #20]
 800469a:	2380      	movs	r3, #128	; 0x80
 800469c:	01db      	lsls	r3, r3, #7
 800469e:	429a      	cmp	r2, r3
 80046a0:	d106      	bne.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046a2:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80046a8:	2180      	movs	r1, #128	; 0x80
 80046aa:	0249      	lsls	r1, r1, #9
 80046ac:	430a      	orrs	r2, r1
 80046ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80046b0:	2312      	movs	r3, #18
 80046b2:	18fb      	adds	r3, r7, r3
 80046b4:	781b      	ldrb	r3, [r3, #0]
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b006      	add	sp, #24
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40007000 	.word	0x40007000
 80046c8:	fffffcff 	.word	0xfffffcff
 80046cc:	fffeffff 	.word	0xfffeffff
 80046d0:	00001388 	.word	0x00001388
 80046d4:	efffffff 	.word	0xefffffff
 80046d8:	fffff3ff 	.word	0xfffff3ff
 80046dc:	fff3ffff 	.word	0xfff3ffff
 80046e0:	ffcfffff 	.word	0xffcfffff
 80046e4:	ffffcfff 	.word	0xffffcfff
 80046e8:	ffbfffff 	.word	0xffbfffff
 80046ec:	feffffff 	.word	0xfeffffff
 80046f0:	ffff3fff 	.word	0xffff3fff

080046f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e046      	b.n	8004794 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2288      	movs	r2, #136	; 0x88
 800470a:	589b      	ldr	r3, [r3, r2]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d107      	bne.n	8004720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2284      	movs	r2, #132	; 0x84
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0018      	movs	r0, r3
 800471c:	f7fd fc84 	bl	8002028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2288      	movs	r2, #136	; 0x88
 8004724:	2124      	movs	r1, #36	; 0x24
 8004726:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2101      	movs	r1, #1
 8004734:	438a      	bics	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	0018      	movs	r0, r3
 8004744:	f000 fb8e 	bl	8004e64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	0018      	movs	r0, r3
 800474c:	f000 f8cc 	bl	80048e8 <UART_SetConfig>
 8004750:	0003      	movs	r3, r0
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e01c      	b.n	8004794 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	490d      	ldr	r1, [pc, #52]	; (800479c <HAL_UART_Init+0xa8>)
 8004766:	400a      	ands	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	212a      	movs	r1, #42	; 0x2a
 8004776:	438a      	bics	r2, r1
 8004778:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2101      	movs	r1, #1
 8004786:	430a      	orrs	r2, r1
 8004788:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	0018      	movs	r0, r3
 800478e:	f000 fc1d 	bl	8004fcc <UART_CheckIdleState>
 8004792:	0003      	movs	r3, r0
}
 8004794:	0018      	movs	r0, r3
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bd80      	pop	{r7, pc}
 800479c:	ffffb7ff 	.word	0xffffb7ff

080047a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	1dbb      	adds	r3, r7, #6
 80047ae:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2288      	movs	r2, #136	; 0x88
 80047b4:	589b      	ldr	r3, [r3, r2]
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d000      	beq.n	80047bc <HAL_UART_Transmit+0x1c>
 80047ba:	e090      	b.n	80048de <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_UART_Transmit+0x2a>
 80047c2:	1dbb      	adds	r3, r7, #6
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e088      	b.n	80048e0 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	015b      	lsls	r3, r3, #5
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d109      	bne.n	80047ee <HAL_UART_Transmit+0x4e>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d105      	bne.n	80047ee <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2201      	movs	r2, #1
 80047e6:	4013      	ands	r3, r2
 80047e8:	d001      	beq.n	80047ee <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e078      	b.n	80048e0 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2290      	movs	r2, #144	; 0x90
 80047f2:	2100      	movs	r1, #0
 80047f4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2288      	movs	r2, #136	; 0x88
 80047fa:	2121      	movs	r1, #33	; 0x21
 80047fc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047fe:	f7fd fd6d 	bl	80022dc <HAL_GetTick>
 8004802:	0003      	movs	r3, r0
 8004804:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	1dba      	adds	r2, r7, #6
 800480a:	2154      	movs	r1, #84	; 0x54
 800480c:	8812      	ldrh	r2, [r2, #0]
 800480e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1dba      	adds	r2, r7, #6
 8004814:	2156      	movs	r1, #86	; 0x56
 8004816:	8812      	ldrh	r2, [r2, #0]
 8004818:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	015b      	lsls	r3, r3, #5
 8004822:	429a      	cmp	r2, r3
 8004824:	d108      	bne.n	8004838 <HAL_UART_Transmit+0x98>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d104      	bne.n	8004838 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	e003      	b.n	8004840 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004840:	e030      	b.n	80048a4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	68f8      	ldr	r0, [r7, #12]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	9300      	str	r3, [sp, #0]
 800484a:	0013      	movs	r3, r2
 800484c:	2200      	movs	r2, #0
 800484e:	2180      	movs	r1, #128	; 0x80
 8004850:	f000 fc66 	bl	8005120 <UART_WaitOnFlagUntilTimeout>
 8004854:	1e03      	subs	r3, r0, #0
 8004856:	d005      	beq.n	8004864 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2288      	movs	r2, #136	; 0x88
 800485c:	2120      	movs	r1, #32
 800485e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e03d      	b.n	80048e0 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10b      	bne.n	8004882 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	001a      	movs	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	05d2      	lsls	r2, r2, #23
 8004876:	0dd2      	lsrs	r2, r2, #23
 8004878:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	3302      	adds	r3, #2
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	e007      	b.n	8004892 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	781a      	ldrb	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800488c:	69fb      	ldr	r3, [r7, #28]
 800488e:	3301      	adds	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2256      	movs	r2, #86	; 0x56
 8004896:	5a9b      	ldrh	r3, [r3, r2]
 8004898:	b29b      	uxth	r3, r3
 800489a:	3b01      	subs	r3, #1
 800489c:	b299      	uxth	r1, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2256      	movs	r2, #86	; 0x56
 80048a2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2256      	movs	r2, #86	; 0x56
 80048a8:	5a9b      	ldrh	r3, [r3, r2]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1c8      	bne.n	8004842 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	0013      	movs	r3, r2
 80048ba:	2200      	movs	r2, #0
 80048bc:	2140      	movs	r1, #64	; 0x40
 80048be:	f000 fc2f 	bl	8005120 <UART_WaitOnFlagUntilTimeout>
 80048c2:	1e03      	subs	r3, r0, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2288      	movs	r2, #136	; 0x88
 80048ca:	2120      	movs	r1, #32
 80048cc:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2288      	movs	r2, #136	; 0x88
 80048d6:	2120      	movs	r1, #32
 80048d8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	0018      	movs	r0, r3
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b008      	add	sp, #32
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e8:	b5b0      	push	{r4, r5, r7, lr}
 80048ea:	b090      	sub	sp, #64	; 0x40
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048f0:	231a      	movs	r3, #26
 80048f2:	2220      	movs	r2, #32
 80048f4:	189b      	adds	r3, r3, r2
 80048f6:	19db      	adds	r3, r3, r7
 80048f8:	2200      	movs	r2, #0
 80048fa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	431a      	orrs	r2, r3
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	431a      	orrs	r2, r3
 800490c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	4313      	orrs	r3, r2
 8004912:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4aaf      	ldr	r2, [pc, #700]	; (8004bd8 <UART_SetConfig+0x2f0>)
 800491c:	4013      	ands	r3, r2
 800491e:	0019      	movs	r1, r3
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	430b      	orrs	r3, r1
 8004928:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4aaa      	ldr	r2, [pc, #680]	; (8004bdc <UART_SetConfig+0x2f4>)
 8004932:	4013      	ands	r3, r2
 8004934:	0018      	movs	r0, r3
 8004936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004938:	68d9      	ldr	r1, [r3, #12]
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	0003      	movs	r3, r0
 8004940:	430b      	orrs	r3, r1
 8004942:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4aa4      	ldr	r2, [pc, #656]	; (8004be0 <UART_SetConfig+0x2f8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d004      	beq.n	800495e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800495a:	4313      	orrs	r3, r2
 800495c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a9f      	ldr	r2, [pc, #636]	; (8004be4 <UART_SetConfig+0x2fc>)
 8004966:	4013      	ands	r3, r2
 8004968:	0019      	movs	r1, r3
 800496a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	430b      	orrs	r3, r1
 8004972:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	220f      	movs	r2, #15
 800497c:	4393      	bics	r3, r2
 800497e:	0018      	movs	r0, r3
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	0003      	movs	r3, r0
 800498a:	430b      	orrs	r3, r1
 800498c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a95      	ldr	r2, [pc, #596]	; (8004be8 <UART_SetConfig+0x300>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d131      	bne.n	80049fc <UART_SetConfig+0x114>
 8004998:	4b94      	ldr	r3, [pc, #592]	; (8004bec <UART_SetConfig+0x304>)
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	2203      	movs	r2, #3
 800499e:	4013      	ands	r3, r2
 80049a0:	2b03      	cmp	r3, #3
 80049a2:	d01d      	beq.n	80049e0 <UART_SetConfig+0xf8>
 80049a4:	d823      	bhi.n	80049ee <UART_SetConfig+0x106>
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d00c      	beq.n	80049c4 <UART_SetConfig+0xdc>
 80049aa:	d820      	bhi.n	80049ee <UART_SetConfig+0x106>
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <UART_SetConfig+0xce>
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d00e      	beq.n	80049d2 <UART_SetConfig+0xea>
 80049b4:	e01b      	b.n	80049ee <UART_SetConfig+0x106>
 80049b6:	231b      	movs	r3, #27
 80049b8:	2220      	movs	r2, #32
 80049ba:	189b      	adds	r3, r3, r2
 80049bc:	19db      	adds	r3, r3, r7
 80049be:	2200      	movs	r2, #0
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	e0b4      	b.n	8004b2e <UART_SetConfig+0x246>
 80049c4:	231b      	movs	r3, #27
 80049c6:	2220      	movs	r2, #32
 80049c8:	189b      	adds	r3, r3, r2
 80049ca:	19db      	adds	r3, r3, r7
 80049cc:	2202      	movs	r2, #2
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e0ad      	b.n	8004b2e <UART_SetConfig+0x246>
 80049d2:	231b      	movs	r3, #27
 80049d4:	2220      	movs	r2, #32
 80049d6:	189b      	adds	r3, r3, r2
 80049d8:	19db      	adds	r3, r3, r7
 80049da:	2204      	movs	r2, #4
 80049dc:	701a      	strb	r2, [r3, #0]
 80049de:	e0a6      	b.n	8004b2e <UART_SetConfig+0x246>
 80049e0:	231b      	movs	r3, #27
 80049e2:	2220      	movs	r2, #32
 80049e4:	189b      	adds	r3, r3, r2
 80049e6:	19db      	adds	r3, r3, r7
 80049e8:	2208      	movs	r2, #8
 80049ea:	701a      	strb	r2, [r3, #0]
 80049ec:	e09f      	b.n	8004b2e <UART_SetConfig+0x246>
 80049ee:	231b      	movs	r3, #27
 80049f0:	2220      	movs	r2, #32
 80049f2:	189b      	adds	r3, r3, r2
 80049f4:	19db      	adds	r3, r3, r7
 80049f6:	2210      	movs	r2, #16
 80049f8:	701a      	strb	r2, [r3, #0]
 80049fa:	e098      	b.n	8004b2e <UART_SetConfig+0x246>
 80049fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a7b      	ldr	r2, [pc, #492]	; (8004bf0 <UART_SetConfig+0x308>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d131      	bne.n	8004a6a <UART_SetConfig+0x182>
 8004a06:	4b79      	ldr	r3, [pc, #484]	; (8004bec <UART_SetConfig+0x304>)
 8004a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0a:	220c      	movs	r2, #12
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b0c      	cmp	r3, #12
 8004a10:	d01d      	beq.n	8004a4e <UART_SetConfig+0x166>
 8004a12:	d823      	bhi.n	8004a5c <UART_SetConfig+0x174>
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d00c      	beq.n	8004a32 <UART_SetConfig+0x14a>
 8004a18:	d820      	bhi.n	8004a5c <UART_SetConfig+0x174>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <UART_SetConfig+0x13c>
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d00e      	beq.n	8004a40 <UART_SetConfig+0x158>
 8004a22:	e01b      	b.n	8004a5c <UART_SetConfig+0x174>
 8004a24:	231b      	movs	r3, #27
 8004a26:	2220      	movs	r2, #32
 8004a28:	189b      	adds	r3, r3, r2
 8004a2a:	19db      	adds	r3, r3, r7
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	701a      	strb	r2, [r3, #0]
 8004a30:	e07d      	b.n	8004b2e <UART_SetConfig+0x246>
 8004a32:	231b      	movs	r3, #27
 8004a34:	2220      	movs	r2, #32
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	19db      	adds	r3, r3, r7
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	701a      	strb	r2, [r3, #0]
 8004a3e:	e076      	b.n	8004b2e <UART_SetConfig+0x246>
 8004a40:	231b      	movs	r3, #27
 8004a42:	2220      	movs	r2, #32
 8004a44:	189b      	adds	r3, r3, r2
 8004a46:	19db      	adds	r3, r3, r7
 8004a48:	2204      	movs	r2, #4
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	e06f      	b.n	8004b2e <UART_SetConfig+0x246>
 8004a4e:	231b      	movs	r3, #27
 8004a50:	2220      	movs	r2, #32
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	19db      	adds	r3, r3, r7
 8004a56:	2208      	movs	r2, #8
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e068      	b.n	8004b2e <UART_SetConfig+0x246>
 8004a5c:	231b      	movs	r3, #27
 8004a5e:	2220      	movs	r2, #32
 8004a60:	189b      	adds	r3, r3, r2
 8004a62:	19db      	adds	r3, r3, r7
 8004a64:	2210      	movs	r2, #16
 8004a66:	701a      	strb	r2, [r3, #0]
 8004a68:	e061      	b.n	8004b2e <UART_SetConfig+0x246>
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a61      	ldr	r2, [pc, #388]	; (8004bf4 <UART_SetConfig+0x30c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d106      	bne.n	8004a82 <UART_SetConfig+0x19a>
 8004a74:	231b      	movs	r3, #27
 8004a76:	2220      	movs	r2, #32
 8004a78:	189b      	adds	r3, r3, r2
 8004a7a:	19db      	adds	r3, r3, r7
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]
 8004a80:	e055      	b.n	8004b2e <UART_SetConfig+0x246>
 8004a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a5c      	ldr	r2, [pc, #368]	; (8004bf8 <UART_SetConfig+0x310>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d106      	bne.n	8004a9a <UART_SetConfig+0x1b2>
 8004a8c:	231b      	movs	r3, #27
 8004a8e:	2220      	movs	r2, #32
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	19db      	adds	r3, r3, r7
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	e049      	b.n	8004b2e <UART_SetConfig+0x246>
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a50      	ldr	r2, [pc, #320]	; (8004be0 <UART_SetConfig+0x2f8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d13e      	bne.n	8004b22 <UART_SetConfig+0x23a>
 8004aa4:	4b51      	ldr	r3, [pc, #324]	; (8004bec <UART_SetConfig+0x304>)
 8004aa6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aa8:	23c0      	movs	r3, #192	; 0xc0
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	4013      	ands	r3, r2
 8004aae:	22c0      	movs	r2, #192	; 0xc0
 8004ab0:	0112      	lsls	r2, r2, #4
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d027      	beq.n	8004b06 <UART_SetConfig+0x21e>
 8004ab6:	22c0      	movs	r2, #192	; 0xc0
 8004ab8:	0112      	lsls	r2, r2, #4
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d82a      	bhi.n	8004b14 <UART_SetConfig+0x22c>
 8004abe:	2280      	movs	r2, #128	; 0x80
 8004ac0:	0112      	lsls	r2, r2, #4
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d011      	beq.n	8004aea <UART_SetConfig+0x202>
 8004ac6:	2280      	movs	r2, #128	; 0x80
 8004ac8:	0112      	lsls	r2, r2, #4
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d822      	bhi.n	8004b14 <UART_SetConfig+0x22c>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d004      	beq.n	8004adc <UART_SetConfig+0x1f4>
 8004ad2:	2280      	movs	r2, #128	; 0x80
 8004ad4:	00d2      	lsls	r2, r2, #3
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <UART_SetConfig+0x210>
 8004ada:	e01b      	b.n	8004b14 <UART_SetConfig+0x22c>
 8004adc:	231b      	movs	r3, #27
 8004ade:	2220      	movs	r2, #32
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	19db      	adds	r3, r3, r7
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e021      	b.n	8004b2e <UART_SetConfig+0x246>
 8004aea:	231b      	movs	r3, #27
 8004aec:	2220      	movs	r2, #32
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	19db      	adds	r3, r3, r7
 8004af2:	2202      	movs	r2, #2
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e01a      	b.n	8004b2e <UART_SetConfig+0x246>
 8004af8:	231b      	movs	r3, #27
 8004afa:	2220      	movs	r2, #32
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	19db      	adds	r3, r3, r7
 8004b00:	2204      	movs	r2, #4
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e013      	b.n	8004b2e <UART_SetConfig+0x246>
 8004b06:	231b      	movs	r3, #27
 8004b08:	2220      	movs	r2, #32
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	19db      	adds	r3, r3, r7
 8004b0e:	2208      	movs	r2, #8
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e00c      	b.n	8004b2e <UART_SetConfig+0x246>
 8004b14:	231b      	movs	r3, #27
 8004b16:	2220      	movs	r2, #32
 8004b18:	189b      	adds	r3, r3, r2
 8004b1a:	19db      	adds	r3, r3, r7
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	701a      	strb	r2, [r3, #0]
 8004b20:	e005      	b.n	8004b2e <UART_SetConfig+0x246>
 8004b22:	231b      	movs	r3, #27
 8004b24:	2220      	movs	r2, #32
 8004b26:	189b      	adds	r3, r3, r2
 8004b28:	19db      	adds	r3, r3, r7
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a2b      	ldr	r2, [pc, #172]	; (8004be0 <UART_SetConfig+0x2f8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d000      	beq.n	8004b3a <UART_SetConfig+0x252>
 8004b38:	e0a9      	b.n	8004c8e <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b3a:	231b      	movs	r3, #27
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	189b      	adds	r3, r3, r2
 8004b40:	19db      	adds	r3, r3, r7
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d015      	beq.n	8004b74 <UART_SetConfig+0x28c>
 8004b48:	dc18      	bgt.n	8004b7c <UART_SetConfig+0x294>
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d00d      	beq.n	8004b6a <UART_SetConfig+0x282>
 8004b4e:	dc15      	bgt.n	8004b7c <UART_SetConfig+0x294>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <UART_SetConfig+0x272>
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d005      	beq.n	8004b64 <UART_SetConfig+0x27c>
 8004b58:	e010      	b.n	8004b7c <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5a:	f7ff fbfd 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b62:	e014      	b.n	8004b8e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b64:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <UART_SetConfig+0x314>)
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b68:	e011      	b.n	8004b8e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6a:	f7ff fb69 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b72:	e00c      	b.n	8004b8e <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b74:	2380      	movs	r3, #128	; 0x80
 8004b76:	021b      	lsls	r3, r3, #8
 8004b78:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b7a:	e008      	b.n	8004b8e <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b80:	231a      	movs	r3, #26
 8004b82:	2220      	movs	r2, #32
 8004b84:	189b      	adds	r3, r3, r2
 8004b86:	19db      	adds	r3, r3, r7
 8004b88:	2201      	movs	r2, #1
 8004b8a:	701a      	strb	r2, [r3, #0]
        break;
 8004b8c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d100      	bne.n	8004b96 <UART_SetConfig+0x2ae>
 8004b94:	e14b      	b.n	8004e2e <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b9a:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <UART_SetConfig+0x318>)
 8004b9c:	0052      	lsls	r2, r2, #1
 8004b9e:	5ad3      	ldrh	r3, [r2, r3]
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ba4:	f7fb fac0 	bl	8000128 <__udivsi3>
 8004ba8:	0003      	movs	r3, r0
 8004baa:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	0013      	movs	r3, r2
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	189b      	adds	r3, r3, r2
 8004bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d305      	bcc.n	8004bc8 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d91d      	bls.n	8004c04 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004bc8:	231a      	movs	r3, #26
 8004bca:	2220      	movs	r2, #32
 8004bcc:	189b      	adds	r3, r3, r2
 8004bce:	19db      	adds	r3, r3, r7
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e12b      	b.n	8004e2e <UART_SetConfig+0x546>
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	cfff69f3 	.word	0xcfff69f3
 8004bdc:	ffffcfff 	.word	0xffffcfff
 8004be0:	40008000 	.word	0x40008000
 8004be4:	11fff4ff 	.word	0x11fff4ff
 8004be8:	40013800 	.word	0x40013800
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40004400 	.word	0x40004400
 8004bf4:	40004800 	.word	0x40004800
 8004bf8:	40004c00 	.word	0x40004c00
 8004bfc:	00f42400 	.word	0x00f42400
 8004c00:	08005f84 	.word	0x08005f84
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c10:	4b92      	ldr	r3, [pc, #584]	; (8004e5c <UART_SetConfig+0x574>)
 8004c12:	0052      	lsls	r2, r2, #1
 8004c14:	5ad3      	ldrh	r3, [r2, r3]
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	69b8      	ldr	r0, [r7, #24]
 8004c22:	69f9      	ldr	r1, [r7, #28]
 8004c24:	f7fb fbf6 	bl	8000414 <__aeabi_uldivmod>
 8004c28:	0002      	movs	r2, r0
 8004c2a:	000b      	movs	r3, r1
 8004c2c:	0e11      	lsrs	r1, r2, #24
 8004c2e:	021d      	lsls	r5, r3, #8
 8004c30:	430d      	orrs	r5, r1
 8004c32:	0214      	lsls	r4, r2, #8
 8004c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	085b      	lsrs	r3, r3, #1
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
 8004c40:	68b8      	ldr	r0, [r7, #8]
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	1900      	adds	r0, r0, r4
 8004c46:	4169      	adcs	r1, r5
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	607b      	str	r3, [r7, #4]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f7fb fbdd 	bl	8000414 <__aeabi_uldivmod>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	000b      	movs	r3, r1
 8004c5e:	0013      	movs	r3, r2
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c64:	23c0      	movs	r3, #192	; 0xc0
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d309      	bcc.n	8004c80 <UART_SetConfig+0x398>
 8004c6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c6e:	2380      	movs	r3, #128	; 0x80
 8004c70:	035b      	lsls	r3, r3, #13
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d204      	bcs.n	8004c80 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8004c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	e0d6      	b.n	8004e2e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004c80:	231a      	movs	r3, #26
 8004c82:	2220      	movs	r2, #32
 8004c84:	189b      	adds	r3, r3, r2
 8004c86:	19db      	adds	r3, r3, r7
 8004c88:	2201      	movs	r2, #1
 8004c8a:	701a      	strb	r2, [r3, #0]
 8004c8c:	e0cf      	b.n	8004e2e <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	2380      	movs	r3, #128	; 0x80
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d000      	beq.n	8004c9c <UART_SetConfig+0x3b4>
 8004c9a:	e070      	b.n	8004d7e <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004c9c:	231b      	movs	r3, #27
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	189b      	adds	r3, r3, r2
 8004ca2:	19db      	adds	r3, r3, r7
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b08      	cmp	r3, #8
 8004ca8:	d015      	beq.n	8004cd6 <UART_SetConfig+0x3ee>
 8004caa:	dc18      	bgt.n	8004cde <UART_SetConfig+0x3f6>
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d00d      	beq.n	8004ccc <UART_SetConfig+0x3e4>
 8004cb0:	dc15      	bgt.n	8004cde <UART_SetConfig+0x3f6>
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d002      	beq.n	8004cbc <UART_SetConfig+0x3d4>
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d005      	beq.n	8004cc6 <UART_SetConfig+0x3de>
 8004cba:	e010      	b.n	8004cde <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cbc:	f7ff fb4c 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cc4:	e014      	b.n	8004cf0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cc6:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <UART_SetConfig+0x578>)
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cca:	e011      	b.n	8004cf0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ccc:	f7ff fab8 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cd4:	e00c      	b.n	8004cf0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cd6:	2380      	movs	r3, #128	; 0x80
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cdc:	e008      	b.n	8004cf0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004ce2:	231a      	movs	r3, #26
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	189b      	adds	r3, r3, r2
 8004ce8:	19db      	adds	r3, r3, r7
 8004cea:	2201      	movs	r2, #1
 8004cec:	701a      	strb	r2, [r3, #0]
        break;
 8004cee:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d100      	bne.n	8004cf8 <UART_SetConfig+0x410>
 8004cf6:	e09a      	b.n	8004e2e <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfc:	4b57      	ldr	r3, [pc, #348]	; (8004e5c <UART_SetConfig+0x574>)
 8004cfe:	0052      	lsls	r2, r2, #1
 8004d00:	5ad3      	ldrh	r3, [r2, r3]
 8004d02:	0019      	movs	r1, r3
 8004d04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d06:	f7fb fa0f 	bl	8000128 <__udivsi3>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	005a      	lsls	r2, r3, #1
 8004d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	18d2      	adds	r2, r2, r3
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	0019      	movs	r1, r3
 8004d1c:	0010      	movs	r0, r2
 8004d1e:	f7fb fa03 	bl	8000128 <__udivsi3>
 8004d22:	0003      	movs	r3, r0
 8004d24:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d921      	bls.n	8004d70 <UART_SetConfig+0x488>
 8004d2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d2e:	2380      	movs	r3, #128	; 0x80
 8004d30:	025b      	lsls	r3, r3, #9
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d21c      	bcs.n	8004d70 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	200e      	movs	r0, #14
 8004d3c:	2420      	movs	r4, #32
 8004d3e:	1903      	adds	r3, r0, r4
 8004d40:	19db      	adds	r3, r3, r7
 8004d42:	210f      	movs	r1, #15
 8004d44:	438a      	bics	r2, r1
 8004d46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	2207      	movs	r2, #7
 8004d50:	4013      	ands	r3, r2
 8004d52:	b299      	uxth	r1, r3
 8004d54:	1903      	adds	r3, r0, r4
 8004d56:	19db      	adds	r3, r3, r7
 8004d58:	1902      	adds	r2, r0, r4
 8004d5a:	19d2      	adds	r2, r2, r7
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	1902      	adds	r2, r0, r4
 8004d68:	19d2      	adds	r2, r2, r7
 8004d6a:	8812      	ldrh	r2, [r2, #0]
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e05e      	b.n	8004e2e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004d70:	231a      	movs	r3, #26
 8004d72:	2220      	movs	r2, #32
 8004d74:	189b      	adds	r3, r3, r2
 8004d76:	19db      	adds	r3, r3, r7
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	e057      	b.n	8004e2e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d7e:	231b      	movs	r3, #27
 8004d80:	2220      	movs	r2, #32
 8004d82:	189b      	adds	r3, r3, r2
 8004d84:	19db      	adds	r3, r3, r7
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b08      	cmp	r3, #8
 8004d8a:	d015      	beq.n	8004db8 <UART_SetConfig+0x4d0>
 8004d8c:	dc18      	bgt.n	8004dc0 <UART_SetConfig+0x4d8>
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d00d      	beq.n	8004dae <UART_SetConfig+0x4c6>
 8004d92:	dc15      	bgt.n	8004dc0 <UART_SetConfig+0x4d8>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <UART_SetConfig+0x4b6>
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d005      	beq.n	8004da8 <UART_SetConfig+0x4c0>
 8004d9c:	e010      	b.n	8004dc0 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d9e:	f7ff fadb 	bl	8004358 <HAL_RCC_GetPCLK1Freq>
 8004da2:	0003      	movs	r3, r0
 8004da4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004da6:	e014      	b.n	8004dd2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da8:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <UART_SetConfig+0x578>)
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dac:	e011      	b.n	8004dd2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dae:	f7ff fa47 	bl	8004240 <HAL_RCC_GetSysClockFreq>
 8004db2:	0003      	movs	r3, r0
 8004db4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004db6:	e00c      	b.n	8004dd2 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	021b      	lsls	r3, r3, #8
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004dbe:	e008      	b.n	8004dd2 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004dc4:	231a      	movs	r3, #26
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	189b      	adds	r3, r3, r2
 8004dca:	19db      	adds	r3, r3, r7
 8004dcc:	2201      	movs	r2, #1
 8004dce:	701a      	strb	r2, [r3, #0]
        break;
 8004dd0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02a      	beq.n	8004e2e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ddc:	4b1f      	ldr	r3, [pc, #124]	; (8004e5c <UART_SetConfig+0x574>)
 8004dde:	0052      	lsls	r2, r2, #1
 8004de0:	5ad3      	ldrh	r3, [r2, r3]
 8004de2:	0019      	movs	r1, r3
 8004de4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004de6:	f7fb f99f 	bl	8000128 <__udivsi3>
 8004dea:	0003      	movs	r3, r0
 8004dec:	001a      	movs	r2, r3
 8004dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	18d2      	adds	r2, r2, r3
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	0019      	movs	r1, r3
 8004dfc:	0010      	movs	r0, r2
 8004dfe:	f7fb f993 	bl	8000128 <__udivsi3>
 8004e02:	0003      	movs	r3, r0
 8004e04:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	2b0f      	cmp	r3, #15
 8004e0a:	d90a      	bls.n	8004e22 <UART_SetConfig+0x53a>
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	025b      	lsls	r3, r3, #9
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d205      	bcs.n	8004e22 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60da      	str	r2, [r3, #12]
 8004e20:	e005      	b.n	8004e2e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004e22:	231a      	movs	r3, #26
 8004e24:	2220      	movs	r2, #32
 8004e26:	189b      	adds	r3, r3, r2
 8004e28:	19db      	adds	r3, r3, r7
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e30:	226a      	movs	r2, #106	; 0x6a
 8004e32:	2101      	movs	r1, #1
 8004e34:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	2268      	movs	r2, #104	; 0x68
 8004e3a:	2101      	movs	r1, #1
 8004e3c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	2200      	movs	r2, #0
 8004e42:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	2200      	movs	r2, #0
 8004e48:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e4a:	231a      	movs	r3, #26
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	19db      	adds	r3, r3, r7
 8004e52:	781b      	ldrb	r3, [r3, #0]
}
 8004e54:	0018      	movs	r0, r3
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b010      	add	sp, #64	; 0x40
 8004e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e5c:	08005f84 	.word	0x08005f84
 8004e60:	00f42400 	.word	0x00f42400

08004e64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	2208      	movs	r2, #8
 8004e72:	4013      	ands	r3, r2
 8004e74:	d00b      	beq.n	8004e8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4a4a      	ldr	r2, [pc, #296]	; (8004fa8 <UART_AdvFeatureConfig+0x144>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	0019      	movs	r1, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	2201      	movs	r2, #1
 8004e94:	4013      	ands	r3, r2
 8004e96:	d00b      	beq.n	8004eb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4a43      	ldr	r2, [pc, #268]	; (8004fac <UART_AdvFeatureConfig+0x148>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	0019      	movs	r1, r3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d00b      	beq.n	8004ed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	4a3b      	ldr	r2, [pc, #236]	; (8004fb0 <UART_AdvFeatureConfig+0x14c>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	0019      	movs	r1, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	2204      	movs	r2, #4
 8004ed8:	4013      	ands	r3, r2
 8004eda:	d00b      	beq.n	8004ef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4a34      	ldr	r2, [pc, #208]	; (8004fb4 <UART_AdvFeatureConfig+0x150>)
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	2210      	movs	r2, #16
 8004efa:	4013      	ands	r3, r2
 8004efc:	d00b      	beq.n	8004f16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	4a2c      	ldr	r2, [pc, #176]	; (8004fb8 <UART_AdvFeatureConfig+0x154>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	0019      	movs	r1, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	4a25      	ldr	r2, [pc, #148]	; (8004fbc <UART_AdvFeatureConfig+0x158>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	0019      	movs	r1, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3c:	2240      	movs	r2, #64	; 0x40
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d01d      	beq.n	8004f7e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	4a1d      	ldr	r2, [pc, #116]	; (8004fc0 <UART_AdvFeatureConfig+0x15c>)
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	2380      	movs	r3, #128	; 0x80
 8004f60:	035b      	lsls	r3, r3, #13
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d10b      	bne.n	8004f7e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <UART_AdvFeatureConfig+0x160>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	0019      	movs	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	2280      	movs	r2, #128	; 0x80
 8004f84:	4013      	ands	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <UART_AdvFeatureConfig+0x164>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	0019      	movs	r1, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
  }
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b002      	add	sp, #8
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	ffff7fff 	.word	0xffff7fff
 8004fac:	fffdffff 	.word	0xfffdffff
 8004fb0:	fffeffff 	.word	0xfffeffff
 8004fb4:	fffbffff 	.word	0xfffbffff
 8004fb8:	ffffefff 	.word	0xffffefff
 8004fbc:	ffffdfff 	.word	0xffffdfff
 8004fc0:	ffefffff 	.word	0xffefffff
 8004fc4:	ff9fffff 	.word	0xff9fffff
 8004fc8:	fff7ffff 	.word	0xfff7ffff

08004fcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b092      	sub	sp, #72	; 0x48
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2290      	movs	r2, #144	; 0x90
 8004fd8:	2100      	movs	r1, #0
 8004fda:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fdc:	f7fd f97e 	bl	80022dc <HAL_GetTick>
 8004fe0:	0003      	movs	r3, r0
 8004fe2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2208      	movs	r2, #8
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d12d      	bne.n	800504e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ff4:	2280      	movs	r2, #128	; 0x80
 8004ff6:	0391      	lsls	r1, r2, #14
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4a47      	ldr	r2, [pc, #284]	; (8005118 <UART_CheckIdleState+0x14c>)
 8004ffc:	9200      	str	r2, [sp, #0]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f000 f88e 	bl	8005120 <UART_WaitOnFlagUntilTimeout>
 8005004:	1e03      	subs	r3, r0, #0
 8005006:	d022      	beq.n	800504e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005008:	f3ef 8310 	mrs	r3, PRIMASK
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005010:	63bb      	str	r3, [r7, #56]	; 0x38
 8005012:	2301      	movs	r3, #1
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	438a      	bics	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	f383 8810 	msr	PRIMASK, r3
}
 8005038:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2288      	movs	r2, #136	; 0x88
 800503e:	2120      	movs	r1, #32
 8005040:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2284      	movs	r2, #132	; 0x84
 8005046:	2100      	movs	r1, #0
 8005048:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e060      	b.n	8005110 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2204      	movs	r2, #4
 8005056:	4013      	ands	r3, r2
 8005058:	2b04      	cmp	r3, #4
 800505a:	d146      	bne.n	80050ea <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800505c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800505e:	2280      	movs	r2, #128	; 0x80
 8005060:	03d1      	lsls	r1, r2, #15
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <UART_CheckIdleState+0x14c>)
 8005066:	9200      	str	r2, [sp, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	f000 f859 	bl	8005120 <UART_WaitOnFlagUntilTimeout>
 800506e:	1e03      	subs	r3, r0, #0
 8005070:	d03b      	beq.n	80050ea <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005072:	f3ef 8310 	mrs	r3, PRIMASK
 8005076:	60fb      	str	r3, [r7, #12]
  return(result);
 8005078:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800507a:	637b      	str	r3, [r7, #52]	; 0x34
 800507c:	2301      	movs	r3, #1
 800507e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f383 8810 	msr	PRIMASK, r3
}
 8005086:	46c0      	nop			; (mov r8, r8)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4922      	ldr	r1, [pc, #136]	; (800511c <UART_CheckIdleState+0x150>)
 8005094:	400a      	ands	r2, r1
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f383 8810 	msr	PRIMASK, r3
}
 80050a2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050a4:	f3ef 8310 	mrs	r3, PRIMASK
 80050a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80050aa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ac:	633b      	str	r3, [r7, #48]	; 0x30
 80050ae:	2301      	movs	r3, #1
 80050b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f383 8810 	msr	PRIMASK, r3
}
 80050b8:	46c0      	nop			; (mov r8, r8)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	438a      	bics	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f383 8810 	msr	PRIMASK, r3
}
 80050d4:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	228c      	movs	r2, #140	; 0x8c
 80050da:	2120      	movs	r1, #32
 80050dc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2284      	movs	r2, #132	; 0x84
 80050e2:	2100      	movs	r1, #0
 80050e4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e012      	b.n	8005110 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2288      	movs	r2, #136	; 0x88
 80050ee:	2120      	movs	r1, #32
 80050f0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	228c      	movs	r2, #140	; 0x8c
 80050f6:	2120      	movs	r1, #32
 80050f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2284      	movs	r2, #132	; 0x84
 800510a:	2100      	movs	r1, #0
 800510c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	0018      	movs	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	b010      	add	sp, #64	; 0x40
 8005116:	bd80      	pop	{r7, pc}
 8005118:	01ffffff 	.word	0x01ffffff
 800511c:	fffffedf 	.word	0xfffffedf

08005120 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	1dfb      	adds	r3, r7, #7
 800512e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005130:	e051      	b.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	3301      	adds	r3, #1
 8005136:	d04e      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005138:	f7fd f8d0 	bl	80022dc <HAL_GetTick>
 800513c:	0002      	movs	r2, r0
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	429a      	cmp	r2, r3
 8005146:	d302      	bcc.n	800514e <UART_WaitOnFlagUntilTimeout+0x2e>
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e051      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2204      	movs	r2, #4
 800515a:	4013      	ands	r3, r2
 800515c:	d03b      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b80      	cmp	r3, #128	; 0x80
 8005162:	d038      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d035      	beq.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	2208      	movs	r2, #8
 8005172:	4013      	ands	r3, r2
 8005174:	2b08      	cmp	r3, #8
 8005176:	d111      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2208      	movs	r2, #8
 800517e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	0018      	movs	r0, r3
 8005184:	f000 f83c 	bl	8005200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2290      	movs	r2, #144	; 0x90
 800518c:	2108      	movs	r1, #8
 800518e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2284      	movs	r2, #132	; 0x84
 8005194:	2100      	movs	r1, #0
 8005196:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e02c      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69da      	ldr	r2, [r3, #28]
 80051a2:	2380      	movs	r3, #128	; 0x80
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	401a      	ands	r2, r3
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d112      	bne.n	80051d6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2280      	movs	r2, #128	; 0x80
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 f81f 	bl	8005200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2290      	movs	r2, #144	; 0x90
 80051c6:	2120      	movs	r1, #32
 80051c8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2284      	movs	r2, #132	; 0x84
 80051ce:	2100      	movs	r1, #0
 80051d0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e00f      	b.n	80051f6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	4013      	ands	r3, r2
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	425a      	negs	r2, r3
 80051e6:	4153      	adcs	r3, r2
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	001a      	movs	r2, r3
 80051ec:	1dfb      	adds	r3, r7, #7
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d09e      	beq.n	8005132 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b004      	add	sp, #16
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b08e      	sub	sp, #56	; 0x38
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005208:	f3ef 8310 	mrs	r3, PRIMASK
 800520c:	617b      	str	r3, [r7, #20]
  return(result);
 800520e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	2301      	movs	r3, #1
 8005214:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f383 8810 	msr	PRIMASK, r3
}
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4926      	ldr	r1, [pc, #152]	; (80052c4 <UART_EndRxTransfer+0xc4>)
 800522a:	400a      	ands	r2, r1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f383 8810 	msr	PRIMASK, r3
}
 8005238:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523a:	f3ef 8310 	mrs	r3, PRIMASK
 800523e:	623b      	str	r3, [r7, #32]
  return(result);
 8005240:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005242:	633b      	str	r3, [r7, #48]	; 0x30
 8005244:	2301      	movs	r3, #1
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	491b      	ldr	r1, [pc, #108]	; (80052c8 <UART_EndRxTransfer+0xc8>)
 800525c:	400a      	ands	r2, r1
 800525e:	609a      	str	r2, [r3, #8]
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005270:	2b01      	cmp	r3, #1
 8005272:	d118      	bne.n	80052a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005274:	f3ef 8310 	mrs	r3, PRIMASK
 8005278:	60bb      	str	r3, [r7, #8]
  return(result);
 800527a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527e:	2301      	movs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f383 8810 	msr	PRIMASK, r3
}
 8005288:	46c0      	nop			; (mov r8, r8)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2110      	movs	r1, #16
 8005296:	438a      	bics	r2, r1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	f383 8810 	msr	PRIMASK, r3
}
 80052a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	228c      	movs	r2, #140	; 0x8c
 80052aa:	2120      	movs	r1, #32
 80052ac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b00e      	add	sp, #56	; 0x38
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	fffffedf 	.word	0xfffffedf
 80052c8:	effffffe 	.word	0xeffffffe

080052cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2284      	movs	r2, #132	; 0x84
 80052d8:	5c9b      	ldrb	r3, [r3, r2]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80052de:	2302      	movs	r3, #2
 80052e0:	e027      	b.n	8005332 <HAL_UARTEx_DisableFifoMode+0x66>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2284      	movs	r2, #132	; 0x84
 80052e6:	2101      	movs	r1, #1
 80052e8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2288      	movs	r2, #136	; 0x88
 80052ee:	2124      	movs	r1, #36	; 0x24
 80052f0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2101      	movs	r1, #1
 8005306:	438a      	bics	r2, r1
 8005308:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4a0b      	ldr	r2, [pc, #44]	; (800533c <HAL_UARTEx_DisableFifoMode+0x70>)
 800530e:	4013      	ands	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2288      	movs	r2, #136	; 0x88
 8005324:	2120      	movs	r1, #32
 8005326:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2284      	movs	r2, #132	; 0x84
 800532c:	2100      	movs	r1, #0
 800532e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b004      	add	sp, #16
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	dfffffff 	.word	0xdfffffff

08005340 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2284      	movs	r2, #132	; 0x84
 800534e:	5c9b      	ldrb	r3, [r3, r2]
 8005350:	2b01      	cmp	r3, #1
 8005352:	d101      	bne.n	8005358 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005354:	2302      	movs	r3, #2
 8005356:	e02e      	b.n	80053b6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2284      	movs	r2, #132	; 0x84
 800535c:	2101      	movs	r1, #1
 800535e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2288      	movs	r2, #136	; 0x88
 8005364:	2124      	movs	r1, #36	; 0x24
 8005366:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2101      	movs	r1, #1
 800537c:	438a      	bics	r2, r1
 800537e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	08d9      	lsrs	r1, r3, #3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	0018      	movs	r0, r3
 8005398:	f000 f854 	bl	8005444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2288      	movs	r2, #136	; 0x88
 80053a8:	2120      	movs	r1, #32
 80053aa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2284      	movs	r2, #132	; 0x84
 80053b0:	2100      	movs	r1, #0
 80053b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	0018      	movs	r0, r3
 80053b8:	46bd      	mov	sp, r7
 80053ba:	b004      	add	sp, #16
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2284      	movs	r2, #132	; 0x84
 80053ce:	5c9b      	ldrb	r3, [r3, r2]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d101      	bne.n	80053d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053d4:	2302      	movs	r3, #2
 80053d6:	e02f      	b.n	8005438 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2284      	movs	r2, #132	; 0x84
 80053dc:	2101      	movs	r1, #1
 80053de:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2288      	movs	r2, #136	; 0x88
 80053e4:	2124      	movs	r1, #36	; 0x24
 80053e6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2101      	movs	r1, #1
 80053fc:	438a      	bics	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	4a0e      	ldr	r2, [pc, #56]	; (8005440 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005408:	4013      	ands	r3, r2
 800540a:	0019      	movs	r1, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	0018      	movs	r0, r3
 800541a:	f000 f813 	bl	8005444 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2288      	movs	r2, #136	; 0x88
 800542a:	2120      	movs	r1, #32
 800542c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2284      	movs	r2, #132	; 0x84
 8005432:	2100      	movs	r1, #0
 8005434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	0018      	movs	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	b004      	add	sp, #16
 800543e:	bd80      	pop	{r7, pc}
 8005440:	f1ffffff 	.word	0xf1ffffff

08005444 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005450:	2b00      	cmp	r3, #0
 8005452:	d108      	bne.n	8005466 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	226a      	movs	r2, #106	; 0x6a
 8005458:	2101      	movs	r1, #1
 800545a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2268      	movs	r2, #104	; 0x68
 8005460:	2101      	movs	r1, #1
 8005462:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005464:	e043      	b.n	80054ee <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005466:	260f      	movs	r6, #15
 8005468:	19bb      	adds	r3, r7, r6
 800546a:	2208      	movs	r2, #8
 800546c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800546e:	200e      	movs	r0, #14
 8005470:	183b      	adds	r3, r7, r0
 8005472:	2208      	movs	r2, #8
 8005474:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	0e5b      	lsrs	r3, r3, #25
 800547e:	b2da      	uxtb	r2, r3
 8005480:	240d      	movs	r4, #13
 8005482:	193b      	adds	r3, r7, r4
 8005484:	2107      	movs	r1, #7
 8005486:	400a      	ands	r2, r1
 8005488:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	0f5b      	lsrs	r3, r3, #29
 8005492:	b2da      	uxtb	r2, r3
 8005494:	250c      	movs	r5, #12
 8005496:	197b      	adds	r3, r7, r5
 8005498:	2107      	movs	r1, #7
 800549a:	400a      	ands	r2, r1
 800549c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800549e:	183b      	adds	r3, r7, r0
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	197a      	adds	r2, r7, r5
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	4914      	ldr	r1, [pc, #80]	; (80054f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80054a8:	5c8a      	ldrb	r2, [r1, r2]
 80054aa:	435a      	muls	r2, r3
 80054ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80054ae:	197b      	adds	r3, r7, r5
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	4a12      	ldr	r2, [pc, #72]	; (80054fc <UARTEx_SetNbDataToProcess+0xb8>)
 80054b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054b6:	0019      	movs	r1, r3
 80054b8:	f7fa fec0 	bl	800023c <__divsi3>
 80054bc:	0003      	movs	r3, r0
 80054be:	b299      	uxth	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	226a      	movs	r2, #106	; 0x6a
 80054c4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054c6:	19bb      	adds	r3, r7, r6
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	193a      	adds	r2, r7, r4
 80054cc:	7812      	ldrb	r2, [r2, #0]
 80054ce:	490a      	ldr	r1, [pc, #40]	; (80054f8 <UARTEx_SetNbDataToProcess+0xb4>)
 80054d0:	5c8a      	ldrb	r2, [r1, r2]
 80054d2:	435a      	muls	r2, r3
 80054d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80054d6:	193b      	adds	r3, r7, r4
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	4a08      	ldr	r2, [pc, #32]	; (80054fc <UARTEx_SetNbDataToProcess+0xb8>)
 80054dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054de:	0019      	movs	r1, r3
 80054e0:	f7fa feac 	bl	800023c <__divsi3>
 80054e4:	0003      	movs	r3, r0
 80054e6:	b299      	uxth	r1, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2268      	movs	r2, #104	; 0x68
 80054ec:	5299      	strh	r1, [r3, r2]
}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	46bd      	mov	sp, r7
 80054f2:	b005      	add	sp, #20
 80054f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f6:	46c0      	nop			; (mov r8, r8)
 80054f8:	08005f9c 	.word	0x08005f9c
 80054fc:	08005fa4 	.word	0x08005fa4

08005500 <siprintf>:
 8005500:	b40e      	push	{r1, r2, r3}
 8005502:	b500      	push	{lr}
 8005504:	490b      	ldr	r1, [pc, #44]	; (8005534 <siprintf+0x34>)
 8005506:	b09c      	sub	sp, #112	; 0x70
 8005508:	ab1d      	add	r3, sp, #116	; 0x74
 800550a:	9002      	str	r0, [sp, #8]
 800550c:	9006      	str	r0, [sp, #24]
 800550e:	9107      	str	r1, [sp, #28]
 8005510:	9104      	str	r1, [sp, #16]
 8005512:	4809      	ldr	r0, [pc, #36]	; (8005538 <siprintf+0x38>)
 8005514:	4909      	ldr	r1, [pc, #36]	; (800553c <siprintf+0x3c>)
 8005516:	cb04      	ldmia	r3!, {r2}
 8005518:	9105      	str	r1, [sp, #20]
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	a902      	add	r1, sp, #8
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	f000 f9a2 	bl	8005868 <_svfiprintf_r>
 8005524:	2200      	movs	r2, #0
 8005526:	9b02      	ldr	r3, [sp, #8]
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	b01c      	add	sp, #112	; 0x70
 800552c:	bc08      	pop	{r3}
 800552e:	b003      	add	sp, #12
 8005530:	4718      	bx	r3
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	7fffffff 	.word	0x7fffffff
 8005538:	20000084 	.word	0x20000084
 800553c:	ffff0208 	.word	0xffff0208

08005540 <memset>:
 8005540:	0003      	movs	r3, r0
 8005542:	1882      	adds	r2, r0, r2
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	7019      	strb	r1, [r3, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <__errno>:
 8005550:	4b01      	ldr	r3, [pc, #4]	; (8005558 <__errno+0x8>)
 8005552:	6818      	ldr	r0, [r3, #0]
 8005554:	4770      	bx	lr
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	20000084 	.word	0x20000084

0800555c <__libc_init_array>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	2600      	movs	r6, #0
 8005560:	4c0c      	ldr	r4, [pc, #48]	; (8005594 <__libc_init_array+0x38>)
 8005562:	4d0d      	ldr	r5, [pc, #52]	; (8005598 <__libc_init_array+0x3c>)
 8005564:	1b64      	subs	r4, r4, r5
 8005566:	10a4      	asrs	r4, r4, #2
 8005568:	42a6      	cmp	r6, r4
 800556a:	d109      	bne.n	8005580 <__libc_init_array+0x24>
 800556c:	2600      	movs	r6, #0
 800556e:	f000 fc6d 	bl	8005e4c <_init>
 8005572:	4c0a      	ldr	r4, [pc, #40]	; (800559c <__libc_init_array+0x40>)
 8005574:	4d0a      	ldr	r5, [pc, #40]	; (80055a0 <__libc_init_array+0x44>)
 8005576:	1b64      	subs	r4, r4, r5
 8005578:	10a4      	asrs	r4, r4, #2
 800557a:	42a6      	cmp	r6, r4
 800557c:	d105      	bne.n	800558a <__libc_init_array+0x2e>
 800557e:	bd70      	pop	{r4, r5, r6, pc}
 8005580:	00b3      	lsls	r3, r6, #2
 8005582:	58eb      	ldr	r3, [r5, r3]
 8005584:	4798      	blx	r3
 8005586:	3601      	adds	r6, #1
 8005588:	e7ee      	b.n	8005568 <__libc_init_array+0xc>
 800558a:	00b3      	lsls	r3, r6, #2
 800558c:	58eb      	ldr	r3, [r5, r3]
 800558e:	4798      	blx	r3
 8005590:	3601      	adds	r6, #1
 8005592:	e7f2      	b.n	800557a <__libc_init_array+0x1e>
 8005594:	08005fe8 	.word	0x08005fe8
 8005598:	08005fe8 	.word	0x08005fe8
 800559c:	08005fec 	.word	0x08005fec
 80055a0:	08005fe8 	.word	0x08005fe8

080055a4 <__retarget_lock_acquire_recursive>:
 80055a4:	4770      	bx	lr

080055a6 <__retarget_lock_release_recursive>:
 80055a6:	4770      	bx	lr

080055a8 <_free_r>:
 80055a8:	b570      	push	{r4, r5, r6, lr}
 80055aa:	0005      	movs	r5, r0
 80055ac:	2900      	cmp	r1, #0
 80055ae:	d010      	beq.n	80055d2 <_free_r+0x2a>
 80055b0:	1f0c      	subs	r4, r1, #4
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da00      	bge.n	80055ba <_free_r+0x12>
 80055b8:	18e4      	adds	r4, r4, r3
 80055ba:	0028      	movs	r0, r5
 80055bc:	f000 f8e2 	bl	8005784 <__malloc_lock>
 80055c0:	4a1d      	ldr	r2, [pc, #116]	; (8005638 <_free_r+0x90>)
 80055c2:	6813      	ldr	r3, [r2, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <_free_r+0x2c>
 80055c8:	6063      	str	r3, [r4, #4]
 80055ca:	6014      	str	r4, [r2, #0]
 80055cc:	0028      	movs	r0, r5
 80055ce:	f000 f8e1 	bl	8005794 <__malloc_unlock>
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	42a3      	cmp	r3, r4
 80055d6:	d908      	bls.n	80055ea <_free_r+0x42>
 80055d8:	6820      	ldr	r0, [r4, #0]
 80055da:	1821      	adds	r1, r4, r0
 80055dc:	428b      	cmp	r3, r1
 80055de:	d1f3      	bne.n	80055c8 <_free_r+0x20>
 80055e0:	6819      	ldr	r1, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	1809      	adds	r1, r1, r0
 80055e6:	6021      	str	r1, [r4, #0]
 80055e8:	e7ee      	b.n	80055c8 <_free_r+0x20>
 80055ea:	001a      	movs	r2, r3
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <_free_r+0x4e>
 80055f2:	42a3      	cmp	r3, r4
 80055f4:	d9f9      	bls.n	80055ea <_free_r+0x42>
 80055f6:	6811      	ldr	r1, [r2, #0]
 80055f8:	1850      	adds	r0, r2, r1
 80055fa:	42a0      	cmp	r0, r4
 80055fc:	d10b      	bne.n	8005616 <_free_r+0x6e>
 80055fe:	6820      	ldr	r0, [r4, #0]
 8005600:	1809      	adds	r1, r1, r0
 8005602:	1850      	adds	r0, r2, r1
 8005604:	6011      	str	r1, [r2, #0]
 8005606:	4283      	cmp	r3, r0
 8005608:	d1e0      	bne.n	80055cc <_free_r+0x24>
 800560a:	6818      	ldr	r0, [r3, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	1841      	adds	r1, r0, r1
 8005610:	6011      	str	r1, [r2, #0]
 8005612:	6053      	str	r3, [r2, #4]
 8005614:	e7da      	b.n	80055cc <_free_r+0x24>
 8005616:	42a0      	cmp	r0, r4
 8005618:	d902      	bls.n	8005620 <_free_r+0x78>
 800561a:	230c      	movs	r3, #12
 800561c:	602b      	str	r3, [r5, #0]
 800561e:	e7d5      	b.n	80055cc <_free_r+0x24>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	1821      	adds	r1, r4, r0
 8005624:	428b      	cmp	r3, r1
 8005626:	d103      	bne.n	8005630 <_free_r+0x88>
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	1809      	adds	r1, r1, r0
 800562e:	6021      	str	r1, [r4, #0]
 8005630:	6063      	str	r3, [r4, #4]
 8005632:	6054      	str	r4, [r2, #4]
 8005634:	e7ca      	b.n	80055cc <_free_r+0x24>
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	20000328 	.word	0x20000328

0800563c <sbrk_aligned>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4e0f      	ldr	r6, [pc, #60]	; (800567c <sbrk_aligned+0x40>)
 8005640:	000d      	movs	r5, r1
 8005642:	6831      	ldr	r1, [r6, #0]
 8005644:	0004      	movs	r4, r0
 8005646:	2900      	cmp	r1, #0
 8005648:	d102      	bne.n	8005650 <sbrk_aligned+0x14>
 800564a:	f000 fba1 	bl	8005d90 <_sbrk_r>
 800564e:	6030      	str	r0, [r6, #0]
 8005650:	0029      	movs	r1, r5
 8005652:	0020      	movs	r0, r4
 8005654:	f000 fb9c 	bl	8005d90 <_sbrk_r>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d00a      	beq.n	8005672 <sbrk_aligned+0x36>
 800565c:	2303      	movs	r3, #3
 800565e:	1cc5      	adds	r5, r0, #3
 8005660:	439d      	bics	r5, r3
 8005662:	42a8      	cmp	r0, r5
 8005664:	d007      	beq.n	8005676 <sbrk_aligned+0x3a>
 8005666:	1a29      	subs	r1, r5, r0
 8005668:	0020      	movs	r0, r4
 800566a:	f000 fb91 	bl	8005d90 <_sbrk_r>
 800566e:	3001      	adds	r0, #1
 8005670:	d101      	bne.n	8005676 <sbrk_aligned+0x3a>
 8005672:	2501      	movs	r5, #1
 8005674:	426d      	negs	r5, r5
 8005676:	0028      	movs	r0, r5
 8005678:	bd70      	pop	{r4, r5, r6, pc}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	2000032c 	.word	0x2000032c

08005680 <_malloc_r>:
 8005680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005682:	2203      	movs	r2, #3
 8005684:	1ccb      	adds	r3, r1, #3
 8005686:	4393      	bics	r3, r2
 8005688:	3308      	adds	r3, #8
 800568a:	0006      	movs	r6, r0
 800568c:	001f      	movs	r7, r3
 800568e:	2b0c      	cmp	r3, #12
 8005690:	d238      	bcs.n	8005704 <_malloc_r+0x84>
 8005692:	270c      	movs	r7, #12
 8005694:	42b9      	cmp	r1, r7
 8005696:	d837      	bhi.n	8005708 <_malloc_r+0x88>
 8005698:	0030      	movs	r0, r6
 800569a:	f000 f873 	bl	8005784 <__malloc_lock>
 800569e:	4b38      	ldr	r3, [pc, #224]	; (8005780 <_malloc_r+0x100>)
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	001c      	movs	r4, r3
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	d133      	bne.n	8005712 <_malloc_r+0x92>
 80056aa:	0039      	movs	r1, r7
 80056ac:	0030      	movs	r0, r6
 80056ae:	f7ff ffc5 	bl	800563c <sbrk_aligned>
 80056b2:	0004      	movs	r4, r0
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d15e      	bne.n	8005776 <_malloc_r+0xf6>
 80056b8:	9b00      	ldr	r3, [sp, #0]
 80056ba:	681c      	ldr	r4, [r3, #0]
 80056bc:	0025      	movs	r5, r4
 80056be:	2d00      	cmp	r5, #0
 80056c0:	d14e      	bne.n	8005760 <_malloc_r+0xe0>
 80056c2:	2c00      	cmp	r4, #0
 80056c4:	d051      	beq.n	800576a <_malloc_r+0xea>
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	0029      	movs	r1, r5
 80056ca:	18e3      	adds	r3, r4, r3
 80056cc:	0030      	movs	r0, r6
 80056ce:	9301      	str	r3, [sp, #4]
 80056d0:	f000 fb5e 	bl	8005d90 <_sbrk_r>
 80056d4:	9b01      	ldr	r3, [sp, #4]
 80056d6:	4283      	cmp	r3, r0
 80056d8:	d147      	bne.n	800576a <_malloc_r+0xea>
 80056da:	6823      	ldr	r3, [r4, #0]
 80056dc:	0030      	movs	r0, r6
 80056de:	1aff      	subs	r7, r7, r3
 80056e0:	0039      	movs	r1, r7
 80056e2:	f7ff ffab 	bl	800563c <sbrk_aligned>
 80056e6:	3001      	adds	r0, #1
 80056e8:	d03f      	beq.n	800576a <_malloc_r+0xea>
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	19db      	adds	r3, r3, r7
 80056ee:	6023      	str	r3, [r4, #0]
 80056f0:	9b00      	ldr	r3, [sp, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d040      	beq.n	800577a <_malloc_r+0xfa>
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	42a2      	cmp	r2, r4
 80056fc:	d133      	bne.n	8005766 <_malloc_r+0xe6>
 80056fe:	2200      	movs	r2, #0
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	e014      	b.n	800572e <_malloc_r+0xae>
 8005704:	2b00      	cmp	r3, #0
 8005706:	dac5      	bge.n	8005694 <_malloc_r+0x14>
 8005708:	230c      	movs	r3, #12
 800570a:	2500      	movs	r5, #0
 800570c:	6033      	str	r3, [r6, #0]
 800570e:	0028      	movs	r0, r5
 8005710:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	1bc9      	subs	r1, r1, r7
 8005716:	d420      	bmi.n	800575a <_malloc_r+0xda>
 8005718:	290b      	cmp	r1, #11
 800571a:	d918      	bls.n	800574e <_malloc_r+0xce>
 800571c:	19e2      	adds	r2, r4, r7
 800571e:	6027      	str	r7, [r4, #0]
 8005720:	42a3      	cmp	r3, r4
 8005722:	d112      	bne.n	800574a <_malloc_r+0xca>
 8005724:	9b00      	ldr	r3, [sp, #0]
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	6863      	ldr	r3, [r4, #4]
 800572a:	6011      	str	r1, [r2, #0]
 800572c:	6053      	str	r3, [r2, #4]
 800572e:	0030      	movs	r0, r6
 8005730:	0025      	movs	r5, r4
 8005732:	f000 f82f 	bl	8005794 <__malloc_unlock>
 8005736:	2207      	movs	r2, #7
 8005738:	350b      	adds	r5, #11
 800573a:	1d23      	adds	r3, r4, #4
 800573c:	4395      	bics	r5, r2
 800573e:	1aea      	subs	r2, r5, r3
 8005740:	429d      	cmp	r5, r3
 8005742:	d0e4      	beq.n	800570e <_malloc_r+0x8e>
 8005744:	1b5b      	subs	r3, r3, r5
 8005746:	50a3      	str	r3, [r4, r2]
 8005748:	e7e1      	b.n	800570e <_malloc_r+0x8e>
 800574a:	605a      	str	r2, [r3, #4]
 800574c:	e7ec      	b.n	8005728 <_malloc_r+0xa8>
 800574e:	6862      	ldr	r2, [r4, #4]
 8005750:	42a3      	cmp	r3, r4
 8005752:	d1d5      	bne.n	8005700 <_malloc_r+0x80>
 8005754:	9b00      	ldr	r3, [sp, #0]
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	e7e9      	b.n	800572e <_malloc_r+0xae>
 800575a:	0023      	movs	r3, r4
 800575c:	6864      	ldr	r4, [r4, #4]
 800575e:	e7a2      	b.n	80056a6 <_malloc_r+0x26>
 8005760:	002c      	movs	r4, r5
 8005762:	686d      	ldr	r5, [r5, #4]
 8005764:	e7ab      	b.n	80056be <_malloc_r+0x3e>
 8005766:	0013      	movs	r3, r2
 8005768:	e7c4      	b.n	80056f4 <_malloc_r+0x74>
 800576a:	230c      	movs	r3, #12
 800576c:	0030      	movs	r0, r6
 800576e:	6033      	str	r3, [r6, #0]
 8005770:	f000 f810 	bl	8005794 <__malloc_unlock>
 8005774:	e7cb      	b.n	800570e <_malloc_r+0x8e>
 8005776:	6027      	str	r7, [r4, #0]
 8005778:	e7d9      	b.n	800572e <_malloc_r+0xae>
 800577a:	605b      	str	r3, [r3, #4]
 800577c:	deff      	udf	#255	; 0xff
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	20000328 	.word	0x20000328

08005784 <__malloc_lock>:
 8005784:	b510      	push	{r4, lr}
 8005786:	4802      	ldr	r0, [pc, #8]	; (8005790 <__malloc_lock+0xc>)
 8005788:	f7ff ff0c 	bl	80055a4 <__retarget_lock_acquire_recursive>
 800578c:	bd10      	pop	{r4, pc}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	20000324 	.word	0x20000324

08005794 <__malloc_unlock>:
 8005794:	b510      	push	{r4, lr}
 8005796:	4802      	ldr	r0, [pc, #8]	; (80057a0 <__malloc_unlock+0xc>)
 8005798:	f7ff ff05 	bl	80055a6 <__retarget_lock_release_recursive>
 800579c:	bd10      	pop	{r4, pc}
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	20000324 	.word	0x20000324

080057a4 <__ssputs_r>:
 80057a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057a6:	b085      	sub	sp, #20
 80057a8:	9301      	str	r3, [sp, #4]
 80057aa:	9203      	str	r2, [sp, #12]
 80057ac:	688e      	ldr	r6, [r1, #8]
 80057ae:	9a01      	ldr	r2, [sp, #4]
 80057b0:	0007      	movs	r7, r0
 80057b2:	000c      	movs	r4, r1
 80057b4:	680b      	ldr	r3, [r1, #0]
 80057b6:	4296      	cmp	r6, r2
 80057b8:	d831      	bhi.n	800581e <__ssputs_r+0x7a>
 80057ba:	898a      	ldrh	r2, [r1, #12]
 80057bc:	2190      	movs	r1, #144	; 0x90
 80057be:	00c9      	lsls	r1, r1, #3
 80057c0:	420a      	tst	r2, r1
 80057c2:	d029      	beq.n	8005818 <__ssputs_r+0x74>
 80057c4:	2003      	movs	r0, #3
 80057c6:	6921      	ldr	r1, [r4, #16]
 80057c8:	1a5b      	subs	r3, r3, r1
 80057ca:	9302      	str	r3, [sp, #8]
 80057cc:	6963      	ldr	r3, [r4, #20]
 80057ce:	4343      	muls	r3, r0
 80057d0:	0fdd      	lsrs	r5, r3, #31
 80057d2:	18ed      	adds	r5, r5, r3
 80057d4:	9b01      	ldr	r3, [sp, #4]
 80057d6:	9802      	ldr	r0, [sp, #8]
 80057d8:	3301      	adds	r3, #1
 80057da:	181b      	adds	r3, r3, r0
 80057dc:	106d      	asrs	r5, r5, #1
 80057de:	42ab      	cmp	r3, r5
 80057e0:	d900      	bls.n	80057e4 <__ssputs_r+0x40>
 80057e2:	001d      	movs	r5, r3
 80057e4:	0552      	lsls	r2, r2, #21
 80057e6:	d529      	bpl.n	800583c <__ssputs_r+0x98>
 80057e8:	0029      	movs	r1, r5
 80057ea:	0038      	movs	r0, r7
 80057ec:	f7ff ff48 	bl	8005680 <_malloc_r>
 80057f0:	1e06      	subs	r6, r0, #0
 80057f2:	d02d      	beq.n	8005850 <__ssputs_r+0xac>
 80057f4:	9a02      	ldr	r2, [sp, #8]
 80057f6:	6921      	ldr	r1, [r4, #16]
 80057f8:	f000 fae7 	bl	8005dca <memcpy>
 80057fc:	89a2      	ldrh	r2, [r4, #12]
 80057fe:	4b19      	ldr	r3, [pc, #100]	; (8005864 <__ssputs_r+0xc0>)
 8005800:	401a      	ands	r2, r3
 8005802:	2380      	movs	r3, #128	; 0x80
 8005804:	4313      	orrs	r3, r2
 8005806:	81a3      	strh	r3, [r4, #12]
 8005808:	9b02      	ldr	r3, [sp, #8]
 800580a:	6126      	str	r6, [r4, #16]
 800580c:	18f6      	adds	r6, r6, r3
 800580e:	6026      	str	r6, [r4, #0]
 8005810:	6165      	str	r5, [r4, #20]
 8005812:	9e01      	ldr	r6, [sp, #4]
 8005814:	1aed      	subs	r5, r5, r3
 8005816:	60a5      	str	r5, [r4, #8]
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	429e      	cmp	r6, r3
 800581c:	d900      	bls.n	8005820 <__ssputs_r+0x7c>
 800581e:	9e01      	ldr	r6, [sp, #4]
 8005820:	0032      	movs	r2, r6
 8005822:	9903      	ldr	r1, [sp, #12]
 8005824:	6820      	ldr	r0, [r4, #0]
 8005826:	f000 fa9f 	bl	8005d68 <memmove>
 800582a:	2000      	movs	r0, #0
 800582c:	68a3      	ldr	r3, [r4, #8]
 800582e:	1b9b      	subs	r3, r3, r6
 8005830:	60a3      	str	r3, [r4, #8]
 8005832:	6823      	ldr	r3, [r4, #0]
 8005834:	199b      	adds	r3, r3, r6
 8005836:	6023      	str	r3, [r4, #0]
 8005838:	b005      	add	sp, #20
 800583a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800583c:	002a      	movs	r2, r5
 800583e:	0038      	movs	r0, r7
 8005840:	f000 facc 	bl	8005ddc <_realloc_r>
 8005844:	1e06      	subs	r6, r0, #0
 8005846:	d1df      	bne.n	8005808 <__ssputs_r+0x64>
 8005848:	0038      	movs	r0, r7
 800584a:	6921      	ldr	r1, [r4, #16]
 800584c:	f7ff feac 	bl	80055a8 <_free_r>
 8005850:	230c      	movs	r3, #12
 8005852:	2001      	movs	r0, #1
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	89a2      	ldrh	r2, [r4, #12]
 8005858:	3334      	adds	r3, #52	; 0x34
 800585a:	4313      	orrs	r3, r2
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	4240      	negs	r0, r0
 8005860:	e7ea      	b.n	8005838 <__ssputs_r+0x94>
 8005862:	46c0      	nop			; (mov r8, r8)
 8005864:	fffffb7f 	.word	0xfffffb7f

08005868 <_svfiprintf_r>:
 8005868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800586a:	b0a1      	sub	sp, #132	; 0x84
 800586c:	9003      	str	r0, [sp, #12]
 800586e:	001d      	movs	r5, r3
 8005870:	898b      	ldrh	r3, [r1, #12]
 8005872:	000f      	movs	r7, r1
 8005874:	0016      	movs	r6, r2
 8005876:	061b      	lsls	r3, r3, #24
 8005878:	d511      	bpl.n	800589e <_svfiprintf_r+0x36>
 800587a:	690b      	ldr	r3, [r1, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10e      	bne.n	800589e <_svfiprintf_r+0x36>
 8005880:	2140      	movs	r1, #64	; 0x40
 8005882:	f7ff fefd 	bl	8005680 <_malloc_r>
 8005886:	6038      	str	r0, [r7, #0]
 8005888:	6138      	str	r0, [r7, #16]
 800588a:	2800      	cmp	r0, #0
 800588c:	d105      	bne.n	800589a <_svfiprintf_r+0x32>
 800588e:	230c      	movs	r3, #12
 8005890:	9a03      	ldr	r2, [sp, #12]
 8005892:	3801      	subs	r0, #1
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	b021      	add	sp, #132	; 0x84
 8005898:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	2300      	movs	r3, #0
 80058a0:	ac08      	add	r4, sp, #32
 80058a2:	6163      	str	r3, [r4, #20]
 80058a4:	3320      	adds	r3, #32
 80058a6:	7663      	strb	r3, [r4, #25]
 80058a8:	3310      	adds	r3, #16
 80058aa:	76a3      	strb	r3, [r4, #26]
 80058ac:	9507      	str	r5, [sp, #28]
 80058ae:	0035      	movs	r5, r6
 80058b0:	782b      	ldrb	r3, [r5, #0]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <_svfiprintf_r+0x52>
 80058b6:	2b25      	cmp	r3, #37	; 0x25
 80058b8:	d148      	bne.n	800594c <_svfiprintf_r+0xe4>
 80058ba:	1bab      	subs	r3, r5, r6
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	42b5      	cmp	r5, r6
 80058c0:	d00b      	beq.n	80058da <_svfiprintf_r+0x72>
 80058c2:	0032      	movs	r2, r6
 80058c4:	0039      	movs	r1, r7
 80058c6:	9803      	ldr	r0, [sp, #12]
 80058c8:	f7ff ff6c 	bl	80057a4 <__ssputs_r>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d100      	bne.n	80058d2 <_svfiprintf_r+0x6a>
 80058d0:	e0af      	b.n	8005a32 <_svfiprintf_r+0x1ca>
 80058d2:	6963      	ldr	r3, [r4, #20]
 80058d4:	9a05      	ldr	r2, [sp, #20]
 80058d6:	189b      	adds	r3, r3, r2
 80058d8:	6163      	str	r3, [r4, #20]
 80058da:	782b      	ldrb	r3, [r5, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d100      	bne.n	80058e2 <_svfiprintf_r+0x7a>
 80058e0:	e0a7      	b.n	8005a32 <_svfiprintf_r+0x1ca>
 80058e2:	2201      	movs	r2, #1
 80058e4:	2300      	movs	r3, #0
 80058e6:	4252      	negs	r2, r2
 80058e8:	6062      	str	r2, [r4, #4]
 80058ea:	a904      	add	r1, sp, #16
 80058ec:	3254      	adds	r2, #84	; 0x54
 80058ee:	1852      	adds	r2, r2, r1
 80058f0:	1c6e      	adds	r6, r5, #1
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	60e3      	str	r3, [r4, #12]
 80058f6:	60a3      	str	r3, [r4, #8]
 80058f8:	7013      	strb	r3, [r2, #0]
 80058fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80058fc:	4b55      	ldr	r3, [pc, #340]	; (8005a54 <_svfiprintf_r+0x1ec>)
 80058fe:	2205      	movs	r2, #5
 8005900:	0018      	movs	r0, r3
 8005902:	7831      	ldrb	r1, [r6, #0]
 8005904:	9305      	str	r3, [sp, #20]
 8005906:	f000 fa55 	bl	8005db4 <memchr>
 800590a:	1c75      	adds	r5, r6, #1
 800590c:	2800      	cmp	r0, #0
 800590e:	d11f      	bne.n	8005950 <_svfiprintf_r+0xe8>
 8005910:	6822      	ldr	r2, [r4, #0]
 8005912:	06d3      	lsls	r3, r2, #27
 8005914:	d504      	bpl.n	8005920 <_svfiprintf_r+0xb8>
 8005916:	2353      	movs	r3, #83	; 0x53
 8005918:	a904      	add	r1, sp, #16
 800591a:	185b      	adds	r3, r3, r1
 800591c:	2120      	movs	r1, #32
 800591e:	7019      	strb	r1, [r3, #0]
 8005920:	0713      	lsls	r3, r2, #28
 8005922:	d504      	bpl.n	800592e <_svfiprintf_r+0xc6>
 8005924:	2353      	movs	r3, #83	; 0x53
 8005926:	a904      	add	r1, sp, #16
 8005928:	185b      	adds	r3, r3, r1
 800592a:	212b      	movs	r1, #43	; 0x2b
 800592c:	7019      	strb	r1, [r3, #0]
 800592e:	7833      	ldrb	r3, [r6, #0]
 8005930:	2b2a      	cmp	r3, #42	; 0x2a
 8005932:	d016      	beq.n	8005962 <_svfiprintf_r+0xfa>
 8005934:	0035      	movs	r5, r6
 8005936:	2100      	movs	r1, #0
 8005938:	200a      	movs	r0, #10
 800593a:	68e3      	ldr	r3, [r4, #12]
 800593c:	782a      	ldrb	r2, [r5, #0]
 800593e:	1c6e      	adds	r6, r5, #1
 8005940:	3a30      	subs	r2, #48	; 0x30
 8005942:	2a09      	cmp	r2, #9
 8005944:	d94e      	bls.n	80059e4 <_svfiprintf_r+0x17c>
 8005946:	2900      	cmp	r1, #0
 8005948:	d111      	bne.n	800596e <_svfiprintf_r+0x106>
 800594a:	e017      	b.n	800597c <_svfiprintf_r+0x114>
 800594c:	3501      	adds	r5, #1
 800594e:	e7af      	b.n	80058b0 <_svfiprintf_r+0x48>
 8005950:	9b05      	ldr	r3, [sp, #20]
 8005952:	6822      	ldr	r2, [r4, #0]
 8005954:	1ac0      	subs	r0, r0, r3
 8005956:	2301      	movs	r3, #1
 8005958:	4083      	lsls	r3, r0
 800595a:	4313      	orrs	r3, r2
 800595c:	002e      	movs	r6, r5
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	e7cc      	b.n	80058fc <_svfiprintf_r+0x94>
 8005962:	9b07      	ldr	r3, [sp, #28]
 8005964:	1d19      	adds	r1, r3, #4
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	9107      	str	r1, [sp, #28]
 800596a:	2b00      	cmp	r3, #0
 800596c:	db01      	blt.n	8005972 <_svfiprintf_r+0x10a>
 800596e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005970:	e004      	b.n	800597c <_svfiprintf_r+0x114>
 8005972:	425b      	negs	r3, r3
 8005974:	60e3      	str	r3, [r4, #12]
 8005976:	2302      	movs	r3, #2
 8005978:	4313      	orrs	r3, r2
 800597a:	6023      	str	r3, [r4, #0]
 800597c:	782b      	ldrb	r3, [r5, #0]
 800597e:	2b2e      	cmp	r3, #46	; 0x2e
 8005980:	d10a      	bne.n	8005998 <_svfiprintf_r+0x130>
 8005982:	786b      	ldrb	r3, [r5, #1]
 8005984:	2b2a      	cmp	r3, #42	; 0x2a
 8005986:	d135      	bne.n	80059f4 <_svfiprintf_r+0x18c>
 8005988:	9b07      	ldr	r3, [sp, #28]
 800598a:	3502      	adds	r5, #2
 800598c:	1d1a      	adds	r2, r3, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	9207      	str	r2, [sp, #28]
 8005992:	2b00      	cmp	r3, #0
 8005994:	db2b      	blt.n	80059ee <_svfiprintf_r+0x186>
 8005996:	9309      	str	r3, [sp, #36]	; 0x24
 8005998:	4e2f      	ldr	r6, [pc, #188]	; (8005a58 <_svfiprintf_r+0x1f0>)
 800599a:	2203      	movs	r2, #3
 800599c:	0030      	movs	r0, r6
 800599e:	7829      	ldrb	r1, [r5, #0]
 80059a0:	f000 fa08 	bl	8005db4 <memchr>
 80059a4:	2800      	cmp	r0, #0
 80059a6:	d006      	beq.n	80059b6 <_svfiprintf_r+0x14e>
 80059a8:	2340      	movs	r3, #64	; 0x40
 80059aa:	1b80      	subs	r0, r0, r6
 80059ac:	4083      	lsls	r3, r0
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	3501      	adds	r5, #1
 80059b2:	4313      	orrs	r3, r2
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	7829      	ldrb	r1, [r5, #0]
 80059b8:	2206      	movs	r2, #6
 80059ba:	4828      	ldr	r0, [pc, #160]	; (8005a5c <_svfiprintf_r+0x1f4>)
 80059bc:	1c6e      	adds	r6, r5, #1
 80059be:	7621      	strb	r1, [r4, #24]
 80059c0:	f000 f9f8 	bl	8005db4 <memchr>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d03c      	beq.n	8005a42 <_svfiprintf_r+0x1da>
 80059c8:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <_svfiprintf_r+0x1f8>)
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d125      	bne.n	8005a1a <_svfiprintf_r+0x1b2>
 80059ce:	2207      	movs	r2, #7
 80059d0:	9b07      	ldr	r3, [sp, #28]
 80059d2:	3307      	adds	r3, #7
 80059d4:	4393      	bics	r3, r2
 80059d6:	3308      	adds	r3, #8
 80059d8:	9307      	str	r3, [sp, #28]
 80059da:	6963      	ldr	r3, [r4, #20]
 80059dc:	9a04      	ldr	r2, [sp, #16]
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	6163      	str	r3, [r4, #20]
 80059e2:	e764      	b.n	80058ae <_svfiprintf_r+0x46>
 80059e4:	4343      	muls	r3, r0
 80059e6:	0035      	movs	r5, r6
 80059e8:	2101      	movs	r1, #1
 80059ea:	189b      	adds	r3, r3, r2
 80059ec:	e7a6      	b.n	800593c <_svfiprintf_r+0xd4>
 80059ee:	2301      	movs	r3, #1
 80059f0:	425b      	negs	r3, r3
 80059f2:	e7d0      	b.n	8005996 <_svfiprintf_r+0x12e>
 80059f4:	2300      	movs	r3, #0
 80059f6:	200a      	movs	r0, #10
 80059f8:	001a      	movs	r2, r3
 80059fa:	3501      	adds	r5, #1
 80059fc:	6063      	str	r3, [r4, #4]
 80059fe:	7829      	ldrb	r1, [r5, #0]
 8005a00:	1c6e      	adds	r6, r5, #1
 8005a02:	3930      	subs	r1, #48	; 0x30
 8005a04:	2909      	cmp	r1, #9
 8005a06:	d903      	bls.n	8005a10 <_svfiprintf_r+0x1a8>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0c5      	beq.n	8005998 <_svfiprintf_r+0x130>
 8005a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8005a0e:	e7c3      	b.n	8005998 <_svfiprintf_r+0x130>
 8005a10:	4342      	muls	r2, r0
 8005a12:	0035      	movs	r5, r6
 8005a14:	2301      	movs	r3, #1
 8005a16:	1852      	adds	r2, r2, r1
 8005a18:	e7f1      	b.n	80059fe <_svfiprintf_r+0x196>
 8005a1a:	aa07      	add	r2, sp, #28
 8005a1c:	9200      	str	r2, [sp, #0]
 8005a1e:	0021      	movs	r1, r4
 8005a20:	003a      	movs	r2, r7
 8005a22:	4b10      	ldr	r3, [pc, #64]	; (8005a64 <_svfiprintf_r+0x1fc>)
 8005a24:	9803      	ldr	r0, [sp, #12]
 8005a26:	e000      	b.n	8005a2a <_svfiprintf_r+0x1c2>
 8005a28:	bf00      	nop
 8005a2a:	9004      	str	r0, [sp, #16]
 8005a2c:	9b04      	ldr	r3, [sp, #16]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	d1d3      	bne.n	80059da <_svfiprintf_r+0x172>
 8005a32:	89bb      	ldrh	r3, [r7, #12]
 8005a34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005a36:	065b      	lsls	r3, r3, #25
 8005a38:	d400      	bmi.n	8005a3c <_svfiprintf_r+0x1d4>
 8005a3a:	e72c      	b.n	8005896 <_svfiprintf_r+0x2e>
 8005a3c:	2001      	movs	r0, #1
 8005a3e:	4240      	negs	r0, r0
 8005a40:	e729      	b.n	8005896 <_svfiprintf_r+0x2e>
 8005a42:	aa07      	add	r2, sp, #28
 8005a44:	9200      	str	r2, [sp, #0]
 8005a46:	0021      	movs	r1, r4
 8005a48:	003a      	movs	r2, r7
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <_svfiprintf_r+0x1fc>)
 8005a4c:	9803      	ldr	r0, [sp, #12]
 8005a4e:	f000 f87b 	bl	8005b48 <_printf_i>
 8005a52:	e7ea      	b.n	8005a2a <_svfiprintf_r+0x1c2>
 8005a54:	08005fac 	.word	0x08005fac
 8005a58:	08005fb2 	.word	0x08005fb2
 8005a5c:	08005fb6 	.word	0x08005fb6
 8005a60:	00000000 	.word	0x00000000
 8005a64:	080057a5 	.word	0x080057a5

08005a68 <_printf_common>:
 8005a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a6a:	0016      	movs	r6, r2
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	688a      	ldr	r2, [r1, #8]
 8005a70:	690b      	ldr	r3, [r1, #16]
 8005a72:	000c      	movs	r4, r1
 8005a74:	9000      	str	r0, [sp, #0]
 8005a76:	4293      	cmp	r3, r2
 8005a78:	da00      	bge.n	8005a7c <_printf_common+0x14>
 8005a7a:	0013      	movs	r3, r2
 8005a7c:	0022      	movs	r2, r4
 8005a7e:	6033      	str	r3, [r6, #0]
 8005a80:	3243      	adds	r2, #67	; 0x43
 8005a82:	7812      	ldrb	r2, [r2, #0]
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	d001      	beq.n	8005a8c <_printf_common+0x24>
 8005a88:	3301      	adds	r3, #1
 8005a8a:	6033      	str	r3, [r6, #0]
 8005a8c:	6823      	ldr	r3, [r4, #0]
 8005a8e:	069b      	lsls	r3, r3, #26
 8005a90:	d502      	bpl.n	8005a98 <_printf_common+0x30>
 8005a92:	6833      	ldr	r3, [r6, #0]
 8005a94:	3302      	adds	r3, #2
 8005a96:	6033      	str	r3, [r6, #0]
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	2306      	movs	r3, #6
 8005a9c:	0015      	movs	r5, r2
 8005a9e:	401d      	ands	r5, r3
 8005aa0:	421a      	tst	r2, r3
 8005aa2:	d027      	beq.n	8005af4 <_printf_common+0x8c>
 8005aa4:	0023      	movs	r3, r4
 8005aa6:	3343      	adds	r3, #67	; 0x43
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	1e5a      	subs	r2, r3, #1
 8005aac:	4193      	sbcs	r3, r2
 8005aae:	6822      	ldr	r2, [r4, #0]
 8005ab0:	0692      	lsls	r2, r2, #26
 8005ab2:	d430      	bmi.n	8005b16 <_printf_common+0xae>
 8005ab4:	0022      	movs	r2, r4
 8005ab6:	9901      	ldr	r1, [sp, #4]
 8005ab8:	9800      	ldr	r0, [sp, #0]
 8005aba:	9d08      	ldr	r5, [sp, #32]
 8005abc:	3243      	adds	r2, #67	; 0x43
 8005abe:	47a8      	blx	r5
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	d025      	beq.n	8005b10 <_printf_common+0xa8>
 8005ac4:	2206      	movs	r2, #6
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	2500      	movs	r5, #0
 8005aca:	4013      	ands	r3, r2
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d105      	bne.n	8005adc <_printf_common+0x74>
 8005ad0:	6833      	ldr	r3, [r6, #0]
 8005ad2:	68e5      	ldr	r5, [r4, #12]
 8005ad4:	1aed      	subs	r5, r5, r3
 8005ad6:	43eb      	mvns	r3, r5
 8005ad8:	17db      	asrs	r3, r3, #31
 8005ada:	401d      	ands	r5, r3
 8005adc:	68a3      	ldr	r3, [r4, #8]
 8005ade:	6922      	ldr	r2, [r4, #16]
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	dd01      	ble.n	8005ae8 <_printf_common+0x80>
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	18ed      	adds	r5, r5, r3
 8005ae8:	2600      	movs	r6, #0
 8005aea:	42b5      	cmp	r5, r6
 8005aec:	d120      	bne.n	8005b30 <_printf_common+0xc8>
 8005aee:	2000      	movs	r0, #0
 8005af0:	e010      	b.n	8005b14 <_printf_common+0xac>
 8005af2:	3501      	adds	r5, #1
 8005af4:	68e3      	ldr	r3, [r4, #12]
 8005af6:	6832      	ldr	r2, [r6, #0]
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	42ab      	cmp	r3, r5
 8005afc:	ddd2      	ble.n	8005aa4 <_printf_common+0x3c>
 8005afe:	0022      	movs	r2, r4
 8005b00:	2301      	movs	r3, #1
 8005b02:	9901      	ldr	r1, [sp, #4]
 8005b04:	9800      	ldr	r0, [sp, #0]
 8005b06:	9f08      	ldr	r7, [sp, #32]
 8005b08:	3219      	adds	r2, #25
 8005b0a:	47b8      	blx	r7
 8005b0c:	3001      	adds	r0, #1
 8005b0e:	d1f0      	bne.n	8005af2 <_printf_common+0x8a>
 8005b10:	2001      	movs	r0, #1
 8005b12:	4240      	negs	r0, r0
 8005b14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b16:	2030      	movs	r0, #48	; 0x30
 8005b18:	18e1      	adds	r1, r4, r3
 8005b1a:	3143      	adds	r1, #67	; 0x43
 8005b1c:	7008      	strb	r0, [r1, #0]
 8005b1e:	0021      	movs	r1, r4
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	3145      	adds	r1, #69	; 0x45
 8005b24:	7809      	ldrb	r1, [r1, #0]
 8005b26:	18a2      	adds	r2, r4, r2
 8005b28:	3243      	adds	r2, #67	; 0x43
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	7011      	strb	r1, [r2, #0]
 8005b2e:	e7c1      	b.n	8005ab4 <_printf_common+0x4c>
 8005b30:	0022      	movs	r2, r4
 8005b32:	2301      	movs	r3, #1
 8005b34:	9901      	ldr	r1, [sp, #4]
 8005b36:	9800      	ldr	r0, [sp, #0]
 8005b38:	9f08      	ldr	r7, [sp, #32]
 8005b3a:	321a      	adds	r2, #26
 8005b3c:	47b8      	blx	r7
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d0e6      	beq.n	8005b10 <_printf_common+0xa8>
 8005b42:	3601      	adds	r6, #1
 8005b44:	e7d1      	b.n	8005aea <_printf_common+0x82>
	...

08005b48 <_printf_i>:
 8005b48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b4a:	b08b      	sub	sp, #44	; 0x2c
 8005b4c:	9206      	str	r2, [sp, #24]
 8005b4e:	000a      	movs	r2, r1
 8005b50:	3243      	adds	r2, #67	; 0x43
 8005b52:	9307      	str	r3, [sp, #28]
 8005b54:	9005      	str	r0, [sp, #20]
 8005b56:	9204      	str	r2, [sp, #16]
 8005b58:	7e0a      	ldrb	r2, [r1, #24]
 8005b5a:	000c      	movs	r4, r1
 8005b5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b5e:	2a78      	cmp	r2, #120	; 0x78
 8005b60:	d809      	bhi.n	8005b76 <_printf_i+0x2e>
 8005b62:	2a62      	cmp	r2, #98	; 0x62
 8005b64:	d80b      	bhi.n	8005b7e <_printf_i+0x36>
 8005b66:	2a00      	cmp	r2, #0
 8005b68:	d100      	bne.n	8005b6c <_printf_i+0x24>
 8005b6a:	e0be      	b.n	8005cea <_printf_i+0x1a2>
 8005b6c:	497c      	ldr	r1, [pc, #496]	; (8005d60 <_printf_i+0x218>)
 8005b6e:	9103      	str	r1, [sp, #12]
 8005b70:	2a58      	cmp	r2, #88	; 0x58
 8005b72:	d100      	bne.n	8005b76 <_printf_i+0x2e>
 8005b74:	e093      	b.n	8005c9e <_printf_i+0x156>
 8005b76:	0026      	movs	r6, r4
 8005b78:	3642      	adds	r6, #66	; 0x42
 8005b7a:	7032      	strb	r2, [r6, #0]
 8005b7c:	e022      	b.n	8005bc4 <_printf_i+0x7c>
 8005b7e:	0010      	movs	r0, r2
 8005b80:	3863      	subs	r0, #99	; 0x63
 8005b82:	2815      	cmp	r0, #21
 8005b84:	d8f7      	bhi.n	8005b76 <_printf_i+0x2e>
 8005b86:	f7fa fac5 	bl	8000114 <__gnu_thumb1_case_shi>
 8005b8a:	0016      	.short	0x0016
 8005b8c:	fff6001f 	.word	0xfff6001f
 8005b90:	fff6fff6 	.word	0xfff6fff6
 8005b94:	001ffff6 	.word	0x001ffff6
 8005b98:	fff6fff6 	.word	0xfff6fff6
 8005b9c:	fff6fff6 	.word	0xfff6fff6
 8005ba0:	003600a3 	.word	0x003600a3
 8005ba4:	fff60083 	.word	0xfff60083
 8005ba8:	00b4fff6 	.word	0x00b4fff6
 8005bac:	0036fff6 	.word	0x0036fff6
 8005bb0:	fff6fff6 	.word	0xfff6fff6
 8005bb4:	0087      	.short	0x0087
 8005bb6:	0026      	movs	r6, r4
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	3642      	adds	r6, #66	; 0x42
 8005bbc:	1d11      	adds	r1, r2, #4
 8005bbe:	6019      	str	r1, [r3, #0]
 8005bc0:	6813      	ldr	r3, [r2, #0]
 8005bc2:	7033      	strb	r3, [r6, #0]
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e0a2      	b.n	8005d0e <_printf_i+0x1c6>
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	6809      	ldr	r1, [r1, #0]
 8005bcc:	1d02      	adds	r2, r0, #4
 8005bce:	060d      	lsls	r5, r1, #24
 8005bd0:	d50b      	bpl.n	8005bea <_printf_i+0xa2>
 8005bd2:	6805      	ldr	r5, [r0, #0]
 8005bd4:	601a      	str	r2, [r3, #0]
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	da03      	bge.n	8005be2 <_printf_i+0x9a>
 8005bda:	232d      	movs	r3, #45	; 0x2d
 8005bdc:	9a04      	ldr	r2, [sp, #16]
 8005bde:	426d      	negs	r5, r5
 8005be0:	7013      	strb	r3, [r2, #0]
 8005be2:	4b5f      	ldr	r3, [pc, #380]	; (8005d60 <_printf_i+0x218>)
 8005be4:	270a      	movs	r7, #10
 8005be6:	9303      	str	r3, [sp, #12]
 8005be8:	e01b      	b.n	8005c22 <_printf_i+0xda>
 8005bea:	6805      	ldr	r5, [r0, #0]
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	0649      	lsls	r1, r1, #25
 8005bf0:	d5f1      	bpl.n	8005bd6 <_printf_i+0x8e>
 8005bf2:	b22d      	sxth	r5, r5
 8005bf4:	e7ef      	b.n	8005bd6 <_printf_i+0x8e>
 8005bf6:	680d      	ldr	r5, [r1, #0]
 8005bf8:	6819      	ldr	r1, [r3, #0]
 8005bfa:	1d08      	adds	r0, r1, #4
 8005bfc:	6018      	str	r0, [r3, #0]
 8005bfe:	062e      	lsls	r6, r5, #24
 8005c00:	d501      	bpl.n	8005c06 <_printf_i+0xbe>
 8005c02:	680d      	ldr	r5, [r1, #0]
 8005c04:	e003      	b.n	8005c0e <_printf_i+0xc6>
 8005c06:	066d      	lsls	r5, r5, #25
 8005c08:	d5fb      	bpl.n	8005c02 <_printf_i+0xba>
 8005c0a:	680d      	ldr	r5, [r1, #0]
 8005c0c:	b2ad      	uxth	r5, r5
 8005c0e:	4b54      	ldr	r3, [pc, #336]	; (8005d60 <_printf_i+0x218>)
 8005c10:	2708      	movs	r7, #8
 8005c12:	9303      	str	r3, [sp, #12]
 8005c14:	2a6f      	cmp	r2, #111	; 0x6f
 8005c16:	d000      	beq.n	8005c1a <_printf_i+0xd2>
 8005c18:	3702      	adds	r7, #2
 8005c1a:	0023      	movs	r3, r4
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	3343      	adds	r3, #67	; 0x43
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	6863      	ldr	r3, [r4, #4]
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	db03      	blt.n	8005c32 <_printf_i+0xea>
 8005c2a:	2104      	movs	r1, #4
 8005c2c:	6822      	ldr	r2, [r4, #0]
 8005c2e:	438a      	bics	r2, r1
 8005c30:	6022      	str	r2, [r4, #0]
 8005c32:	2d00      	cmp	r5, #0
 8005c34:	d102      	bne.n	8005c3c <_printf_i+0xf4>
 8005c36:	9e04      	ldr	r6, [sp, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00c      	beq.n	8005c56 <_printf_i+0x10e>
 8005c3c:	9e04      	ldr	r6, [sp, #16]
 8005c3e:	0028      	movs	r0, r5
 8005c40:	0039      	movs	r1, r7
 8005c42:	f7fa faf7 	bl	8000234 <__aeabi_uidivmod>
 8005c46:	9b03      	ldr	r3, [sp, #12]
 8005c48:	3e01      	subs	r6, #1
 8005c4a:	5c5b      	ldrb	r3, [r3, r1]
 8005c4c:	7033      	strb	r3, [r6, #0]
 8005c4e:	002b      	movs	r3, r5
 8005c50:	0005      	movs	r5, r0
 8005c52:	429f      	cmp	r7, r3
 8005c54:	d9f3      	bls.n	8005c3e <_printf_i+0xf6>
 8005c56:	2f08      	cmp	r7, #8
 8005c58:	d109      	bne.n	8005c6e <_printf_i+0x126>
 8005c5a:	6823      	ldr	r3, [r4, #0]
 8005c5c:	07db      	lsls	r3, r3, #31
 8005c5e:	d506      	bpl.n	8005c6e <_printf_i+0x126>
 8005c60:	6862      	ldr	r2, [r4, #4]
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	dc02      	bgt.n	8005c6e <_printf_i+0x126>
 8005c68:	2330      	movs	r3, #48	; 0x30
 8005c6a:	3e01      	subs	r6, #1
 8005c6c:	7033      	strb	r3, [r6, #0]
 8005c6e:	9b04      	ldr	r3, [sp, #16]
 8005c70:	1b9b      	subs	r3, r3, r6
 8005c72:	6123      	str	r3, [r4, #16]
 8005c74:	9b07      	ldr	r3, [sp, #28]
 8005c76:	0021      	movs	r1, r4
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	9805      	ldr	r0, [sp, #20]
 8005c7c:	9b06      	ldr	r3, [sp, #24]
 8005c7e:	aa09      	add	r2, sp, #36	; 0x24
 8005c80:	f7ff fef2 	bl	8005a68 <_printf_common>
 8005c84:	3001      	adds	r0, #1
 8005c86:	d147      	bne.n	8005d18 <_printf_i+0x1d0>
 8005c88:	2001      	movs	r0, #1
 8005c8a:	4240      	negs	r0, r0
 8005c8c:	b00b      	add	sp, #44	; 0x2c
 8005c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c90:	2220      	movs	r2, #32
 8005c92:	6809      	ldr	r1, [r1, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	6022      	str	r2, [r4, #0]
 8005c98:	2278      	movs	r2, #120	; 0x78
 8005c9a:	4932      	ldr	r1, [pc, #200]	; (8005d64 <_printf_i+0x21c>)
 8005c9c:	9103      	str	r1, [sp, #12]
 8005c9e:	0021      	movs	r1, r4
 8005ca0:	3145      	adds	r1, #69	; 0x45
 8005ca2:	700a      	strb	r2, [r1, #0]
 8005ca4:	6819      	ldr	r1, [r3, #0]
 8005ca6:	6822      	ldr	r2, [r4, #0]
 8005ca8:	c920      	ldmia	r1!, {r5}
 8005caa:	0610      	lsls	r0, r2, #24
 8005cac:	d402      	bmi.n	8005cb4 <_printf_i+0x16c>
 8005cae:	0650      	lsls	r0, r2, #25
 8005cb0:	d500      	bpl.n	8005cb4 <_printf_i+0x16c>
 8005cb2:	b2ad      	uxth	r5, r5
 8005cb4:	6019      	str	r1, [r3, #0]
 8005cb6:	07d3      	lsls	r3, r2, #31
 8005cb8:	d502      	bpl.n	8005cc0 <_printf_i+0x178>
 8005cba:	2320      	movs	r3, #32
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	6023      	str	r3, [r4, #0]
 8005cc0:	2710      	movs	r7, #16
 8005cc2:	2d00      	cmp	r5, #0
 8005cc4:	d1a9      	bne.n	8005c1a <_printf_i+0xd2>
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	4393      	bics	r3, r2
 8005ccc:	6023      	str	r3, [r4, #0]
 8005cce:	e7a4      	b.n	8005c1a <_printf_i+0xd2>
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	680d      	ldr	r5, [r1, #0]
 8005cd4:	1d10      	adds	r0, r2, #4
 8005cd6:	6949      	ldr	r1, [r1, #20]
 8005cd8:	6018      	str	r0, [r3, #0]
 8005cda:	6813      	ldr	r3, [r2, #0]
 8005cdc:	062e      	lsls	r6, r5, #24
 8005cde:	d501      	bpl.n	8005ce4 <_printf_i+0x19c>
 8005ce0:	6019      	str	r1, [r3, #0]
 8005ce2:	e002      	b.n	8005cea <_printf_i+0x1a2>
 8005ce4:	066d      	lsls	r5, r5, #25
 8005ce6:	d5fb      	bpl.n	8005ce0 <_printf_i+0x198>
 8005ce8:	8019      	strh	r1, [r3, #0]
 8005cea:	2300      	movs	r3, #0
 8005cec:	9e04      	ldr	r6, [sp, #16]
 8005cee:	6123      	str	r3, [r4, #16]
 8005cf0:	e7c0      	b.n	8005c74 <_printf_i+0x12c>
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	1d11      	adds	r1, r2, #4
 8005cf6:	6019      	str	r1, [r3, #0]
 8005cf8:	6816      	ldr	r6, [r2, #0]
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	0030      	movs	r0, r6
 8005cfe:	6862      	ldr	r2, [r4, #4]
 8005d00:	f000 f858 	bl	8005db4 <memchr>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d001      	beq.n	8005d0c <_printf_i+0x1c4>
 8005d08:	1b80      	subs	r0, r0, r6
 8005d0a:	6060      	str	r0, [r4, #4]
 8005d0c:	6863      	ldr	r3, [r4, #4]
 8005d0e:	6123      	str	r3, [r4, #16]
 8005d10:	2300      	movs	r3, #0
 8005d12:	9a04      	ldr	r2, [sp, #16]
 8005d14:	7013      	strb	r3, [r2, #0]
 8005d16:	e7ad      	b.n	8005c74 <_printf_i+0x12c>
 8005d18:	0032      	movs	r2, r6
 8005d1a:	6923      	ldr	r3, [r4, #16]
 8005d1c:	9906      	ldr	r1, [sp, #24]
 8005d1e:	9805      	ldr	r0, [sp, #20]
 8005d20:	9d07      	ldr	r5, [sp, #28]
 8005d22:	47a8      	blx	r5
 8005d24:	3001      	adds	r0, #1
 8005d26:	d0af      	beq.n	8005c88 <_printf_i+0x140>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	079b      	lsls	r3, r3, #30
 8005d2c:	d415      	bmi.n	8005d5a <_printf_i+0x212>
 8005d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d30:	68e0      	ldr	r0, [r4, #12]
 8005d32:	4298      	cmp	r0, r3
 8005d34:	daaa      	bge.n	8005c8c <_printf_i+0x144>
 8005d36:	0018      	movs	r0, r3
 8005d38:	e7a8      	b.n	8005c8c <_printf_i+0x144>
 8005d3a:	0022      	movs	r2, r4
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	9906      	ldr	r1, [sp, #24]
 8005d40:	9805      	ldr	r0, [sp, #20]
 8005d42:	9e07      	ldr	r6, [sp, #28]
 8005d44:	3219      	adds	r2, #25
 8005d46:	47b0      	blx	r6
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d09d      	beq.n	8005c88 <_printf_i+0x140>
 8005d4c:	3501      	adds	r5, #1
 8005d4e:	68e3      	ldr	r3, [r4, #12]
 8005d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d52:	1a9b      	subs	r3, r3, r2
 8005d54:	42ab      	cmp	r3, r5
 8005d56:	dcf0      	bgt.n	8005d3a <_printf_i+0x1f2>
 8005d58:	e7e9      	b.n	8005d2e <_printf_i+0x1e6>
 8005d5a:	2500      	movs	r5, #0
 8005d5c:	e7f7      	b.n	8005d4e <_printf_i+0x206>
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	08005fbd 	.word	0x08005fbd
 8005d64:	08005fce 	.word	0x08005fce

08005d68 <memmove>:
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	4288      	cmp	r0, r1
 8005d6c:	d902      	bls.n	8005d74 <memmove+0xc>
 8005d6e:	188b      	adds	r3, r1, r2
 8005d70:	4298      	cmp	r0, r3
 8005d72:	d303      	bcc.n	8005d7c <memmove+0x14>
 8005d74:	2300      	movs	r3, #0
 8005d76:	e007      	b.n	8005d88 <memmove+0x20>
 8005d78:	5c8b      	ldrb	r3, [r1, r2]
 8005d7a:	5483      	strb	r3, [r0, r2]
 8005d7c:	3a01      	subs	r2, #1
 8005d7e:	d2fb      	bcs.n	8005d78 <memmove+0x10>
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	5ccc      	ldrb	r4, [r1, r3]
 8005d84:	54c4      	strb	r4, [r0, r3]
 8005d86:	3301      	adds	r3, #1
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d1fa      	bne.n	8005d82 <memmove+0x1a>
 8005d8c:	e7f8      	b.n	8005d80 <memmove+0x18>
	...

08005d90 <_sbrk_r>:
 8005d90:	2300      	movs	r3, #0
 8005d92:	b570      	push	{r4, r5, r6, lr}
 8005d94:	4d06      	ldr	r5, [pc, #24]	; (8005db0 <_sbrk_r+0x20>)
 8005d96:	0004      	movs	r4, r0
 8005d98:	0008      	movs	r0, r1
 8005d9a:	602b      	str	r3, [r5, #0]
 8005d9c:	f7fc f9bc 	bl	8002118 <_sbrk>
 8005da0:	1c43      	adds	r3, r0, #1
 8005da2:	d103      	bne.n	8005dac <_sbrk_r+0x1c>
 8005da4:	682b      	ldr	r3, [r5, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d000      	beq.n	8005dac <_sbrk_r+0x1c>
 8005daa:	6023      	str	r3, [r4, #0]
 8005dac:	bd70      	pop	{r4, r5, r6, pc}
 8005dae:	46c0      	nop			; (mov r8, r8)
 8005db0:	20000320 	.word	0x20000320

08005db4 <memchr>:
 8005db4:	b2c9      	uxtb	r1, r1
 8005db6:	1882      	adds	r2, r0, r2
 8005db8:	4290      	cmp	r0, r2
 8005dba:	d101      	bne.n	8005dc0 <memchr+0xc>
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	4770      	bx	lr
 8005dc0:	7803      	ldrb	r3, [r0, #0]
 8005dc2:	428b      	cmp	r3, r1
 8005dc4:	d0fb      	beq.n	8005dbe <memchr+0xa>
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	e7f6      	b.n	8005db8 <memchr+0x4>

08005dca <memcpy>:
 8005dca:	2300      	movs	r3, #0
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d100      	bne.n	8005dd4 <memcpy+0xa>
 8005dd2:	bd10      	pop	{r4, pc}
 8005dd4:	5ccc      	ldrb	r4, [r1, r3]
 8005dd6:	54c4      	strb	r4, [r0, r3]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	e7f8      	b.n	8005dce <memcpy+0x4>

08005ddc <_realloc_r>:
 8005ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005dde:	0007      	movs	r7, r0
 8005de0:	000e      	movs	r6, r1
 8005de2:	0014      	movs	r4, r2
 8005de4:	2900      	cmp	r1, #0
 8005de6:	d105      	bne.n	8005df4 <_realloc_r+0x18>
 8005de8:	0011      	movs	r1, r2
 8005dea:	f7ff fc49 	bl	8005680 <_malloc_r>
 8005dee:	0005      	movs	r5, r0
 8005df0:	0028      	movs	r0, r5
 8005df2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005df4:	2a00      	cmp	r2, #0
 8005df6:	d103      	bne.n	8005e00 <_realloc_r+0x24>
 8005df8:	f7ff fbd6 	bl	80055a8 <_free_r>
 8005dfc:	0025      	movs	r5, r4
 8005dfe:	e7f7      	b.n	8005df0 <_realloc_r+0x14>
 8005e00:	f000 f81b 	bl	8005e3a <_malloc_usable_size_r>
 8005e04:	9001      	str	r0, [sp, #4]
 8005e06:	4284      	cmp	r4, r0
 8005e08:	d803      	bhi.n	8005e12 <_realloc_r+0x36>
 8005e0a:	0035      	movs	r5, r6
 8005e0c:	0843      	lsrs	r3, r0, #1
 8005e0e:	42a3      	cmp	r3, r4
 8005e10:	d3ee      	bcc.n	8005df0 <_realloc_r+0x14>
 8005e12:	0021      	movs	r1, r4
 8005e14:	0038      	movs	r0, r7
 8005e16:	f7ff fc33 	bl	8005680 <_malloc_r>
 8005e1a:	1e05      	subs	r5, r0, #0
 8005e1c:	d0e8      	beq.n	8005df0 <_realloc_r+0x14>
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	0022      	movs	r2, r4
 8005e22:	429c      	cmp	r4, r3
 8005e24:	d900      	bls.n	8005e28 <_realloc_r+0x4c>
 8005e26:	001a      	movs	r2, r3
 8005e28:	0031      	movs	r1, r6
 8005e2a:	0028      	movs	r0, r5
 8005e2c:	f7ff ffcd 	bl	8005dca <memcpy>
 8005e30:	0031      	movs	r1, r6
 8005e32:	0038      	movs	r0, r7
 8005e34:	f7ff fbb8 	bl	80055a8 <_free_r>
 8005e38:	e7da      	b.n	8005df0 <_realloc_r+0x14>

08005e3a <_malloc_usable_size_r>:
 8005e3a:	1f0b      	subs	r3, r1, #4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	1f18      	subs	r0, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da01      	bge.n	8005e48 <_malloc_usable_size_r+0xe>
 8005e44:	580b      	ldr	r3, [r1, r0]
 8005e46:	18c0      	adds	r0, r0, r3
 8005e48:	4770      	bx	lr
	...

08005e4c <_init>:
 8005e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4e:	46c0      	nop			; (mov r8, r8)
 8005e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e52:	bc08      	pop	{r3}
 8005e54:	469e      	mov	lr, r3
 8005e56:	4770      	bx	lr

08005e58 <_fini>:
 8005e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5a:	46c0      	nop			; (mov r8, r8)
 8005e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e5e:	bc08      	pop	{r3}
 8005e60:	469e      	mov	lr, r3
 8005e62:	4770      	bx	lr
