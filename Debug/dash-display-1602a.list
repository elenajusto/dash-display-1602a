
dash-display-1602a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e24  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d7c  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c5c  08009c5c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009c5c  08009c5c  00019c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c64  08009c64  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c64  08009c64  00019c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c68  08009c68  00019c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009c6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006fc  20000088  08009cf4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08009cf4  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016018  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002edb  00000000  00000000  0003610b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  00038fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb3  00000000  00000000  0003a290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000338d  00000000  00000000  0003b143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000185a2  00000000  00000000  0003e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4fa9  00000000  00000000  00056a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049bc  00000000  00000000  000fba1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001003d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006ec8 	.word	0x08006ec8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08006ec8 	.word	0x08006ec8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_uldivmod>:
 8000414:	2b00      	cmp	r3, #0
 8000416:	d111      	bne.n	800043c <__aeabi_uldivmod+0x28>
 8000418:	2a00      	cmp	r2, #0
 800041a:	d10f      	bne.n	800043c <__aeabi_uldivmod+0x28>
 800041c:	2900      	cmp	r1, #0
 800041e:	d100      	bne.n	8000422 <__aeabi_uldivmod+0xe>
 8000420:	2800      	cmp	r0, #0
 8000422:	d002      	beq.n	800042a <__aeabi_uldivmod+0x16>
 8000424:	2100      	movs	r1, #0
 8000426:	43c9      	mvns	r1, r1
 8000428:	0008      	movs	r0, r1
 800042a:	b407      	push	{r0, r1, r2}
 800042c:	4802      	ldr	r0, [pc, #8]	; (8000438 <__aeabi_uldivmod+0x24>)
 800042e:	a102      	add	r1, pc, #8	; (adr r1, 8000438 <__aeabi_uldivmod+0x24>)
 8000430:	1840      	adds	r0, r0, r1
 8000432:	9002      	str	r0, [sp, #8]
 8000434:	bd03      	pop	{r0, r1, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	ffffffd9 	.word	0xffffffd9
 800043c:	b403      	push	{r0, r1}
 800043e:	4668      	mov	r0, sp
 8000440:	b501      	push	{r0, lr}
 8000442:	9802      	ldr	r0, [sp, #8]
 8000444:	f000 f806 	bl	8000454 <__udivmoddi4>
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	469e      	mov	lr, r3
 800044c:	b002      	add	sp, #8
 800044e:	bc0c      	pop	{r2, r3}
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__udivmoddi4>:
 8000454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000456:	4657      	mov	r7, sl
 8000458:	464e      	mov	r6, r9
 800045a:	4645      	mov	r5, r8
 800045c:	46de      	mov	lr, fp
 800045e:	b5e0      	push	{r5, r6, r7, lr}
 8000460:	0004      	movs	r4, r0
 8000462:	000d      	movs	r5, r1
 8000464:	4692      	mov	sl, r2
 8000466:	4699      	mov	r9, r3
 8000468:	b083      	sub	sp, #12
 800046a:	428b      	cmp	r3, r1
 800046c:	d830      	bhi.n	80004d0 <__udivmoddi4+0x7c>
 800046e:	d02d      	beq.n	80004cc <__udivmoddi4+0x78>
 8000470:	4649      	mov	r1, r9
 8000472:	4650      	mov	r0, sl
 8000474:	f000 ff86 	bl	8001384 <__clzdi2>
 8000478:	0029      	movs	r1, r5
 800047a:	0006      	movs	r6, r0
 800047c:	0020      	movs	r0, r4
 800047e:	f000 ff81 	bl	8001384 <__clzdi2>
 8000482:	1a33      	subs	r3, r6, r0
 8000484:	4698      	mov	r8, r3
 8000486:	3b20      	subs	r3, #32
 8000488:	d434      	bmi.n	80004f4 <__udivmoddi4+0xa0>
 800048a:	469b      	mov	fp, r3
 800048c:	4653      	mov	r3, sl
 800048e:	465a      	mov	r2, fp
 8000490:	4093      	lsls	r3, r2
 8000492:	4642      	mov	r2, r8
 8000494:	001f      	movs	r7, r3
 8000496:	4653      	mov	r3, sl
 8000498:	4093      	lsls	r3, r2
 800049a:	001e      	movs	r6, r3
 800049c:	42af      	cmp	r7, r5
 800049e:	d83b      	bhi.n	8000518 <__udivmoddi4+0xc4>
 80004a0:	42af      	cmp	r7, r5
 80004a2:	d100      	bne.n	80004a6 <__udivmoddi4+0x52>
 80004a4:	e079      	b.n	800059a <__udivmoddi4+0x146>
 80004a6:	465b      	mov	r3, fp
 80004a8:	1ba4      	subs	r4, r4, r6
 80004aa:	41bd      	sbcs	r5, r7
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	da00      	bge.n	80004b2 <__udivmoddi4+0x5e>
 80004b0:	e076      	b.n	80005a0 <__udivmoddi4+0x14c>
 80004b2:	2200      	movs	r2, #0
 80004b4:	2300      	movs	r3, #0
 80004b6:	9200      	str	r2, [sp, #0]
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	2301      	movs	r3, #1
 80004bc:	465a      	mov	r2, fp
 80004be:	4093      	lsls	r3, r2
 80004c0:	9301      	str	r3, [sp, #4]
 80004c2:	2301      	movs	r3, #1
 80004c4:	4642      	mov	r2, r8
 80004c6:	4093      	lsls	r3, r2
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	e029      	b.n	8000520 <__udivmoddi4+0xcc>
 80004cc:	4282      	cmp	r2, r0
 80004ce:	d9cf      	bls.n	8000470 <__udivmoddi4+0x1c>
 80004d0:	2200      	movs	r2, #0
 80004d2:	2300      	movs	r3, #0
 80004d4:	9200      	str	r2, [sp, #0]
 80004d6:	9301      	str	r3, [sp, #4]
 80004d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <__udivmoddi4+0x8e>
 80004de:	601c      	str	r4, [r3, #0]
 80004e0:	605d      	str	r5, [r3, #4]
 80004e2:	9800      	ldr	r0, [sp, #0]
 80004e4:	9901      	ldr	r1, [sp, #4]
 80004e6:	b003      	add	sp, #12
 80004e8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ea:	46bb      	mov	fp, r7
 80004ec:	46b2      	mov	sl, r6
 80004ee:	46a9      	mov	r9, r5
 80004f0:	46a0      	mov	r8, r4
 80004f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004f4:	4642      	mov	r2, r8
 80004f6:	469b      	mov	fp, r3
 80004f8:	2320      	movs	r3, #32
 80004fa:	1a9b      	subs	r3, r3, r2
 80004fc:	4652      	mov	r2, sl
 80004fe:	40da      	lsrs	r2, r3
 8000500:	4641      	mov	r1, r8
 8000502:	0013      	movs	r3, r2
 8000504:	464a      	mov	r2, r9
 8000506:	408a      	lsls	r2, r1
 8000508:	0017      	movs	r7, r2
 800050a:	4642      	mov	r2, r8
 800050c:	431f      	orrs	r7, r3
 800050e:	4653      	mov	r3, sl
 8000510:	4093      	lsls	r3, r2
 8000512:	001e      	movs	r6, r3
 8000514:	42af      	cmp	r7, r5
 8000516:	d9c3      	bls.n	80004a0 <__udivmoddi4+0x4c>
 8000518:	2200      	movs	r2, #0
 800051a:	2300      	movs	r3, #0
 800051c:	9200      	str	r2, [sp, #0]
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	4643      	mov	r3, r8
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0d8      	beq.n	80004d8 <__udivmoddi4+0x84>
 8000526:	07fb      	lsls	r3, r7, #31
 8000528:	0872      	lsrs	r2, r6, #1
 800052a:	431a      	orrs	r2, r3
 800052c:	4646      	mov	r6, r8
 800052e:	087b      	lsrs	r3, r7, #1
 8000530:	e00e      	b.n	8000550 <__udivmoddi4+0xfc>
 8000532:	42ab      	cmp	r3, r5
 8000534:	d101      	bne.n	800053a <__udivmoddi4+0xe6>
 8000536:	42a2      	cmp	r2, r4
 8000538:	d80c      	bhi.n	8000554 <__udivmoddi4+0x100>
 800053a:	1aa4      	subs	r4, r4, r2
 800053c:	419d      	sbcs	r5, r3
 800053e:	2001      	movs	r0, #1
 8000540:	1924      	adds	r4, r4, r4
 8000542:	416d      	adcs	r5, r5
 8000544:	2100      	movs	r1, #0
 8000546:	3e01      	subs	r6, #1
 8000548:	1824      	adds	r4, r4, r0
 800054a:	414d      	adcs	r5, r1
 800054c:	2e00      	cmp	r6, #0
 800054e:	d006      	beq.n	800055e <__udivmoddi4+0x10a>
 8000550:	42ab      	cmp	r3, r5
 8000552:	d9ee      	bls.n	8000532 <__udivmoddi4+0xde>
 8000554:	3e01      	subs	r6, #1
 8000556:	1924      	adds	r4, r4, r4
 8000558:	416d      	adcs	r5, r5
 800055a:	2e00      	cmp	r6, #0
 800055c:	d1f8      	bne.n	8000550 <__udivmoddi4+0xfc>
 800055e:	9800      	ldr	r0, [sp, #0]
 8000560:	9901      	ldr	r1, [sp, #4]
 8000562:	465b      	mov	r3, fp
 8000564:	1900      	adds	r0, r0, r4
 8000566:	4169      	adcs	r1, r5
 8000568:	2b00      	cmp	r3, #0
 800056a:	db24      	blt.n	80005b6 <__udivmoddi4+0x162>
 800056c:	002b      	movs	r3, r5
 800056e:	465a      	mov	r2, fp
 8000570:	4644      	mov	r4, r8
 8000572:	40d3      	lsrs	r3, r2
 8000574:	002a      	movs	r2, r5
 8000576:	40e2      	lsrs	r2, r4
 8000578:	001c      	movs	r4, r3
 800057a:	465b      	mov	r3, fp
 800057c:	0015      	movs	r5, r2
 800057e:	2b00      	cmp	r3, #0
 8000580:	db2a      	blt.n	80005d8 <__udivmoddi4+0x184>
 8000582:	0026      	movs	r6, r4
 8000584:	409e      	lsls	r6, r3
 8000586:	0033      	movs	r3, r6
 8000588:	0026      	movs	r6, r4
 800058a:	4647      	mov	r7, r8
 800058c:	40be      	lsls	r6, r7
 800058e:	0032      	movs	r2, r6
 8000590:	1a80      	subs	r0, r0, r2
 8000592:	4199      	sbcs	r1, r3
 8000594:	9000      	str	r0, [sp, #0]
 8000596:	9101      	str	r1, [sp, #4]
 8000598:	e79e      	b.n	80004d8 <__udivmoddi4+0x84>
 800059a:	42a3      	cmp	r3, r4
 800059c:	d8bc      	bhi.n	8000518 <__udivmoddi4+0xc4>
 800059e:	e782      	b.n	80004a6 <__udivmoddi4+0x52>
 80005a0:	4642      	mov	r2, r8
 80005a2:	2320      	movs	r3, #32
 80005a4:	2100      	movs	r1, #0
 80005a6:	1a9b      	subs	r3, r3, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	9100      	str	r1, [sp, #0]
 80005ac:	9201      	str	r2, [sp, #4]
 80005ae:	2201      	movs	r2, #1
 80005b0:	40da      	lsrs	r2, r3
 80005b2:	9201      	str	r2, [sp, #4]
 80005b4:	e785      	b.n	80004c2 <__udivmoddi4+0x6e>
 80005b6:	4642      	mov	r2, r8
 80005b8:	2320      	movs	r3, #32
 80005ba:	1a9b      	subs	r3, r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4646      	mov	r6, r8
 80005c0:	409a      	lsls	r2, r3
 80005c2:	0023      	movs	r3, r4
 80005c4:	40f3      	lsrs	r3, r6
 80005c6:	4644      	mov	r4, r8
 80005c8:	4313      	orrs	r3, r2
 80005ca:	002a      	movs	r2, r5
 80005cc:	40e2      	lsrs	r2, r4
 80005ce:	001c      	movs	r4, r3
 80005d0:	465b      	mov	r3, fp
 80005d2:	0015      	movs	r5, r2
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	dad4      	bge.n	8000582 <__udivmoddi4+0x12e>
 80005d8:	4642      	mov	r2, r8
 80005da:	002f      	movs	r7, r5
 80005dc:	2320      	movs	r3, #32
 80005de:	0026      	movs	r6, r4
 80005e0:	4097      	lsls	r7, r2
 80005e2:	1a9b      	subs	r3, r3, r2
 80005e4:	40de      	lsrs	r6, r3
 80005e6:	003b      	movs	r3, r7
 80005e8:	4333      	orrs	r3, r6
 80005ea:	e7cd      	b.n	8000588 <__udivmoddi4+0x134>

080005ec <__aeabi_dadd>:
 80005ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ee:	464f      	mov	r7, r9
 80005f0:	4646      	mov	r6, r8
 80005f2:	46d6      	mov	lr, sl
 80005f4:	0004      	movs	r4, r0
 80005f6:	b5c0      	push	{r6, r7, lr}
 80005f8:	001f      	movs	r7, r3
 80005fa:	030b      	lsls	r3, r1, #12
 80005fc:	0010      	movs	r0, r2
 80005fe:	004e      	lsls	r6, r1, #1
 8000600:	0a5b      	lsrs	r3, r3, #9
 8000602:	0fcd      	lsrs	r5, r1, #31
 8000604:	0f61      	lsrs	r1, r4, #29
 8000606:	007a      	lsls	r2, r7, #1
 8000608:	4319      	orrs	r1, r3
 800060a:	00e3      	lsls	r3, r4, #3
 800060c:	033c      	lsls	r4, r7, #12
 800060e:	0fff      	lsrs	r7, r7, #31
 8000610:	46bc      	mov	ip, r7
 8000612:	0a64      	lsrs	r4, r4, #9
 8000614:	0f47      	lsrs	r7, r0, #29
 8000616:	4327      	orrs	r7, r4
 8000618:	0d76      	lsrs	r6, r6, #21
 800061a:	0d52      	lsrs	r2, r2, #21
 800061c:	00c0      	lsls	r0, r0, #3
 800061e:	46b9      	mov	r9, r7
 8000620:	4680      	mov	r8, r0
 8000622:	1ab7      	subs	r7, r6, r2
 8000624:	4565      	cmp	r5, ip
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x3e>
 8000628:	e09b      	b.n	8000762 <__aeabi_dadd+0x176>
 800062a:	2f00      	cmp	r7, #0
 800062c:	dc00      	bgt.n	8000630 <__aeabi_dadd+0x44>
 800062e:	e084      	b.n	800073a <__aeabi_dadd+0x14e>
 8000630:	2a00      	cmp	r2, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0x4a>
 8000634:	e0be      	b.n	80007b4 <__aeabi_dadd+0x1c8>
 8000636:	4ac8      	ldr	r2, [pc, #800]	; (8000958 <__aeabi_dadd+0x36c>)
 8000638:	4296      	cmp	r6, r2
 800063a:	d100      	bne.n	800063e <__aeabi_dadd+0x52>
 800063c:	e124      	b.n	8000888 <__aeabi_dadd+0x29c>
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	464c      	mov	r4, r9
 8000642:	0412      	lsls	r2, r2, #16
 8000644:	4314      	orrs	r4, r2
 8000646:	46a1      	mov	r9, r4
 8000648:	2f38      	cmp	r7, #56	; 0x38
 800064a:	dd00      	ble.n	800064e <__aeabi_dadd+0x62>
 800064c:	e167      	b.n	800091e <__aeabi_dadd+0x332>
 800064e:	2f1f      	cmp	r7, #31
 8000650:	dd00      	ble.n	8000654 <__aeabi_dadd+0x68>
 8000652:	e1d6      	b.n	8000a02 <__aeabi_dadd+0x416>
 8000654:	2220      	movs	r2, #32
 8000656:	464c      	mov	r4, r9
 8000658:	1bd2      	subs	r2, r2, r7
 800065a:	4094      	lsls	r4, r2
 800065c:	46a2      	mov	sl, r4
 800065e:	4644      	mov	r4, r8
 8000660:	40fc      	lsrs	r4, r7
 8000662:	0020      	movs	r0, r4
 8000664:	4654      	mov	r4, sl
 8000666:	4304      	orrs	r4, r0
 8000668:	4640      	mov	r0, r8
 800066a:	4090      	lsls	r0, r2
 800066c:	1e42      	subs	r2, r0, #1
 800066e:	4190      	sbcs	r0, r2
 8000670:	464a      	mov	r2, r9
 8000672:	40fa      	lsrs	r2, r7
 8000674:	4304      	orrs	r4, r0
 8000676:	1a89      	subs	r1, r1, r2
 8000678:	1b1c      	subs	r4, r3, r4
 800067a:	42a3      	cmp	r3, r4
 800067c:	4192      	sbcs	r2, r2
 800067e:	4252      	negs	r2, r2
 8000680:	1a8b      	subs	r3, r1, r2
 8000682:	469a      	mov	sl, r3
 8000684:	4653      	mov	r3, sl
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	d400      	bmi.n	800068c <__aeabi_dadd+0xa0>
 800068a:	e0d4      	b.n	8000836 <__aeabi_dadd+0x24a>
 800068c:	4653      	mov	r3, sl
 800068e:	025a      	lsls	r2, r3, #9
 8000690:	0a53      	lsrs	r3, r2, #9
 8000692:	469a      	mov	sl, r3
 8000694:	4653      	mov	r3, sl
 8000696:	2b00      	cmp	r3, #0
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0xb0>
 800069a:	e104      	b.n	80008a6 <__aeabi_dadd+0x2ba>
 800069c:	4650      	mov	r0, sl
 800069e:	f000 fe53 	bl	8001348 <__clzsi2>
 80006a2:	0003      	movs	r3, r0
 80006a4:	3b08      	subs	r3, #8
 80006a6:	2220      	movs	r2, #32
 80006a8:	0020      	movs	r0, r4
 80006aa:	1ad2      	subs	r2, r2, r3
 80006ac:	4651      	mov	r1, sl
 80006ae:	40d0      	lsrs	r0, r2
 80006b0:	4099      	lsls	r1, r3
 80006b2:	0002      	movs	r2, r0
 80006b4:	409c      	lsls	r4, r3
 80006b6:	430a      	orrs	r2, r1
 80006b8:	42b3      	cmp	r3, r6
 80006ba:	da00      	bge.n	80006be <__aeabi_dadd+0xd2>
 80006bc:	e102      	b.n	80008c4 <__aeabi_dadd+0x2d8>
 80006be:	1b9b      	subs	r3, r3, r6
 80006c0:	1c59      	adds	r1, r3, #1
 80006c2:	291f      	cmp	r1, #31
 80006c4:	dd00      	ble.n	80006c8 <__aeabi_dadd+0xdc>
 80006c6:	e0a7      	b.n	8000818 <__aeabi_dadd+0x22c>
 80006c8:	2320      	movs	r3, #32
 80006ca:	0010      	movs	r0, r2
 80006cc:	0026      	movs	r6, r4
 80006ce:	1a5b      	subs	r3, r3, r1
 80006d0:	409c      	lsls	r4, r3
 80006d2:	4098      	lsls	r0, r3
 80006d4:	40ce      	lsrs	r6, r1
 80006d6:	40ca      	lsrs	r2, r1
 80006d8:	1e63      	subs	r3, r4, #1
 80006da:	419c      	sbcs	r4, r3
 80006dc:	4330      	orrs	r0, r6
 80006de:	4692      	mov	sl, r2
 80006e0:	2600      	movs	r6, #0
 80006e2:	4304      	orrs	r4, r0
 80006e4:	0763      	lsls	r3, r4, #29
 80006e6:	d009      	beq.n	80006fc <__aeabi_dadd+0x110>
 80006e8:	230f      	movs	r3, #15
 80006ea:	4023      	ands	r3, r4
 80006ec:	2b04      	cmp	r3, #4
 80006ee:	d005      	beq.n	80006fc <__aeabi_dadd+0x110>
 80006f0:	1d23      	adds	r3, r4, #4
 80006f2:	42a3      	cmp	r3, r4
 80006f4:	41a4      	sbcs	r4, r4
 80006f6:	4264      	negs	r4, r4
 80006f8:	44a2      	add	sl, r4
 80006fa:	001c      	movs	r4, r3
 80006fc:	4653      	mov	r3, sl
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	d400      	bmi.n	8000704 <__aeabi_dadd+0x118>
 8000702:	e09b      	b.n	800083c <__aeabi_dadd+0x250>
 8000704:	4b94      	ldr	r3, [pc, #592]	; (8000958 <__aeabi_dadd+0x36c>)
 8000706:	3601      	adds	r6, #1
 8000708:	429e      	cmp	r6, r3
 800070a:	d100      	bne.n	800070e <__aeabi_dadd+0x122>
 800070c:	e0b8      	b.n	8000880 <__aeabi_dadd+0x294>
 800070e:	4653      	mov	r3, sl
 8000710:	4992      	ldr	r1, [pc, #584]	; (800095c <__aeabi_dadd+0x370>)
 8000712:	08e4      	lsrs	r4, r4, #3
 8000714:	400b      	ands	r3, r1
 8000716:	0019      	movs	r1, r3
 8000718:	075b      	lsls	r3, r3, #29
 800071a:	4323      	orrs	r3, r4
 800071c:	0572      	lsls	r2, r6, #21
 800071e:	024c      	lsls	r4, r1, #9
 8000720:	0b24      	lsrs	r4, r4, #12
 8000722:	0d52      	lsrs	r2, r2, #21
 8000724:	0512      	lsls	r2, r2, #20
 8000726:	07ed      	lsls	r5, r5, #31
 8000728:	4322      	orrs	r2, r4
 800072a:	432a      	orrs	r2, r5
 800072c:	0018      	movs	r0, r3
 800072e:	0011      	movs	r1, r2
 8000730:	bce0      	pop	{r5, r6, r7}
 8000732:	46ba      	mov	sl, r7
 8000734:	46b1      	mov	r9, r6
 8000736:	46a8      	mov	r8, r5
 8000738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073a:	2f00      	cmp	r7, #0
 800073c:	d048      	beq.n	80007d0 <__aeabi_dadd+0x1e4>
 800073e:	1b97      	subs	r7, r2, r6
 8000740:	2e00      	cmp	r6, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x15a>
 8000744:	e10e      	b.n	8000964 <__aeabi_dadd+0x378>
 8000746:	000c      	movs	r4, r1
 8000748:	431c      	orrs	r4, r3
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x162>
 800074c:	e1b7      	b.n	8000abe <__aeabi_dadd+0x4d2>
 800074e:	1e7c      	subs	r4, r7, #1
 8000750:	2f01      	cmp	r7, #1
 8000752:	d100      	bne.n	8000756 <__aeabi_dadd+0x16a>
 8000754:	e226      	b.n	8000ba4 <__aeabi_dadd+0x5b8>
 8000756:	4d80      	ldr	r5, [pc, #512]	; (8000958 <__aeabi_dadd+0x36c>)
 8000758:	42af      	cmp	r7, r5
 800075a:	d100      	bne.n	800075e <__aeabi_dadd+0x172>
 800075c:	e1d5      	b.n	8000b0a <__aeabi_dadd+0x51e>
 800075e:	0027      	movs	r7, r4
 8000760:	e107      	b.n	8000972 <__aeabi_dadd+0x386>
 8000762:	2f00      	cmp	r7, #0
 8000764:	dc00      	bgt.n	8000768 <__aeabi_dadd+0x17c>
 8000766:	e0b2      	b.n	80008ce <__aeabi_dadd+0x2e2>
 8000768:	2a00      	cmp	r2, #0
 800076a:	d047      	beq.n	80007fc <__aeabi_dadd+0x210>
 800076c:	4a7a      	ldr	r2, [pc, #488]	; (8000958 <__aeabi_dadd+0x36c>)
 800076e:	4296      	cmp	r6, r2
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x188>
 8000772:	e089      	b.n	8000888 <__aeabi_dadd+0x29c>
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	464c      	mov	r4, r9
 8000778:	0412      	lsls	r2, r2, #16
 800077a:	4314      	orrs	r4, r2
 800077c:	46a1      	mov	r9, r4
 800077e:	2f38      	cmp	r7, #56	; 0x38
 8000780:	dc6b      	bgt.n	800085a <__aeabi_dadd+0x26e>
 8000782:	2f1f      	cmp	r7, #31
 8000784:	dc00      	bgt.n	8000788 <__aeabi_dadd+0x19c>
 8000786:	e16e      	b.n	8000a66 <__aeabi_dadd+0x47a>
 8000788:	003a      	movs	r2, r7
 800078a:	4648      	mov	r0, r9
 800078c:	3a20      	subs	r2, #32
 800078e:	40d0      	lsrs	r0, r2
 8000790:	4684      	mov	ip, r0
 8000792:	2f20      	cmp	r7, #32
 8000794:	d007      	beq.n	80007a6 <__aeabi_dadd+0x1ba>
 8000796:	2240      	movs	r2, #64	; 0x40
 8000798:	4648      	mov	r0, r9
 800079a:	1bd2      	subs	r2, r2, r7
 800079c:	4090      	lsls	r0, r2
 800079e:	0002      	movs	r2, r0
 80007a0:	4640      	mov	r0, r8
 80007a2:	4310      	orrs	r0, r2
 80007a4:	4680      	mov	r8, r0
 80007a6:	4640      	mov	r0, r8
 80007a8:	1e42      	subs	r2, r0, #1
 80007aa:	4190      	sbcs	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	0004      	movs	r4, r0
 80007b0:	4314      	orrs	r4, r2
 80007b2:	e057      	b.n	8000864 <__aeabi_dadd+0x278>
 80007b4:	464a      	mov	r2, r9
 80007b6:	4302      	orrs	r2, r0
 80007b8:	d100      	bne.n	80007bc <__aeabi_dadd+0x1d0>
 80007ba:	e103      	b.n	80009c4 <__aeabi_dadd+0x3d8>
 80007bc:	1e7a      	subs	r2, r7, #1
 80007be:	2f01      	cmp	r7, #1
 80007c0:	d100      	bne.n	80007c4 <__aeabi_dadd+0x1d8>
 80007c2:	e193      	b.n	8000aec <__aeabi_dadd+0x500>
 80007c4:	4c64      	ldr	r4, [pc, #400]	; (8000958 <__aeabi_dadd+0x36c>)
 80007c6:	42a7      	cmp	r7, r4
 80007c8:	d100      	bne.n	80007cc <__aeabi_dadd+0x1e0>
 80007ca:	e18a      	b.n	8000ae2 <__aeabi_dadd+0x4f6>
 80007cc:	0017      	movs	r7, r2
 80007ce:	e73b      	b.n	8000648 <__aeabi_dadd+0x5c>
 80007d0:	4c63      	ldr	r4, [pc, #396]	; (8000960 <__aeabi_dadd+0x374>)
 80007d2:	1c72      	adds	r2, r6, #1
 80007d4:	4222      	tst	r2, r4
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x1ee>
 80007d8:	e0e0      	b.n	800099c <__aeabi_dadd+0x3b0>
 80007da:	000a      	movs	r2, r1
 80007dc:	431a      	orrs	r2, r3
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_dadd+0x1f8>
 80007e2:	e174      	b.n	8000ace <__aeabi_dadd+0x4e2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x1fe>
 80007e8:	e1d0      	b.n	8000b8c <__aeabi_dadd+0x5a0>
 80007ea:	464a      	mov	r2, r9
 80007ec:	4302      	orrs	r2, r0
 80007ee:	d000      	beq.n	80007f2 <__aeabi_dadd+0x206>
 80007f0:	e1e3      	b.n	8000bba <__aeabi_dadd+0x5ce>
 80007f2:	074a      	lsls	r2, r1, #29
 80007f4:	08db      	lsrs	r3, r3, #3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	08c9      	lsrs	r1, r1, #3
 80007fa:	e029      	b.n	8000850 <__aeabi_dadd+0x264>
 80007fc:	464a      	mov	r2, r9
 80007fe:	4302      	orrs	r2, r0
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x218>
 8000802:	e17d      	b.n	8000b00 <__aeabi_dadd+0x514>
 8000804:	1e7a      	subs	r2, r7, #1
 8000806:	2f01      	cmp	r7, #1
 8000808:	d100      	bne.n	800080c <__aeabi_dadd+0x220>
 800080a:	e0e0      	b.n	80009ce <__aeabi_dadd+0x3e2>
 800080c:	4c52      	ldr	r4, [pc, #328]	; (8000958 <__aeabi_dadd+0x36c>)
 800080e:	42a7      	cmp	r7, r4
 8000810:	d100      	bne.n	8000814 <__aeabi_dadd+0x228>
 8000812:	e166      	b.n	8000ae2 <__aeabi_dadd+0x4f6>
 8000814:	0017      	movs	r7, r2
 8000816:	e7b2      	b.n	800077e <__aeabi_dadd+0x192>
 8000818:	0010      	movs	r0, r2
 800081a:	3b1f      	subs	r3, #31
 800081c:	40d8      	lsrs	r0, r3
 800081e:	2920      	cmp	r1, #32
 8000820:	d003      	beq.n	800082a <__aeabi_dadd+0x23e>
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	1a5b      	subs	r3, r3, r1
 8000826:	409a      	lsls	r2, r3
 8000828:	4314      	orrs	r4, r2
 800082a:	1e63      	subs	r3, r4, #1
 800082c:	419c      	sbcs	r4, r3
 800082e:	2300      	movs	r3, #0
 8000830:	2600      	movs	r6, #0
 8000832:	469a      	mov	sl, r3
 8000834:	4304      	orrs	r4, r0
 8000836:	0763      	lsls	r3, r4, #29
 8000838:	d000      	beq.n	800083c <__aeabi_dadd+0x250>
 800083a:	e755      	b.n	80006e8 <__aeabi_dadd+0xfc>
 800083c:	4652      	mov	r2, sl
 800083e:	08e3      	lsrs	r3, r4, #3
 8000840:	0752      	lsls	r2, r2, #29
 8000842:	4313      	orrs	r3, r2
 8000844:	4652      	mov	r2, sl
 8000846:	0037      	movs	r7, r6
 8000848:	08d1      	lsrs	r1, r2, #3
 800084a:	4a43      	ldr	r2, [pc, #268]	; (8000958 <__aeabi_dadd+0x36c>)
 800084c:	4297      	cmp	r7, r2
 800084e:	d01f      	beq.n	8000890 <__aeabi_dadd+0x2a4>
 8000850:	0309      	lsls	r1, r1, #12
 8000852:	057a      	lsls	r2, r7, #21
 8000854:	0b0c      	lsrs	r4, r1, #12
 8000856:	0d52      	lsrs	r2, r2, #21
 8000858:	e764      	b.n	8000724 <__aeabi_dadd+0x138>
 800085a:	4642      	mov	r2, r8
 800085c:	464c      	mov	r4, r9
 800085e:	4314      	orrs	r4, r2
 8000860:	1e62      	subs	r2, r4, #1
 8000862:	4194      	sbcs	r4, r2
 8000864:	18e4      	adds	r4, r4, r3
 8000866:	429c      	cmp	r4, r3
 8000868:	4192      	sbcs	r2, r2
 800086a:	4252      	negs	r2, r2
 800086c:	4692      	mov	sl, r2
 800086e:	448a      	add	sl, r1
 8000870:	4653      	mov	r3, sl
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	d5df      	bpl.n	8000836 <__aeabi_dadd+0x24a>
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <__aeabi_dadd+0x36c>)
 8000878:	3601      	adds	r6, #1
 800087a:	429e      	cmp	r6, r3
 800087c:	d000      	beq.n	8000880 <__aeabi_dadd+0x294>
 800087e:	e0b3      	b.n	80009e8 <__aeabi_dadd+0x3fc>
 8000880:	0032      	movs	r2, r6
 8000882:	2400      	movs	r4, #0
 8000884:	2300      	movs	r3, #0
 8000886:	e74d      	b.n	8000724 <__aeabi_dadd+0x138>
 8000888:	074a      	lsls	r2, r1, #29
 800088a:	08db      	lsrs	r3, r3, #3
 800088c:	4313      	orrs	r3, r2
 800088e:	08c9      	lsrs	r1, r1, #3
 8000890:	001a      	movs	r2, r3
 8000892:	430a      	orrs	r2, r1
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x2ac>
 8000896:	e200      	b.n	8000c9a <__aeabi_dadd+0x6ae>
 8000898:	2480      	movs	r4, #128	; 0x80
 800089a:	0324      	lsls	r4, r4, #12
 800089c:	430c      	orrs	r4, r1
 800089e:	0324      	lsls	r4, r4, #12
 80008a0:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <__aeabi_dadd+0x36c>)
 80008a2:	0b24      	lsrs	r4, r4, #12
 80008a4:	e73e      	b.n	8000724 <__aeabi_dadd+0x138>
 80008a6:	0020      	movs	r0, r4
 80008a8:	f000 fd4e 	bl	8001348 <__clzsi2>
 80008ac:	0003      	movs	r3, r0
 80008ae:	3318      	adds	r3, #24
 80008b0:	2b1f      	cmp	r3, #31
 80008b2:	dc00      	bgt.n	80008b6 <__aeabi_dadd+0x2ca>
 80008b4:	e6f7      	b.n	80006a6 <__aeabi_dadd+0xba>
 80008b6:	0022      	movs	r2, r4
 80008b8:	3808      	subs	r0, #8
 80008ba:	4082      	lsls	r2, r0
 80008bc:	2400      	movs	r4, #0
 80008be:	42b3      	cmp	r3, r6
 80008c0:	db00      	blt.n	80008c4 <__aeabi_dadd+0x2d8>
 80008c2:	e6fc      	b.n	80006be <__aeabi_dadd+0xd2>
 80008c4:	1af6      	subs	r6, r6, r3
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <__aeabi_dadd+0x370>)
 80008c8:	401a      	ands	r2, r3
 80008ca:	4692      	mov	sl, r2
 80008cc:	e70a      	b.n	80006e4 <__aeabi_dadd+0xf8>
 80008ce:	2f00      	cmp	r7, #0
 80008d0:	d02b      	beq.n	800092a <__aeabi_dadd+0x33e>
 80008d2:	1b97      	subs	r7, r2, r6
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d100      	bne.n	80008da <__aeabi_dadd+0x2ee>
 80008d8:	e0b8      	b.n	8000a4c <__aeabi_dadd+0x460>
 80008da:	4c1f      	ldr	r4, [pc, #124]	; (8000958 <__aeabi_dadd+0x36c>)
 80008dc:	42a2      	cmp	r2, r4
 80008de:	d100      	bne.n	80008e2 <__aeabi_dadd+0x2f6>
 80008e0:	e11c      	b.n	8000b1c <__aeabi_dadd+0x530>
 80008e2:	2480      	movs	r4, #128	; 0x80
 80008e4:	0424      	lsls	r4, r4, #16
 80008e6:	4321      	orrs	r1, r4
 80008e8:	2f38      	cmp	r7, #56	; 0x38
 80008ea:	dd00      	ble.n	80008ee <__aeabi_dadd+0x302>
 80008ec:	e11e      	b.n	8000b2c <__aeabi_dadd+0x540>
 80008ee:	2f1f      	cmp	r7, #31
 80008f0:	dd00      	ble.n	80008f4 <__aeabi_dadd+0x308>
 80008f2:	e19e      	b.n	8000c32 <__aeabi_dadd+0x646>
 80008f4:	2620      	movs	r6, #32
 80008f6:	000c      	movs	r4, r1
 80008f8:	1bf6      	subs	r6, r6, r7
 80008fa:	0018      	movs	r0, r3
 80008fc:	40b3      	lsls	r3, r6
 80008fe:	40b4      	lsls	r4, r6
 8000900:	40f8      	lsrs	r0, r7
 8000902:	1e5e      	subs	r6, r3, #1
 8000904:	41b3      	sbcs	r3, r6
 8000906:	40f9      	lsrs	r1, r7
 8000908:	4304      	orrs	r4, r0
 800090a:	431c      	orrs	r4, r3
 800090c:	4489      	add	r9, r1
 800090e:	4444      	add	r4, r8
 8000910:	4544      	cmp	r4, r8
 8000912:	419b      	sbcs	r3, r3
 8000914:	425b      	negs	r3, r3
 8000916:	444b      	add	r3, r9
 8000918:	469a      	mov	sl, r3
 800091a:	0016      	movs	r6, r2
 800091c:	e7a8      	b.n	8000870 <__aeabi_dadd+0x284>
 800091e:	4642      	mov	r2, r8
 8000920:	464c      	mov	r4, r9
 8000922:	4314      	orrs	r4, r2
 8000924:	1e62      	subs	r2, r4, #1
 8000926:	4194      	sbcs	r4, r2
 8000928:	e6a6      	b.n	8000678 <__aeabi_dadd+0x8c>
 800092a:	4c0d      	ldr	r4, [pc, #52]	; (8000960 <__aeabi_dadd+0x374>)
 800092c:	1c72      	adds	r2, r6, #1
 800092e:	4222      	tst	r2, r4
 8000930:	d000      	beq.n	8000934 <__aeabi_dadd+0x348>
 8000932:	e0a8      	b.n	8000a86 <__aeabi_dadd+0x49a>
 8000934:	000a      	movs	r2, r1
 8000936:	431a      	orrs	r2, r3
 8000938:	2e00      	cmp	r6, #0
 800093a:	d000      	beq.n	800093e <__aeabi_dadd+0x352>
 800093c:	e10a      	b.n	8000b54 <__aeabi_dadd+0x568>
 800093e:	2a00      	cmp	r2, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_dadd+0x358>
 8000942:	e15e      	b.n	8000c02 <__aeabi_dadd+0x616>
 8000944:	464a      	mov	r2, r9
 8000946:	4302      	orrs	r2, r0
 8000948:	d000      	beq.n	800094c <__aeabi_dadd+0x360>
 800094a:	e161      	b.n	8000c10 <__aeabi_dadd+0x624>
 800094c:	074a      	lsls	r2, r1, #29
 800094e:	08db      	lsrs	r3, r3, #3
 8000950:	4313      	orrs	r3, r2
 8000952:	08c9      	lsrs	r1, r1, #3
 8000954:	e77c      	b.n	8000850 <__aeabi_dadd+0x264>
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	000007ff 	.word	0x000007ff
 800095c:	ff7fffff 	.word	0xff7fffff
 8000960:	000007fe 	.word	0x000007fe
 8000964:	4ccf      	ldr	r4, [pc, #828]	; (8000ca4 <__aeabi_dadd+0x6b8>)
 8000966:	42a2      	cmp	r2, r4
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x380>
 800096a:	e0ce      	b.n	8000b0a <__aeabi_dadd+0x51e>
 800096c:	2480      	movs	r4, #128	; 0x80
 800096e:	0424      	lsls	r4, r4, #16
 8000970:	4321      	orrs	r1, r4
 8000972:	2f38      	cmp	r7, #56	; 0x38
 8000974:	dc5b      	bgt.n	8000a2e <__aeabi_dadd+0x442>
 8000976:	2f1f      	cmp	r7, #31
 8000978:	dd00      	ble.n	800097c <__aeabi_dadd+0x390>
 800097a:	e0dc      	b.n	8000b36 <__aeabi_dadd+0x54a>
 800097c:	2520      	movs	r5, #32
 800097e:	000c      	movs	r4, r1
 8000980:	1bed      	subs	r5, r5, r7
 8000982:	001e      	movs	r6, r3
 8000984:	40ab      	lsls	r3, r5
 8000986:	40ac      	lsls	r4, r5
 8000988:	40fe      	lsrs	r6, r7
 800098a:	1e5d      	subs	r5, r3, #1
 800098c:	41ab      	sbcs	r3, r5
 800098e:	4334      	orrs	r4, r6
 8000990:	40f9      	lsrs	r1, r7
 8000992:	431c      	orrs	r4, r3
 8000994:	464b      	mov	r3, r9
 8000996:	1a5b      	subs	r3, r3, r1
 8000998:	4699      	mov	r9, r3
 800099a:	e04c      	b.n	8000a36 <__aeabi_dadd+0x44a>
 800099c:	464a      	mov	r2, r9
 800099e:	1a1c      	subs	r4, r3, r0
 80009a0:	1a88      	subs	r0, r1, r2
 80009a2:	42a3      	cmp	r3, r4
 80009a4:	4192      	sbcs	r2, r2
 80009a6:	4252      	negs	r2, r2
 80009a8:	4692      	mov	sl, r2
 80009aa:	0002      	movs	r2, r0
 80009ac:	4650      	mov	r0, sl
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	4692      	mov	sl, r2
 80009b2:	0212      	lsls	r2, r2, #8
 80009b4:	d478      	bmi.n	8000aa8 <__aeabi_dadd+0x4bc>
 80009b6:	4653      	mov	r3, sl
 80009b8:	4323      	orrs	r3, r4
 80009ba:	d000      	beq.n	80009be <__aeabi_dadd+0x3d2>
 80009bc:	e66a      	b.n	8000694 <__aeabi_dadd+0xa8>
 80009be:	2100      	movs	r1, #0
 80009c0:	2500      	movs	r5, #0
 80009c2:	e745      	b.n	8000850 <__aeabi_dadd+0x264>
 80009c4:	074a      	lsls	r2, r1, #29
 80009c6:	08db      	lsrs	r3, r3, #3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	08c9      	lsrs	r1, r1, #3
 80009cc:	e73d      	b.n	800084a <__aeabi_dadd+0x25e>
 80009ce:	181c      	adds	r4, r3, r0
 80009d0:	429c      	cmp	r4, r3
 80009d2:	419b      	sbcs	r3, r3
 80009d4:	4449      	add	r1, r9
 80009d6:	468a      	mov	sl, r1
 80009d8:	425b      	negs	r3, r3
 80009da:	449a      	add	sl, r3
 80009dc:	4653      	mov	r3, sl
 80009de:	2601      	movs	r6, #1
 80009e0:	021b      	lsls	r3, r3, #8
 80009e2:	d400      	bmi.n	80009e6 <__aeabi_dadd+0x3fa>
 80009e4:	e727      	b.n	8000836 <__aeabi_dadd+0x24a>
 80009e6:	2602      	movs	r6, #2
 80009e8:	4652      	mov	r2, sl
 80009ea:	4baf      	ldr	r3, [pc, #700]	; (8000ca8 <__aeabi_dadd+0x6bc>)
 80009ec:	2101      	movs	r1, #1
 80009ee:	401a      	ands	r2, r3
 80009f0:	0013      	movs	r3, r2
 80009f2:	4021      	ands	r1, r4
 80009f4:	0862      	lsrs	r2, r4, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	07dc      	lsls	r4, r3, #31
 80009fa:	085b      	lsrs	r3, r3, #1
 80009fc:	469a      	mov	sl, r3
 80009fe:	4314      	orrs	r4, r2
 8000a00:	e670      	b.n	80006e4 <__aeabi_dadd+0xf8>
 8000a02:	003a      	movs	r2, r7
 8000a04:	464c      	mov	r4, r9
 8000a06:	3a20      	subs	r2, #32
 8000a08:	40d4      	lsrs	r4, r2
 8000a0a:	46a4      	mov	ip, r4
 8000a0c:	2f20      	cmp	r7, #32
 8000a0e:	d007      	beq.n	8000a20 <__aeabi_dadd+0x434>
 8000a10:	2240      	movs	r2, #64	; 0x40
 8000a12:	4648      	mov	r0, r9
 8000a14:	1bd2      	subs	r2, r2, r7
 8000a16:	4090      	lsls	r0, r2
 8000a18:	0002      	movs	r2, r0
 8000a1a:	4640      	mov	r0, r8
 8000a1c:	4310      	orrs	r0, r2
 8000a1e:	4680      	mov	r8, r0
 8000a20:	4640      	mov	r0, r8
 8000a22:	1e42      	subs	r2, r0, #1
 8000a24:	4190      	sbcs	r0, r2
 8000a26:	4662      	mov	r2, ip
 8000a28:	0004      	movs	r4, r0
 8000a2a:	4314      	orrs	r4, r2
 8000a2c:	e624      	b.n	8000678 <__aeabi_dadd+0x8c>
 8000a2e:	4319      	orrs	r1, r3
 8000a30:	000c      	movs	r4, r1
 8000a32:	1e63      	subs	r3, r4, #1
 8000a34:	419c      	sbcs	r4, r3
 8000a36:	4643      	mov	r3, r8
 8000a38:	1b1c      	subs	r4, r3, r4
 8000a3a:	45a0      	cmp	r8, r4
 8000a3c:	419b      	sbcs	r3, r3
 8000a3e:	4649      	mov	r1, r9
 8000a40:	425b      	negs	r3, r3
 8000a42:	1acb      	subs	r3, r1, r3
 8000a44:	469a      	mov	sl, r3
 8000a46:	4665      	mov	r5, ip
 8000a48:	0016      	movs	r6, r2
 8000a4a:	e61b      	b.n	8000684 <__aeabi_dadd+0x98>
 8000a4c:	000c      	movs	r4, r1
 8000a4e:	431c      	orrs	r4, r3
 8000a50:	d100      	bne.n	8000a54 <__aeabi_dadd+0x468>
 8000a52:	e0c7      	b.n	8000be4 <__aeabi_dadd+0x5f8>
 8000a54:	1e7c      	subs	r4, r7, #1
 8000a56:	2f01      	cmp	r7, #1
 8000a58:	d100      	bne.n	8000a5c <__aeabi_dadd+0x470>
 8000a5a:	e0f9      	b.n	8000c50 <__aeabi_dadd+0x664>
 8000a5c:	4e91      	ldr	r6, [pc, #580]	; (8000ca4 <__aeabi_dadd+0x6b8>)
 8000a5e:	42b7      	cmp	r7, r6
 8000a60:	d05c      	beq.n	8000b1c <__aeabi_dadd+0x530>
 8000a62:	0027      	movs	r7, r4
 8000a64:	e740      	b.n	80008e8 <__aeabi_dadd+0x2fc>
 8000a66:	2220      	movs	r2, #32
 8000a68:	464c      	mov	r4, r9
 8000a6a:	4640      	mov	r0, r8
 8000a6c:	1bd2      	subs	r2, r2, r7
 8000a6e:	4094      	lsls	r4, r2
 8000a70:	40f8      	lsrs	r0, r7
 8000a72:	4304      	orrs	r4, r0
 8000a74:	4640      	mov	r0, r8
 8000a76:	4090      	lsls	r0, r2
 8000a78:	1e42      	subs	r2, r0, #1
 8000a7a:	4190      	sbcs	r0, r2
 8000a7c:	464a      	mov	r2, r9
 8000a7e:	40fa      	lsrs	r2, r7
 8000a80:	4304      	orrs	r4, r0
 8000a82:	1889      	adds	r1, r1, r2
 8000a84:	e6ee      	b.n	8000864 <__aeabi_dadd+0x278>
 8000a86:	4c87      	ldr	r4, [pc, #540]	; (8000ca4 <__aeabi_dadd+0x6b8>)
 8000a88:	42a2      	cmp	r2, r4
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x4a2>
 8000a8c:	e6f9      	b.n	8000882 <__aeabi_dadd+0x296>
 8000a8e:	1818      	adds	r0, r3, r0
 8000a90:	4298      	cmp	r0, r3
 8000a92:	419b      	sbcs	r3, r3
 8000a94:	4449      	add	r1, r9
 8000a96:	425b      	negs	r3, r3
 8000a98:	18cb      	adds	r3, r1, r3
 8000a9a:	07dc      	lsls	r4, r3, #31
 8000a9c:	0840      	lsrs	r0, r0, #1
 8000a9e:	085b      	lsrs	r3, r3, #1
 8000aa0:	469a      	mov	sl, r3
 8000aa2:	0016      	movs	r6, r2
 8000aa4:	4304      	orrs	r4, r0
 8000aa6:	e6c6      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000aa8:	4642      	mov	r2, r8
 8000aaa:	1ad4      	subs	r4, r2, r3
 8000aac:	45a0      	cmp	r8, r4
 8000aae:	4180      	sbcs	r0, r0
 8000ab0:	464b      	mov	r3, r9
 8000ab2:	4240      	negs	r0, r0
 8000ab4:	1a59      	subs	r1, r3, r1
 8000ab6:	1a0b      	subs	r3, r1, r0
 8000ab8:	469a      	mov	sl, r3
 8000aba:	4665      	mov	r5, ip
 8000abc:	e5ea      	b.n	8000694 <__aeabi_dadd+0xa8>
 8000abe:	464b      	mov	r3, r9
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08c0      	lsrs	r0, r0, #3
 8000ac4:	075b      	lsls	r3, r3, #29
 8000ac6:	4665      	mov	r5, ip
 8000ac8:	4303      	orrs	r3, r0
 8000aca:	08d1      	lsrs	r1, r2, #3
 8000acc:	e6bd      	b.n	800084a <__aeabi_dadd+0x25e>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_dadd+0x4e8>
 8000ad2:	e08e      	b.n	8000bf2 <__aeabi_dadd+0x606>
 8000ad4:	464b      	mov	r3, r9
 8000ad6:	4303      	orrs	r3, r0
 8000ad8:	d117      	bne.n	8000b0a <__aeabi_dadd+0x51e>
 8000ada:	2180      	movs	r1, #128	; 0x80
 8000adc:	2500      	movs	r5, #0
 8000ade:	0309      	lsls	r1, r1, #12
 8000ae0:	e6da      	b.n	8000898 <__aeabi_dadd+0x2ac>
 8000ae2:	074a      	lsls	r2, r1, #29
 8000ae4:	08db      	lsrs	r3, r3, #3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	08c9      	lsrs	r1, r1, #3
 8000aea:	e6d1      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000aec:	1a1c      	subs	r4, r3, r0
 8000aee:	464a      	mov	r2, r9
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	419b      	sbcs	r3, r3
 8000af4:	1a89      	subs	r1, r1, r2
 8000af6:	425b      	negs	r3, r3
 8000af8:	1acb      	subs	r3, r1, r3
 8000afa:	469a      	mov	sl, r3
 8000afc:	2601      	movs	r6, #1
 8000afe:	e5c1      	b.n	8000684 <__aeabi_dadd+0x98>
 8000b00:	074a      	lsls	r2, r1, #29
 8000b02:	08db      	lsrs	r3, r3, #3
 8000b04:	4313      	orrs	r3, r2
 8000b06:	08c9      	lsrs	r1, r1, #3
 8000b08:	e69f      	b.n	800084a <__aeabi_dadd+0x25e>
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	08d8      	lsrs	r0, r3, #3
 8000b0e:	464b      	mov	r3, r9
 8000b10:	464a      	mov	r2, r9
 8000b12:	075b      	lsls	r3, r3, #29
 8000b14:	4665      	mov	r5, ip
 8000b16:	4303      	orrs	r3, r0
 8000b18:	08d1      	lsrs	r1, r2, #3
 8000b1a:	e6b9      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000b1c:	4643      	mov	r3, r8
 8000b1e:	08d8      	lsrs	r0, r3, #3
 8000b20:	464b      	mov	r3, r9
 8000b22:	464a      	mov	r2, r9
 8000b24:	075b      	lsls	r3, r3, #29
 8000b26:	4303      	orrs	r3, r0
 8000b28:	08d1      	lsrs	r1, r2, #3
 8000b2a:	e6b1      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000b2c:	4319      	orrs	r1, r3
 8000b2e:	000c      	movs	r4, r1
 8000b30:	1e63      	subs	r3, r4, #1
 8000b32:	419c      	sbcs	r4, r3
 8000b34:	e6eb      	b.n	800090e <__aeabi_dadd+0x322>
 8000b36:	003c      	movs	r4, r7
 8000b38:	000d      	movs	r5, r1
 8000b3a:	3c20      	subs	r4, #32
 8000b3c:	40e5      	lsrs	r5, r4
 8000b3e:	2f20      	cmp	r7, #32
 8000b40:	d003      	beq.n	8000b4a <__aeabi_dadd+0x55e>
 8000b42:	2440      	movs	r4, #64	; 0x40
 8000b44:	1be4      	subs	r4, r4, r7
 8000b46:	40a1      	lsls	r1, r4
 8000b48:	430b      	orrs	r3, r1
 8000b4a:	001c      	movs	r4, r3
 8000b4c:	1e63      	subs	r3, r4, #1
 8000b4e:	419c      	sbcs	r4, r3
 8000b50:	432c      	orrs	r4, r5
 8000b52:	e770      	b.n	8000a36 <__aeabi_dadd+0x44a>
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d0e1      	beq.n	8000b1c <__aeabi_dadd+0x530>
 8000b58:	464a      	mov	r2, r9
 8000b5a:	4302      	orrs	r2, r0
 8000b5c:	d0c1      	beq.n	8000ae2 <__aeabi_dadd+0x4f6>
 8000b5e:	074a      	lsls	r2, r1, #29
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	4313      	orrs	r3, r2
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	08c9      	lsrs	r1, r1, #3
 8000b68:	0312      	lsls	r2, r2, #12
 8000b6a:	4211      	tst	r1, r2
 8000b6c:	d008      	beq.n	8000b80 <__aeabi_dadd+0x594>
 8000b6e:	4648      	mov	r0, r9
 8000b70:	08c4      	lsrs	r4, r0, #3
 8000b72:	4214      	tst	r4, r2
 8000b74:	d104      	bne.n	8000b80 <__aeabi_dadd+0x594>
 8000b76:	4643      	mov	r3, r8
 8000b78:	0021      	movs	r1, r4
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	0742      	lsls	r2, r0, #29
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	0f5a      	lsrs	r2, r3, #29
 8000b82:	00db      	lsls	r3, r3, #3
 8000b84:	0752      	lsls	r2, r2, #29
 8000b86:	08db      	lsrs	r3, r3, #3
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	e681      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000b8c:	464b      	mov	r3, r9
 8000b8e:	4303      	orrs	r3, r0
 8000b90:	d100      	bne.n	8000b94 <__aeabi_dadd+0x5a8>
 8000b92:	e714      	b.n	80009be <__aeabi_dadd+0x3d2>
 8000b94:	464b      	mov	r3, r9
 8000b96:	464a      	mov	r2, r9
 8000b98:	08c0      	lsrs	r0, r0, #3
 8000b9a:	075b      	lsls	r3, r3, #29
 8000b9c:	4665      	mov	r5, ip
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	08d1      	lsrs	r1, r2, #3
 8000ba2:	e655      	b.n	8000850 <__aeabi_dadd+0x264>
 8000ba4:	1ac4      	subs	r4, r0, r3
 8000ba6:	45a0      	cmp	r8, r4
 8000ba8:	4180      	sbcs	r0, r0
 8000baa:	464b      	mov	r3, r9
 8000bac:	4240      	negs	r0, r0
 8000bae:	1a59      	subs	r1, r3, r1
 8000bb0:	1a0b      	subs	r3, r1, r0
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	4665      	mov	r5, ip
 8000bb6:	2601      	movs	r6, #1
 8000bb8:	e564      	b.n	8000684 <__aeabi_dadd+0x98>
 8000bba:	1a1c      	subs	r4, r3, r0
 8000bbc:	464a      	mov	r2, r9
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	4180      	sbcs	r0, r0
 8000bc2:	1a8a      	subs	r2, r1, r2
 8000bc4:	4240      	negs	r0, r0
 8000bc6:	1a12      	subs	r2, r2, r0
 8000bc8:	4692      	mov	sl, r2
 8000bca:	0212      	lsls	r2, r2, #8
 8000bcc:	d549      	bpl.n	8000c62 <__aeabi_dadd+0x676>
 8000bce:	4642      	mov	r2, r8
 8000bd0:	1ad4      	subs	r4, r2, r3
 8000bd2:	45a0      	cmp	r8, r4
 8000bd4:	4180      	sbcs	r0, r0
 8000bd6:	464b      	mov	r3, r9
 8000bd8:	4240      	negs	r0, r0
 8000bda:	1a59      	subs	r1, r3, r1
 8000bdc:	1a0b      	subs	r3, r1, r0
 8000bde:	469a      	mov	sl, r3
 8000be0:	4665      	mov	r5, ip
 8000be2:	e57f      	b.n	80006e4 <__aeabi_dadd+0xf8>
 8000be4:	464b      	mov	r3, r9
 8000be6:	464a      	mov	r2, r9
 8000be8:	08c0      	lsrs	r0, r0, #3
 8000bea:	075b      	lsls	r3, r3, #29
 8000bec:	4303      	orrs	r3, r0
 8000bee:	08d1      	lsrs	r1, r2, #3
 8000bf0:	e62b      	b.n	800084a <__aeabi_dadd+0x25e>
 8000bf2:	464a      	mov	r2, r9
 8000bf4:	08db      	lsrs	r3, r3, #3
 8000bf6:	4302      	orrs	r2, r0
 8000bf8:	d138      	bne.n	8000c6c <__aeabi_dadd+0x680>
 8000bfa:	074a      	lsls	r2, r1, #29
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	08c9      	lsrs	r1, r1, #3
 8000c00:	e646      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000c02:	464b      	mov	r3, r9
 8000c04:	464a      	mov	r2, r9
 8000c06:	08c0      	lsrs	r0, r0, #3
 8000c08:	075b      	lsls	r3, r3, #29
 8000c0a:	4303      	orrs	r3, r0
 8000c0c:	08d1      	lsrs	r1, r2, #3
 8000c0e:	e61f      	b.n	8000850 <__aeabi_dadd+0x264>
 8000c10:	181c      	adds	r4, r3, r0
 8000c12:	429c      	cmp	r4, r3
 8000c14:	419b      	sbcs	r3, r3
 8000c16:	4449      	add	r1, r9
 8000c18:	468a      	mov	sl, r1
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	449a      	add	sl, r3
 8000c1e:	4653      	mov	r3, sl
 8000c20:	021b      	lsls	r3, r3, #8
 8000c22:	d400      	bmi.n	8000c26 <__aeabi_dadd+0x63a>
 8000c24:	e607      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000c26:	4652      	mov	r2, sl
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <__aeabi_dadd+0x6bc>)
 8000c2a:	2601      	movs	r6, #1
 8000c2c:	401a      	ands	r2, r3
 8000c2e:	4692      	mov	sl, r2
 8000c30:	e601      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000c32:	003c      	movs	r4, r7
 8000c34:	000e      	movs	r6, r1
 8000c36:	3c20      	subs	r4, #32
 8000c38:	40e6      	lsrs	r6, r4
 8000c3a:	2f20      	cmp	r7, #32
 8000c3c:	d003      	beq.n	8000c46 <__aeabi_dadd+0x65a>
 8000c3e:	2440      	movs	r4, #64	; 0x40
 8000c40:	1be4      	subs	r4, r4, r7
 8000c42:	40a1      	lsls	r1, r4
 8000c44:	430b      	orrs	r3, r1
 8000c46:	001c      	movs	r4, r3
 8000c48:	1e63      	subs	r3, r4, #1
 8000c4a:	419c      	sbcs	r4, r3
 8000c4c:	4334      	orrs	r4, r6
 8000c4e:	e65e      	b.n	800090e <__aeabi_dadd+0x322>
 8000c50:	4443      	add	r3, r8
 8000c52:	4283      	cmp	r3, r0
 8000c54:	4180      	sbcs	r0, r0
 8000c56:	4449      	add	r1, r9
 8000c58:	468a      	mov	sl, r1
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	001c      	movs	r4, r3
 8000c5e:	4482      	add	sl, r0
 8000c60:	e6bc      	b.n	80009dc <__aeabi_dadd+0x3f0>
 8000c62:	4653      	mov	r3, sl
 8000c64:	4323      	orrs	r3, r4
 8000c66:	d100      	bne.n	8000c6a <__aeabi_dadd+0x67e>
 8000c68:	e6a9      	b.n	80009be <__aeabi_dadd+0x3d2>
 8000c6a:	e5e4      	b.n	8000836 <__aeabi_dadd+0x24a>
 8000c6c:	074a      	lsls	r2, r1, #29
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	08c9      	lsrs	r1, r1, #3
 8000c74:	0312      	lsls	r2, r2, #12
 8000c76:	4211      	tst	r1, r2
 8000c78:	d009      	beq.n	8000c8e <__aeabi_dadd+0x6a2>
 8000c7a:	4648      	mov	r0, r9
 8000c7c:	08c4      	lsrs	r4, r0, #3
 8000c7e:	4214      	tst	r4, r2
 8000c80:	d105      	bne.n	8000c8e <__aeabi_dadd+0x6a2>
 8000c82:	4643      	mov	r3, r8
 8000c84:	4665      	mov	r5, ip
 8000c86:	0021      	movs	r1, r4
 8000c88:	08db      	lsrs	r3, r3, #3
 8000c8a:	0742      	lsls	r2, r0, #29
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	0f5a      	lsrs	r2, r3, #29
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	08db      	lsrs	r3, r3, #3
 8000c94:	0752      	lsls	r2, r2, #29
 8000c96:	4313      	orrs	r3, r2
 8000c98:	e5fa      	b.n	8000890 <__aeabi_dadd+0x2a4>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	4a01      	ldr	r2, [pc, #4]	; (8000ca4 <__aeabi_dadd+0x6b8>)
 8000c9e:	001c      	movs	r4, r3
 8000ca0:	e540      	b.n	8000724 <__aeabi_dadd+0x138>
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	000007ff 	.word	0x000007ff
 8000ca8:	ff7fffff 	.word	0xff7fffff

08000cac <__aeabi_dmul>:
 8000cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cae:	4645      	mov	r5, r8
 8000cb0:	46de      	mov	lr, fp
 8000cb2:	4657      	mov	r7, sl
 8000cb4:	464e      	mov	r6, r9
 8000cb6:	b5e0      	push	{r5, r6, r7, lr}
 8000cb8:	001f      	movs	r7, r3
 8000cba:	030b      	lsls	r3, r1, #12
 8000cbc:	0b1b      	lsrs	r3, r3, #12
 8000cbe:	469b      	mov	fp, r3
 8000cc0:	004d      	lsls	r5, r1, #1
 8000cc2:	0fcb      	lsrs	r3, r1, #31
 8000cc4:	0004      	movs	r4, r0
 8000cc6:	4691      	mov	r9, r2
 8000cc8:	4698      	mov	r8, r3
 8000cca:	b087      	sub	sp, #28
 8000ccc:	0d6d      	lsrs	r5, r5, #21
 8000cce:	d100      	bne.n	8000cd2 <__aeabi_dmul+0x26>
 8000cd0:	e1cd      	b.n	800106e <__aeabi_dmul+0x3c2>
 8000cd2:	4bce      	ldr	r3, [pc, #824]	; (800100c <__aeabi_dmul+0x360>)
 8000cd4:	429d      	cmp	r5, r3
 8000cd6:	d100      	bne.n	8000cda <__aeabi_dmul+0x2e>
 8000cd8:	e1e9      	b.n	80010ae <__aeabi_dmul+0x402>
 8000cda:	465a      	mov	r2, fp
 8000cdc:	0f43      	lsrs	r3, r0, #29
 8000cde:	00d2      	lsls	r2, r2, #3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	0412      	lsls	r2, r2, #16
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	00c3      	lsls	r3, r0, #3
 8000cea:	469a      	mov	sl, r3
 8000cec:	4bc8      	ldr	r3, [pc, #800]	; (8001010 <__aeabi_dmul+0x364>)
 8000cee:	4693      	mov	fp, r2
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2600      	movs	r6, #0
 8000cf6:	4465      	add	r5, ip
 8000cf8:	9300      	str	r3, [sp, #0]
 8000cfa:	033c      	lsls	r4, r7, #12
 8000cfc:	007b      	lsls	r3, r7, #1
 8000cfe:	4648      	mov	r0, r9
 8000d00:	0b24      	lsrs	r4, r4, #12
 8000d02:	0d5b      	lsrs	r3, r3, #21
 8000d04:	0fff      	lsrs	r7, r7, #31
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dmul+0x60>
 8000d0a:	e189      	b.n	8001020 <__aeabi_dmul+0x374>
 8000d0c:	4abf      	ldr	r2, [pc, #764]	; (800100c <__aeabi_dmul+0x360>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d019      	beq.n	8000d46 <__aeabi_dmul+0x9a>
 8000d12:	0f42      	lsrs	r2, r0, #29
 8000d14:	00e4      	lsls	r4, r4, #3
 8000d16:	4322      	orrs	r2, r4
 8000d18:	2480      	movs	r4, #128	; 0x80
 8000d1a:	0424      	lsls	r4, r4, #16
 8000d1c:	4314      	orrs	r4, r2
 8000d1e:	4abc      	ldr	r2, [pc, #752]	; (8001010 <__aeabi_dmul+0x364>)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4694      	mov	ip, r2
 8000d24:	4642      	mov	r2, r8
 8000d26:	4463      	add	r3, ip
 8000d28:	195b      	adds	r3, r3, r5
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	9b01      	ldr	r3, [sp, #4]
 8000d2e:	407a      	eors	r2, r7
 8000d30:	3301      	adds	r3, #1
 8000d32:	00c0      	lsls	r0, r0, #3
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	2e0a      	cmp	r6, #10
 8000d3a:	dd1c      	ble.n	8000d76 <__aeabi_dmul+0xca>
 8000d3c:	003a      	movs	r2, r7
 8000d3e:	2e0b      	cmp	r6, #11
 8000d40:	d05e      	beq.n	8000e00 <__aeabi_dmul+0x154>
 8000d42:	4647      	mov	r7, r8
 8000d44:	e056      	b.n	8000df4 <__aeabi_dmul+0x148>
 8000d46:	4649      	mov	r1, r9
 8000d48:	4bb0      	ldr	r3, [pc, #704]	; (800100c <__aeabi_dmul+0x360>)
 8000d4a:	4321      	orrs	r1, r4
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	2900      	cmp	r1, #0
 8000d52:	d12a      	bne.n	8000daa <__aeabi_dmul+0xfe>
 8000d54:	2080      	movs	r0, #128	; 0x80
 8000d56:	2202      	movs	r2, #2
 8000d58:	0100      	lsls	r0, r0, #4
 8000d5a:	002b      	movs	r3, r5
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4316      	orrs	r6, r2
 8000d60:	4642      	mov	r2, r8
 8000d62:	4463      	add	r3, ip
 8000d64:	407a      	eors	r2, r7
 8000d66:	b2d2      	uxtb	r2, r2
 8000d68:	9302      	str	r3, [sp, #8]
 8000d6a:	2e0a      	cmp	r6, #10
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_dmul+0xc4>
 8000d6e:	e231      	b.n	80011d4 <__aeabi_dmul+0x528>
 8000d70:	2000      	movs	r0, #0
 8000d72:	2400      	movs	r4, #0
 8000d74:	2102      	movs	r1, #2
 8000d76:	2e02      	cmp	r6, #2
 8000d78:	dc26      	bgt.n	8000dc8 <__aeabi_dmul+0x11c>
 8000d7a:	3e01      	subs	r6, #1
 8000d7c:	2e01      	cmp	r6, #1
 8000d7e:	d852      	bhi.n	8000e26 <__aeabi_dmul+0x17a>
 8000d80:	2902      	cmp	r1, #2
 8000d82:	d04c      	beq.n	8000e1e <__aeabi_dmul+0x172>
 8000d84:	2901      	cmp	r1, #1
 8000d86:	d000      	beq.n	8000d8a <__aeabi_dmul+0xde>
 8000d88:	e118      	b.n	8000fbc <__aeabi_dmul+0x310>
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2400      	movs	r4, #0
 8000d8e:	2500      	movs	r5, #0
 8000d90:	051b      	lsls	r3, r3, #20
 8000d92:	4323      	orrs	r3, r4
 8000d94:	07d2      	lsls	r2, r2, #31
 8000d96:	4313      	orrs	r3, r2
 8000d98:	0028      	movs	r0, r5
 8000d9a:	0019      	movs	r1, r3
 8000d9c:	b007      	add	sp, #28
 8000d9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000da0:	46bb      	mov	fp, r7
 8000da2:	46b2      	mov	sl, r6
 8000da4:	46a9      	mov	r9, r5
 8000da6:	46a0      	mov	r8, r4
 8000da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000daa:	2180      	movs	r1, #128	; 0x80
 8000dac:	2203      	movs	r2, #3
 8000dae:	0109      	lsls	r1, r1, #4
 8000db0:	002b      	movs	r3, r5
 8000db2:	468c      	mov	ip, r1
 8000db4:	4316      	orrs	r6, r2
 8000db6:	4642      	mov	r2, r8
 8000db8:	4463      	add	r3, ip
 8000dba:	407a      	eors	r2, r7
 8000dbc:	b2d2      	uxtb	r2, r2
 8000dbe:	9302      	str	r3, [sp, #8]
 8000dc0:	2e0a      	cmp	r6, #10
 8000dc2:	dd00      	ble.n	8000dc6 <__aeabi_dmul+0x11a>
 8000dc4:	e228      	b.n	8001218 <__aeabi_dmul+0x56c>
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	2501      	movs	r5, #1
 8000dca:	40b5      	lsls	r5, r6
 8000dcc:	46ac      	mov	ip, r5
 8000dce:	26a6      	movs	r6, #166	; 0xa6
 8000dd0:	4663      	mov	r3, ip
 8000dd2:	00f6      	lsls	r6, r6, #3
 8000dd4:	4035      	ands	r5, r6
 8000dd6:	4233      	tst	r3, r6
 8000dd8:	d10b      	bne.n	8000df2 <__aeabi_dmul+0x146>
 8000dda:	2690      	movs	r6, #144	; 0x90
 8000ddc:	00b6      	lsls	r6, r6, #2
 8000dde:	4233      	tst	r3, r6
 8000de0:	d118      	bne.n	8000e14 <__aeabi_dmul+0x168>
 8000de2:	3eb9      	subs	r6, #185	; 0xb9
 8000de4:	3eff      	subs	r6, #255	; 0xff
 8000de6:	421e      	tst	r6, r3
 8000de8:	d01d      	beq.n	8000e26 <__aeabi_dmul+0x17a>
 8000dea:	46a3      	mov	fp, r4
 8000dec:	4682      	mov	sl, r0
 8000dee:	9100      	str	r1, [sp, #0]
 8000df0:	e000      	b.n	8000df4 <__aeabi_dmul+0x148>
 8000df2:	0017      	movs	r7, r2
 8000df4:	9900      	ldr	r1, [sp, #0]
 8000df6:	003a      	movs	r2, r7
 8000df8:	2902      	cmp	r1, #2
 8000dfa:	d010      	beq.n	8000e1e <__aeabi_dmul+0x172>
 8000dfc:	465c      	mov	r4, fp
 8000dfe:	4650      	mov	r0, sl
 8000e00:	2903      	cmp	r1, #3
 8000e02:	d1bf      	bne.n	8000d84 <__aeabi_dmul+0xd8>
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	031b      	lsls	r3, r3, #12
 8000e08:	431c      	orrs	r4, r3
 8000e0a:	0324      	lsls	r4, r4, #12
 8000e0c:	0005      	movs	r5, r0
 8000e0e:	4b7f      	ldr	r3, [pc, #508]	; (800100c <__aeabi_dmul+0x360>)
 8000e10:	0b24      	lsrs	r4, r4, #12
 8000e12:	e7bd      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8000e14:	2480      	movs	r4, #128	; 0x80
 8000e16:	2200      	movs	r2, #0
 8000e18:	4b7c      	ldr	r3, [pc, #496]	; (800100c <__aeabi_dmul+0x360>)
 8000e1a:	0324      	lsls	r4, r4, #12
 8000e1c:	e7b8      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8000e1e:	2400      	movs	r4, #0
 8000e20:	2500      	movs	r5, #0
 8000e22:	4b7a      	ldr	r3, [pc, #488]	; (800100c <__aeabi_dmul+0x360>)
 8000e24:	e7b4      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8000e26:	4653      	mov	r3, sl
 8000e28:	041e      	lsls	r6, r3, #16
 8000e2a:	0c36      	lsrs	r6, r6, #16
 8000e2c:	0c1f      	lsrs	r7, r3, #16
 8000e2e:	0033      	movs	r3, r6
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	0400      	lsls	r0, r0, #16
 8000e34:	0c00      	lsrs	r0, r0, #16
 8000e36:	4343      	muls	r3, r0
 8000e38:	4698      	mov	r8, r3
 8000e3a:	0003      	movs	r3, r0
 8000e3c:	437b      	muls	r3, r7
 8000e3e:	4699      	mov	r9, r3
 8000e40:	0033      	movs	r3, r6
 8000e42:	434b      	muls	r3, r1
 8000e44:	469c      	mov	ip, r3
 8000e46:	4643      	mov	r3, r8
 8000e48:	000d      	movs	r5, r1
 8000e4a:	0c1b      	lsrs	r3, r3, #16
 8000e4c:	469a      	mov	sl, r3
 8000e4e:	437d      	muls	r5, r7
 8000e50:	44cc      	add	ip, r9
 8000e52:	44d4      	add	ip, sl
 8000e54:	9500      	str	r5, [sp, #0]
 8000e56:	45e1      	cmp	r9, ip
 8000e58:	d904      	bls.n	8000e64 <__aeabi_dmul+0x1b8>
 8000e5a:	2380      	movs	r3, #128	; 0x80
 8000e5c:	025b      	lsls	r3, r3, #9
 8000e5e:	4699      	mov	r9, r3
 8000e60:	444d      	add	r5, r9
 8000e62:	9500      	str	r5, [sp, #0]
 8000e64:	4663      	mov	r3, ip
 8000e66:	0c1b      	lsrs	r3, r3, #16
 8000e68:	001d      	movs	r5, r3
 8000e6a:	4663      	mov	r3, ip
 8000e6c:	041b      	lsls	r3, r3, #16
 8000e6e:	469c      	mov	ip, r3
 8000e70:	4643      	mov	r3, r8
 8000e72:	041b      	lsls	r3, r3, #16
 8000e74:	0c1b      	lsrs	r3, r3, #16
 8000e76:	4698      	mov	r8, r3
 8000e78:	4663      	mov	r3, ip
 8000e7a:	4443      	add	r3, r8
 8000e7c:	9303      	str	r3, [sp, #12]
 8000e7e:	0c23      	lsrs	r3, r4, #16
 8000e80:	4698      	mov	r8, r3
 8000e82:	0033      	movs	r3, r6
 8000e84:	0424      	lsls	r4, r4, #16
 8000e86:	0c24      	lsrs	r4, r4, #16
 8000e88:	4363      	muls	r3, r4
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	0023      	movs	r3, r4
 8000e8e:	437b      	muls	r3, r7
 8000e90:	4699      	mov	r9, r3
 8000e92:	4643      	mov	r3, r8
 8000e94:	435e      	muls	r6, r3
 8000e96:	435f      	muls	r7, r3
 8000e98:	444e      	add	r6, r9
 8000e9a:	4663      	mov	r3, ip
 8000e9c:	46b2      	mov	sl, r6
 8000e9e:	0c1e      	lsrs	r6, r3, #16
 8000ea0:	4456      	add	r6, sl
 8000ea2:	45b1      	cmp	r9, r6
 8000ea4:	d903      	bls.n	8000eae <__aeabi_dmul+0x202>
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	025b      	lsls	r3, r3, #9
 8000eaa:	4699      	mov	r9, r3
 8000eac:	444f      	add	r7, r9
 8000eae:	0c33      	lsrs	r3, r6, #16
 8000eb0:	4699      	mov	r9, r3
 8000eb2:	003b      	movs	r3, r7
 8000eb4:	444b      	add	r3, r9
 8000eb6:	9305      	str	r3, [sp, #20]
 8000eb8:	4663      	mov	r3, ip
 8000eba:	46ac      	mov	ip, r5
 8000ebc:	041f      	lsls	r7, r3, #16
 8000ebe:	0c3f      	lsrs	r7, r7, #16
 8000ec0:	0436      	lsls	r6, r6, #16
 8000ec2:	19f6      	adds	r6, r6, r7
 8000ec4:	44b4      	add	ip, r6
 8000ec6:	4663      	mov	r3, ip
 8000ec8:	9304      	str	r3, [sp, #16]
 8000eca:	465b      	mov	r3, fp
 8000ecc:	0c1b      	lsrs	r3, r3, #16
 8000ece:	469c      	mov	ip, r3
 8000ed0:	465b      	mov	r3, fp
 8000ed2:	041f      	lsls	r7, r3, #16
 8000ed4:	0c3f      	lsrs	r7, r7, #16
 8000ed6:	003b      	movs	r3, r7
 8000ed8:	4343      	muls	r3, r0
 8000eda:	4699      	mov	r9, r3
 8000edc:	4663      	mov	r3, ip
 8000ede:	4343      	muls	r3, r0
 8000ee0:	469a      	mov	sl, r3
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	4660      	mov	r0, ip
 8000ee6:	0c1b      	lsrs	r3, r3, #16
 8000ee8:	469b      	mov	fp, r3
 8000eea:	4348      	muls	r0, r1
 8000eec:	4379      	muls	r1, r7
 8000eee:	4451      	add	r1, sl
 8000ef0:	4459      	add	r1, fp
 8000ef2:	458a      	cmp	sl, r1
 8000ef4:	d903      	bls.n	8000efe <__aeabi_dmul+0x252>
 8000ef6:	2380      	movs	r3, #128	; 0x80
 8000ef8:	025b      	lsls	r3, r3, #9
 8000efa:	469a      	mov	sl, r3
 8000efc:	4450      	add	r0, sl
 8000efe:	0c0b      	lsrs	r3, r1, #16
 8000f00:	469a      	mov	sl, r3
 8000f02:	464b      	mov	r3, r9
 8000f04:	041b      	lsls	r3, r3, #16
 8000f06:	0c1b      	lsrs	r3, r3, #16
 8000f08:	4699      	mov	r9, r3
 8000f0a:	003b      	movs	r3, r7
 8000f0c:	4363      	muls	r3, r4
 8000f0e:	0409      	lsls	r1, r1, #16
 8000f10:	4645      	mov	r5, r8
 8000f12:	4449      	add	r1, r9
 8000f14:	4699      	mov	r9, r3
 8000f16:	4663      	mov	r3, ip
 8000f18:	435c      	muls	r4, r3
 8000f1a:	436b      	muls	r3, r5
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	464b      	mov	r3, r9
 8000f20:	0c1b      	lsrs	r3, r3, #16
 8000f22:	4698      	mov	r8, r3
 8000f24:	436f      	muls	r7, r5
 8000f26:	193f      	adds	r7, r7, r4
 8000f28:	4447      	add	r7, r8
 8000f2a:	4450      	add	r0, sl
 8000f2c:	42bc      	cmp	r4, r7
 8000f2e:	d903      	bls.n	8000f38 <__aeabi_dmul+0x28c>
 8000f30:	2380      	movs	r3, #128	; 0x80
 8000f32:	025b      	lsls	r3, r3, #9
 8000f34:	4698      	mov	r8, r3
 8000f36:	44c4      	add	ip, r8
 8000f38:	9b04      	ldr	r3, [sp, #16]
 8000f3a:	9d00      	ldr	r5, [sp, #0]
 8000f3c:	4698      	mov	r8, r3
 8000f3e:	4445      	add	r5, r8
 8000f40:	42b5      	cmp	r5, r6
 8000f42:	41b6      	sbcs	r6, r6
 8000f44:	4273      	negs	r3, r6
 8000f46:	4698      	mov	r8, r3
 8000f48:	464b      	mov	r3, r9
 8000f4a:	041e      	lsls	r6, r3, #16
 8000f4c:	9b05      	ldr	r3, [sp, #20]
 8000f4e:	043c      	lsls	r4, r7, #16
 8000f50:	4699      	mov	r9, r3
 8000f52:	0c36      	lsrs	r6, r6, #16
 8000f54:	19a4      	adds	r4, r4, r6
 8000f56:	444c      	add	r4, r9
 8000f58:	46a1      	mov	r9, r4
 8000f5a:	4683      	mov	fp, r0
 8000f5c:	186e      	adds	r6, r5, r1
 8000f5e:	44c1      	add	r9, r8
 8000f60:	428e      	cmp	r6, r1
 8000f62:	4189      	sbcs	r1, r1
 8000f64:	44cb      	add	fp, r9
 8000f66:	465d      	mov	r5, fp
 8000f68:	4249      	negs	r1, r1
 8000f6a:	186d      	adds	r5, r5, r1
 8000f6c:	429c      	cmp	r4, r3
 8000f6e:	41a4      	sbcs	r4, r4
 8000f70:	45c1      	cmp	r9, r8
 8000f72:	419b      	sbcs	r3, r3
 8000f74:	4583      	cmp	fp, r0
 8000f76:	4180      	sbcs	r0, r0
 8000f78:	428d      	cmp	r5, r1
 8000f7a:	4189      	sbcs	r1, r1
 8000f7c:	425b      	negs	r3, r3
 8000f7e:	4264      	negs	r4, r4
 8000f80:	431c      	orrs	r4, r3
 8000f82:	4240      	negs	r0, r0
 8000f84:	9b03      	ldr	r3, [sp, #12]
 8000f86:	4249      	negs	r1, r1
 8000f88:	4301      	orrs	r1, r0
 8000f8a:	0270      	lsls	r0, r6, #9
 8000f8c:	0c3f      	lsrs	r7, r7, #16
 8000f8e:	4318      	orrs	r0, r3
 8000f90:	19e4      	adds	r4, r4, r7
 8000f92:	1e47      	subs	r7, r0, #1
 8000f94:	41b8      	sbcs	r0, r7
 8000f96:	1864      	adds	r4, r4, r1
 8000f98:	4464      	add	r4, ip
 8000f9a:	0df6      	lsrs	r6, r6, #23
 8000f9c:	0261      	lsls	r1, r4, #9
 8000f9e:	4330      	orrs	r0, r6
 8000fa0:	0dec      	lsrs	r4, r5, #23
 8000fa2:	026e      	lsls	r6, r5, #9
 8000fa4:	430c      	orrs	r4, r1
 8000fa6:	4330      	orrs	r0, r6
 8000fa8:	01c9      	lsls	r1, r1, #7
 8000faa:	d400      	bmi.n	8000fae <__aeabi_dmul+0x302>
 8000fac:	e0f1      	b.n	8001192 <__aeabi_dmul+0x4e6>
 8000fae:	2101      	movs	r1, #1
 8000fb0:	0843      	lsrs	r3, r0, #1
 8000fb2:	4001      	ands	r1, r0
 8000fb4:	430b      	orrs	r3, r1
 8000fb6:	07e0      	lsls	r0, r4, #31
 8000fb8:	4318      	orrs	r0, r3
 8000fba:	0864      	lsrs	r4, r4, #1
 8000fbc:	4915      	ldr	r1, [pc, #84]	; (8001014 <__aeabi_dmul+0x368>)
 8000fbe:	9b02      	ldr	r3, [sp, #8]
 8000fc0:	468c      	mov	ip, r1
 8000fc2:	4463      	add	r3, ip
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	dc00      	bgt.n	8000fca <__aeabi_dmul+0x31e>
 8000fc8:	e097      	b.n	80010fa <__aeabi_dmul+0x44e>
 8000fca:	0741      	lsls	r1, r0, #29
 8000fcc:	d009      	beq.n	8000fe2 <__aeabi_dmul+0x336>
 8000fce:	210f      	movs	r1, #15
 8000fd0:	4001      	ands	r1, r0
 8000fd2:	2904      	cmp	r1, #4
 8000fd4:	d005      	beq.n	8000fe2 <__aeabi_dmul+0x336>
 8000fd6:	1d01      	adds	r1, r0, #4
 8000fd8:	4281      	cmp	r1, r0
 8000fda:	4180      	sbcs	r0, r0
 8000fdc:	4240      	negs	r0, r0
 8000fde:	1824      	adds	r4, r4, r0
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	01e1      	lsls	r1, r4, #7
 8000fe4:	d506      	bpl.n	8000ff4 <__aeabi_dmul+0x348>
 8000fe6:	2180      	movs	r1, #128	; 0x80
 8000fe8:	00c9      	lsls	r1, r1, #3
 8000fea:	468c      	mov	ip, r1
 8000fec:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <__aeabi_dmul+0x36c>)
 8000fee:	401c      	ands	r4, r3
 8000ff0:	9b02      	ldr	r3, [sp, #8]
 8000ff2:	4463      	add	r3, ip
 8000ff4:	4909      	ldr	r1, [pc, #36]	; (800101c <__aeabi_dmul+0x370>)
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	dd00      	ble.n	8000ffc <__aeabi_dmul+0x350>
 8000ffa:	e710      	b.n	8000e1e <__aeabi_dmul+0x172>
 8000ffc:	0761      	lsls	r1, r4, #29
 8000ffe:	08c5      	lsrs	r5, r0, #3
 8001000:	0264      	lsls	r4, r4, #9
 8001002:	055b      	lsls	r3, r3, #21
 8001004:	430d      	orrs	r5, r1
 8001006:	0b24      	lsrs	r4, r4, #12
 8001008:	0d5b      	lsrs	r3, r3, #21
 800100a:	e6c1      	b.n	8000d90 <__aeabi_dmul+0xe4>
 800100c:	000007ff 	.word	0x000007ff
 8001010:	fffffc01 	.word	0xfffffc01
 8001014:	000003ff 	.word	0x000003ff
 8001018:	feffffff 	.word	0xfeffffff
 800101c:	000007fe 	.word	0x000007fe
 8001020:	464b      	mov	r3, r9
 8001022:	4323      	orrs	r3, r4
 8001024:	d059      	beq.n	80010da <__aeabi_dmul+0x42e>
 8001026:	2c00      	cmp	r4, #0
 8001028:	d100      	bne.n	800102c <__aeabi_dmul+0x380>
 800102a:	e0a3      	b.n	8001174 <__aeabi_dmul+0x4c8>
 800102c:	0020      	movs	r0, r4
 800102e:	f000 f98b 	bl	8001348 <__clzsi2>
 8001032:	0001      	movs	r1, r0
 8001034:	0003      	movs	r3, r0
 8001036:	390b      	subs	r1, #11
 8001038:	221d      	movs	r2, #29
 800103a:	1a52      	subs	r2, r2, r1
 800103c:	4649      	mov	r1, r9
 800103e:	0018      	movs	r0, r3
 8001040:	40d1      	lsrs	r1, r2
 8001042:	464a      	mov	r2, r9
 8001044:	3808      	subs	r0, #8
 8001046:	4082      	lsls	r2, r0
 8001048:	4084      	lsls	r4, r0
 800104a:	0010      	movs	r0, r2
 800104c:	430c      	orrs	r4, r1
 800104e:	4a74      	ldr	r2, [pc, #464]	; (8001220 <__aeabi_dmul+0x574>)
 8001050:	1aeb      	subs	r3, r5, r3
 8001052:	4694      	mov	ip, r2
 8001054:	4642      	mov	r2, r8
 8001056:	4463      	add	r3, ip
 8001058:	9301      	str	r3, [sp, #4]
 800105a:	9b01      	ldr	r3, [sp, #4]
 800105c:	407a      	eors	r2, r7
 800105e:	3301      	adds	r3, #1
 8001060:	2100      	movs	r1, #0
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	9302      	str	r3, [sp, #8]
 8001066:	2e0a      	cmp	r6, #10
 8001068:	dd00      	ble.n	800106c <__aeabi_dmul+0x3c0>
 800106a:	e667      	b.n	8000d3c <__aeabi_dmul+0x90>
 800106c:	e683      	b.n	8000d76 <__aeabi_dmul+0xca>
 800106e:	465b      	mov	r3, fp
 8001070:	4303      	orrs	r3, r0
 8001072:	469a      	mov	sl, r3
 8001074:	d02a      	beq.n	80010cc <__aeabi_dmul+0x420>
 8001076:	465b      	mov	r3, fp
 8001078:	2b00      	cmp	r3, #0
 800107a:	d06d      	beq.n	8001158 <__aeabi_dmul+0x4ac>
 800107c:	4658      	mov	r0, fp
 800107e:	f000 f963 	bl	8001348 <__clzsi2>
 8001082:	0001      	movs	r1, r0
 8001084:	0003      	movs	r3, r0
 8001086:	390b      	subs	r1, #11
 8001088:	221d      	movs	r2, #29
 800108a:	1a52      	subs	r2, r2, r1
 800108c:	0021      	movs	r1, r4
 800108e:	0018      	movs	r0, r3
 8001090:	465d      	mov	r5, fp
 8001092:	40d1      	lsrs	r1, r2
 8001094:	3808      	subs	r0, #8
 8001096:	4085      	lsls	r5, r0
 8001098:	000a      	movs	r2, r1
 800109a:	4084      	lsls	r4, r0
 800109c:	432a      	orrs	r2, r5
 800109e:	4693      	mov	fp, r2
 80010a0:	46a2      	mov	sl, r4
 80010a2:	4d5f      	ldr	r5, [pc, #380]	; (8001220 <__aeabi_dmul+0x574>)
 80010a4:	2600      	movs	r6, #0
 80010a6:	1aed      	subs	r5, r5, r3
 80010a8:	2300      	movs	r3, #0
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	e625      	b.n	8000cfa <__aeabi_dmul+0x4e>
 80010ae:	465b      	mov	r3, fp
 80010b0:	4303      	orrs	r3, r0
 80010b2:	469a      	mov	sl, r3
 80010b4:	d105      	bne.n	80010c2 <__aeabi_dmul+0x416>
 80010b6:	2300      	movs	r3, #0
 80010b8:	469b      	mov	fp, r3
 80010ba:	3302      	adds	r3, #2
 80010bc:	2608      	movs	r6, #8
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	e61b      	b.n	8000cfa <__aeabi_dmul+0x4e>
 80010c2:	2303      	movs	r3, #3
 80010c4:	4682      	mov	sl, r0
 80010c6:	260c      	movs	r6, #12
 80010c8:	9300      	str	r3, [sp, #0]
 80010ca:	e616      	b.n	8000cfa <__aeabi_dmul+0x4e>
 80010cc:	2300      	movs	r3, #0
 80010ce:	469b      	mov	fp, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	2604      	movs	r6, #4
 80010d4:	2500      	movs	r5, #0
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	e60f      	b.n	8000cfa <__aeabi_dmul+0x4e>
 80010da:	4642      	mov	r2, r8
 80010dc:	3301      	adds	r3, #1
 80010de:	9501      	str	r5, [sp, #4]
 80010e0:	431e      	orrs	r6, r3
 80010e2:	9b01      	ldr	r3, [sp, #4]
 80010e4:	407a      	eors	r2, r7
 80010e6:	3301      	adds	r3, #1
 80010e8:	2400      	movs	r4, #0
 80010ea:	2000      	movs	r0, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	2e0a      	cmp	r6, #10
 80010f4:	dd00      	ble.n	80010f8 <__aeabi_dmul+0x44c>
 80010f6:	e621      	b.n	8000d3c <__aeabi_dmul+0x90>
 80010f8:	e63d      	b.n	8000d76 <__aeabi_dmul+0xca>
 80010fa:	2101      	movs	r1, #1
 80010fc:	1ac9      	subs	r1, r1, r3
 80010fe:	2938      	cmp	r1, #56	; 0x38
 8001100:	dd00      	ble.n	8001104 <__aeabi_dmul+0x458>
 8001102:	e642      	b.n	8000d8a <__aeabi_dmul+0xde>
 8001104:	291f      	cmp	r1, #31
 8001106:	dd47      	ble.n	8001198 <__aeabi_dmul+0x4ec>
 8001108:	261f      	movs	r6, #31
 800110a:	0025      	movs	r5, r4
 800110c:	4276      	negs	r6, r6
 800110e:	1af3      	subs	r3, r6, r3
 8001110:	40dd      	lsrs	r5, r3
 8001112:	002b      	movs	r3, r5
 8001114:	2920      	cmp	r1, #32
 8001116:	d005      	beq.n	8001124 <__aeabi_dmul+0x478>
 8001118:	4942      	ldr	r1, [pc, #264]	; (8001224 <__aeabi_dmul+0x578>)
 800111a:	9d02      	ldr	r5, [sp, #8]
 800111c:	468c      	mov	ip, r1
 800111e:	4465      	add	r5, ip
 8001120:	40ac      	lsls	r4, r5
 8001122:	4320      	orrs	r0, r4
 8001124:	1e41      	subs	r1, r0, #1
 8001126:	4188      	sbcs	r0, r1
 8001128:	4318      	orrs	r0, r3
 800112a:	2307      	movs	r3, #7
 800112c:	001d      	movs	r5, r3
 800112e:	2400      	movs	r4, #0
 8001130:	4005      	ands	r5, r0
 8001132:	4203      	tst	r3, r0
 8001134:	d04a      	beq.n	80011cc <__aeabi_dmul+0x520>
 8001136:	230f      	movs	r3, #15
 8001138:	2400      	movs	r4, #0
 800113a:	4003      	ands	r3, r0
 800113c:	2b04      	cmp	r3, #4
 800113e:	d042      	beq.n	80011c6 <__aeabi_dmul+0x51a>
 8001140:	1d03      	adds	r3, r0, #4
 8001142:	4283      	cmp	r3, r0
 8001144:	4180      	sbcs	r0, r0
 8001146:	4240      	negs	r0, r0
 8001148:	1824      	adds	r4, r4, r0
 800114a:	0018      	movs	r0, r3
 800114c:	0223      	lsls	r3, r4, #8
 800114e:	d53a      	bpl.n	80011c6 <__aeabi_dmul+0x51a>
 8001150:	2301      	movs	r3, #1
 8001152:	2400      	movs	r4, #0
 8001154:	2500      	movs	r5, #0
 8001156:	e61b      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8001158:	f000 f8f6 	bl	8001348 <__clzsi2>
 800115c:	0001      	movs	r1, r0
 800115e:	0003      	movs	r3, r0
 8001160:	3115      	adds	r1, #21
 8001162:	3320      	adds	r3, #32
 8001164:	291c      	cmp	r1, #28
 8001166:	dd8f      	ble.n	8001088 <__aeabi_dmul+0x3dc>
 8001168:	3808      	subs	r0, #8
 800116a:	2200      	movs	r2, #0
 800116c:	4084      	lsls	r4, r0
 800116e:	4692      	mov	sl, r2
 8001170:	46a3      	mov	fp, r4
 8001172:	e796      	b.n	80010a2 <__aeabi_dmul+0x3f6>
 8001174:	f000 f8e8 	bl	8001348 <__clzsi2>
 8001178:	0001      	movs	r1, r0
 800117a:	0003      	movs	r3, r0
 800117c:	3115      	adds	r1, #21
 800117e:	3320      	adds	r3, #32
 8001180:	291c      	cmp	r1, #28
 8001182:	dc00      	bgt.n	8001186 <__aeabi_dmul+0x4da>
 8001184:	e758      	b.n	8001038 <__aeabi_dmul+0x38c>
 8001186:	0002      	movs	r2, r0
 8001188:	464c      	mov	r4, r9
 800118a:	3a08      	subs	r2, #8
 800118c:	2000      	movs	r0, #0
 800118e:	4094      	lsls	r4, r2
 8001190:	e75d      	b.n	800104e <__aeabi_dmul+0x3a2>
 8001192:	9b01      	ldr	r3, [sp, #4]
 8001194:	9302      	str	r3, [sp, #8]
 8001196:	e711      	b.n	8000fbc <__aeabi_dmul+0x310>
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <__aeabi_dmul+0x57c>)
 800119a:	0026      	movs	r6, r4
 800119c:	469c      	mov	ip, r3
 800119e:	0003      	movs	r3, r0
 80011a0:	9d02      	ldr	r5, [sp, #8]
 80011a2:	40cb      	lsrs	r3, r1
 80011a4:	4465      	add	r5, ip
 80011a6:	40ae      	lsls	r6, r5
 80011a8:	431e      	orrs	r6, r3
 80011aa:	0003      	movs	r3, r0
 80011ac:	40ab      	lsls	r3, r5
 80011ae:	1e58      	subs	r0, r3, #1
 80011b0:	4183      	sbcs	r3, r0
 80011b2:	0030      	movs	r0, r6
 80011b4:	4318      	orrs	r0, r3
 80011b6:	40cc      	lsrs	r4, r1
 80011b8:	0743      	lsls	r3, r0, #29
 80011ba:	d0c7      	beq.n	800114c <__aeabi_dmul+0x4a0>
 80011bc:	230f      	movs	r3, #15
 80011be:	4003      	ands	r3, r0
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d1bd      	bne.n	8001140 <__aeabi_dmul+0x494>
 80011c4:	e7c2      	b.n	800114c <__aeabi_dmul+0x4a0>
 80011c6:	0765      	lsls	r5, r4, #29
 80011c8:	0264      	lsls	r4, r4, #9
 80011ca:	0b24      	lsrs	r4, r4, #12
 80011cc:	08c0      	lsrs	r0, r0, #3
 80011ce:	2300      	movs	r3, #0
 80011d0:	4305      	orrs	r5, r0
 80011d2:	e5dd      	b.n	8000d90 <__aeabi_dmul+0xe4>
 80011d4:	2500      	movs	r5, #0
 80011d6:	2302      	movs	r3, #2
 80011d8:	2e0f      	cmp	r6, #15
 80011da:	d10c      	bne.n	80011f6 <__aeabi_dmul+0x54a>
 80011dc:	2480      	movs	r4, #128	; 0x80
 80011de:	465b      	mov	r3, fp
 80011e0:	0324      	lsls	r4, r4, #12
 80011e2:	4223      	tst	r3, r4
 80011e4:	d00e      	beq.n	8001204 <__aeabi_dmul+0x558>
 80011e6:	4221      	tst	r1, r4
 80011e8:	d10c      	bne.n	8001204 <__aeabi_dmul+0x558>
 80011ea:	430c      	orrs	r4, r1
 80011ec:	0324      	lsls	r4, r4, #12
 80011ee:	003a      	movs	r2, r7
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <__aeabi_dmul+0x580>)
 80011f2:	0b24      	lsrs	r4, r4, #12
 80011f4:	e5cc      	b.n	8000d90 <__aeabi_dmul+0xe4>
 80011f6:	2e0b      	cmp	r6, #11
 80011f8:	d000      	beq.n	80011fc <__aeabi_dmul+0x550>
 80011fa:	e5a2      	b.n	8000d42 <__aeabi_dmul+0x96>
 80011fc:	468b      	mov	fp, r1
 80011fe:	46aa      	mov	sl, r5
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	e5f7      	b.n	8000df4 <__aeabi_dmul+0x148>
 8001204:	2480      	movs	r4, #128	; 0x80
 8001206:	465b      	mov	r3, fp
 8001208:	0324      	lsls	r4, r4, #12
 800120a:	431c      	orrs	r4, r3
 800120c:	0324      	lsls	r4, r4, #12
 800120e:	4642      	mov	r2, r8
 8001210:	4655      	mov	r5, sl
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <__aeabi_dmul+0x580>)
 8001214:	0b24      	lsrs	r4, r4, #12
 8001216:	e5bb      	b.n	8000d90 <__aeabi_dmul+0xe4>
 8001218:	464d      	mov	r5, r9
 800121a:	0021      	movs	r1, r4
 800121c:	2303      	movs	r3, #3
 800121e:	e7db      	b.n	80011d8 <__aeabi_dmul+0x52c>
 8001220:	fffffc0d 	.word	0xfffffc0d
 8001224:	0000043e 	.word	0x0000043e
 8001228:	0000041e 	.word	0x0000041e
 800122c:	000007ff 	.word	0x000007ff

08001230 <__aeabi_d2iz>:
 8001230:	000a      	movs	r2, r1
 8001232:	b530      	push	{r4, r5, lr}
 8001234:	4c13      	ldr	r4, [pc, #76]	; (8001284 <__aeabi_d2iz+0x54>)
 8001236:	0053      	lsls	r3, r2, #1
 8001238:	0309      	lsls	r1, r1, #12
 800123a:	0005      	movs	r5, r0
 800123c:	0b09      	lsrs	r1, r1, #12
 800123e:	2000      	movs	r0, #0
 8001240:	0d5b      	lsrs	r3, r3, #21
 8001242:	0fd2      	lsrs	r2, r2, #31
 8001244:	42a3      	cmp	r3, r4
 8001246:	dd04      	ble.n	8001252 <__aeabi_d2iz+0x22>
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <__aeabi_d2iz+0x58>)
 800124a:	4283      	cmp	r3, r0
 800124c:	dd02      	ble.n	8001254 <__aeabi_d2iz+0x24>
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <__aeabi_d2iz+0x5c>)
 8001250:	18d0      	adds	r0, r2, r3
 8001252:	bd30      	pop	{r4, r5, pc}
 8001254:	2080      	movs	r0, #128	; 0x80
 8001256:	0340      	lsls	r0, r0, #13
 8001258:	4301      	orrs	r1, r0
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <__aeabi_d2iz+0x60>)
 800125c:	1ac0      	subs	r0, r0, r3
 800125e:	281f      	cmp	r0, #31
 8001260:	dd08      	ble.n	8001274 <__aeabi_d2iz+0x44>
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <__aeabi_d2iz+0x64>)
 8001264:	1ac3      	subs	r3, r0, r3
 8001266:	40d9      	lsrs	r1, r3
 8001268:	000b      	movs	r3, r1
 800126a:	4258      	negs	r0, r3
 800126c:	2a00      	cmp	r2, #0
 800126e:	d1f0      	bne.n	8001252 <__aeabi_d2iz+0x22>
 8001270:	0018      	movs	r0, r3
 8001272:	e7ee      	b.n	8001252 <__aeabi_d2iz+0x22>
 8001274:	4c08      	ldr	r4, [pc, #32]	; (8001298 <__aeabi_d2iz+0x68>)
 8001276:	40c5      	lsrs	r5, r0
 8001278:	46a4      	mov	ip, r4
 800127a:	4463      	add	r3, ip
 800127c:	4099      	lsls	r1, r3
 800127e:	000b      	movs	r3, r1
 8001280:	432b      	orrs	r3, r5
 8001282:	e7f2      	b.n	800126a <__aeabi_d2iz+0x3a>
 8001284:	000003fe 	.word	0x000003fe
 8001288:	0000041d 	.word	0x0000041d
 800128c:	7fffffff 	.word	0x7fffffff
 8001290:	00000433 	.word	0x00000433
 8001294:	00000413 	.word	0x00000413
 8001298:	fffffbed 	.word	0xfffffbed

0800129c <__aeabi_i2d>:
 800129c:	b570      	push	{r4, r5, r6, lr}
 800129e:	2800      	cmp	r0, #0
 80012a0:	d016      	beq.n	80012d0 <__aeabi_i2d+0x34>
 80012a2:	17c3      	asrs	r3, r0, #31
 80012a4:	18c5      	adds	r5, r0, r3
 80012a6:	405d      	eors	r5, r3
 80012a8:	0fc4      	lsrs	r4, r0, #31
 80012aa:	0028      	movs	r0, r5
 80012ac:	f000 f84c 	bl	8001348 <__clzsi2>
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <__aeabi_i2d+0x5c>)
 80012b2:	1a1b      	subs	r3, r3, r0
 80012b4:	280a      	cmp	r0, #10
 80012b6:	dc16      	bgt.n	80012e6 <__aeabi_i2d+0x4a>
 80012b8:	0002      	movs	r2, r0
 80012ba:	002e      	movs	r6, r5
 80012bc:	3215      	adds	r2, #21
 80012be:	4096      	lsls	r6, r2
 80012c0:	220b      	movs	r2, #11
 80012c2:	1a12      	subs	r2, r2, r0
 80012c4:	40d5      	lsrs	r5, r2
 80012c6:	055b      	lsls	r3, r3, #21
 80012c8:	032d      	lsls	r5, r5, #12
 80012ca:	0b2d      	lsrs	r5, r5, #12
 80012cc:	0d5b      	lsrs	r3, r3, #21
 80012ce:	e003      	b.n	80012d8 <__aeabi_i2d+0x3c>
 80012d0:	2400      	movs	r4, #0
 80012d2:	2300      	movs	r3, #0
 80012d4:	2500      	movs	r5, #0
 80012d6:	2600      	movs	r6, #0
 80012d8:	051b      	lsls	r3, r3, #20
 80012da:	432b      	orrs	r3, r5
 80012dc:	07e4      	lsls	r4, r4, #31
 80012de:	4323      	orrs	r3, r4
 80012e0:	0030      	movs	r0, r6
 80012e2:	0019      	movs	r1, r3
 80012e4:	bd70      	pop	{r4, r5, r6, pc}
 80012e6:	380b      	subs	r0, #11
 80012e8:	4085      	lsls	r5, r0
 80012ea:	055b      	lsls	r3, r3, #21
 80012ec:	032d      	lsls	r5, r5, #12
 80012ee:	2600      	movs	r6, #0
 80012f0:	0b2d      	lsrs	r5, r5, #12
 80012f2:	0d5b      	lsrs	r3, r3, #21
 80012f4:	e7f0      	b.n	80012d8 <__aeabi_i2d+0x3c>
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	0000041e 	.word	0x0000041e

080012fc <__aeabi_ui2d>:
 80012fc:	b510      	push	{r4, lr}
 80012fe:	1e04      	subs	r4, r0, #0
 8001300:	d010      	beq.n	8001324 <__aeabi_ui2d+0x28>
 8001302:	f000 f821 	bl	8001348 <__clzsi2>
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <__aeabi_ui2d+0x48>)
 8001308:	1a1b      	subs	r3, r3, r0
 800130a:	280a      	cmp	r0, #10
 800130c:	dc11      	bgt.n	8001332 <__aeabi_ui2d+0x36>
 800130e:	220b      	movs	r2, #11
 8001310:	0021      	movs	r1, r4
 8001312:	1a12      	subs	r2, r2, r0
 8001314:	40d1      	lsrs	r1, r2
 8001316:	3015      	adds	r0, #21
 8001318:	030a      	lsls	r2, r1, #12
 800131a:	055b      	lsls	r3, r3, #21
 800131c:	4084      	lsls	r4, r0
 800131e:	0b12      	lsrs	r2, r2, #12
 8001320:	0d5b      	lsrs	r3, r3, #21
 8001322:	e001      	b.n	8001328 <__aeabi_ui2d+0x2c>
 8001324:	2300      	movs	r3, #0
 8001326:	2200      	movs	r2, #0
 8001328:	051b      	lsls	r3, r3, #20
 800132a:	4313      	orrs	r3, r2
 800132c:	0020      	movs	r0, r4
 800132e:	0019      	movs	r1, r3
 8001330:	bd10      	pop	{r4, pc}
 8001332:	0022      	movs	r2, r4
 8001334:	380b      	subs	r0, #11
 8001336:	4082      	lsls	r2, r0
 8001338:	055b      	lsls	r3, r3, #21
 800133a:	0312      	lsls	r2, r2, #12
 800133c:	2400      	movs	r4, #0
 800133e:	0b12      	lsrs	r2, r2, #12
 8001340:	0d5b      	lsrs	r3, r3, #21
 8001342:	e7f1      	b.n	8001328 <__aeabi_ui2d+0x2c>
 8001344:	0000041e 	.word	0x0000041e

08001348 <__clzsi2>:
 8001348:	211c      	movs	r1, #28
 800134a:	2301      	movs	r3, #1
 800134c:	041b      	lsls	r3, r3, #16
 800134e:	4298      	cmp	r0, r3
 8001350:	d301      	bcc.n	8001356 <__clzsi2+0xe>
 8001352:	0c00      	lsrs	r0, r0, #16
 8001354:	3910      	subs	r1, #16
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	4298      	cmp	r0, r3
 800135a:	d301      	bcc.n	8001360 <__clzsi2+0x18>
 800135c:	0a00      	lsrs	r0, r0, #8
 800135e:	3908      	subs	r1, #8
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	4298      	cmp	r0, r3
 8001364:	d301      	bcc.n	800136a <__clzsi2+0x22>
 8001366:	0900      	lsrs	r0, r0, #4
 8001368:	3904      	subs	r1, #4
 800136a:	a202      	add	r2, pc, #8	; (adr r2, 8001374 <__clzsi2+0x2c>)
 800136c:	5c10      	ldrb	r0, [r2, r0]
 800136e:	1840      	adds	r0, r0, r1
 8001370:	4770      	bx	lr
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	02020304 	.word	0x02020304
 8001378:	01010101 	.word	0x01010101
	...

08001384 <__clzdi2>:
 8001384:	b510      	push	{r4, lr}
 8001386:	2900      	cmp	r1, #0
 8001388:	d103      	bne.n	8001392 <__clzdi2+0xe>
 800138a:	f7ff ffdd 	bl	8001348 <__clzsi2>
 800138e:	3020      	adds	r0, #32
 8001390:	e002      	b.n	8001398 <__clzdi2+0x14>
 8001392:	0008      	movs	r0, r1
 8001394:	f7ff ffd8 	bl	8001348 <__clzsi2>
 8001398:	bd10      	pop	{r4, pc}
 800139a:	46c0      	nop			; (mov r8, r8)

0800139c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E  // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b087      	sub	sp, #28
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	0002      	movs	r2, r0
 80013a4:	1dfb      	adds	r3, r7, #7
 80013a6:	701a      	strb	r2, [r3, #0]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80013a8:	200f      	movs	r0, #15
 80013aa:	183b      	adds	r3, r7, r0
 80013ac:	1dfa      	adds	r2, r7, #7
 80013ae:	7812      	ldrb	r2, [r2, #0]
 80013b0:	210f      	movs	r1, #15
 80013b2:	438a      	bics	r2, r1
 80013b4:	701a      	strb	r2, [r3, #0]
	data_l = ((cmd<<4)&0xf0);
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	011a      	lsls	r2, r3, #4
 80013bc:	240e      	movs	r4, #14
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	220c      	movs	r2, #12
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	2108      	movs	r1, #8
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80013d2:	183b      	adds	r3, r7, r0
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2208      	movs	r2, #8
 80013d8:	4313      	orrs	r3, r2
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	220c      	movs	r2, #12
 80013e6:	4313      	orrs	r3, r2
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2208      	movs	r2, #8
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	187b      	adds	r3, r7, r1
 80013fa:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80013fc:	187a      	adds	r2, r7, r1
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <lcd_send_cmd+0x78>)
 8001400:	2364      	movs	r3, #100	; 0x64
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2304      	movs	r3, #4
 8001406:	214e      	movs	r1, #78	; 0x4e
 8001408:	f002 f800 	bl	800340c <HAL_I2C_Master_Transmit>
}
 800140c:	46c0      	nop			; (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b005      	add	sp, #20
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	200000c0 	.word	0x200000c0

08001418 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b087      	sub	sp, #28
 800141c:	af02      	add	r7, sp, #8
 800141e:	0002      	movs	r2, r0
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	701a      	strb	r2, [r3, #0]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001424:	200f      	movs	r0, #15
 8001426:	183b      	adds	r3, r7, r0
 8001428:	1dfa      	adds	r2, r7, #7
 800142a:	7812      	ldrb	r2, [r2, #0]
 800142c:	210f      	movs	r1, #15
 800142e:	438a      	bics	r2, r1
 8001430:	701a      	strb	r2, [r3, #0]
	data_l = ((data<<4)&0xf0);
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	011a      	lsls	r2, r3, #4
 8001438:	240e      	movs	r4, #14
 800143a:	193b      	adds	r3, r7, r4
 800143c:	701a      	strb	r2, [r3, #0]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800143e:	183b      	adds	r3, r7, r0
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	220d      	movs	r2, #13
 8001444:	4313      	orrs	r3, r2
 8001446:	b2da      	uxtb	r2, r3
 8001448:	2108      	movs	r1, #8
 800144a:	187b      	adds	r3, r7, r1
 800144c:	701a      	strb	r2, [r3, #0]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800144e:	183b      	adds	r3, r7, r0
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2209      	movs	r2, #9
 8001454:	4313      	orrs	r3, r2
 8001456:	b2da      	uxtb	r2, r3
 8001458:	187b      	adds	r3, r7, r1
 800145a:	705a      	strb	r2, [r3, #1]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800145c:	193b      	adds	r3, r7, r4
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	220d      	movs	r2, #13
 8001462:	4313      	orrs	r3, r2
 8001464:	b2da      	uxtb	r2, r3
 8001466:	187b      	adds	r3, r7, r1
 8001468:	709a      	strb	r2, [r3, #2]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800146a:	193b      	adds	r3, r7, r4
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2209      	movs	r2, #9
 8001470:	4313      	orrs	r3, r2
 8001472:	b2da      	uxtb	r2, r3
 8001474:	187b      	adds	r3, r7, r1
 8001476:	70da      	strb	r2, [r3, #3]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001478:	187a      	adds	r2, r7, r1
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <lcd_send_data+0x78>)
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2304      	movs	r3, #4
 8001482:	214e      	movs	r1, #78	; 0x4e
 8001484:	f001 ffc2 	bl	800340c <HAL_I2C_Master_Transmit>
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46bd      	mov	sp, r7
 800148c:	b005      	add	sp, #20
 800148e:	bd90      	pop	{r4, r7, pc}
 8001490:	200000c0 	.word	0x200000c0

08001494 <lcd_clear>:

void lcd_clear (void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800149a:	2080      	movs	r0, #128	; 0x80
 800149c:	f7ff ff7e 	bl	800139c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	e005      	b.n	80014b2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80014a6:	2020      	movs	r0, #32
 80014a8:	f7ff ffb6 	bl	8001418 <lcd_send_data>
	for (int i=0; i<70; i++)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3301      	adds	r3, #1
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b45      	cmp	r3, #69	; 0x45
 80014b6:	ddf6      	ble.n	80014a6 <lcd_clear+0x12>
	}
}
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
    switch (row)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <lcd_put_cur+0x18>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d005      	beq.n	80014e4 <lcd_put_cur+0x22>
 80014d8:	e009      	b.n	80014ee <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2280      	movs	r2, #128	; 0x80
 80014de:	4313      	orrs	r3, r2
 80014e0:	603b      	str	r3, [r7, #0]
            break;
 80014e2:	e004      	b.n	80014ee <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	22c0      	movs	r2, #192	; 0xc0
 80014e8:	4313      	orrs	r3, r2
 80014ea:	603b      	str	r3, [r7, #0]
            break;
 80014ec:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff52 	bl	800139c <lcd_send_cmd>
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}

08001500 <lcd_init>:


void lcd_init (void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001504:	2032      	movs	r0, #50	; 0x32
 8001506:	f001 fc6b 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x30);
 800150a:	2030      	movs	r0, #48	; 0x30
 800150c:	f7ff ff46 	bl	800139c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001510:	2005      	movs	r0, #5
 8001512:	f001 fc65 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001516:	2030      	movs	r0, #48	; 0x30
 8001518:	f7ff ff40 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800151c:	2001      	movs	r0, #1
 800151e:	f001 fc5f 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001522:	2030      	movs	r0, #48	; 0x30
 8001524:	f7ff ff3a 	bl	800139c <lcd_send_cmd>
	HAL_Delay(10);
 8001528:	200a      	movs	r0, #10
 800152a:	f001 fc59 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800152e:	2020      	movs	r0, #32
 8001530:	f7ff ff34 	bl	800139c <lcd_send_cmd>
	HAL_Delay(10);
 8001534:	200a      	movs	r0, #10
 8001536:	f001 fc53 	bl	8002de0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800153a:	2028      	movs	r0, #40	; 0x28
 800153c:	f7ff ff2e 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);
 8001540:	2001      	movs	r0, #1
 8001542:	f001 fc4d 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001546:	2008      	movs	r0, #8
 8001548:	f7ff ff28 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f001 fc47 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff ff22 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f001 fc41 	bl	8002de0 <HAL_Delay>
	HAL_Delay(1);
 800155e:	2001      	movs	r0, #1
 8001560:	f001 fc3e 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001564:	2006      	movs	r0, #6
 8001566:	f7ff ff19 	bl	800139c <lcd_send_cmd>
	HAL_Delay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f001 fc38 	bl	8002de0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001570:	200c      	movs	r0, #12
 8001572:	f7ff ff13 	bl	800139c <lcd_send_cmd>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001584:	e006      	b.n	8001594 <lcd_send_string+0x18>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	0018      	movs	r0, r3
 8001590:	f7ff ff42 	bl	8001418 <lcd_send_data>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f4      	bne.n	8001586 <lcd_send_string+0xa>
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46c0      	nop			; (mov r8, r8)
 80015a0:	46bd      	mov	sp, r7
 80015a2:	b002      	add	sp, #8
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <i2cScanner>:
uint8_t Buffer[25] = {0};
uint8_t Space[] = " - ";
uint8_t StartMSG[] = "Starting I2C Scanning: \r\n";
uint8_t EndMSG[] = "Done! \r\n\r\n";

void i2cScanner(){
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
	uint8_t i = 0, ret;
 80015ae:	1dfb      	adds	r3, r7, #7
 80015b0:	2200      	movs	r2, #0
 80015b2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 80015b4:	4b23      	ldr	r3, [pc, #140]	; (8001644 <i2cScanner+0x9c>)
 80015b6:	4924      	ldr	r1, [pc, #144]	; (8001648 <i2cScanner+0xa0>)
 80015b8:	4824      	ldr	r0, [pc, #144]	; (800164c <i2cScanner+0xa4>)
 80015ba:	221a      	movs	r2, #26
 80015bc:	f004 f92e 	bl	800581c <HAL_UART_Transmit>
	for(i=1; i<128; i++)
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	2201      	movs	r2, #1
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	e02d      	b.n	8001624 <i2cScanner+0x7c>
	{
		ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	18db      	adds	r3, r3, r3
 80015d0:	b299      	uxth	r1, r3
 80015d2:	1dbc      	adds	r4, r7, #6
 80015d4:	481e      	ldr	r0, [pc, #120]	; (8001650 <i2cScanner+0xa8>)
 80015d6:	2305      	movs	r3, #5
 80015d8:	2203      	movs	r2, #3
 80015da:	f002 faa3 	bl	8003b24 <HAL_I2C_IsDeviceReady>
 80015de:	0003      	movs	r3, r0
 80015e0:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) /* No ACK Received At That Address */
 80015e2:	1dbb      	adds	r3, r7, #6
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d006      	beq.n	80015f8 <i2cScanner+0x50>
		{
			HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <i2cScanner+0x9c>)
 80015ec:	4919      	ldr	r1, [pc, #100]	; (8001654 <i2cScanner+0xac>)
 80015ee:	4817      	ldr	r0, [pc, #92]	; (800164c <i2cScanner+0xa4>)
 80015f0:	2204      	movs	r2, #4
 80015f2:	f004 f913 	bl	800581c <HAL_UART_Transmit>
 80015f6:	e010      	b.n	800161a <i2cScanner+0x72>
		}
		else if(ret == HAL_OK)
 80015f8:	1dbb      	adds	r3, r7, #6
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d10c      	bne.n	800161a <i2cScanner+0x72>
		{
			sprintf(Buffer, "0x%X", i);
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	781a      	ldrb	r2, [r3, #0]
 8001604:	4914      	ldr	r1, [pc, #80]	; (8001658 <i2cScanner+0xb0>)
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <i2cScanner+0xb4>)
 8001608:	0018      	movs	r0, r3
 800160a:	f004 ffb7 	bl	800657c <siprintf>
			HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <i2cScanner+0x9c>)
 8001610:	4912      	ldr	r1, [pc, #72]	; (800165c <i2cScanner+0xb4>)
 8001612:	480e      	ldr	r0, [pc, #56]	; (800164c <i2cScanner+0xa4>)
 8001614:	2219      	movs	r2, #25
 8001616:	f004 f901 	bl	800581c <HAL_UART_Transmit>
	for(i=1; i<128; i++)
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	781a      	ldrb	r2, [r3, #0]
 800161e:	1dfb      	adds	r3, r7, #7
 8001620:	3201      	adds	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
 8001624:	1dfb      	adds	r3, r7, #7
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b25b      	sxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	dacc      	bge.n	80015c8 <i2cScanner+0x20>
		}
	}
	HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <i2cScanner+0x9c>)
 8001630:	490b      	ldr	r1, [pc, #44]	; (8001660 <i2cScanner+0xb8>)
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <i2cScanner+0xa4>)
 8001634:	220b      	movs	r2, #11
 8001636:	f004 f8f1 	bl	800581c <HAL_UART_Transmit>
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b003      	add	sp, #12
 8001640:	bd90      	pop	{r4, r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	00002710 	.word	0x00002710
 8001648:	20000004 	.word	0x20000004
 800164c:	20000160 	.word	0x20000160
 8001650:	200000c0 	.word	0x200000c0
 8001654:	20000000 	.word	0x20000000
 8001658:	08006ee0 	.word	0x08006ee0
 800165c:	200000a4 	.word	0x200000a4
 8001660:	20000020 	.word	0x20000020

08001664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001664:	b5b0      	push	{r4, r5, r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800166a:	f001 fb33 	bl	8002cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800166e:	f000 f9e5 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001672:	f000 fb15 	bl	8001ca0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001676:	f000 fac5 	bl	8001c04 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800167a:	f000 fa27 	bl	8001acc <MX_I2C1_Init>
  MX_TIM1_Init();
 800167e:	f000 fa65 	bl	8001b4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  	  /* Start I2C Scan */
  	  i2cScanner();
 8001682:	f7ff ff91 	bl	80015a8 <i2cScanner>

  	  /* OLED Initialise */
	  SSD1306_Init();
 8001686:	f000 ff55 	bl	8002534 <SSD1306_Init>

  	  /* LCD Init */
  	  lcd_init();
 800168a:	f7ff ff39 	bl	8001500 <lcd_init>

	  /* Initialise pressure sensor */
	  uint8_t ret = SPL06_007_Initialise( &pressureSensor, &hi2c1 );
 800168e:	250f      	movs	r5, #15
 8001690:	197c      	adds	r4, r7, r5
 8001692:	4ad1      	ldr	r2, [pc, #836]	; (80019d8 <main+0x374>)
 8001694:	4bd1      	ldr	r3, [pc, #836]	; (80019dc <main+0x378>)
 8001696:	0011      	movs	r1, r2
 8001698:	0018      	movs	r0, r3
 800169a:	f000 fb7c 	bl	8001d96 <SPL06_007_Initialise>
 800169e:	0003      	movs	r3, r0
 80016a0:	7023      	strb	r3, [r4, #0]
	  if (ret == 0){
 80016a2:	197b      	adds	r3, r7, r5
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d112      	bne.n	80016d0 <main+0x6c>
		  // Success
		  sprintf(msg, "Successfully Connected to SPL006. \r\n");
 80016aa:	4acd      	ldr	r2, [pc, #820]	; (80019e0 <main+0x37c>)
 80016ac:	4bcd      	ldr	r3, [pc, #820]	; (80019e4 <main+0x380>)
 80016ae:	0011      	movs	r1, r2
 80016b0:	0018      	movs	r0, r3
 80016b2:	f004 ff63 	bl	800657c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016b6:	4bcb      	ldr	r3, [pc, #812]	; (80019e4 <main+0x380>)
 80016b8:	0018      	movs	r0, r3
 80016ba:	f7fe fd23 	bl	8000104 <strlen>
 80016be:	0003      	movs	r3, r0
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	2301      	movs	r3, #1
 80016c4:	425b      	negs	r3, r3
 80016c6:	49c7      	ldr	r1, [pc, #796]	; (80019e4 <main+0x380>)
 80016c8:	48c7      	ldr	r0, [pc, #796]	; (80019e8 <main+0x384>)
 80016ca:	f004 f8a7 	bl	800581c <HAL_UART_Transmit>
 80016ce:	e013      	b.n	80016f8 <main+0x94>
	  } else {
		  // Errors
		  sprintf(msg, "Number of errors: %d\r\n", ret);
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	49c5      	ldr	r1, [pc, #788]	; (80019ec <main+0x388>)
 80016d8:	4bc2      	ldr	r3, [pc, #776]	; (80019e4 <main+0x380>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f004 ff4e 	bl	800657c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80016e0:	4bc0      	ldr	r3, [pc, #768]	; (80019e4 <main+0x380>)
 80016e2:	0018      	movs	r0, r3
 80016e4:	f7fe fd0e 	bl	8000104 <strlen>
 80016e8:	0003      	movs	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	2301      	movs	r3, #1
 80016ee:	425b      	negs	r3, r3
 80016f0:	49bc      	ldr	r1, [pc, #752]	; (80019e4 <main+0x380>)
 80016f2:	48bd      	ldr	r0, [pc, #756]	; (80019e8 <main+0x384>)
 80016f4:	f004 f892 	bl	800581c <HAL_UART_Transmit>
	  }

	  /* LCD Welcome */
	  lcd_send_string ("Design Challenge");
 80016f8:	4bbd      	ldr	r3, [pc, #756]	; (80019f0 <main+0x38c>)
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff ff3e 	bl	800157c <lcd_send_string>
	  HAL_Delay(500);
 8001700:	23fa      	movs	r3, #250	; 0xfa
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	0018      	movs	r0, r3
 8001706:	f001 fb6b 	bl	8002de0 <HAL_Delay>
	  lcd_put_cur(1, 0);
 800170a:	2100      	movs	r1, #0
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fed8 	bl	80014c2 <lcd_put_cur>
	  lcd_send_string("Vehicle Online");
 8001712:	4bb8      	ldr	r3, [pc, #736]	; (80019f4 <main+0x390>)
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff ff31 	bl	800157c <lcd_send_string>
	  HAL_Delay(2000);
 800171a:	23fa      	movs	r3, #250	; 0xfa
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	0018      	movs	r0, r3
 8001720:	f001 fb5e 	bl	8002de0 <HAL_Delay>
	  lcd_clear ();
 8001724:	f7ff feb6 	bl	8001494 <lcd_clear>

	  /* OLED UTSMA Logo */
	  SSD1306_DrawBitmap(0,0,utsma, 128, 64, 1);
 8001728:	4ab3      	ldr	r2, [pc, #716]	; (80019f8 <main+0x394>)
 800172a:	2301      	movs	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2340      	movs	r3, #64	; 0x40
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	2100      	movs	r1, #0
 8001736:	2000      	movs	r0, #0
 8001738:	f000 fe5c 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800173c:	f000 ffbe 	bl	80026bc <SSD1306_UpdateScreen>

	  HAL_Delay(2000);
 8001740:	23fa      	movs	r3, #250	; 0xfa
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	0018      	movs	r0, r3
 8001746:	f001 fb4b 	bl	8002de0 <HAL_Delay>

	  /* OLED Scrolling */
	  SSD1306_ScrollRight(0x00, 0x0f);     // scroll entire screen right
 800174a:	210f      	movs	r1, #15
 800174c:	2000      	movs	r0, #0
 800174e:	f000 fd39 	bl	80021c4 <SSD1306_ScrollRight>
	  HAL_Delay (2000);
 8001752:	23fa      	movs	r3, #250	; 0xfa
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	0018      	movs	r0, r3
 8001758:	f001 fb42 	bl	8002de0 <HAL_Delay>
	  SSD1306_ScrollLeft(0x00, 0x0f);  	   // scroll entire screen left
 800175c:	210f      	movs	r1, #15
 800175e:	2000      	movs	r0, #0
 8001760:	f000 fd69 	bl	8002236 <SSD1306_ScrollLeft>
	  HAL_Delay (2000);
 8001764:	23fa      	movs	r3, #250	; 0xfa
 8001766:	00db      	lsls	r3, r3, #3
 8001768:	0018      	movs	r0, r3
 800176a:	f001 fb39 	bl	8002de0 <HAL_Delay>
	  SSD1306_Scrolldiagright(0x00, 0x0f); // scroll entire screen diagonal right
 800176e:	210f      	movs	r1, #15
 8001770:	2000      	movs	r0, #0
 8001772:	f000 fd99 	bl	80022a8 <SSD1306_Scrolldiagright>
	  HAL_Delay (2000);
 8001776:	23fa      	movs	r3, #250	; 0xfa
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	0018      	movs	r0, r3
 800177c:	f001 fb30 	bl	8002de0 <HAL_Delay>
	  SSD1306_Scrolldiagleft(0x00, 0x0f);  // scroll entire screen diagonal left
 8001780:	210f      	movs	r1, #15
 8001782:	2000      	movs	r0, #0
 8001784:	f000 fdd3 	bl	800232e <SSD1306_Scrolldiagleft>
	  HAL_Delay (2000);
 8001788:	23fa      	movs	r3, #250	; 0xfa
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	0018      	movs	r0, r3
 800178e:	f001 fb27 	bl	8002de0 <HAL_Delay>
	  SSD1306_Stopscroll();   			   // stop scrolling
 8001792:	f000 fe0f 	bl	80023b4 <SSD1306_Stopscroll>
	  SSD1306_InvertDisplay(1);   		   // invert the display
 8001796:	2001      	movs	r0, #1
 8001798:	f000 fe16 	bl	80023c8 <SSD1306_InvertDisplay>
	  HAL_Delay(2000);
 800179c:	23fa      	movs	r3, #250	; 0xfa
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	0018      	movs	r0, r3
 80017a2:	f001 fb1d 	bl	8002de0 <HAL_Delay>
	  SSD1306_InvertDisplay(0);  		   // normalize the display
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fe0e 	bl	80023c8 <SSD1306_InvertDisplay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Reading Raw Temperature */
	  uint32_t rawTemp = SPL06_007_getRawTemp(&pressureSensor);
 80017ac:	4b8b      	ldr	r3, [pc, #556]	; (80019dc <main+0x378>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fbde 	bl	8001f70 <SPL06_007_getRawTemp>
 80017b4:	0003      	movs	r3, r0
 80017b6:	60bb      	str	r3, [r7, #8]
	  sprintf(msg, "RAW TEMP: %d\r\n", rawTemp);
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	4990      	ldr	r1, [pc, #576]	; (80019fc <main+0x398>)
 80017bc:	4b89      	ldr	r3, [pc, #548]	; (80019e4 <main+0x380>)
 80017be:	0018      	movs	r0, r3
 80017c0:	f004 fedc 	bl	800657c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80017c4:	4b87      	ldr	r3, [pc, #540]	; (80019e4 <main+0x380>)
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7fe fc9c 	bl	8000104 <strlen>
 80017cc:	0003      	movs	r3, r0
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	2301      	movs	r3, #1
 80017d2:	425b      	negs	r3, r3
 80017d4:	4983      	ldr	r1, [pc, #524]	; (80019e4 <main+0x380>)
 80017d6:	4884      	ldr	r0, [pc, #528]	; (80019e8 <main+0x384>)
 80017d8:	f004 f820 	bl	800581c <HAL_UART_Transmit>

	  /* Reading Compensated Temperature */
	  uint32_t compTemp = SPL06_007_calcCompTemp(&pressureSensor, rawTemp);
 80017dc:	68ba      	ldr	r2, [r7, #8]
 80017de:	4b7f      	ldr	r3, [pc, #508]	; (80019dc <main+0x378>)
 80017e0:	0011      	movs	r1, r2
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 fb78 	bl	8001ed8 <SPL06_007_calcCompTemp>
 80017e8:	0003      	movs	r3, r0
 80017ea:	607b      	str	r3, [r7, #4]
	  sprintf(msg, "COMP TEMP: %d\r\n", compTemp);
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4984      	ldr	r1, [pc, #528]	; (8001a00 <main+0x39c>)
 80017f0:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <main+0x380>)
 80017f2:	0018      	movs	r0, r3
 80017f4:	f004 fec2 	bl	800657c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80017f8:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <main+0x380>)
 80017fa:	0018      	movs	r0, r3
 80017fc:	f7fe fc82 	bl	8000104 <strlen>
 8001800:	0003      	movs	r3, r0
 8001802:	b29a      	uxth	r2, r3
 8001804:	2301      	movs	r3, #1
 8001806:	425b      	negs	r3, r3
 8001808:	4976      	ldr	r1, [pc, #472]	; (80019e4 <main+0x380>)
 800180a:	4877      	ldr	r0, [pc, #476]	; (80019e8 <main+0x384>)
 800180c:	f004 f806 	bl	800581c <HAL_UART_Transmit>

	  /* DEBUG - Print coefficient 0 */
	  int16_t  c0 = SPL06_007_getSplitHighCoefficient(&pressureSensor, SPL06_REG_C0, SPL06_REG_C01C1);
 8001810:	1cbc      	adds	r4, r7, #2
 8001812:	4b72      	ldr	r3, [pc, #456]	; (80019dc <main+0x378>)
 8001814:	2211      	movs	r2, #17
 8001816:	2110      	movs	r1, #16
 8001818:	0018      	movs	r0, r3
 800181a:	f000 fbe5 	bl	8001fe8 <SPL06_007_getSplitHighCoefficient>
 800181e:	0003      	movs	r3, r0
 8001820:	8023      	strh	r3, [r4, #0]
	  sprintf(msg, "C0: 0x%02X\r\n", c0);
 8001822:	1cbb      	adds	r3, r7, #2
 8001824:	2200      	movs	r2, #0
 8001826:	5e9a      	ldrsh	r2, [r3, r2]
 8001828:	4976      	ldr	r1, [pc, #472]	; (8001a04 <main+0x3a0>)
 800182a:	4b6e      	ldr	r3, [pc, #440]	; (80019e4 <main+0x380>)
 800182c:	0018      	movs	r0, r3
 800182e:	f004 fea5 	bl	800657c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001832:	4b6c      	ldr	r3, [pc, #432]	; (80019e4 <main+0x380>)
 8001834:	0018      	movs	r0, r3
 8001836:	f7fe fc65 	bl	8000104 <strlen>
 800183a:	0003      	movs	r3, r0
 800183c:	b29a      	uxth	r2, r3
 800183e:	2301      	movs	r3, #1
 8001840:	425b      	negs	r3, r3
 8001842:	4968      	ldr	r1, [pc, #416]	; (80019e4 <main+0x380>)
 8001844:	4868      	ldr	r0, [pc, #416]	; (80019e8 <main+0x384>)
 8001846:	f003 ffe9 	bl	800581c <HAL_UART_Transmit>

	  /* DEBUG - Print coefficient 1 */
	  int16_t  c1 = SPL06_007_getSplitLowCoefficient(&pressureSensor, SPL06_REG_C01C1, SPL06_REG_C1);
 800184a:	003c      	movs	r4, r7
 800184c:	4b63      	ldr	r3, [pc, #396]	; (80019dc <main+0x378>)
 800184e:	2212      	movs	r2, #18
 8001850:	2111      	movs	r1, #17
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fc00 	bl	8002058 <SPL06_007_getSplitLowCoefficient>
 8001858:	0003      	movs	r3, r0
 800185a:	8023      	strh	r3, [r4, #0]
	  sprintf(msg, "C1: 0x%02X\r\n", c1);
 800185c:	003b      	movs	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	5e9a      	ldrsh	r2, [r3, r2]
 8001862:	4969      	ldr	r1, [pc, #420]	; (8001a08 <main+0x3a4>)
 8001864:	4b5f      	ldr	r3, [pc, #380]	; (80019e4 <main+0x380>)
 8001866:	0018      	movs	r0, r3
 8001868:	f004 fe88 	bl	800657c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800186c:	4b5d      	ldr	r3, [pc, #372]	; (80019e4 <main+0x380>)
 800186e:	0018      	movs	r0, r3
 8001870:	f7fe fc48 	bl	8000104 <strlen>
 8001874:	0003      	movs	r3, r0
 8001876:	b29a      	uxth	r2, r3
 8001878:	2301      	movs	r3, #1
 800187a:	425b      	negs	r3, r3
 800187c:	4959      	ldr	r1, [pc, #356]	; (80019e4 <main+0x380>)
 800187e:	485a      	ldr	r0, [pc, #360]	; (80019e8 <main+0x384>)
 8001880:	f003 ffcc 	bl	800581c <HAL_UART_Transmit>

	  /* LCD Messaging */
	  lcd_put_cur(0, 0);
 8001884:	2100      	movs	r1, #0
 8001886:	2000      	movs	r0, #0
 8001888:	f7ff fe1b 	bl	80014c2 <lcd_put_cur>
	  lcd_send_string ("State A");
 800188c:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <main+0x3a8>)
 800188e:	0018      	movs	r0, r3
 8001890:	f7ff fe74 	bl	800157c <lcd_send_string>
	  lcd_put_cur(1, 0);
 8001894:	2100      	movs	r1, #0
 8001896:	2001      	movs	r0, #1
 8001898:	f7ff fe13 	bl	80014c2 <lcd_put_cur>
	  sprintf(msg, "Temp: %d", rawTemp);
 800189c:	68ba      	ldr	r2, [r7, #8]
 800189e:	495c      	ldr	r1, [pc, #368]	; (8001a10 <main+0x3ac>)
 80018a0:	4b50      	ldr	r3, [pc, #320]	; (80019e4 <main+0x380>)
 80018a2:	0018      	movs	r0, r3
 80018a4:	f004 fe6a 	bl	800657c <siprintf>
	  lcd_send_string (msg);
 80018a8:	4b4e      	ldr	r3, [pc, #312]	; (80019e4 <main+0x380>)
 80018aa:	0018      	movs	r0, r3
 80018ac:	f7ff fe66 	bl	800157c <lcd_send_string>
	  HAL_Delay(1000);
 80018b0:	23fa      	movs	r3, #250	; 0xfa
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	0018      	movs	r0, r3
 80018b6:	f001 fa93 	bl	8002de0 <HAL_Delay>
	  lcd_clear ();
 80018ba:	f7ff fdeb 	bl	8001494 <lcd_clear>

	  //// HORSE ANIMATION START //////
	  SSD1306_Clear();
 80018be:	f000 ffb9 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse1,128,64,1);
 80018c2:	4a54      	ldr	r2, [pc, #336]	; (8001a14 <main+0x3b0>)
 80018c4:	2301      	movs	r3, #1
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	2340      	movs	r3, #64	; 0x40
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	2380      	movs	r3, #128	; 0x80
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 fd8f 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80018d6:	f000 fef1 	bl	80026bc <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80018da:	f000 ffab 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse2,128,64,1);
 80018de:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <main+0x3b4>)
 80018e0:	2301      	movs	r3, #1
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2340      	movs	r3, #64	; 0x40
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	2100      	movs	r1, #0
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 fd81 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80018f2:	f000 fee3 	bl	80026bc <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 80018f6:	f000 ff9d 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse3,128,64,1);
 80018fa:	4a48      	ldr	r2, [pc, #288]	; (8001a1c <main+0x3b8>)
 80018fc:	2301      	movs	r3, #1
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2340      	movs	r3, #64	; 0x40
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	2100      	movs	r1, #0
 8001908:	2000      	movs	r0, #0
 800190a:	f000 fd73 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800190e:	f000 fed5 	bl	80026bc <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8001912:	f000 ff8f 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse4,128,64,1);
 8001916:	4a42      	ldr	r2, [pc, #264]	; (8001a20 <main+0x3bc>)
 8001918:	2301      	movs	r3, #1
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	2100      	movs	r1, #0
 8001924:	2000      	movs	r0, #0
 8001926:	f000 fd65 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800192a:	f000 fec7 	bl	80026bc <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 800192e:	f000 ff81 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse5,128,64,1);
 8001932:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <main+0x3c0>)
 8001934:	2301      	movs	r3, #1
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	2340      	movs	r3, #64	; 0x40
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f000 fd57 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8001946:	f000 feb9 	bl	80026bc <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 800194a:	f000 ff73 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse6,128,64,1);
 800194e:	4a36      	ldr	r2, [pc, #216]	; (8001a28 <main+0x3c4>)
 8001950:	2301      	movs	r3, #1
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2340      	movs	r3, #64	; 0x40
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	2100      	movs	r1, #0
 800195c:	2000      	movs	r0, #0
 800195e:	f000 fd49 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 8001962:	f000 feab 	bl	80026bc <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 8001966:	f000 ff65 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse7,128,64,1);
 800196a:	4a30      	ldr	r2, [pc, #192]	; (8001a2c <main+0x3c8>)
 800196c:	2301      	movs	r3, #1
 800196e:	9301      	str	r3, [sp, #4]
 8001970:	2340      	movs	r3, #64	; 0x40
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	2100      	movs	r1, #0
 8001978:	2000      	movs	r0, #0
 800197a:	f000 fd3b 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800197e:	f000 fe9d 	bl	80026bc <SSD1306_UpdateScreen>

	  SSD1306_Clear();
 8001982:	f000 ff57 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse8,128,64,1);
 8001986:	4a2a      	ldr	r2, [pc, #168]	; (8001a30 <main+0x3cc>)
 8001988:	2301      	movs	r3, #1
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	2100      	movs	r1, #0
 8001994:	2000      	movs	r0, #0
 8001996:	f000 fd2d 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 800199a:	f000 fe8f 	bl	80026bc <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 800199e:	f000 ff49 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse9,128,64,1);
 80019a2:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <main+0x3d0>)
 80019a4:	2301      	movs	r3, #1
 80019a6:	9301      	str	r3, [sp, #4]
 80019a8:	2340      	movs	r3, #64	; 0x40
 80019aa:	9300      	str	r3, [sp, #0]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	2100      	movs	r1, #0
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 fd1f 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80019b6:	f000 fe81 	bl	80026bc <SSD1306_UpdateScreen>


	  SSD1306_Clear();
 80019ba:	f000 ff3b 	bl	8002834 <SSD1306_Clear>
	  SSD1306_DrawBitmap(0,0,horse10,128,64,1);
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <main+0x3d4>)
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2340      	movs	r3, #64	; 0x40
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	2100      	movs	r1, #0
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 fd11 	bl	80023f4 <SSD1306_DrawBitmap>
	  SSD1306_UpdateScreen();
 80019d2:	f000 fe73 	bl	80026bc <SSD1306_UpdateScreen>
  {
 80019d6:	e6e9      	b.n	80017ac <main+0x148>
 80019d8:	200000c0 	.word	0x200000c0
 80019dc:	200001f4 	.word	0x200001f4
 80019e0:	08006ee8 	.word	0x08006ee8
 80019e4:	20000204 	.word	0x20000204
 80019e8:	20000160 	.word	0x20000160
 80019ec:	08006f10 	.word	0x08006f10
 80019f0:	08006f28 	.word	0x08006f28
 80019f4:	08006f3c 	.word	0x08006f3c
 80019f8:	080097a0 	.word	0x080097a0
 80019fc:	08006f4c 	.word	0x08006f4c
 8001a00:	08006f5c 	.word	0x08006f5c
 8001a04:	08006f6c 	.word	0x08006f6c
 8001a08:	08006f7c 	.word	0x08006f7c
 8001a0c:	08006f8c 	.word	0x08006f8c
 8001a10:	08006f94 	.word	0x08006f94
 8001a14:	08006fa0 	.word	0x08006fa0
 8001a18:	080073a0 	.word	0x080073a0
 8001a1c:	080077a0 	.word	0x080077a0
 8001a20:	08007ba0 	.word	0x08007ba0
 8001a24:	08007fa0 	.word	0x08007fa0
 8001a28:	080083a0 	.word	0x080083a0
 8001a2c:	080087a0 	.word	0x080087a0
 8001a30:	08008ba0 	.word	0x08008ba0
 8001a34:	08008fa0 	.word	0x08008fa0
 8001a38:	080093a0 	.word	0x080093a0

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b093      	sub	sp, #76	; 0x4c
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	2410      	movs	r4, #16
 8001a44:	193b      	adds	r3, r7, r4
 8001a46:	0018      	movs	r0, r3
 8001a48:	2338      	movs	r3, #56	; 0x38
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	f004 fdb5 	bl	80065bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a52:	003b      	movs	r3, r7
 8001a54:	0018      	movs	r0, r3
 8001a56:	2310      	movs	r3, #16
 8001a58:	001a      	movs	r2, r3
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f004 fdae 	bl	80065bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	0018      	movs	r0, r3
 8001a66:	f002 fcf5 	bl	8004454 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	2280      	movs	r2, #128	; 0x80
 8001a74:	0052      	lsls	r2, r2, #1
 8001a76:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a84:	193b      	adds	r3, r7, r4
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f002 fd2d 	bl	80044ec <HAL_RCC_OscConfig>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001a96:	f000 f979 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9a:	003b      	movs	r3, r7
 8001a9c:	2207      	movs	r2, #7
 8001a9e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aa0:	003b      	movs	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa6:	003b      	movs	r3, r7
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aac:	003b      	movs	r3, r7
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ab2:	003b      	movs	r3, r7
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f003 f832 	bl	8004b20 <HAL_RCC_ClockConfig>
 8001abc:	1e03      	subs	r3, r0, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001ac0:	f000 f964 	bl	8001d8c <Error_Handler>
  }
}
 8001ac4:	46c0      	nop			; (mov r8, r8)
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	b013      	add	sp, #76	; 0x4c
 8001aca:	bd90      	pop	{r4, r7, pc}

08001acc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ad2:	4a1c      	ldr	r2, [pc, #112]	; (8001b44 <MX_I2C1_Init+0x78>)
 8001ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010061A;
 8001ad6:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	; (8001b48 <MX_I2C1_Init+0x7c>)
 8001ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f001 fbd9 	bl	80032c0 <HAL_I2C_Init>
 8001b0e:	1e03      	subs	r3, r0, #0
 8001b10:	d001      	beq.n	8001b16 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001b12:	f000 f93b 	bl	8001d8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b18:	2100      	movs	r1, #0
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f002 fc02 	bl	8004324 <HAL_I2CEx_ConfigAnalogFilter>
 8001b20:	1e03      	subs	r3, r0, #0
 8001b22:	d001      	beq.n	8001b28 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001b24:	f000 f932 	bl	8001d8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <MX_I2C1_Init+0x74>)
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f002 fc45 	bl	80043bc <HAL_I2CEx_ConfigDigitalFilter>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b36:	f000 f929 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	200000c0 	.word	0x200000c0
 8001b44:	40005400 	.word	0x40005400
 8001b48:	0010061a 	.word	0x0010061a

08001b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b088      	sub	sp, #32
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	2310      	movs	r3, #16
 8001b54:	18fb      	adds	r3, r7, r3
 8001b56:	0018      	movs	r0, r3
 8001b58:	2310      	movs	r3, #16
 8001b5a:	001a      	movs	r2, r3
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	f004 fd2d 	bl	80065bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	0018      	movs	r0, r3
 8001b66:	230c      	movs	r3, #12
 8001b68:	001a      	movs	r2, r3
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	f004 fd26 	bl	80065bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b70:	4b21      	ldr	r3, [pc, #132]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001b72:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <MX_TIM1_Init+0xb0>)
 8001b74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001b78:	220f      	movs	r2, #15
 8001b7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001b84:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <MX_TIM1_Init+0xb4>)
 8001b86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b8e:	4b1a      	ldr	r3, [pc, #104]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b9a:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f003 fb21 	bl	80051e4 <HAL_TIM_Base_Init>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001ba6:	f000 f8f1 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001baa:	2110      	movs	r1, #16
 8001bac:	187b      	adds	r3, r7, r1
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	0152      	lsls	r2, r2, #5
 8001bb2:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bb4:	187a      	adds	r2, r7, r1
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001bb8:	0011      	movs	r1, r2
 8001bba:	0018      	movs	r0, r3
 8001bbc:	f003 fb6a 	bl	8005294 <HAL_TIM_ConfigClockSource>
 8001bc0:	1e03      	subs	r3, r0, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f000 f8e2 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001bda:	1d3a      	adds	r2, r7, #4
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <MX_TIM1_Init+0xac>)
 8001bde:	0011      	movs	r1, r2
 8001be0:	0018      	movs	r0, r3
 8001be2:	f003 fd57 	bl	8005694 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001bea:	f000 f8cf 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b008      	add	sp, #32
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000114 	.word	0x20000114
 8001bfc:	40012c00 	.word	0x40012c00
 8001c00:	0000fffe 	.word	0x0000fffe

08001c04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c0a:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <MX_USART2_UART_Init+0x98>)
 8001c0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c10:	22e1      	movs	r2, #225	; 0xe1
 8001c12:	0252      	lsls	r2, r2, #9
 8001c14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c2a:	220c      	movs	r2, #12
 8001c2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c40:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f003 fd8e 	bl	8005770 <HAL_UART_Init>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d001      	beq.n	8001c5c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c58:	f000 f898 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	0018      	movs	r0, r3
 8001c62:	f004 fbab 	bl	80063bc <HAL_UARTEx_SetTxFifoThreshold>
 8001c66:	1e03      	subs	r3, r0, #0
 8001c68:	d001      	beq.n	8001c6e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001c6a:	f000 f88f 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c70:	2100      	movs	r1, #0
 8001c72:	0018      	movs	r0, r3
 8001c74:	f004 fbe2 	bl	800643c <HAL_UARTEx_SetRxFifoThreshold>
 8001c78:	1e03      	subs	r3, r0, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001c7c:	f000 f886 	bl	8001d8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <MX_USART2_UART_Init+0x94>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f004 fb60 	bl	8006348 <HAL_UARTEx_DisableFifoMode>
 8001c88:	1e03      	subs	r3, r0, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001c8c:	f000 f87e 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c90:	46c0      	nop			; (mov r8, r8)
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	46c0      	nop			; (mov r8, r8)
 8001c98:	20000160 	.word	0x20000160
 8001c9c:	40004400 	.word	0x40004400

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b08b      	sub	sp, #44	; 0x2c
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	2414      	movs	r4, #20
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	0018      	movs	r0, r3
 8001cac:	2314      	movs	r3, #20
 8001cae:	001a      	movs	r2, r3
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	f004 fc83 	bl	80065bc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	4b33      	ldr	r3, [pc, #204]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cba:	4b32      	ldr	r3, [pc, #200]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001cbc:	2104      	movs	r1, #4
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	4013      	ands	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd2:	4b2c      	ldr	r3, [pc, #176]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cda:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cde:	2220      	movs	r2, #32
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce6:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cea:	4b26      	ldr	r3, [pc, #152]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001cec:	2101      	movs	r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cfe:	4b21      	ldr	r3, [pc, #132]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001d04:	2102      	movs	r1, #2
 8001d06:	430a      	orrs	r2, r1
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <MX_GPIO_Init+0xe4>)
 8001d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d16:	23a0      	movs	r3, #160	; 0xa0
 8001d18:	05db      	lsls	r3, r3, #23
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	21e0      	movs	r1, #224	; 0xe0
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f001 fab0 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d24:	4b18      	ldr	r3, [pc, #96]	; (8001d88 <MX_GPIO_Init+0xe8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	2101      	movs	r1, #1
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f001 faaa 	bl	8003284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	22e0      	movs	r2, #224	; 0xe0
 8001d34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	2201      	movs	r2, #1
 8001d3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	193a      	adds	r2, r7, r4
 8001d4a:	23a0      	movs	r3, #160	; 0xa0
 8001d4c:	05db      	lsls	r3, r3, #23
 8001d4e:	0011      	movs	r1, r2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f001 f933 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d56:	0021      	movs	r1, r4
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2201      	movs	r2, #1
 8001d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d70:	187b      	adds	r3, r7, r1
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <MX_GPIO_Init+0xe8>)
 8001d74:	0019      	movs	r1, r3
 8001d76:	0010      	movs	r0, r2
 8001d78:	f001 f920 	bl	8002fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d7c:	46c0      	nop			; (mov r8, r8)
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	b00b      	add	sp, #44	; 0x2c
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	50000400 	.word	0x50000400

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <Error_Handler+0x8>

08001d96 <SPL06_007_Initialise>:
#include "spl06-007.h"

/*
 * INITIALISATION
 */
uint8_t SPL06_007_Initialise( SPL06_007 *dev, I2C_HandleTypeDef *i2cHandle ){
 8001d96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d98:	b085      	sub	sp, #20
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]

	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	601a      	str	r2, [r3, #0]

	dev->compensatedPressure = 0.0f;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	605a      	str	r2, [r3, #4]

	dev->compensatedTemperature = 0.0f;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	609a      	str	r2, [r3, #8]

	dev->scaleFactor = 2088960;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	22ff      	movs	r2, #255	; 0xff
 8001db6:	0352      	lsls	r2, r2, #13
 8001db8:	60da      	str	r2, [r3, #12]

	/* Store number of transaction errors (to be returned at end of function */
	uint8_t errNum = 0;
 8001dba:	250f      	movs	r5, #15
 8001dbc:	197b      	adds	r3, r7, r5
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	/* Check device Product and Revision ID (DATASHEET PAGE 27) */
	uint8_t regData;
	status = SPL06_007_ReadRegister( dev, SPL06007_I2C_ID_ADDR, &regData);
 8001dc2:	260e      	movs	r6, #14
 8001dc4:	19bc      	adds	r4, r7, r6
 8001dc6:	230d      	movs	r3, #13
 8001dc8:	18fa      	adds	r2, r7, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	210d      	movs	r1, #13
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 f9bc 	bl	800214c <SPL06_007_ReadRegister>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001dd8:	19bb      	adds	r3, r7, r6
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	1e5a      	subs	r2, r3, #1
 8001dde:	4193      	sbcs	r3, r2
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	0019      	movs	r1, r3
 8001de4:	197b      	adds	r3, r7, r5
 8001de6:	197a      	adds	r2, r7, r5
 8001de8:	7812      	ldrb	r2, [r2, #0]
 8001dea:	188a      	adds	r2, r1, r2
 8001dec:	701a      	strb	r2, [r3, #0]

	if ( regData != SPL06007_I2C_REV_ID){
 8001dee:	230d      	movs	r3, #13
 8001df0:	18fb      	adds	r3, r7, r3
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d001      	beq.n	8001dfc <SPL06_007_Initialise+0x66>
		return 255;
 8001df8:	23ff      	movs	r3, #255	; 0xff
 8001dfa:	e069      	b.n	8001ed0 <SPL06_007_Initialise+0x13a>
	}

	/* Set Pressure Configuration (PRS_CFG) measurement rate and over sampling rate */
	/* Hard coded to: PM_RATE[2:0] = 111 - 128 measurements pr. sec.
					  PM_PRC[3:0] = 0110 *) - 64 times (High Precision) */
	uint8_t setRegValuePRS = 0x77;
 8001dfc:	210c      	movs	r1, #12
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	2277      	movs	r2, #119	; 0x77
 8001e02:	701a      	strb	r2, [r3, #0]
	status = SPL06_007_WriteRegister(dev, SPL06_REG_PRS_CFG_ADDR, &setRegValuePRS);
 8001e04:	250e      	movs	r5, #14
 8001e06:	197c      	adds	r4, r7, r5
 8001e08:	187a      	adds	r2, r7, r1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2106      	movs	r1, #6
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 f9ba 	bl	8002188 <SPL06_007_WriteRegister>
 8001e14:	0003      	movs	r3, r0
 8001e16:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001e18:	0028      	movs	r0, r5
 8001e1a:	183b      	adds	r3, r7, r0
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	1e5a      	subs	r2, r3, #1
 8001e20:	4193      	sbcs	r3, r2
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	0019      	movs	r1, r3
 8001e26:	250f      	movs	r5, #15
 8001e28:	197b      	adds	r3, r7, r5
 8001e2a:	197a      	adds	r2, r7, r5
 8001e2c:	7812      	ldrb	r2, [r2, #0]
 8001e2e:	188a      	adds	r2, r1, r2
 8001e30:	701a      	strb	r2, [r3, #0]

	/* Set Temperature Configuration (TMP_CFG) measurement rate and over sampling rate */
	/* Hard coded to: TMP_RATE[2:0] = 111 - 128 measurements pr. sec.
					  TMP_PRC[2:0] = 111 - 128 times. */
	uint8_t setRegValueTMP = 0xF7;
 8001e32:	210b      	movs	r1, #11
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	22f7      	movs	r2, #247	; 0xf7
 8001e38:	701a      	strb	r2, [r3, #0]
	status = SPL06_007_WriteRegister(dev, SPL06_REG_TMP_CFG_ADDR, &setRegValueTMP);
 8001e3a:	0006      	movs	r6, r0
 8001e3c:	183c      	adds	r4, r7, r0
 8001e3e:	187a      	adds	r2, r7, r1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2107      	movs	r1, #7
 8001e44:	0018      	movs	r0, r3
 8001e46:	f000 f99f 	bl	8002188 <SPL06_007_WriteRegister>
 8001e4a:	0003      	movs	r3, r0
 8001e4c:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001e4e:	0030      	movs	r0, r6
 8001e50:	183b      	adds	r3, r7, r0
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	1e5a      	subs	r2, r3, #1
 8001e56:	4193      	sbcs	r3, r2
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	0019      	movs	r1, r3
 8001e5c:	197b      	adds	r3, r7, r5
 8001e5e:	197a      	adds	r2, r7, r5
 8001e60:	7812      	ldrb	r2, [r2, #0]
 8001e62:	188a      	adds	r2, r1, r2
 8001e64:	701a      	strb	r2, [r3, #0]

	/* Set Interrupt and FIFO configuration (CFG_REG) */
	/* Hard coded to: T_SHIFT = Must be set to '1' when the oversampling rate is >8 times.
					  P_SHIFT = Must be set to '1' when the oversampling rate is >8 times. */
	uint8_t setRegValueCFG = 0xC;
 8001e66:	210a      	movs	r1, #10
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	701a      	strb	r2, [r3, #0]
	status = SPL06_007_WriteRegister(dev, SPL06_REG_CFG_REG_ADDR, &setRegValueCFG);
 8001e6e:	0006      	movs	r6, r0
 8001e70:	183c      	adds	r4, r7, r0
 8001e72:	187a      	adds	r2, r7, r1
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2109      	movs	r1, #9
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f000 f985 	bl	8002188 <SPL06_007_WriteRegister>
 8001e7e:	0003      	movs	r3, r0
 8001e80:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001e82:	0030      	movs	r0, r6
 8001e84:	183b      	adds	r3, r7, r0
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	1e5a      	subs	r2, r3, #1
 8001e8a:	4193      	sbcs	r3, r2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	0019      	movs	r1, r3
 8001e90:	197b      	adds	r3, r7, r5
 8001e92:	197a      	adds	r2, r7, r5
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	188a      	adds	r2, r1, r2
 8001e98:	701a      	strb	r2, [r3, #0]

	/* Set Sensor Operating Mode and Status (MEAS_CFG) */
	/* Hard coded to: 111 - Continuous pressure and temperature measurement */
	uint8_t setRegValueMEAS = 0xC7;
 8001e9a:	2109      	movs	r1, #9
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	22c7      	movs	r2, #199	; 0xc7
 8001ea0:	701a      	strb	r2, [r3, #0]
	status = SPL06_007_WriteRegister(dev, SPL06_REG_MEAS_CFG_ADDR, &setRegValueMEAS);
 8001ea2:	0006      	movs	r6, r0
 8001ea4:	183c      	adds	r4, r7, r0
 8001ea6:	187a      	adds	r2, r7, r1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2108      	movs	r1, #8
 8001eac:	0018      	movs	r0, r3
 8001eae:	f000 f96b 	bl	8002188 <SPL06_007_WriteRegister>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	7023      	strb	r3, [r4, #0]
	errNum += ( status != HAL_OK );	/* Increment error count if error countered */
 8001eb6:	19bb      	adds	r3, r7, r6
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	1e5a      	subs	r2, r3, #1
 8001ebc:	4193      	sbcs	r3, r2
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	0019      	movs	r1, r3
 8001ec2:	197b      	adds	r3, r7, r5
 8001ec4:	197a      	adds	r2, r7, r5
 8001ec6:	7812      	ldrb	r2, [r2, #0]
 8001ec8:	188a      	adds	r2, r1, r2
 8001eca:	701a      	strb	r2, [r3, #0]

	/* Return number of errors */
	return errNum;					/* 0 means successful setup */
 8001ecc:	197b      	adds	r3, r7, r5
 8001ece:	781b      	ldrb	r3, [r3, #0]
}
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	b005      	add	sp, #20
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed8 <SPL06_007_calcCompTemp>:
 */
uint8_t SPL06_007_calcCompPressure( SPL06_007 *dev ){

}

uint32_t SPL06_007_calcCompTemp( SPL06_007 *dev, int32_t rawTemp ){
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	uint32_t compTemp;
	int16_t c0 = SPL06_007_getSplitHighCoefficient(dev, SPL06_REG_C0, SPL06_REG_C01C1);
 8001ee2:	250e      	movs	r5, #14
 8001ee4:	197c      	adds	r4, r7, r5
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2211      	movs	r2, #17
 8001eea:	2110      	movs	r1, #16
 8001eec:	0018      	movs	r0, r3
 8001eee:	f000 f87b 	bl	8001fe8 <SPL06_007_getSplitHighCoefficient>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	8023      	strh	r3, [r4, #0]
	int16_t c1 = SPL06_007_getSplitLowCoefficient(dev, SPL06_REG_C01C1, SPL06_REG_C1);
 8001ef6:	260c      	movs	r6, #12
 8001ef8:	19bc      	adds	r4, r7, r6
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2212      	movs	r2, #18
 8001efe:	2111      	movs	r1, #17
 8001f00:	0018      	movs	r0, r3
 8001f02:	f000 f8a9 	bl	8002058 <SPL06_007_getSplitLowCoefficient>
 8001f06:	0003      	movs	r3, r0
 8001f08:	8023      	strh	r3, [r4, #0]

	compTemp = rawTemp / 2088960;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	22ff      	movs	r2, #255	; 0xff
 8001f0e:	0351      	lsls	r1, r2, #13
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7fe f993 	bl	800023c <__divsi3>
 8001f16:	0003      	movs	r3, r0
 8001f18:	60bb      	str	r3, [r7, #8]

	compTemp = (int32_t)((c0 * 0.5) + (c1 * compTemp));
 8001f1a:	197b      	adds	r3, r7, r5
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	5e9b      	ldrsh	r3, [r3, r2]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff f9bb 	bl	800129c <__aeabi_i2d>
 8001f26:	2200      	movs	r2, #0
 8001f28:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <SPL06_007_calcCompTemp+0x94>)
 8001f2a:	f7fe febf 	bl	8000cac <__aeabi_dmul>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	000b      	movs	r3, r1
 8001f32:	0014      	movs	r4, r2
 8001f34:	001d      	movs	r5, r3
 8001f36:	19bb      	adds	r3, r7, r6
 8001f38:	2200      	movs	r2, #0
 8001f3a:	5e9b      	ldrsh	r3, [r3, r2]
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	4353      	muls	r3, r2
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff f9db 	bl	80012fc <__aeabi_ui2d>
 8001f46:	0002      	movs	r2, r0
 8001f48:	000b      	movs	r3, r1
 8001f4a:	0020      	movs	r0, r4
 8001f4c:	0029      	movs	r1, r5
 8001f4e:	f7fe fb4d 	bl	80005ec <__aeabi_dadd>
 8001f52:	0002      	movs	r2, r0
 8001f54:	000b      	movs	r3, r1
 8001f56:	0010      	movs	r0, r2
 8001f58:	0019      	movs	r1, r3
 8001f5a:	f7ff f969 	bl	8001230 <__aeabi_d2iz>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	60bb      	str	r3, [r7, #8]

	return (int32_t)compTemp;
 8001f62:	68bb      	ldr	r3, [r7, #8]
}
 8001f64:	0018      	movs	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	b005      	add	sp, #20
 8001f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6c:	3fe00000 	.word	0x3fe00000

08001f70 <SPL06_007_getRawTemp>:

uint8_t SPL06_007_getRawPressure( SPL06_007 *dev ){

}

int32_t SPL06_007_getRawTemp( SPL06_007 *dev ){
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
	int32_t rawTemp;

	uint8_t TMP_B2 = SPL06_007_getRegisterValue(dev, SPL06_REG_TMP_B2_ADDR);
 8001f78:	250b      	movs	r5, #11
 8001f7a:	197c      	adds	r4, r7, r5
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2103      	movs	r1, #3
 8001f80:	0018      	movs	r0, r3
 8001f82:	f000 f8ce 	bl	8002122 <SPL06_007_getRegisterValue>
 8001f86:	0003      	movs	r3, r0
 8001f88:	7023      	strb	r3, [r4, #0]
	uint8_t TMP_B1 = SPL06_007_getRegisterValue(dev, SPL06_REG_TMP_B1_ADDR);
 8001f8a:	260a      	movs	r6, #10
 8001f8c:	19bc      	adds	r4, r7, r6
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2104      	movs	r1, #4
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 f8c5 	bl	8002122 <SPL06_007_getRegisterValue>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	7023      	strb	r3, [r4, #0]
	uint8_t TMP_B0 = SPL06_007_getRegisterValue(dev, SPL06_REG_TMP_B0_ADDR);
 8001f9c:	2309      	movs	r3, #9
 8001f9e:	18fc      	adds	r4, r7, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2105      	movs	r1, #5
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	f000 f8bc 	bl	8002122 <SPL06_007_getRegisterValue>
 8001faa:	0003      	movs	r3, r0
 8001fac:	7023      	strb	r3, [r4, #0]

	rawTemp = (TMP_B2 << 8) | TMP_B1;
 8001fae:	197b      	adds	r3, r7, r5
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	021a      	lsls	r2, r3, #8
 8001fb4:	19bb      	adds	r3, r7, r6
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
	rawTemp = (rawTemp << 8) | TMP_B0;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
 8001fc0:	2309      	movs	r3, #9
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]

	if(rawTemp & (1 << 23))
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	041b      	lsls	r3, r3, #16
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d004      	beq.n	8001fde <SPL06_007_getRawTemp+0x6e>
		rawTemp = rawTemp | 0XFF000000; // Set left bits to one for 2's complement conversion of negitive number
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	22ff      	movs	r2, #255	; 0xff
 8001fd8:	0612      	lsls	r2, r2, #24
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	60fb      	str	r3, [r7, #12]


	return rawTemp;
 8001fde:	68fb      	ldr	r3, [r7, #12]

}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b005      	add	sp, #20
 8001fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fe8 <SPL06_007_getSplitHighCoefficient>:

int16_t SPL06_007_getSplitHighCoefficient( SPL06_007 *dev, uint8_t regHigh, uint8_t regLow){
 8001fe8:	b5b0      	push	{r4, r5, r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	0008      	movs	r0, r1
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	1cfb      	adds	r3, r7, #3
 8001ff6:	1c02      	adds	r2, r0, #0
 8001ff8:	701a      	strb	r2, [r3, #0]
 8001ffa:	1cbb      	adds	r3, r7, #2
 8001ffc:	1c0a      	adds	r2, r1, #0
 8001ffe:	701a      	strb	r2, [r3, #0]

	uint8_t cHigh = SPL06_007_getRegisterValue(dev, regHigh);
 8002000:	250f      	movs	r5, #15
 8002002:	197c      	adds	r4, r7, r5
 8002004:	1cfb      	adds	r3, r7, #3
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	0011      	movs	r1, r2
 800200c:	0018      	movs	r0, r3
 800200e:	f000 f888 	bl	8002122 <SPL06_007_getRegisterValue>
 8002012:	0003      	movs	r3, r0
 8002014:	7023      	strb	r3, [r4, #0]
	uint8_t cLow = (SPL06_007_getRegisterValue(dev, regLow) >> 4);
 8002016:	1cbb      	adds	r3, r7, #2
 8002018:	781a      	ldrb	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0011      	movs	r1, r2
 800201e:	0018      	movs	r0, r3
 8002020:	f000 f87f 	bl	8002122 <SPL06_007_getRegisterValue>
 8002024:	0003      	movs	r3, r0
 8002026:	001a      	movs	r2, r3
 8002028:	210e      	movs	r1, #14
 800202a:	187b      	adds	r3, r7, r1
 800202c:	0912      	lsrs	r2, r2, #4
 800202e:	701a      	strb	r2, [r3, #0]

	int16_t c = read_12_bit_value(cHigh, cLow);
 8002030:	187b      	adds	r3, r7, r1
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	197b      	adds	r3, r7, r5
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	0011      	movs	r1, r2
 800203a:	0018      	movs	r0, r3
 800203c:	f000 f856 	bl	80020ec <read_12_bit_value>
 8002040:	0003      	movs	r3, r0
 8002042:	001a      	movs	r2, r3
 8002044:	210c      	movs	r1, #12
 8002046:	187b      	adds	r3, r7, r1
 8002048:	801a      	strh	r2, [r3, #0]
	return c;
 800204a:	187b      	adds	r3, r7, r1
 800204c:	2200      	movs	r2, #0
 800204e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002050:	0018      	movs	r0, r3
 8002052:	46bd      	mov	sp, r7
 8002054:	b004      	add	sp, #16
 8002056:	bdb0      	pop	{r4, r5, r7, pc}

08002058 <SPL06_007_getSplitLowCoefficient>:

int16_t SPL06_007_getSplitLowCoefficient( SPL06_007 *dev, uint8_t regHigh, uint8_t regLow){
 8002058:	b5b0      	push	{r4, r5, r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	0008      	movs	r0, r1
 8002062:	0011      	movs	r1, r2
 8002064:	1cfb      	adds	r3, r7, #3
 8002066:	1c02      	adds	r2, r0, #0
 8002068:	701a      	strb	r2, [r3, #0]
 800206a:	1cbb      	adds	r3, r7, #2
 800206c:	1c0a      	adds	r2, r1, #0
 800206e:	701a      	strb	r2, [r3, #0]

	uint8_t cHigh = SPL06_007_getRegisterValue(dev, regHigh);
 8002070:	250d      	movs	r5, #13
 8002072:	197c      	adds	r4, r7, r5
 8002074:	1cfb      	adds	r3, r7, #3
 8002076:	781a      	ldrb	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	0011      	movs	r1, r2
 800207c:	0018      	movs	r0, r3
 800207e:	f000 f850 	bl	8002122 <SPL06_007_getRegisterValue>
 8002082:	0003      	movs	r3, r0
 8002084:	7023      	strb	r3, [r4, #0]
	uint8_t cLow = (SPL06_007_getRegisterValue(dev, regLow) & 0x0F);
 8002086:	1cbb      	adds	r3, r7, #2
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0011      	movs	r1, r2
 800208e:	0018      	movs	r0, r3
 8002090:	f000 f847 	bl	8002122 <SPL06_007_getRegisterValue>
 8002094:	0003      	movs	r3, r0
 8002096:	0019      	movs	r1, r3
 8002098:	200c      	movs	r0, #12
 800209a:	183b      	adds	r3, r7, r0
 800209c:	220f      	movs	r2, #15
 800209e:	400a      	ands	r2, r1
 80020a0:	701a      	strb	r2, [r3, #0]

	int16_t c = read_12_bit_value(cHigh, cLow);
 80020a2:	183b      	adds	r3, r7, r0
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	197b      	adds	r3, r7, r5
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	0011      	movs	r1, r2
 80020ac:	0018      	movs	r0, r3
 80020ae:	f000 f81d 	bl	80020ec <read_12_bit_value>
 80020b2:	0003      	movs	r3, r0
 80020b4:	001a      	movs	r2, r3
 80020b6:	210e      	movs	r1, #14
 80020b8:	187b      	adds	r3, r7, r1
 80020ba:	801a      	strh	r2, [r3, #0]
	if(c & (1 << 11)) 		// Check for 2's complement negative number
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	001a      	movs	r2, r3
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	4013      	ands	r3, r2
 80020c8:	d005      	beq.n	80020d6 <SPL06_007_getSplitLowCoefficient+0x7e>
	    c = c | 0XF000; 	// Set left bits to one for 2's complement conversion of negitive number
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	187a      	adds	r2, r7, r1
 80020ce:	8812      	ldrh	r2, [r2, #0]
 80020d0:	4905      	ldr	r1, [pc, #20]	; (80020e8 <SPL06_007_getSplitLowCoefficient+0x90>)
 80020d2:	430a      	orrs	r2, r1
 80020d4:	801a      	strh	r2, [r3, #0]

	return c;
 80020d6:	230e      	movs	r3, #14
 80020d8:	18fb      	adds	r3, r7, r3
 80020da:	2200      	movs	r2, #0
 80020dc:	5e9b      	ldrsh	r3, [r3, r2]
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b004      	add	sp, #16
 80020e4:	bdb0      	pop	{r4, r5, r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	fffff000 	.word	0xfffff000

080020ec <read_12_bit_value>:

/*
 * LOW-LEVEL FUNCTIONS
 */
uint16_t read_12_bit_value(uint8_t high_byte, uint8_t low_byte) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	0002      	movs	r2, r0
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	701a      	strb	r2, [r3, #0]
 80020f8:	1dbb      	adds	r3, r7, #6
 80020fa:	1c0a      	adds	r2, r1, #0
 80020fc:	701a      	strb	r2, [r3, #0]

    /* Combine the high_byte and low_byte to form the 12-bit value */
    uint16_t value = (high_byte << 4) | low_byte;
 80020fe:	1dfb      	adds	r3, r7, #7
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	b21a      	sxth	r2, r3
 8002106:	1dbb      	adds	r3, r7, #6
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	b21b      	sxth	r3, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	b21a      	sxth	r2, r3
 8002110:	210e      	movs	r1, #14
 8002112:	187b      	adds	r3, r7, r1
 8002114:	801a      	strh	r2, [r3, #0]

    return value;
 8002116:	187b      	adds	r3, r7, r1
 8002118:	881b      	ldrh	r3, [r3, #0]
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b004      	add	sp, #16
 8002120:	bd80      	pop	{r7, pc}

08002122 <SPL06_007_getRegisterValue>:

uint8_t SPL06_007_getRegisterValue( SPL06_007 *dev, uint8_t reg ){
 8002122:	b590      	push	{r4, r7, lr}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	000a      	movs	r2, r1
 800212c:	1cfb      	adds	r3, r7, #3
 800212e:	701a      	strb	r2, [r3, #0]

	uint8_t regData;
	SPL06_007_ReadRegister( dev, reg, &regData);
 8002130:	240f      	movs	r4, #15
 8002132:	193a      	adds	r2, r7, r4
 8002134:	1cfb      	adds	r3, r7, #3
 8002136:	7819      	ldrb	r1, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	0018      	movs	r0, r3
 800213c:	f000 f806 	bl	800214c <SPL06_007_ReadRegister>

	return regData;
 8002140:	193b      	adds	r3, r7, r4
 8002142:	781b      	ldrb	r3, [r3, #0]
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b005      	add	sp, #20
 800214a:	bd90      	pop	{r4, r7, pc}

0800214c <SPL06_007_ReadRegister>:

HAL_StatusTypeDef SPL06_007_ReadRegister( SPL06_007 *dev, uint8_t reg, uint8_t *data ){
 800214c:	b590      	push	{r4, r7, lr}
 800214e:	b089      	sub	sp, #36	; 0x24
 8002150:	af04      	add	r7, sp, #16
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	240b      	movs	r4, #11
 8002158:	193b      	adds	r3, r7, r4
 800215a:	1c0a      	adds	r2, r1, #0
 800215c:	701a      	strb	r2, [r3, #0]

	return HAL_I2C_Mem_Read(dev->i2cHandle, SPL06007_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6818      	ldr	r0, [r3, #0]
 8002162:	193b      	adds	r3, r7, r4
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b29a      	uxth	r2, r3
 8002168:	2301      	movs	r3, #1
 800216a:	425b      	negs	r3, r3
 800216c:	9302      	str	r3, [sp, #8]
 800216e:	2301      	movs	r3, #1
 8002170:	9301      	str	r3, [sp, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	2301      	movs	r3, #1
 8002178:	21ec      	movs	r1, #236	; 0xec
 800217a:	f001 fb9f 	bl	80038bc <HAL_I2C_Mem_Read>
 800217e:	0003      	movs	r3, r0

}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b005      	add	sp, #20
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <SPL06_007_WriteRegister>:

HAL_StatusTypeDef SPL06_007_WriteRegister( SPL06_007 *dev, uint8_t reg, uint8_t *data ){
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b089      	sub	sp, #36	; 0x24
 800218c:	af04      	add	r7, sp, #16
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	607a      	str	r2, [r7, #4]
 8002192:	240b      	movs	r4, #11
 8002194:	193b      	adds	r3, r7, r4
 8002196:	1c0a      	adds	r2, r1, #0
 8002198:	701a      	strb	r2, [r3, #0]

	return HAL_I2C_Mem_Write(dev->i2cHandle, SPL06007_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	2301      	movs	r3, #1
 80021a6:	425b      	negs	r3, r3
 80021a8:	9302      	str	r3, [sp, #8]
 80021aa:	2301      	movs	r3, #1
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2301      	movs	r3, #1
 80021b4:	21ec      	movs	r1, #236	; 0xec
 80021b6:	f001 fa53 	bl	8003660 <HAL_I2C_Mem_Write>
 80021ba:	0003      	movs	r3, r0
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	b005      	add	sp, #20
 80021c2:	bd90      	pop	{r4, r7, pc}

080021c4 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	0002      	movs	r2, r0
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	1dbb      	adds	r3, r7, #6
 80021d2:	1c0a      	adds	r2, r1, #0
 80021d4:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80021d6:	2226      	movs	r2, #38	; 0x26
 80021d8:	2100      	movs	r1, #0
 80021da:	2078      	movs	r0, #120	; 0x78
 80021dc:	f000 fbb4 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80021e0:	2200      	movs	r2, #0
 80021e2:	2100      	movs	r1, #0
 80021e4:	2078      	movs	r0, #120	; 0x78
 80021e6:	f000 fbaf 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	001a      	movs	r2, r3
 80021f0:	2100      	movs	r1, #0
 80021f2:	2078      	movs	r0, #120	; 0x78
 80021f4:	f000 fba8 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	2078      	movs	r0, #120	; 0x78
 80021fe:	f000 fba3 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002202:	1dbb      	adds	r3, r7, #6
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	001a      	movs	r2, r3
 8002208:	2100      	movs	r1, #0
 800220a:	2078      	movs	r0, #120	; 0x78
 800220c:	f000 fb9c 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002210:	2200      	movs	r2, #0
 8002212:	2100      	movs	r1, #0
 8002214:	2078      	movs	r0, #120	; 0x78
 8002216:	f000 fb97 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800221a:	22ff      	movs	r2, #255	; 0xff
 800221c:	2100      	movs	r1, #0
 800221e:	2078      	movs	r0, #120	; 0x78
 8002220:	f000 fb92 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002224:	222f      	movs	r2, #47	; 0x2f
 8002226:	2100      	movs	r1, #0
 8002228:	2078      	movs	r0, #120	; 0x78
 800222a:	f000 fb8d 	bl	8002948 <ssd1306_I2C_Write>
}
 800222e:	46c0      	nop			; (mov r8, r8)
 8002230:	46bd      	mov	sp, r7
 8002232:	b002      	add	sp, #8
 8002234:	bd80      	pop	{r7, pc}

08002236 <SSD1306_ScrollLeft>:


void SSD1306_ScrollLeft(uint8_t start_row, uint8_t end_row)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	0002      	movs	r2, r0
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	1dbb      	adds	r3, r7, #6
 8002244:	1c0a      	adds	r2, r1, #0
 8002246:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND (SSD1306_LEFT_HORIZONTAL_SCROLL);  // send 0x26
 8002248:	2227      	movs	r2, #39	; 0x27
 800224a:	2100      	movs	r1, #0
 800224c:	2078      	movs	r0, #120	; 0x78
 800224e:	f000 fb7b 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	2078      	movs	r0, #120	; 0x78
 8002258:	f000 fb76 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 800225c:	1dfb      	adds	r3, r7, #7
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	001a      	movs	r2, r3
 8002262:	2100      	movs	r1, #0
 8002264:	2078      	movs	r0, #120	; 0x78
 8002266:	f000 fb6f 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 800226a:	2200      	movs	r2, #0
 800226c:	2100      	movs	r1, #0
 800226e:	2078      	movs	r0, #120	; 0x78
 8002270:	f000 fb6a 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002274:	1dbb      	adds	r3, r7, #6
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	001a      	movs	r2, r3
 800227a:	2100      	movs	r1, #0
 800227c:	2078      	movs	r0, #120	; 0x78
 800227e:	f000 fb63 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002282:	2200      	movs	r2, #0
 8002284:	2100      	movs	r1, #0
 8002286:	2078      	movs	r0, #120	; 0x78
 8002288:	f000 fb5e 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800228c:	22ff      	movs	r2, #255	; 0xff
 800228e:	2100      	movs	r1, #0
 8002290:	2078      	movs	r0, #120	; 0x78
 8002292:	f000 fb59 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002296:	222f      	movs	r2, #47	; 0x2f
 8002298:	2100      	movs	r1, #0
 800229a:	2078      	movs	r0, #120	; 0x78
 800229c:	f000 fb54 	bl	8002948 <ssd1306_I2C_Write>
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <SSD1306_Scrolldiagright>:


void SSD1306_Scrolldiagright(uint8_t start_row, uint8_t end_row)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	0002      	movs	r2, r0
 80022b0:	1dfb      	adds	r3, r7, #7
 80022b2:	701a      	strb	r2, [r3, #0]
 80022b4:	1dbb      	adds	r3, r7, #6
 80022b6:	1c0a      	adds	r2, r1, #0
 80022b8:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 80022ba:	22a3      	movs	r2, #163	; 0xa3
 80022bc:	2100      	movs	r1, #0
 80022be:	2078      	movs	r0, #120	; 0x78
 80022c0:	f000 fb42 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 80022c4:	2200      	movs	r2, #0
 80022c6:	2100      	movs	r1, #0
 80022c8:	2078      	movs	r0, #120	; 0x78
 80022ca:	f000 fb3d 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 80022ce:	2240      	movs	r2, #64	; 0x40
 80022d0:	2100      	movs	r1, #0
 80022d2:	2078      	movs	r0, #120	; 0x78
 80022d4:	f000 fb38 	bl	8002948 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
 80022d8:	2229      	movs	r2, #41	; 0x29
 80022da:	2100      	movs	r1, #0
 80022dc:	2078      	movs	r0, #120	; 0x78
 80022de:	f000 fb33 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 80022e2:	2200      	movs	r2, #0
 80022e4:	2100      	movs	r1, #0
 80022e6:	2078      	movs	r0, #120	; 0x78
 80022e8:	f000 fb2e 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	001a      	movs	r2, r3
 80022f2:	2100      	movs	r1, #0
 80022f4:	2078      	movs	r0, #120	; 0x78
 80022f6:	f000 fb27 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	2078      	movs	r0, #120	; 0x78
 8002300:	f000 fb22 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 8002304:	1dbb      	adds	r3, r7, #6
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	001a      	movs	r2, r3
 800230a:	2100      	movs	r1, #0
 800230c:	2078      	movs	r0, #120	; 0x78
 800230e:	f000 fb1b 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8002312:	2201      	movs	r2, #1
 8002314:	2100      	movs	r1, #0
 8002316:	2078      	movs	r0, #120	; 0x78
 8002318:	f000 fb16 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 800231c:	222f      	movs	r2, #47	; 0x2f
 800231e:	2100      	movs	r1, #0
 8002320:	2078      	movs	r0, #120	; 0x78
 8002322:	f000 fb11 	bl	8002948 <ssd1306_I2C_Write>
}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	46bd      	mov	sp, r7
 800232a:	b002      	add	sp, #8
 800232c:	bd80      	pop	{r7, pc}

0800232e <SSD1306_Scrolldiagleft>:


void SSD1306_Scrolldiagleft(uint8_t start_row, uint8_t end_row)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	0002      	movs	r2, r0
 8002336:	1dfb      	adds	r3, r7, #7
 8002338:	701a      	strb	r2, [r3, #0]
 800233a:	1dbb      	adds	r3, r7, #6
 800233c:	1c0a      	adds	r2, r1, #0
 800233e:	701a      	strb	r2, [r3, #0]
  SSD1306_WRITECOMMAND(SSD1306_SET_VERTICAL_SCROLL_AREA);  // sect the area
 8002340:	22a3      	movs	r2, #163	; 0xa3
 8002342:	2100      	movs	r1, #0
 8002344:	2078      	movs	r0, #120	; 0x78
 8002346:	f000 faff 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);   // write dummy
 800234a:	2200      	movs	r2, #0
 800234c:	2100      	movs	r1, #0
 800234e:	2078      	movs	r0, #120	; 0x78
 8002350:	f000 fafa 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(SSD1306_HEIGHT);
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	2100      	movs	r1, #0
 8002358:	2078      	movs	r0, #120	; 0x78
 800235a:	f000 faf5 	bl	8002948 <ssd1306_I2C_Write>

  SSD1306_WRITECOMMAND(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
 800235e:	222a      	movs	r2, #42	; 0x2a
 8002360:	2100      	movs	r1, #0
 8002362:	2078      	movs	r0, #120	; 0x78
 8002364:	f000 faf0 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);
 8002368:	2200      	movs	r2, #0
 800236a:	2100      	movs	r1, #0
 800236c:	2078      	movs	r0, #120	; 0x78
 800236e:	f000 faeb 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);
 8002372:	1dfb      	adds	r3, r7, #7
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	001a      	movs	r2, r3
 8002378:	2100      	movs	r1, #0
 800237a:	2078      	movs	r0, #120	; 0x78
 800237c:	f000 fae4 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	2078      	movs	r0, #120	; 0x78
 8002386:	f000 fadf 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);
 800238a:	1dbb      	adds	r3, r7, #6
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	001a      	movs	r2, r3
 8002390:	2100      	movs	r1, #0
 8002392:	2078      	movs	r0, #120	; 0x78
 8002394:	f000 fad8 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x01);
 8002398:	2201      	movs	r2, #1
 800239a:	2100      	movs	r1, #0
 800239c:	2078      	movs	r0, #120	; 0x78
 800239e:	f000 fad3 	bl	8002948 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
 80023a2:	222f      	movs	r2, #47	; 0x2f
 80023a4:	2100      	movs	r1, #0
 80023a6:	2078      	movs	r0, #120	; 0x78
 80023a8:	f000 face 	bl	8002948 <ssd1306_I2C_Write>
}
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b002      	add	sp, #8
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <SSD1306_Stopscroll>:


void SSD1306_Stopscroll(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80023b8:	222e      	movs	r2, #46	; 0x2e
 80023ba:	2100      	movs	r1, #0
 80023bc:	2078      	movs	r0, #120	; 0x78
 80023be:	f000 fac3 	bl	8002948 <ssd1306_I2C_Write>
}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <SSD1306_InvertDisplay>:



void SSD1306_InvertDisplay (int i)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d005      	beq.n	80023e2 <SSD1306_InvertDisplay+0x1a>
 80023d6:	22a7      	movs	r2, #167	; 0xa7
 80023d8:	2100      	movs	r1, #0
 80023da:	2078      	movs	r0, #120	; 0x78
 80023dc:	f000 fab4 	bl	8002948 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 80023e0:	e004      	b.n	80023ec <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 80023e2:	22a6      	movs	r2, #166	; 0xa6
 80023e4:	2100      	movs	r1, #0
 80023e6:	2078      	movs	r0, #120	; 0x78
 80023e8:	f000 faae 	bl	8002948 <ssd1306_I2C_Write>
}
 80023ec:	46c0      	nop			; (mov r8, r8)
 80023ee:	46bd      	mov	sp, r7
 80023f0:	b002      	add	sp, #8
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <SSD1306_DrawBitmap>:


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b087      	sub	sp, #28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	0004      	movs	r4, r0
 80023fc:	0008      	movs	r0, r1
 80023fe:	60ba      	str	r2, [r7, #8]
 8002400:	0019      	movs	r1, r3
 8002402:	230e      	movs	r3, #14
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	1c22      	adds	r2, r4, #0
 8002408:	801a      	strh	r2, [r3, #0]
 800240a:	230c      	movs	r3, #12
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	1c02      	adds	r2, r0, #0
 8002410:	801a      	strh	r2, [r3, #0]
 8002412:	1dbb      	adds	r3, r7, #6
 8002414:	1c0a      	adds	r2, r1, #0
 8002416:	801a      	strh	r2, [r3, #0]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002418:	1dbb      	adds	r3, r7, #6
 800241a:	2200      	movs	r2, #0
 800241c:	5e9b      	ldrsh	r3, [r3, r2]
 800241e:	3307      	adds	r3, #7
 8002420:	2b00      	cmp	r3, #0
 8002422:	da00      	bge.n	8002426 <SSD1306_DrawBitmap+0x32>
 8002424:	3307      	adds	r3, #7
 8002426:	10db      	asrs	r3, r3, #3
 8002428:	001a      	movs	r2, r3
 800242a:	2310      	movs	r3, #16
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	801a      	strh	r2, [r3, #0]
    uint8_t byte = 0;
 8002430:	2317      	movs	r3, #23
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]

    for(int16_t j=0; j<h; j++, y++)
 8002438:	2314      	movs	r3, #20
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	2200      	movs	r2, #0
 800243e:	801a      	strh	r2, [r3, #0]
 8002440:	e068      	b.n	8002514 <SSD1306_DrawBitmap+0x120>
    {
        for(int16_t i=0; i<w; i++)
 8002442:	2312      	movs	r3, #18
 8002444:	18fb      	adds	r3, r7, r3
 8002446:	2200      	movs	r2, #0
 8002448:	801a      	strh	r2, [r3, #0]
 800244a:	e048      	b.n	80024de <SSD1306_DrawBitmap+0xea>
        {
            if(i & 7)
 800244c:	2312      	movs	r3, #18
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	001a      	movs	r2, r3
 8002454:	2307      	movs	r3, #7
 8002456:	4013      	ands	r3, r2
 8002458:	d006      	beq.n	8002468 <SSD1306_DrawBitmap+0x74>
            {
               byte <<= 1;
 800245a:	2317      	movs	r3, #23
 800245c:	18fa      	adds	r2, r7, r3
 800245e:	18fb      	adds	r3, r7, r3
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	18db      	adds	r3, r3, r3
 8002464:	7013      	strb	r3, [r2, #0]
 8002466:	e019      	b.n	800249c <SSD1306_DrawBitmap+0xa8>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002468:	2314      	movs	r3, #20
 800246a:	18fb      	adds	r3, r7, r3
 800246c:	2200      	movs	r2, #0
 800246e:	5e9b      	ldrsh	r3, [r3, r2]
 8002470:	2210      	movs	r2, #16
 8002472:	18ba      	adds	r2, r7, r2
 8002474:	2100      	movs	r1, #0
 8002476:	5e52      	ldrsh	r2, [r2, r1]
 8002478:	435a      	muls	r2, r3
 800247a:	2312      	movs	r3, #18
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2100      	movs	r1, #0
 8002480:	5e5b      	ldrsh	r3, [r3, r1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	da00      	bge.n	8002488 <SSD1306_DrawBitmap+0x94>
 8002486:	3307      	adds	r3, #7
 8002488:	10db      	asrs	r3, r3, #3
 800248a:	b21b      	sxth	r3, r3
 800248c:	18d3      	adds	r3, r2, r3
 800248e:	001a      	movs	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	189a      	adds	r2, r3, r2
 8002494:	2317      	movs	r3, #23
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	7812      	ldrb	r2, [r2, #0]
 800249a:	701a      	strb	r2, [r3, #0]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800249c:	2317      	movs	r3, #23
 800249e:	18fb      	adds	r3, r7, r3
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	b25b      	sxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	da11      	bge.n	80024cc <SSD1306_DrawBitmap+0xd8>
 80024a8:	230e      	movs	r3, #14
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	2312      	movs	r3, #18
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	b298      	uxth	r0, r3
 80024b8:	230c      	movs	r3, #12
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	8819      	ldrh	r1, [r3, #0]
 80024be:	232c      	movs	r3, #44	; 0x2c
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	001a      	movs	r2, r3
 80024c8:	f000 f946 	bl	8002758 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80024cc:	2112      	movs	r1, #18
 80024ce:	187b      	adds	r3, r7, r1
 80024d0:	2200      	movs	r2, #0
 80024d2:	5e9b      	ldrsh	r3, [r3, r2]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	b29a      	uxth	r2, r3
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	2312      	movs	r3, #18
 80024e0:	18fa      	adds	r2, r7, r3
 80024e2:	1dbb      	adds	r3, r7, #6
 80024e4:	2100      	movs	r1, #0
 80024e6:	5e52      	ldrsh	r2, [r2, r1]
 80024e8:	2100      	movs	r1, #0
 80024ea:	5e5b      	ldrsh	r3, [r3, r1]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbad      	blt.n	800244c <SSD1306_DrawBitmap+0x58>
    for(int16_t j=0; j<h; j++, y++)
 80024f0:	2114      	movs	r1, #20
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2200      	movs	r2, #0
 80024f6:	5e9b      	ldrsh	r3, [r3, r2]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3301      	adds	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	801a      	strh	r2, [r3, #0]
 8002502:	210c      	movs	r1, #12
 8002504:	187b      	adds	r3, r7, r1
 8002506:	2200      	movs	r2, #0
 8002508:	5e9b      	ldrsh	r3, [r3, r2]
 800250a:	b29b      	uxth	r3, r3
 800250c:	3301      	adds	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	187b      	adds	r3, r7, r1
 8002512:	801a      	strh	r2, [r3, #0]
 8002514:	2314      	movs	r3, #20
 8002516:	18fa      	adds	r2, r7, r3
 8002518:	2328      	movs	r3, #40	; 0x28
 800251a:	18fb      	adds	r3, r7, r3
 800251c:	2100      	movs	r1, #0
 800251e:	5e52      	ldrsh	r2, [r2, r1]
 8002520:	2100      	movs	r1, #0
 8002522:	5e5b      	ldrsh	r3, [r3, r1]
 8002524:	429a      	cmp	r2, r3
 8002526:	db8c      	blt.n	8002442 <SSD1306_DrawBitmap+0x4e>
        }
    }
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	46bd      	mov	sp, r7
 800252e:	b007      	add	sp, #28
 8002530:	bd90      	pop	{r4, r7, pc}
	...

08002534 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800253a:	f000 f985 	bl	8002848 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800253e:	4b5b      	ldr	r3, [pc, #364]	; (80026ac <SSD1306_Init+0x178>)
 8002540:	485b      	ldr	r0, [pc, #364]	; (80026b0 <SSD1306_Init+0x17c>)
 8002542:	2201      	movs	r2, #1
 8002544:	2178      	movs	r1, #120	; 0x78
 8002546:	f001 faed 	bl	8003b24 <HAL_I2C_IsDeviceReady>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d001      	beq.n	8002552 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 800254e:	2300      	movs	r3, #0
 8002550:	e0a8      	b.n	80026a4 <SSD1306_Init+0x170>
	}

	/* A little delay */
	uint32_t p = 2500;
 8002552:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <SSD1306_Init+0x180>)
 8002554:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002556:	e002      	b.n	800255e <SSD1306_Init+0x2a>
		p--;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <SSD1306_Init+0x24>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002564:	22ae      	movs	r2, #174	; 0xae
 8002566:	2100      	movs	r1, #0
 8002568:	2078      	movs	r0, #120	; 0x78
 800256a:	f000 f9ed 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800256e:	2220      	movs	r2, #32
 8002570:	2100      	movs	r1, #0
 8002572:	2078      	movs	r0, #120	; 0x78
 8002574:	f000 f9e8 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002578:	2210      	movs	r2, #16
 800257a:	2100      	movs	r1, #0
 800257c:	2078      	movs	r0, #120	; 0x78
 800257e:	f000 f9e3 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002582:	22b0      	movs	r2, #176	; 0xb0
 8002584:	2100      	movs	r1, #0
 8002586:	2078      	movs	r0, #120	; 0x78
 8002588:	f000 f9de 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800258c:	22c8      	movs	r2, #200	; 0xc8
 800258e:	2100      	movs	r1, #0
 8002590:	2078      	movs	r0, #120	; 0x78
 8002592:	f000 f9d9 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2078      	movs	r0, #120	; 0x78
 800259c:	f000 f9d4 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80025a0:	2210      	movs	r2, #16
 80025a2:	2100      	movs	r1, #0
 80025a4:	2078      	movs	r0, #120	; 0x78
 80025a6:	f000 f9cf 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	2100      	movs	r1, #0
 80025ae:	2078      	movs	r0, #120	; 0x78
 80025b0:	f000 f9ca 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80025b4:	2281      	movs	r2, #129	; 0x81
 80025b6:	2100      	movs	r1, #0
 80025b8:	2078      	movs	r0, #120	; 0x78
 80025ba:	f000 f9c5 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80025be:	22ff      	movs	r2, #255	; 0xff
 80025c0:	2100      	movs	r1, #0
 80025c2:	2078      	movs	r0, #120	; 0x78
 80025c4:	f000 f9c0 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80025c8:	22a1      	movs	r2, #161	; 0xa1
 80025ca:	2100      	movs	r1, #0
 80025cc:	2078      	movs	r0, #120	; 0x78
 80025ce:	f000 f9bb 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80025d2:	22a6      	movs	r2, #166	; 0xa6
 80025d4:	2100      	movs	r1, #0
 80025d6:	2078      	movs	r0, #120	; 0x78
 80025d8:	f000 f9b6 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80025dc:	22a8      	movs	r2, #168	; 0xa8
 80025de:	2100      	movs	r1, #0
 80025e0:	2078      	movs	r0, #120	; 0x78
 80025e2:	f000 f9b1 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80025e6:	223f      	movs	r2, #63	; 0x3f
 80025e8:	2100      	movs	r1, #0
 80025ea:	2078      	movs	r0, #120	; 0x78
 80025ec:	f000 f9ac 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025f0:	22a4      	movs	r2, #164	; 0xa4
 80025f2:	2100      	movs	r1, #0
 80025f4:	2078      	movs	r0, #120	; 0x78
 80025f6:	f000 f9a7 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80025fa:	22d3      	movs	r2, #211	; 0xd3
 80025fc:	2100      	movs	r1, #0
 80025fe:	2078      	movs	r0, #120	; 0x78
 8002600:	f000 f9a2 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	2078      	movs	r0, #120	; 0x78
 800260a:	f000 f99d 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800260e:	22d5      	movs	r2, #213	; 0xd5
 8002610:	2100      	movs	r1, #0
 8002612:	2078      	movs	r0, #120	; 0x78
 8002614:	f000 f998 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002618:	22f0      	movs	r2, #240	; 0xf0
 800261a:	2100      	movs	r1, #0
 800261c:	2078      	movs	r0, #120	; 0x78
 800261e:	f000 f993 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002622:	22d9      	movs	r2, #217	; 0xd9
 8002624:	2100      	movs	r1, #0
 8002626:	2078      	movs	r0, #120	; 0x78
 8002628:	f000 f98e 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800262c:	2222      	movs	r2, #34	; 0x22
 800262e:	2100      	movs	r1, #0
 8002630:	2078      	movs	r0, #120	; 0x78
 8002632:	f000 f989 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002636:	22da      	movs	r2, #218	; 0xda
 8002638:	2100      	movs	r1, #0
 800263a:	2078      	movs	r0, #120	; 0x78
 800263c:	f000 f984 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002640:	2212      	movs	r2, #18
 8002642:	2100      	movs	r1, #0
 8002644:	2078      	movs	r0, #120	; 0x78
 8002646:	f000 f97f 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800264a:	22db      	movs	r2, #219	; 0xdb
 800264c:	2100      	movs	r1, #0
 800264e:	2078      	movs	r0, #120	; 0x78
 8002650:	f000 f97a 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002654:	2220      	movs	r2, #32
 8002656:	2100      	movs	r1, #0
 8002658:	2078      	movs	r0, #120	; 0x78
 800265a:	f000 f975 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800265e:	228d      	movs	r2, #141	; 0x8d
 8002660:	2100      	movs	r1, #0
 8002662:	2078      	movs	r0, #120	; 0x78
 8002664:	f000 f970 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002668:	2214      	movs	r2, #20
 800266a:	2100      	movs	r1, #0
 800266c:	2078      	movs	r0, #120	; 0x78
 800266e:	f000 f96b 	bl	8002948 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002672:	22af      	movs	r2, #175	; 0xaf
 8002674:	2100      	movs	r1, #0
 8002676:	2078      	movs	r0, #120	; 0x78
 8002678:	f000 f966 	bl	8002948 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800267c:	222e      	movs	r2, #46	; 0x2e
 800267e:	2100      	movs	r1, #0
 8002680:	2078      	movs	r0, #120	; 0x78
 8002682:	f000 f961 	bl	8002948 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002686:	2000      	movs	r0, #0
 8002688:	f000 f84c 	bl	8002724 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800268c:	f000 f816 	bl	80026bc <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8002690:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <SSD1306_Init+0x184>)
 8002692:	2200      	movs	r2, #0
 8002694:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <SSD1306_Init+0x184>)
 8002698:	2200      	movs	r2, #0
 800269a:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800269c:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <SSD1306_Init+0x184>)
 800269e:	2201      	movs	r2, #1
 80026a0:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80026a2:	2301      	movs	r3, #1
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b002      	add	sp, #8
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	00004e20 	.word	0x00004e20
 80026b0:	200000c0 	.word	0x200000c0
 80026b4:	000009c4 	.word	0x000009c4
 80026b8:	2000062c 	.word	0x2000062c

080026bc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e021      	b.n	800270e <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80026ca:	1dfb      	adds	r3, r7, #7
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	3b50      	subs	r3, #80	; 0x50
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	001a      	movs	r2, r3
 80026d4:	2100      	movs	r1, #0
 80026d6:	2078      	movs	r0, #120	; 0x78
 80026d8:	f000 f936 	bl	8002948 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80026dc:	2200      	movs	r2, #0
 80026de:	2100      	movs	r1, #0
 80026e0:	2078      	movs	r0, #120	; 0x78
 80026e2:	f000 f931 	bl	8002948 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80026e6:	2210      	movs	r2, #16
 80026e8:	2100      	movs	r1, #0
 80026ea:	2078      	movs	r0, #120	; 0x78
 80026ec:	f000 f92c 	bl	8002948 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80026f0:	1dfb      	adds	r3, r7, #7
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	01da      	lsls	r2, r3, #7
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <SSD1306_UpdateScreen+0x64>)
 80026f8:	18d2      	adds	r2, r2, r3
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	2140      	movs	r1, #64	; 0x40
 80026fe:	2078      	movs	r0, #120	; 0x78
 8002700:	f000 f8b6 	bl	8002870 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002704:	1dfb      	adds	r3, r7, #7
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	3201      	adds	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	1dfb      	adds	r3, r7, #7
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b07      	cmp	r3, #7
 8002714:	d9d9      	bls.n	80026ca <SSD1306_UpdateScreen+0xe>
	}
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46c0      	nop			; (mov r8, r8)
 800271a:	46bd      	mov	sp, r7
 800271c:	b002      	add	sp, #8
 800271e:	bd80      	pop	{r7, pc}
 8002720:	2000022c 	.word	0x2000022c

08002724 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	0002      	movs	r2, r0
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <SSD1306_Fill+0x18>
 8002738:	2300      	movs	r3, #0
 800273a:	e000      	b.n	800273e <SSD1306_Fill+0x1a>
 800273c:	23ff      	movs	r3, #255	; 0xff
 800273e:	2280      	movs	r2, #128	; 0x80
 8002740:	00d2      	lsls	r2, r2, #3
 8002742:	4804      	ldr	r0, [pc, #16]	; (8002754 <SSD1306_Fill+0x30>)
 8002744:	0019      	movs	r1, r3
 8002746:	f003 ff39 	bl	80065bc <memset>
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	b002      	add	sp, #8
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	2000022c 	.word	0x2000022c

08002758 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	0004      	movs	r4, r0
 8002760:	0008      	movs	r0, r1
 8002762:	0011      	movs	r1, r2
 8002764:	1dbb      	adds	r3, r7, #6
 8002766:	1c22      	adds	r2, r4, #0
 8002768:	801a      	strh	r2, [r3, #0]
 800276a:	1d3b      	adds	r3, r7, #4
 800276c:	1c02      	adds	r2, r0, #0
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	1cfb      	adds	r3, r7, #3
 8002772:	1c0a      	adds	r2, r1, #0
 8002774:	701a      	strb	r2, [r3, #0]
	if (
 8002776:	1dbb      	adds	r3, r7, #6
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	2b7f      	cmp	r3, #127	; 0x7f
 800277c:	d852      	bhi.n	8002824 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	2b3f      	cmp	r3, #63	; 0x3f
 8002784:	d84e      	bhi.n	8002824 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <SSD1306_DrawPixel+0xd4>)
 8002788:	791b      	ldrb	r3, [r3, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d006      	beq.n	800279c <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 800278e:	1cfb      	adds	r3, r7, #3
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	425a      	negs	r2, r3
 8002794:	4153      	adcs	r3, r2
 8002796:	b2da      	uxtb	r2, r3
 8002798:	1cfb      	adds	r3, r7, #3
 800279a:	701a      	strb	r2, [r3, #0]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800279c:	1cfb      	adds	r3, r7, #3
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d11e      	bne.n	80027e2 <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80027a4:	1dbb      	adds	r3, r7, #6
 80027a6:	881a      	ldrh	r2, [r3, #0]
 80027a8:	1d3b      	adds	r3, r7, #4
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	08db      	lsrs	r3, r3, #3
 80027ae:	b298      	uxth	r0, r3
 80027b0:	0003      	movs	r3, r0
 80027b2:	01db      	lsls	r3, r3, #7
 80027b4:	18d3      	adds	r3, r2, r3
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <SSD1306_DrawPixel+0xd8>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	b25a      	sxtb	r2, r3
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	2107      	movs	r1, #7
 80027c2:	400b      	ands	r3, r1
 80027c4:	2101      	movs	r1, #1
 80027c6:	4099      	lsls	r1, r3
 80027c8:	000b      	movs	r3, r1
 80027ca:	b25b      	sxtb	r3, r3
 80027cc:	4313      	orrs	r3, r2
 80027ce:	b259      	sxtb	r1, r3
 80027d0:	1dbb      	adds	r3, r7, #6
 80027d2:	881a      	ldrh	r2, [r3, #0]
 80027d4:	0003      	movs	r3, r0
 80027d6:	01db      	lsls	r3, r3, #7
 80027d8:	18d3      	adds	r3, r2, r3
 80027da:	b2c9      	uxtb	r1, r1
 80027dc:	4a14      	ldr	r2, [pc, #80]	; (8002830 <SSD1306_DrawPixel+0xd8>)
 80027de:	54d1      	strb	r1, [r2, r3]
 80027e0:	e021      	b.n	8002826 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027e2:	1dbb      	adds	r3, r7, #6
 80027e4:	881a      	ldrh	r2, [r3, #0]
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	08db      	lsrs	r3, r3, #3
 80027ec:	b298      	uxth	r0, r3
 80027ee:	0003      	movs	r3, r0
 80027f0:	01db      	lsls	r3, r3, #7
 80027f2:	18d3      	adds	r3, r2, r3
 80027f4:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <SSD1306_DrawPixel+0xd8>)
 80027f6:	5cd3      	ldrb	r3, [r2, r3]
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	1d3a      	adds	r2, r7, #4
 80027fc:	8812      	ldrh	r2, [r2, #0]
 80027fe:	2107      	movs	r1, #7
 8002800:	400a      	ands	r2, r1
 8002802:	2101      	movs	r1, #1
 8002804:	4091      	lsls	r1, r2
 8002806:	000a      	movs	r2, r1
 8002808:	b252      	sxtb	r2, r2
 800280a:	43d2      	mvns	r2, r2
 800280c:	b252      	sxtb	r2, r2
 800280e:	4013      	ands	r3, r2
 8002810:	b259      	sxtb	r1, r3
 8002812:	1dbb      	adds	r3, r7, #6
 8002814:	881a      	ldrh	r2, [r3, #0]
 8002816:	0003      	movs	r3, r0
 8002818:	01db      	lsls	r3, r3, #7
 800281a:	18d3      	adds	r3, r2, r3
 800281c:	b2c9      	uxtb	r1, r1
 800281e:	4a04      	ldr	r2, [pc, #16]	; (8002830 <SSD1306_DrawPixel+0xd8>)
 8002820:	54d1      	strb	r1, [r2, r3]
 8002822:	e000      	b.n	8002826 <SSD1306_DrawPixel+0xce>
		return;
 8002824:	46c0      	nop			; (mov r8, r8)
	}
}
 8002826:	46bd      	mov	sp, r7
 8002828:	b003      	add	sp, #12
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	2000062c 	.word	0x2000062c
 8002830:	2000022c 	.word	0x2000022c

08002834 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002838:	2000      	movs	r0, #0
 800283a:	f7ff ff73 	bl	8002724 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800283e:	f7ff ff3d 	bl	80026bc <SSD1306_UpdateScreen>
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800284e:	4b07      	ldr	r3, [pc, #28]	; (800286c <ssd1306_I2C_Init+0x24>)
 8002850:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002852:	e002      	b.n	800285a <ssd1306_I2C_Init+0x12>
		p--;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	607b      	str	r3, [r7, #4]
	while(p>0)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f9      	bne.n	8002854 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	b002      	add	sp, #8
 8002868:	bd80      	pop	{r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	0003d090 	.word	0x0003d090

08002870 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002870:	b5b0      	push	{r4, r5, r7, lr}
 8002872:	b0c6      	sub	sp, #280	; 0x118
 8002874:	af02      	add	r7, sp, #8
 8002876:	0004      	movs	r4, r0
 8002878:	0008      	movs	r0, r1
 800287a:	603a      	str	r2, [r7, #0]
 800287c:	0019      	movs	r1, r3
 800287e:	4b2d      	ldr	r3, [pc, #180]	; (8002934 <ssd1306_I2C_WriteMulti+0xc4>)
 8002880:	2588      	movs	r5, #136	; 0x88
 8002882:	006d      	lsls	r5, r5, #1
 8002884:	195b      	adds	r3, r3, r5
 8002886:	19db      	adds	r3, r3, r7
 8002888:	1c22      	adds	r2, r4, #0
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <ssd1306_I2C_WriteMulti+0xc8>)
 800288e:	002c      	movs	r4, r5
 8002890:	191b      	adds	r3, r3, r4
 8002892:	19db      	adds	r3, r3, r7
 8002894:	1c02      	adds	r2, r0, #0
 8002896:	701a      	strb	r2, [r3, #0]
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <ssd1306_I2C_WriteMulti+0xcc>)
 800289a:	0020      	movs	r0, r4
 800289c:	181b      	adds	r3, r3, r0
 800289e:	19db      	adds	r3, r3, r7
 80028a0:	1c0a      	adds	r2, r1, #0
 80028a2:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <ssd1306_I2C_WriteMulti+0xd0>)
 80028a6:	181b      	adds	r3, r3, r0
 80028a8:	19db      	adds	r3, r3, r7
 80028aa:	4a23      	ldr	r2, [pc, #140]	; (8002938 <ssd1306_I2C_WriteMulti+0xc8>)
 80028ac:	1812      	adds	r2, r2, r0
 80028ae:	19d2      	adds	r2, r2, r7
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80028b4:	2310      	movs	r3, #16
 80028b6:	33ff      	adds	r3, #255	; 0xff
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
 80028be:	e014      	b.n	80028ea <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 80028c0:	2010      	movs	r0, #16
 80028c2:	30ff      	adds	r0, #255	; 0xff
 80028c4:	183b      	adds	r3, r7, r0
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	18d2      	adds	r2, r2, r3
 80028cc:	183b      	adds	r3, r7, r0
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	7811      	ldrb	r1, [r2, #0]
 80028d4:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <ssd1306_I2C_WriteMulti+0xd0>)
 80028d6:	2488      	movs	r4, #136	; 0x88
 80028d8:	0064      	lsls	r4, r4, #1
 80028da:	1912      	adds	r2, r2, r4
 80028dc:	19d2      	adds	r2, r2, r7
 80028de:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80028e0:	183b      	adds	r3, r7, r0
 80028e2:	781a      	ldrb	r2, [r3, #0]
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	3201      	adds	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	2310      	movs	r3, #16
 80028ec:	33ff      	adds	r3, #255	; 0xff
 80028ee:	18fb      	adds	r3, r7, r3
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4a11      	ldr	r2, [pc, #68]	; (800293c <ssd1306_I2C_WriteMulti+0xcc>)
 80028f6:	2188      	movs	r1, #136	; 0x88
 80028f8:	0049      	lsls	r1, r1, #1
 80028fa:	1852      	adds	r2, r2, r1
 80028fc:	19d2      	adds	r2, r2, r7
 80028fe:	8812      	ldrh	r2, [r2, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d8dd      	bhi.n	80028c0 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002904:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <ssd1306_I2C_WriteMulti+0xc4>)
 8002906:	000a      	movs	r2, r1
 8002908:	189b      	adds	r3, r3, r2
 800290a:	19db      	adds	r3, r3, r7
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b299      	uxth	r1, r3
 8002910:	4b0a      	ldr	r3, [pc, #40]	; (800293c <ssd1306_I2C_WriteMulti+0xcc>)
 8002912:	189b      	adds	r3, r3, r2
 8002914:	19db      	adds	r3, r3, r7
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	b29b      	uxth	r3, r3
 800291c:	220c      	movs	r2, #12
 800291e:	18ba      	adds	r2, r7, r2
 8002920:	4808      	ldr	r0, [pc, #32]	; (8002944 <ssd1306_I2C_WriteMulti+0xd4>)
 8002922:	240a      	movs	r4, #10
 8002924:	9400      	str	r4, [sp, #0]
 8002926:	f000 fd71 	bl	800340c <HAL_I2C_Master_Transmit>
}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b044      	add	sp, #272	; 0x110
 8002930:	bdb0      	pop	{r4, r5, r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	fffffef7 	.word	0xfffffef7
 8002938:	fffffef6 	.word	0xfffffef6
 800293c:	fffffef4 	.word	0xfffffef4
 8002940:	fffffefc 	.word	0xfffffefc
 8002944:	200000c0 	.word	0x200000c0

08002948 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b087      	sub	sp, #28
 800294c:	af02      	add	r7, sp, #8
 800294e:	0004      	movs	r4, r0
 8002950:	0008      	movs	r0, r1
 8002952:	0011      	movs	r1, r2
 8002954:	1dfb      	adds	r3, r7, #7
 8002956:	1c22      	adds	r2, r4, #0
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	1dbb      	adds	r3, r7, #6
 800295c:	1c02      	adds	r2, r0, #0
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	1d7b      	adds	r3, r7, #5
 8002962:	1c0a      	adds	r2, r1, #0
 8002964:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8002966:	200c      	movs	r0, #12
 8002968:	183b      	adds	r3, r7, r0
 800296a:	1dba      	adds	r2, r7, #6
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8002970:	183b      	adds	r3, r7, r0
 8002972:	1d7a      	adds	r2, r7, #5
 8002974:	7812      	ldrb	r2, [r2, #0]
 8002976:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002978:	1dfb      	adds	r3, r7, #7
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	b299      	uxth	r1, r3
 800297e:	183a      	adds	r2, r7, r0
 8002980:	4804      	ldr	r0, [pc, #16]	; (8002994 <ssd1306_I2C_Write+0x4c>)
 8002982:	230a      	movs	r3, #10
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2302      	movs	r3, #2
 8002988:	f000 fd40 	bl	800340c <HAL_I2C_Master_Transmit>
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b005      	add	sp, #20
 8002992:	bd90      	pop	{r4, r7, pc}
 8002994:	200000c0 	.word	0x200000c0

08002998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800299e:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_MspInit+0x4c>)
 80029a4:	2101      	movs	r1, #1
 80029a6:	430a      	orrs	r2, r1
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
 80029aa:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <HAL_MspInit+0x4c>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2201      	movs	r2, #1
 80029b0:	4013      	ands	r3, r2
 80029b2:	607b      	str	r3, [r7, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_MspInit+0x4c>)
 80029b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_MspInit+0x4c>)
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	0549      	lsls	r1, r1, #21
 80029c0:	430a      	orrs	r2, r1
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80029c4:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_MspInit+0x4c>)
 80029c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	055b      	lsls	r3, r3, #21
 80029cc:	4013      	ands	r3, r2
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80029d2:	23c0      	movs	r3, #192	; 0xc0
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 fa26 	bl	8002e28 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029dc:	46c0      	nop			; (mov r8, r8)
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000

080029e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029e8:	b590      	push	{r4, r7, lr}
 80029ea:	b097      	sub	sp, #92	; 0x5c
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	2344      	movs	r3, #68	; 0x44
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	0018      	movs	r0, r3
 80029f6:	2314      	movs	r3, #20
 80029f8:	001a      	movs	r2, r3
 80029fa:	2100      	movs	r1, #0
 80029fc:	f003 fdde 	bl	80065bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a00:	2410      	movs	r4, #16
 8002a02:	193b      	adds	r3, r7, r4
 8002a04:	0018      	movs	r0, r3
 8002a06:	2334      	movs	r3, #52	; 0x34
 8002a08:	001a      	movs	r2, r3
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	f003 fdd6 	bl	80065bc <memset>
  if(hi2c->Instance==I2C1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <HAL_I2C_MspInit+0xb8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d13e      	bne.n	8002a98 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a20:	193b      	adds	r3, r7, r4
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f002 fa23 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 8002a2e:	1e03      	subs	r3, r0, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002a32:	f7ff f9ab 	bl	8001d8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_I2C_MspInit+0xbc>)
 8002a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_I2C_MspInit+0xbc>)
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	635a      	str	r2, [r3, #52]	; 0x34
 8002a42:	4b18      	ldr	r3, [pc, #96]	; (8002aa4 <HAL_I2C_MspInit+0xbc>)
 8002a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a46:	2202      	movs	r2, #2
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a4e:	2144      	movs	r1, #68	; 0x44
 8002a50:	187b      	adds	r3, r7, r1
 8002a52:	22c0      	movs	r2, #192	; 0xc0
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	2212      	movs	r2, #18
 8002a5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	187b      	adds	r3, r7, r1
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002a6a:	187b      	adds	r3, r7, r1
 8002a6c:	2206      	movs	r2, #6
 8002a6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a70:	187b      	adds	r3, r7, r1
 8002a72:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <HAL_I2C_MspInit+0xc0>)
 8002a74:	0019      	movs	r1, r3
 8002a76:	0010      	movs	r0, r2
 8002a78:	f000 faa0 	bl	8002fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_I2C_MspInit+0xbc>)
 8002a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <HAL_I2C_MspInit+0xbc>)
 8002a82:	2180      	movs	r1, #128	; 0x80
 8002a84:	0389      	lsls	r1, r1, #14
 8002a86:	430a      	orrs	r2, r1
 8002a88:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_I2C_MspInit+0xbc>)
 8002a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	039b      	lsls	r3, r3, #14
 8002a92:	4013      	ands	r3, r2
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b017      	add	sp, #92	; 0x5c
 8002a9e:	bd90      	pop	{r4, r7, pc}
 8002aa0:	40005400 	.word	0x40005400
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	50000400 	.word	0x50000400

08002aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aac:	b590      	push	{r4, r7, lr}
 8002aae:	b091      	sub	sp, #68	; 0x44
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ab4:	240c      	movs	r4, #12
 8002ab6:	193b      	adds	r3, r7, r4
 8002ab8:	0018      	movs	r0, r3
 8002aba:	2334      	movs	r3, #52	; 0x34
 8002abc:	001a      	movs	r2, r3
 8002abe:	2100      	movs	r1, #0
 8002ac0:	f003 fd7c 	bl	80065bc <memset>
  if(htim_base->Instance==TIM1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <HAL_TIM_Base_MspInit+0x64>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d11c      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	0392      	lsls	r2, r2, #14
 8002ad4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	2200      	movs	r2, #0
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f002 f9c8 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 8002ae4:	1e03      	subs	r3, r0, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8002ae8:	f7ff f950 	bl	8001d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aec:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_TIM_Base_MspInit+0x68>)
 8002aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af0:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <HAL_TIM_Base_MspInit+0x68>)
 8002af2:	2180      	movs	r1, #128	; 0x80
 8002af4:	0109      	lsls	r1, r1, #4
 8002af6:	430a      	orrs	r2, r1
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
 8002afa:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_TIM_Base_MspInit+0x68>)
 8002afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	4013      	ands	r3, r2
 8002b04:	60bb      	str	r3, [r7, #8]
 8002b06:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	b011      	add	sp, #68	; 0x44
 8002b0e:	bd90      	pop	{r4, r7, pc}
 8002b10:	40012c00 	.word	0x40012c00
 8002b14:	40021000 	.word	0x40021000

08002b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b097      	sub	sp, #92	; 0x5c
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b20:	2344      	movs	r3, #68	; 0x44
 8002b22:	18fb      	adds	r3, r7, r3
 8002b24:	0018      	movs	r0, r3
 8002b26:	2314      	movs	r3, #20
 8002b28:	001a      	movs	r2, r3
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	f003 fd46 	bl	80065bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b30:	2410      	movs	r4, #16
 8002b32:	193b      	adds	r3, r7, r4
 8002b34:	0018      	movs	r0, r3
 8002b36:	2334      	movs	r3, #52	; 0x34
 8002b38:	001a      	movs	r2, r3
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	f003 fd3e 	bl	80065bc <memset>
  if(huart->Instance==USART2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <HAL_UART_MspInit+0xb8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d13e      	bne.n	8002bc8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	2200      	movs	r2, #0
 8002b54:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	0018      	movs	r0, r3
 8002b5a:	f002 f98b 	bl	8004e74 <HAL_RCCEx_PeriphCLKConfig>
 8002b5e:	1e03      	subs	r3, r0, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002b62:	f7ff f913 	bl	8001d8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b66:	4b1b      	ldr	r3, [pc, #108]	; (8002bd4 <HAL_UART_MspInit+0xbc>)
 8002b68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_UART_MspInit+0xbc>)
 8002b6c:	2180      	movs	r1, #128	; 0x80
 8002b6e:	0289      	lsls	r1, r1, #10
 8002b70:	430a      	orrs	r2, r1
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b74:	4b17      	ldr	r3, [pc, #92]	; (8002bd4 <HAL_UART_MspInit+0xbc>)
 8002b76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b78:	2380      	movs	r3, #128	; 0x80
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b82:	4b14      	ldr	r3, [pc, #80]	; (8002bd4 <HAL_UART_MspInit+0xbc>)
 8002b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b86:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_UART_MspInit+0xbc>)
 8002b88:	2101      	movs	r1, #1
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_UART_MspInit+0xbc>)
 8002b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b92:	2201      	movs	r2, #1
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8002b9a:	2144      	movs	r1, #68	; 0x44
 8002b9c:	187b      	adds	r3, r7, r1
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	2201      	movs	r2, #1
 8002bac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	187b      	adds	r3, r7, r1
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	187a      	adds	r2, r7, r1
 8002bbc:	23a0      	movs	r3, #160	; 0xa0
 8002bbe:	05db      	lsls	r3, r3, #23
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f9fa 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b017      	add	sp, #92	; 0x5c
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	40004400 	.word	0x40004400
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bdc:	e7fe      	b.n	8002bdc <NMI_Handler+0x4>

08002bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <HardFault_Handler+0x4>

08002be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002be8:	46c0      	nop			; (mov r8, r8)
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bf2:	46c0      	nop			; (mov r8, r8)
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bfc:	f000 f8d4 	bl	8002da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
	...

08002c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <_sbrk+0x5c>)
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <_sbrk+0x60>)
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <_sbrk+0x64>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d102      	bne.n	8002c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <_sbrk+0x64>)
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <_sbrk+0x68>)
 8002c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <_sbrk+0x64>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	18d3      	adds	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d207      	bcs.n	8002c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c38:	f003 fcc8 	bl	80065cc <__errno>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	220c      	movs	r2, #12
 8002c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c42:	2301      	movs	r3, #1
 8002c44:	425b      	negs	r3, r3
 8002c46:	e009      	b.n	8002c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c48:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <_sbrk+0x64>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c4e:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <_sbrk+0x64>)
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	18d2      	adds	r2, r2, r3
 8002c56:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <_sbrk+0x64>)
 8002c58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b006      	add	sp, #24
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20009000 	.word	0x20009000
 8002c68:	00000400 	.word	0x00000400
 8002c6c:	20000634 	.word	0x20000634
 8002c70:	20000788 	.word	0x20000788

08002c74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c78:	46c0      	nop			; (mov r8, r8)
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c80:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c84:	f7ff fff6 	bl	8002c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c88:	480c      	ldr	r0, [pc, #48]	; (8002cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8002c8a:	490d      	ldr	r1, [pc, #52]	; (8002cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c8c:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <LoopForever+0xe>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c90:	e002      	b.n	8002c98 <LoopCopyDataInit>

08002c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c96:	3304      	adds	r3, #4

08002c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c9c:	d3f9      	bcc.n	8002c92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	; (8002cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca0:	4c0a      	ldr	r4, [pc, #40]	; (8002ccc <LoopForever+0x16>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca4:	e001      	b.n	8002caa <LoopFillZerobss>

08002ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca8:	3204      	adds	r2, #4

08002caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cac:	d3fb      	bcc.n	8002ca6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cae:	f003 fc93 	bl	80065d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002cb2:	f7fe fcd7 	bl	8001664 <main>

08002cb6 <LoopForever>:

LoopForever:
  b LoopForever
 8002cb6:	e7fe      	b.n	8002cb6 <LoopForever>
  ldr   r0, =_estack
 8002cb8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8002cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002cc4:	08009c6c 	.word	0x08009c6c
  ldr r2, =_sbss
 8002cc8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002ccc:	20000784 	.word	0x20000784

08002cd0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002cd0:	e7fe      	b.n	8002cd0 <ADC1_COMP_IRQHandler>
	...

08002cd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002cda:	1dfb      	adds	r3, r7, #7
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_Init+0x3c>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_Init+0x3c>)
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	0049      	lsls	r1, r1, #1
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cee:	2000      	movs	r0, #0
 8002cf0:	f000 f810 	bl	8002d14 <HAL_InitTick>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	e001      	b.n	8002d04 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002d00:	f7ff fe4a 	bl	8002998 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	781b      	ldrb	r3, [r3, #0]
}
 8002d08:	0018      	movs	r0, r3
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b002      	add	sp, #8
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40022000 	.word	0x40022000

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d1c:	230f      	movs	r3, #15
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002d24:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_InitTick+0x88>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d02b      	beq.n	8002d84 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_InitTick+0x8c>)
 8002d2e:	681c      	ldr	r4, [r3, #0]
 8002d30:	4b1a      	ldr	r3, [pc, #104]	; (8002d9c <HAL_InitTick+0x88>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	0019      	movs	r1, r3
 8002d36:	23fa      	movs	r3, #250	; 0xfa
 8002d38:	0098      	lsls	r0, r3, #2
 8002d3a:	f7fd f9f5 	bl	8000128 <__udivsi3>
 8002d3e:	0003      	movs	r3, r0
 8002d40:	0019      	movs	r1, r3
 8002d42:	0020      	movs	r0, r4
 8002d44:	f7fd f9f0 	bl	8000128 <__udivsi3>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 f929 	bl	8002fa2 <HAL_SYSTICK_Config>
 8002d50:	1e03      	subs	r3, r0, #0
 8002d52:	d112      	bne.n	8002d7a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d80a      	bhi.n	8002d70 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	425b      	negs	r3, r3
 8002d60:	2200      	movs	r2, #0
 8002d62:	0018      	movs	r0, r3
 8002d64:	f000 f908 	bl	8002f78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d68:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <HAL_InitTick+0x90>)
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e00d      	b.n	8002d8c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002d70:	230f      	movs	r3, #15
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
 8002d78:	e008      	b.n	8002d8c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
 8002d82:	e003      	b.n	8002d8c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d84:	230f      	movs	r3, #15
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002d8c:	230f      	movs	r3, #15
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	781b      	ldrb	r3, [r3, #0]
}
 8002d92:	0018      	movs	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	b005      	add	sp, #20
 8002d98:	bd90      	pop	{r4, r7, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	20000034 	.word	0x20000034
 8002da0:	2000002c 	.word	0x2000002c
 8002da4:	20000030 	.word	0x20000030

08002da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_IncTick+0x1c>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	001a      	movs	r2, r3
 8002db2:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_IncTick+0x20>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	18d2      	adds	r2, r2, r3
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_IncTick+0x20>)
 8002dba:	601a      	str	r2, [r3, #0]
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	20000034 	.word	0x20000034
 8002dc8:	20000638 	.word	0x20000638

08002dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd0:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <HAL_GetTick+0x10>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	20000638 	.word	0x20000638

08002de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de8:	f7ff fff0 	bl	8002dcc <HAL_GetTick>
 8002dec:	0003      	movs	r3, r0
 8002dee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	d005      	beq.n	8002e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfa:	4b0a      	ldr	r3, [pc, #40]	; (8002e24 <HAL_Delay+0x44>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	001a      	movs	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	189b      	adds	r3, r3, r2
 8002e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e06:	46c0      	nop			; (mov r8, r8)
 8002e08:	f7ff ffe0 	bl	8002dcc <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d8f7      	bhi.n	8002e08 <HAL_Delay+0x28>
  {
  }
}
 8002e18:	46c0      	nop			; (mov r8, r8)
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	20000034 	.word	0x20000034

08002e28 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a06      	ldr	r2, [pc, #24]	; (8002e50 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b002      	add	sp, #8
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	fffff9ff 	.word	0xfffff9ff

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b590      	push	{r4, r7, lr}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	0002      	movs	r2, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	1dfb      	adds	r3, r7, #7
 8002e60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	1dfb      	adds	r3, r7, #7
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b7f      	cmp	r3, #127	; 0x7f
 8002e68:	d828      	bhi.n	8002ebc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6a:	4a2f      	ldr	r2, [pc, #188]	; (8002f28 <__NVIC_SetPriority+0xd4>)
 8002e6c:	1dfb      	adds	r3, r7, #7
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	089b      	lsrs	r3, r3, #2
 8002e74:	33c0      	adds	r3, #192	; 0xc0
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	589b      	ldr	r3, [r3, r2]
 8002e7a:	1dfa      	adds	r2, r7, #7
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	0011      	movs	r1, r2
 8002e80:	2203      	movs	r2, #3
 8002e82:	400a      	ands	r2, r1
 8002e84:	00d2      	lsls	r2, r2, #3
 8002e86:	21ff      	movs	r1, #255	; 0xff
 8002e88:	4091      	lsls	r1, r2
 8002e8a:	000a      	movs	r2, r1
 8002e8c:	43d2      	mvns	r2, r2
 8002e8e:	401a      	ands	r2, r3
 8002e90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	019b      	lsls	r3, r3, #6
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	401a      	ands	r2, r3
 8002e9a:	1dfb      	adds	r3, r7, #7
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	4003      	ands	r3, r0
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ea8:	481f      	ldr	r0, [pc, #124]	; (8002f28 <__NVIC_SetPriority+0xd4>)
 8002eaa:	1dfb      	adds	r3, r7, #7
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	089b      	lsrs	r3, r3, #2
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	33c0      	adds	r3, #192	; 0xc0
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002eba:	e031      	b.n	8002f20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <__NVIC_SetPriority+0xd8>)
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	400b      	ands	r3, r1
 8002ec8:	3b08      	subs	r3, #8
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3306      	adds	r3, #6
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	18d3      	adds	r3, r2, r3
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1dfa      	adds	r2, r7, #7
 8002ed8:	7812      	ldrb	r2, [r2, #0]
 8002eda:	0011      	movs	r1, r2
 8002edc:	2203      	movs	r2, #3
 8002ede:	400a      	ands	r2, r1
 8002ee0:	00d2      	lsls	r2, r2, #3
 8002ee2:	21ff      	movs	r1, #255	; 0xff
 8002ee4:	4091      	lsls	r1, r2
 8002ee6:	000a      	movs	r2, r1
 8002ee8:	43d2      	mvns	r2, r2
 8002eea:	401a      	ands	r2, r3
 8002eec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	22ff      	movs	r2, #255	; 0xff
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	1dfb      	adds	r3, r7, #7
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	2303      	movs	r3, #3
 8002efe:	4003      	ands	r3, r0
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f04:	4809      	ldr	r0, [pc, #36]	; (8002f2c <__NVIC_SetPriority+0xd8>)
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	001c      	movs	r4, r3
 8002f0c:	230f      	movs	r3, #15
 8002f0e:	4023      	ands	r3, r4
 8002f10:	3b08      	subs	r3, #8
 8002f12:	089b      	lsrs	r3, r3, #2
 8002f14:	430a      	orrs	r2, r1
 8002f16:	3306      	adds	r3, #6
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	18c3      	adds	r3, r0, r3
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	46c0      	nop			; (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b003      	add	sp, #12
 8002f26:	bd90      	pop	{r4, r7, pc}
 8002f28:	e000e100 	.word	0xe000e100
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	1e5a      	subs	r2, r3, #1
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	045b      	lsls	r3, r3, #17
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d301      	bcc.n	8002f48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f44:	2301      	movs	r3, #1
 8002f46:	e010      	b.n	8002f6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <SysTick_Config+0x44>)
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	3a01      	subs	r2, #1
 8002f4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f50:	2301      	movs	r3, #1
 8002f52:	425b      	negs	r3, r3
 8002f54:	2103      	movs	r1, #3
 8002f56:	0018      	movs	r0, r3
 8002f58:	f7ff ff7c 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <SysTick_Config+0x44>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <SysTick_Config+0x44>)
 8002f64:	2207      	movs	r2, #7
 8002f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b002      	add	sp, #8
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	e000e010 	.word	0xe000e010

08002f78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	210f      	movs	r1, #15
 8002f84:	187b      	adds	r3, r7, r1
 8002f86:	1c02      	adds	r2, r0, #0
 8002f88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	187b      	adds	r3, r7, r1
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	0011      	movs	r1, r2
 8002f94:	0018      	movs	r0, r3
 8002f96:	f7ff ff5d 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b004      	add	sp, #16
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7ff ffbf 	bl	8002f30 <SysTick_Config>
 8002fb2:	0003      	movs	r3, r0
}
 8002fb4:	0018      	movs	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fca:	e147      	b.n	800325c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4091      	lsls	r1, r2
 8002fd6:	000a      	movs	r2, r1
 8002fd8:	4013      	ands	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d100      	bne.n	8002fe4 <HAL_GPIO_Init+0x28>
 8002fe2:	e138      	b.n	8003256 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d005      	beq.n	8002ffc <HAL_GPIO_Init+0x40>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d130      	bne.n	800305e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	2203      	movs	r2, #3
 8003008:	409a      	lsls	r2, r3
 800300a:	0013      	movs	r3, r2
 800300c:	43da      	mvns	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	409a      	lsls	r2, r3
 800301e:	0013      	movs	r3, r2
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003032:	2201      	movs	r2, #1
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
 8003038:	0013      	movs	r3, r2
 800303a:	43da      	mvns	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4013      	ands	r3, r2
 8003040:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	2201      	movs	r2, #1
 800304a:	401a      	ands	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	409a      	lsls	r2, r3
 8003050:	0013      	movs	r3, r2
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2203      	movs	r2, #3
 8003064:	4013      	ands	r3, r2
 8003066:	2b03      	cmp	r3, #3
 8003068:	d017      	beq.n	800309a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	2203      	movs	r2, #3
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	43da      	mvns	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	409a      	lsls	r2, r3
 800308c:	0013      	movs	r3, r2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2203      	movs	r2, #3
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d123      	bne.n	80030ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	08da      	lsrs	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	3208      	adds	r2, #8
 80030ae:	0092      	lsls	r2, r2, #2
 80030b0:	58d3      	ldr	r3, [r2, r3]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	2207      	movs	r2, #7
 80030b8:	4013      	ands	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	220f      	movs	r2, #15
 80030be:	409a      	lsls	r2, r3
 80030c0:	0013      	movs	r3, r2
 80030c2:	43da      	mvns	r2, r3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2107      	movs	r1, #7
 80030d2:	400b      	ands	r3, r1
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	409a      	lsls	r2, r3
 80030d8:	0013      	movs	r3, r2
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4313      	orrs	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	0092      	lsls	r2, r2, #2
 80030ea:	6939      	ldr	r1, [r7, #16]
 80030ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	409a      	lsls	r2, r3
 80030fc:	0013      	movs	r3, r2
 80030fe:	43da      	mvns	r2, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2203      	movs	r2, #3
 800310c:	401a      	ands	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	409a      	lsls	r2, r3
 8003114:	0013      	movs	r3, r2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	23c0      	movs	r3, #192	; 0xc0
 8003128:	029b      	lsls	r3, r3, #10
 800312a:	4013      	ands	r3, r2
 800312c:	d100      	bne.n	8003130 <HAL_GPIO_Init+0x174>
 800312e:	e092      	b.n	8003256 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003130:	4a50      	ldr	r2, [pc, #320]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3318      	adds	r3, #24
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	589b      	ldr	r3, [r3, r2]
 800313c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2203      	movs	r2, #3
 8003142:	4013      	ands	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	220f      	movs	r2, #15
 8003148:	409a      	lsls	r2, r3
 800314a:	0013      	movs	r3, r2
 800314c:	43da      	mvns	r2, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	23a0      	movs	r3, #160	; 0xa0
 8003158:	05db      	lsls	r3, r3, #23
 800315a:	429a      	cmp	r2, r3
 800315c:	d013      	beq.n	8003186 <HAL_GPIO_Init+0x1ca>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a45      	ldr	r2, [pc, #276]	; (8003278 <HAL_GPIO_Init+0x2bc>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d00d      	beq.n	8003182 <HAL_GPIO_Init+0x1c6>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a44      	ldr	r2, [pc, #272]	; (800327c <HAL_GPIO_Init+0x2c0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d007      	beq.n	800317e <HAL_GPIO_Init+0x1c2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a43      	ldr	r2, [pc, #268]	; (8003280 <HAL_GPIO_Init+0x2c4>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_GPIO_Init+0x1be>
 8003176:	2303      	movs	r3, #3
 8003178:	e006      	b.n	8003188 <HAL_GPIO_Init+0x1cc>
 800317a:	2305      	movs	r3, #5
 800317c:	e004      	b.n	8003188 <HAL_GPIO_Init+0x1cc>
 800317e:	2302      	movs	r3, #2
 8003180:	e002      	b.n	8003188 <HAL_GPIO_Init+0x1cc>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <HAL_GPIO_Init+0x1cc>
 8003186:	2300      	movs	r3, #0
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	2103      	movs	r1, #3
 800318c:	400a      	ands	r2, r1
 800318e:	00d2      	lsls	r2, r2, #3
 8003190:	4093      	lsls	r3, r2
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	4313      	orrs	r3, r2
 8003196:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003198:	4936      	ldr	r1, [pc, #216]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	3318      	adds	r3, #24
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a6:	4b33      	ldr	r3, [pc, #204]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	43da      	mvns	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	035b      	lsls	r3, r3, #13
 80031be:	4013      	ands	r3, r2
 80031c0:	d003      	beq.n	80031ca <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ca:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80031d0:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	43da      	mvns	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4013      	ands	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	039b      	lsls	r3, r3, #14
 80031e8:	4013      	ands	r3, r2
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031f4:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031fa:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 80031fc:	2384      	movs	r3, #132	; 0x84
 80031fe:	58d3      	ldr	r3, [r2, r3]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43da      	mvns	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	029b      	lsls	r3, r3, #10
 8003214:	4013      	ands	r3, r2
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003220:	4914      	ldr	r1, [pc, #80]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 8003222:	2284      	movs	r2, #132	; 0x84
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003228:	4a12      	ldr	r2, [pc, #72]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	58d3      	ldr	r3, [r2, r3]
 800322e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	43da      	mvns	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	025b      	lsls	r3, r3, #9
 8003242:	4013      	ands	r3, r2
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800324e:	4909      	ldr	r1, [pc, #36]	; (8003274 <HAL_GPIO_Init+0x2b8>)
 8003250:	2280      	movs	r2, #128	; 0x80
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	3301      	adds	r3, #1
 800325a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	40da      	lsrs	r2, r3
 8003264:	1e13      	subs	r3, r2, #0
 8003266:	d000      	beq.n	800326a <HAL_GPIO_Init+0x2ae>
 8003268:	e6b0      	b.n	8002fcc <HAL_GPIO_Init+0x10>
  }
}
 800326a:	46c0      	nop			; (mov r8, r8)
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b006      	add	sp, #24
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40021800 	.word	0x40021800
 8003278:	50000400 	.word	0x50000400
 800327c:	50000800 	.word	0x50000800
 8003280:	50000c00 	.word	0x50000c00

08003284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	0008      	movs	r0, r1
 800328e:	0011      	movs	r1, r2
 8003290:	1cbb      	adds	r3, r7, #2
 8003292:	1c02      	adds	r2, r0, #0
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	1c7b      	adds	r3, r7, #1
 8003298:	1c0a      	adds	r2, r1, #0
 800329a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800329c:	1c7b      	adds	r3, r7, #1
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032a4:	1cbb      	adds	r3, r7, #2
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032ac:	e003      	b.n	80032b6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032ae:	1cbb      	adds	r3, r7, #2
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e08f      	b.n	80033f2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2241      	movs	r2, #65	; 0x41
 80032d6:	5c9b      	ldrb	r3, [r3, r2]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2240      	movs	r2, #64	; 0x40
 80032e2:	2100      	movs	r1, #0
 80032e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fb7d 	bl	80029e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2241      	movs	r2, #65	; 0x41
 80032f2:	2124      	movs	r1, #36	; 0x24
 80032f4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2101      	movs	r1, #1
 8003302:	438a      	bics	r2, r1
 8003304:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	493b      	ldr	r1, [pc, #236]	; (80033fc <HAL_I2C_Init+0x13c>)
 8003310:	400a      	ands	r2, r1
 8003312:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4938      	ldr	r1, [pc, #224]	; (8003400 <HAL_I2C_Init+0x140>)
 8003320:	400a      	ands	r2, r1
 8003322:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d108      	bne.n	800333e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	0209      	lsls	r1, r1, #8
 8003338:	430a      	orrs	r2, r1
 800333a:	609a      	str	r2, [r3, #8]
 800333c:	e007      	b.n	800334e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2184      	movs	r1, #132	; 0x84
 8003348:	0209      	lsls	r1, r1, #8
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d109      	bne.n	800336a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2180      	movs	r1, #128	; 0x80
 8003362:	0109      	lsls	r1, r1, #4
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
 8003368:	e007      	b.n	800337a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4923      	ldr	r1, [pc, #140]	; (8003404 <HAL_I2C_Init+0x144>)
 8003376:	400a      	ands	r2, r1
 8003378:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4920      	ldr	r1, [pc, #128]	; (8003408 <HAL_I2C_Init+0x148>)
 8003386:	430a      	orrs	r2, r1
 8003388:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	491a      	ldr	r1, [pc, #104]	; (8003400 <HAL_I2C_Init+0x140>)
 8003396:	400a      	ands	r2, r1
 8003398:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69d9      	ldr	r1, [r3, #28]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a1a      	ldr	r2, [r3, #32]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2241      	movs	r2, #65	; 0x41
 80033de:	2120      	movs	r1, #32
 80033e0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2242      	movs	r2, #66	; 0x42
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	0018      	movs	r0, r3
 80033f4:	46bd      	mov	sp, r7
 80033f6:	b002      	add	sp, #8
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	f0ffffff 	.word	0xf0ffffff
 8003400:	ffff7fff 	.word	0xffff7fff
 8003404:	fffff7ff 	.word	0xfffff7ff
 8003408:	02008000 	.word	0x02008000

0800340c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b089      	sub	sp, #36	; 0x24
 8003410:	af02      	add	r7, sp, #8
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	0008      	movs	r0, r1
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	0019      	movs	r1, r3
 800341a:	230a      	movs	r3, #10
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	1c02      	adds	r2, r0, #0
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	2308      	movs	r3, #8
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	1c0a      	adds	r2, r1, #0
 8003428:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2241      	movs	r2, #65	; 0x41
 800342e:	5c9b      	ldrb	r3, [r3, r2]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	d000      	beq.n	8003438 <HAL_I2C_Master_Transmit+0x2c>
 8003436:	e10a      	b.n	800364e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2240      	movs	r2, #64	; 0x40
 800343c:	5c9b      	ldrb	r3, [r3, r2]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_I2C_Master_Transmit+0x3a>
 8003442:	2302      	movs	r3, #2
 8003444:	e104      	b.n	8003650 <HAL_I2C_Master_Transmit+0x244>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800344e:	f7ff fcbd 	bl	8002dcc <HAL_GetTick>
 8003452:	0003      	movs	r3, r0
 8003454:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003456:	2380      	movs	r3, #128	; 0x80
 8003458:	0219      	lsls	r1, r3, #8
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	2319      	movs	r3, #25
 8003462:	2201      	movs	r2, #1
 8003464:	f000 fd42 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 8003468:	1e03      	subs	r3, r0, #0
 800346a:	d001      	beq.n	8003470 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0ef      	b.n	8003650 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2241      	movs	r2, #65	; 0x41
 8003474:	2121      	movs	r1, #33	; 0x21
 8003476:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2242      	movs	r2, #66	; 0x42
 800347c:	2110      	movs	r1, #16
 800347e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2208      	movs	r2, #8
 8003490:	18ba      	adds	r2, r7, r2
 8003492:	8812      	ldrh	r2, [r2, #0]
 8003494:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2bff      	cmp	r3, #255	; 0xff
 80034a4:	d906      	bls.n	80034b4 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	22ff      	movs	r2, #255	; 0xff
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80034ac:	2380      	movs	r3, #128	; 0x80
 80034ae:	045b      	lsls	r3, r3, #17
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e007      	b.n	80034c4 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80034be:	2380      	movs	r3, #128	; 0x80
 80034c0:	049b      	lsls	r3, r3, #18
 80034c2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d027      	beq.n	800351c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	b2db      	uxtb	r3, r3
 8003502:	3301      	adds	r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	697c      	ldr	r4, [r7, #20]
 8003508:	230a      	movs	r3, #10
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	8819      	ldrh	r1, [r3, #0]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	4b51      	ldr	r3, [pc, #324]	; (8003658 <HAL_I2C_Master_Transmit+0x24c>)
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	0023      	movs	r3, r4
 8003516:	f000 fecb 	bl	80042b0 <I2C_TransferConfig>
 800351a:	e06f      	b.n	80035fc <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003520:	b2da      	uxtb	r2, r3
 8003522:	697c      	ldr	r4, [r7, #20]
 8003524:	230a      	movs	r3, #10
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	8819      	ldrh	r1, [r3, #0]
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <HAL_I2C_Master_Transmit+0x24c>)
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	0023      	movs	r3, r4
 8003532:	f000 febd 	bl	80042b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003536:	e061      	b.n	80035fc <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	0018      	movs	r0, r3
 8003540:	f000 fd2c 	bl	8003f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e081      	b.n	8003650 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d03a      	beq.n	80035fc <HAL_I2C_Master_Transmit+0x1f0>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	2b00      	cmp	r3, #0
 800358c:	d136      	bne.n	80035fc <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800358e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	0013      	movs	r3, r2
 8003598:	2200      	movs	r2, #0
 800359a:	2180      	movs	r1, #128	; 0x80
 800359c:	f000 fca6 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 80035a0:	1e03      	subs	r3, r0, #0
 80035a2:	d001      	beq.n	80035a8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e053      	b.n	8003650 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2bff      	cmp	r3, #255	; 0xff
 80035b0:	d911      	bls.n	80035d6 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	2380      	movs	r3, #128	; 0x80
 80035c0:	045c      	lsls	r4, r3, #17
 80035c2:	230a      	movs	r3, #10
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	8819      	ldrh	r1, [r3, #0]
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	0023      	movs	r3, r4
 80035d0:	f000 fe6e 	bl	80042b0 <I2C_TransferConfig>
 80035d4:	e012      	b.n	80035fc <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	049c      	lsls	r4, r3, #18
 80035ea:	230a      	movs	r3, #10
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	8819      	ldrh	r1, [r3, #0]
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	0023      	movs	r3, r4
 80035f8:	f000 fe5a 	bl	80042b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d198      	bne.n	8003538 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	0018      	movs	r0, r3
 800360e:	f000 fd0b 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e01a      	b.n	8003650 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2220      	movs	r2, #32
 8003620:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	490b      	ldr	r1, [pc, #44]	; (800365c <HAL_I2C_Master_Transmit+0x250>)
 800362e:	400a      	ands	r2, r1
 8003630:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2241      	movs	r2, #65	; 0x41
 8003636:	2120      	movs	r1, #32
 8003638:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2242      	movs	r2, #66	; 0x42
 800363e:	2100      	movs	r1, #0
 8003640:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2240      	movs	r2, #64	; 0x40
 8003646:	2100      	movs	r1, #0
 8003648:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	e000      	b.n	8003650 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800364e:	2302      	movs	r3, #2
  }
}
 8003650:	0018      	movs	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	b007      	add	sp, #28
 8003656:	bd90      	pop	{r4, r7, pc}
 8003658:	80002000 	.word	0x80002000
 800365c:	fe00e800 	.word	0xfe00e800

08003660 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	b590      	push	{r4, r7, lr}
 8003662:	b089      	sub	sp, #36	; 0x24
 8003664:	af02      	add	r7, sp, #8
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	000c      	movs	r4, r1
 800366a:	0010      	movs	r0, r2
 800366c:	0019      	movs	r1, r3
 800366e:	230a      	movs	r3, #10
 8003670:	18fb      	adds	r3, r7, r3
 8003672:	1c22      	adds	r2, r4, #0
 8003674:	801a      	strh	r2, [r3, #0]
 8003676:	2308      	movs	r3, #8
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	1c02      	adds	r2, r0, #0
 800367c:	801a      	strh	r2, [r3, #0]
 800367e:	1dbb      	adds	r3, r7, #6
 8003680:	1c0a      	adds	r2, r1, #0
 8003682:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2241      	movs	r2, #65	; 0x41
 8003688:	5c9b      	ldrb	r3, [r3, r2]
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b20      	cmp	r3, #32
 800368e:	d000      	beq.n	8003692 <HAL_I2C_Mem_Write+0x32>
 8003690:	e10c      	b.n	80038ac <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d004      	beq.n	80036a2 <HAL_I2C_Mem_Write+0x42>
 8003698:	232c      	movs	r3, #44	; 0x2c
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d105      	bne.n	80036ae <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2280      	movs	r2, #128	; 0x80
 80036a6:	0092      	lsls	r2, r2, #2
 80036a8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0ff      	b.n	80038ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2240      	movs	r2, #64	; 0x40
 80036b2:	5c9b      	ldrb	r3, [r3, r2]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_I2C_Mem_Write+0x5c>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e0f8      	b.n	80038ae <HAL_I2C_Mem_Write+0x24e>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	2101      	movs	r1, #1
 80036c2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036c4:	f7ff fb82 	bl	8002dcc <HAL_GetTick>
 80036c8:	0003      	movs	r3, r0
 80036ca:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036cc:	2380      	movs	r3, #128	; 0x80
 80036ce:	0219      	lsls	r1, r3, #8
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	2319      	movs	r3, #25
 80036d8:	2201      	movs	r2, #1
 80036da:	f000 fc07 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 80036de:	1e03      	subs	r3, r0, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0e3      	b.n	80038ae <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2241      	movs	r2, #65	; 0x41
 80036ea:	2121      	movs	r1, #33	; 0x21
 80036ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2242      	movs	r2, #66	; 0x42
 80036f2:	2140      	movs	r1, #64	; 0x40
 80036f4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003700:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	222c      	movs	r2, #44	; 0x2c
 8003706:	18ba      	adds	r2, r7, r2
 8003708:	8812      	ldrh	r2, [r2, #0]
 800370a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003712:	1dbb      	adds	r3, r7, #6
 8003714:	881c      	ldrh	r4, [r3, #0]
 8003716:	2308      	movs	r3, #8
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	881a      	ldrh	r2, [r3, #0]
 800371c:	230a      	movs	r3, #10
 800371e:	18fb      	adds	r3, r7, r3
 8003720:	8819      	ldrh	r1, [r3, #0]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	9301      	str	r3, [sp, #4]
 8003728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	0023      	movs	r3, r4
 800372e:	f000 faf5 	bl	8003d1c <I2C_RequestMemoryWrite>
 8003732:	1e03      	subs	r3, r0, #0
 8003734:	d005      	beq.n	8003742 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2240      	movs	r2, #64	; 0x40
 800373a:	2100      	movs	r1, #0
 800373c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0b5      	b.n	80038ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003746:	b29b      	uxth	r3, r3
 8003748:	2bff      	cmp	r3, #255	; 0xff
 800374a:	d911      	bls.n	8003770 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	22ff      	movs	r2, #255	; 0xff
 8003750:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	b2da      	uxtb	r2, r3
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	045c      	lsls	r4, r3, #17
 800375c:	230a      	movs	r3, #10
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	8819      	ldrh	r1, [r3, #0]
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	2300      	movs	r3, #0
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	0023      	movs	r3, r4
 800376a:	f000 fda1 	bl	80042b0 <I2C_TransferConfig>
 800376e:	e012      	b.n	8003796 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377e:	b2da      	uxtb	r2, r3
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	049c      	lsls	r4, r3, #18
 8003784:	230a      	movs	r3, #10
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	8819      	ldrh	r1, [r3, #0]
 800378a:	68f8      	ldr	r0, [r7, #12]
 800378c:	2300      	movs	r3, #0
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	0023      	movs	r3, r4
 8003792:	f000 fd8d 	bl	80042b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	0018      	movs	r0, r3
 800379e:	f000 fbfd 	bl	8003f9c <I2C_WaitOnTXISFlagUntilTimeout>
 80037a2:	1e03      	subs	r3, r0, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e081      	b.n	80038ae <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	1c5a      	adds	r2, r3, #1
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d03a      	beq.n	800385a <HAL_I2C_Mem_Write+0x1fa>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d136      	bne.n	800385a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	0013      	movs	r3, r2
 80037f6:	2200      	movs	r2, #0
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	f000 fb77 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e053      	b.n	80038ae <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380a:	b29b      	uxth	r3, r3
 800380c:	2bff      	cmp	r3, #255	; 0xff
 800380e:	d911      	bls.n	8003834 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	22ff      	movs	r2, #255	; 0xff
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	b2da      	uxtb	r2, r3
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	045c      	lsls	r4, r3, #17
 8003820:	230a      	movs	r3, #10
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	8819      	ldrh	r1, [r3, #0]
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	2300      	movs	r3, #0
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	0023      	movs	r3, r4
 800382e:	f000 fd3f 	bl	80042b0 <I2C_TransferConfig>
 8003832:	e012      	b.n	800385a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	b2da      	uxtb	r2, r3
 8003844:	2380      	movs	r3, #128	; 0x80
 8003846:	049c      	lsls	r4, r3, #18
 8003848:	230a      	movs	r3, #10
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	8819      	ldrh	r1, [r3, #0]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	2300      	movs	r3, #0
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	0023      	movs	r3, r4
 8003856:	f000 fd2b 	bl	80042b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d198      	bne.n	8003796 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fbdc 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003870:	1e03      	subs	r3, r0, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e01a      	b.n	80038ae <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2220      	movs	r2, #32
 800387e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	490b      	ldr	r1, [pc, #44]	; (80038b8 <HAL_I2C_Mem_Write+0x258>)
 800388c:	400a      	ands	r2, r1
 800388e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2241      	movs	r2, #65	; 0x41
 8003894:	2120      	movs	r1, #32
 8003896:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2242      	movs	r2, #66	; 0x42
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2240      	movs	r2, #64	; 0x40
 80038a4:	2100      	movs	r1, #0
 80038a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	e000      	b.n	80038ae <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80038ac:	2302      	movs	r3, #2
  }
}
 80038ae:	0018      	movs	r0, r3
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b007      	add	sp, #28
 80038b4:	bd90      	pop	{r4, r7, pc}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	fe00e800 	.word	0xfe00e800

080038bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b590      	push	{r4, r7, lr}
 80038be:	b089      	sub	sp, #36	; 0x24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	000c      	movs	r4, r1
 80038c6:	0010      	movs	r0, r2
 80038c8:	0019      	movs	r1, r3
 80038ca:	230a      	movs	r3, #10
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	1c22      	adds	r2, r4, #0
 80038d0:	801a      	strh	r2, [r3, #0]
 80038d2:	2308      	movs	r3, #8
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	1c02      	adds	r2, r0, #0
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	1dbb      	adds	r3, r7, #6
 80038dc:	1c0a      	adds	r2, r1, #0
 80038de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2241      	movs	r2, #65	; 0x41
 80038e4:	5c9b      	ldrb	r3, [r3, r2]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d000      	beq.n	80038ee <HAL_I2C_Mem_Read+0x32>
 80038ec:	e110      	b.n	8003b10 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d004      	beq.n	80038fe <HAL_I2C_Mem_Read+0x42>
 80038f4:	232c      	movs	r3, #44	; 0x2c
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2280      	movs	r2, #128	; 0x80
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e103      	b.n	8003b12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2240      	movs	r2, #64	; 0x40
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_I2C_Mem_Read+0x5c>
 8003914:	2302      	movs	r3, #2
 8003916:	e0fc      	b.n	8003b12 <HAL_I2C_Mem_Read+0x256>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2240      	movs	r2, #64	; 0x40
 800391c:	2101      	movs	r1, #1
 800391e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003920:	f7ff fa54 	bl	8002dcc <HAL_GetTick>
 8003924:	0003      	movs	r3, r0
 8003926:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003928:	2380      	movs	r3, #128	; 0x80
 800392a:	0219      	lsls	r1, r3, #8
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	2319      	movs	r3, #25
 8003934:	2201      	movs	r2, #1
 8003936:	f000 fad9 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 800393a:	1e03      	subs	r3, r0, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0e7      	b.n	8003b12 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2241      	movs	r2, #65	; 0x41
 8003946:	2122      	movs	r1, #34	; 0x22
 8003948:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2242      	movs	r2, #66	; 0x42
 800394e:	2140      	movs	r1, #64	; 0x40
 8003950:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800395c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	222c      	movs	r2, #44	; 0x2c
 8003962:	18ba      	adds	r2, r7, r2
 8003964:	8812      	ldrh	r2, [r2, #0]
 8003966:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800396e:	1dbb      	adds	r3, r7, #6
 8003970:	881c      	ldrh	r4, [r3, #0]
 8003972:	2308      	movs	r3, #8
 8003974:	18fb      	adds	r3, r7, r3
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	230a      	movs	r3, #10
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	8819      	ldrh	r1, [r3, #0]
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	0023      	movs	r3, r4
 800398a:	f000 fa2b 	bl	8003de4 <I2C_RequestMemoryRead>
 800398e:	1e03      	subs	r3, r0, #0
 8003990:	d005      	beq.n	800399e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2240      	movs	r2, #64	; 0x40
 8003996:	2100      	movs	r1, #0
 8003998:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e0b9      	b.n	8003b12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2bff      	cmp	r3, #255	; 0xff
 80039a6:	d911      	bls.n	80039cc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	22ff      	movs	r2, #255	; 0xff
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	2380      	movs	r3, #128	; 0x80
 80039b6:	045c      	lsls	r4, r3, #17
 80039b8:	230a      	movs	r3, #10
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	8819      	ldrh	r1, [r3, #0]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	4b56      	ldr	r3, [pc, #344]	; (8003b1c <HAL_I2C_Mem_Read+0x260>)
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	0023      	movs	r3, r4
 80039c6:	f000 fc73 	bl	80042b0 <I2C_TransferConfig>
 80039ca:	e012      	b.n	80039f2 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	2380      	movs	r3, #128	; 0x80
 80039de:	049c      	lsls	r4, r3, #18
 80039e0:	230a      	movs	r3, #10
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	8819      	ldrh	r1, [r3, #0]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	4b4c      	ldr	r3, [pc, #304]	; (8003b1c <HAL_I2C_Mem_Read+0x260>)
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	0023      	movs	r3, r4
 80039ee:	f000 fc5f 	bl	80042b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80039f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	9300      	str	r3, [sp, #0]
 80039fa:	0013      	movs	r3, r2
 80039fc:	2200      	movs	r2, #0
 80039fe:	2104      	movs	r1, #4
 8003a00:	f000 fa74 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 8003a04:	1e03      	subs	r3, r0, #0
 8003a06:	d001      	beq.n	8003a0c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e082      	b.n	8003b12 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d03a      	beq.n	8003abe <HAL_I2C_Mem_Read+0x202>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d136      	bne.n	8003abe <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	0013      	movs	r3, r2
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2180      	movs	r1, #128	; 0x80
 8003a5e:	f000 fa45 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 8003a62:	1e03      	subs	r3, r0, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e053      	b.n	8003b12 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2bff      	cmp	r3, #255	; 0xff
 8003a72:	d911      	bls.n	8003a98 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	22ff      	movs	r2, #255	; 0xff
 8003a78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	045c      	lsls	r4, r3, #17
 8003a84:	230a      	movs	r3, #10
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	8819      	ldrh	r1, [r3, #0]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	0023      	movs	r3, r4
 8003a92:	f000 fc0d 	bl	80042b0 <I2C_TransferConfig>
 8003a96:	e012      	b.n	8003abe <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	049c      	lsls	r4, r3, #18
 8003aac:	230a      	movs	r3, #10
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	8819      	ldrh	r1, [r3, #0]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	9300      	str	r3, [sp, #0]
 8003ab8:	0023      	movs	r3, r4
 8003aba:	f000 fbf9 	bl	80042b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d194      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 faaa 	bl	8004028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e01a      	b.n	8003b12 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	490c      	ldr	r1, [pc, #48]	; (8003b20 <HAL_I2C_Mem_Read+0x264>)
 8003af0:	400a      	ands	r2, r1
 8003af2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2241      	movs	r2, #65	; 0x41
 8003af8:	2120      	movs	r1, #32
 8003afa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2242      	movs	r2, #66	; 0x42
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	2100      	movs	r1, #0
 8003b0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	0018      	movs	r0, r3
 8003b14:	46bd      	mov	sp, r7
 8003b16:	b007      	add	sp, #28
 8003b18:	bd90      	pop	{r4, r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	80002400 	.word	0x80002400
 8003b20:	fe00e800 	.word	0xfe00e800

08003b24 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08a      	sub	sp, #40	; 0x28
 8003b28:	af02      	add	r7, sp, #8
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	230a      	movs	r3, #10
 8003b32:	18fb      	adds	r3, r7, r3
 8003b34:	1c0a      	adds	r2, r1, #0
 8003b36:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2241      	movs	r2, #65	; 0x41
 8003b40:	5c9b      	ldrb	r3, [r3, r2]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d000      	beq.n	8003b4a <HAL_I2C_IsDeviceReady+0x26>
 8003b48:	e0df      	b.n	8003d0a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	401a      	ands	r2, r3
 8003b56:	2380      	movs	r3, #128	; 0x80
 8003b58:	021b      	lsls	r3, r3, #8
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0d4      	b.n	8003d0c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2240      	movs	r2, #64	; 0x40
 8003b66:	5c9b      	ldrb	r3, [r3, r2]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_I2C_IsDeviceReady+0x4c>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0cd      	b.n	8003d0c <HAL_I2C_IsDeviceReady+0x1e8>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2240      	movs	r2, #64	; 0x40
 8003b74:	2101      	movs	r1, #1
 8003b76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2241      	movs	r2, #65	; 0x41
 8003b7c:	2124      	movs	r1, #36	; 0x24
 8003b7e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d107      	bne.n	8003b9e <HAL_I2C_IsDeviceReady+0x7a>
 8003b8e:	230a      	movs	r3, #10
 8003b90:	18fb      	adds	r3, r7, r3
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	059b      	lsls	r3, r3, #22
 8003b96:	0d9b      	lsrs	r3, r3, #22
 8003b98:	4a5e      	ldr	r2, [pc, #376]	; (8003d14 <HAL_I2C_IsDeviceReady+0x1f0>)
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	e006      	b.n	8003bac <HAL_I2C_IsDeviceReady+0x88>
 8003b9e:	230a      	movs	r3, #10
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	059b      	lsls	r3, r3, #22
 8003ba6:	0d9b      	lsrs	r3, r3, #22
 8003ba8:	4a5b      	ldr	r2, [pc, #364]	; (8003d18 <HAL_I2C_IsDeviceReady+0x1f4>)
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003bb2:	f7ff f90b 	bl	8002dcc <HAL_GetTick>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	3b20      	subs	r3, #32
 8003bc6:	425a      	negs	r2, r3
 8003bc8:	4153      	adcs	r3, r2
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	231f      	movs	r3, #31
 8003bce:	18fb      	adds	r3, r7, r3
 8003bd0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2210      	movs	r2, #16
 8003bda:	4013      	ands	r3, r2
 8003bdc:	3b10      	subs	r3, #16
 8003bde:	425a      	negs	r2, r3
 8003be0:	4153      	adcs	r3, r2
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	231e      	movs	r3, #30
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003bea:	e035      	b.n	8003c58 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	d01a      	beq.n	8003c28 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7ff f8eb 	bl	8002dcc <HAL_GetTick>
 8003bf6:	0002      	movs	r2, r0
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <HAL_I2C_IsDeviceReady+0xe4>
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2241      	movs	r2, #65	; 0x41
 8003c0c:	2120      	movs	r1, #32
 8003c0e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	2220      	movs	r2, #32
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2240      	movs	r2, #64	; 0x40
 8003c20:	2100      	movs	r1, #0
 8003c22:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e071      	b.n	8003d0c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	4013      	ands	r3, r2
 8003c32:	3b20      	subs	r3, #32
 8003c34:	425a      	negs	r2, r3
 8003c36:	4153      	adcs	r3, r2
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	231f      	movs	r3, #31
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2210      	movs	r2, #16
 8003c48:	4013      	ands	r3, r2
 8003c4a:	3b10      	subs	r3, #16
 8003c4c:	425a      	negs	r2, r3
 8003c4e:	4153      	adcs	r3, r2
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	231e      	movs	r3, #30
 8003c54:	18fb      	adds	r3, r7, r3
 8003c56:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003c58:	231f      	movs	r3, #31
 8003c5a:	18fb      	adds	r3, r7, r3
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <HAL_I2C_IsDeviceReady+0x148>
 8003c62:	231e      	movs	r3, #30
 8003c64:	18fb      	adds	r3, r7, r3
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0bf      	beq.n	8003bec <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2210      	movs	r2, #16
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d01a      	beq.n	8003cb0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	0013      	movs	r3, r2
 8003c84:	2200      	movs	r2, #0
 8003c86:	2120      	movs	r1, #32
 8003c88:	f000 f930 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 8003c8c:	1e03      	subs	r3, r0, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e03b      	b.n	8003d0c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2241      	movs	r2, #65	; 0x41
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2240      	movs	r2, #64	; 0x40
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e02d      	b.n	8003d0c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	0013      	movs	r3, r2
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2120      	movs	r1, #32
 8003cbe:	f000 f915 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 8003cc2:	1e03      	subs	r3, r0, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e020      	b.n	8003d0c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d900      	bls.n	8003cea <HAL_I2C_IsDeviceReady+0x1c6>
 8003ce8:	e74d      	b.n	8003b86 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2241      	movs	r2, #65	; 0x41
 8003cee:	2120      	movs	r1, #32
 8003cf0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf6:	2220      	movs	r2, #32
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2240      	movs	r2, #64	; 0x40
 8003d02:	2100      	movs	r1, #0
 8003d04:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
  }
}
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	b008      	add	sp, #32
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	02002000 	.word	0x02002000
 8003d18:	02002800 	.word	0x02002800

08003d1c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003d1c:	b5b0      	push	{r4, r5, r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	000c      	movs	r4, r1
 8003d26:	0010      	movs	r0, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	250a      	movs	r5, #10
 8003d2c:	197b      	adds	r3, r7, r5
 8003d2e:	1c22      	adds	r2, r4, #0
 8003d30:	801a      	strh	r2, [r3, #0]
 8003d32:	2308      	movs	r3, #8
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	1c02      	adds	r2, r0, #0
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	1dbb      	adds	r3, r7, #6
 8003d3c:	1c0a      	adds	r2, r1, #0
 8003d3e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003d40:	1dbb      	adds	r3, r7, #6
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	2380      	movs	r3, #128	; 0x80
 8003d48:	045c      	lsls	r4, r3, #17
 8003d4a:	197b      	adds	r3, r7, r5
 8003d4c:	8819      	ldrh	r1, [r3, #0]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <I2C_RequestMemoryWrite+0xc4>)
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	0023      	movs	r3, r4
 8003d56:	f000 faab 	bl	80042b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5c:	6a39      	ldr	r1, [r7, #32]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f000 f91b 	bl	8003f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d001      	beq.n	8003d6e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e033      	b.n	8003dd6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d6e:	1dbb      	adds	r3, r7, #6
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d107      	bne.n	8003d86 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d76:	2308      	movs	r3, #8
 8003d78:	18fb      	adds	r3, r7, r3
 8003d7a:	881b      	ldrh	r3, [r3, #0]
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	629a      	str	r2, [r3, #40]	; 0x28
 8003d84:	e019      	b.n	8003dba <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d86:	2308      	movs	r3, #8
 8003d88:	18fb      	adds	r3, r7, r3
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	0a1b      	lsrs	r3, r3, #8
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9a:	6a39      	ldr	r1, [r7, #32]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 f8fc 	bl	8003f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003da4:	1e03      	subs	r3, r0, #0
 8003da6:	d001      	beq.n	8003dac <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e014      	b.n	8003dd6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dac:	2308      	movs	r3, #8
 8003dae:	18fb      	adds	r3, r7, r3
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a3a      	ldr	r2, [r7, #32]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	0013      	movs	r3, r2
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	2180      	movs	r1, #128	; 0x80
 8003dc8:	f000 f890 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d001      	beq.n	8003dd4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b004      	add	sp, #16
 8003ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	80002000 	.word	0x80002000

08003de4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003de4:	b5b0      	push	{r4, r5, r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	000c      	movs	r4, r1
 8003dee:	0010      	movs	r0, r2
 8003df0:	0019      	movs	r1, r3
 8003df2:	250a      	movs	r5, #10
 8003df4:	197b      	adds	r3, r7, r5
 8003df6:	1c22      	adds	r2, r4, #0
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	2308      	movs	r3, #8
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	1c02      	adds	r2, r0, #0
 8003e00:	801a      	strh	r2, [r3, #0]
 8003e02:	1dbb      	adds	r3, r7, #6
 8003e04:	1c0a      	adds	r2, r1, #0
 8003e06:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003e08:	1dbb      	adds	r3, r7, #6
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	197b      	adds	r3, r7, r5
 8003e10:	8819      	ldrh	r1, [r3, #0]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	4b23      	ldr	r3, [pc, #140]	; (8003ea4 <I2C_RequestMemoryRead+0xc0>)
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f000 fa49 	bl	80042b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e20:	6a39      	ldr	r1, [r7, #32]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 f8b9 	bl	8003f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e2a:	1e03      	subs	r3, r0, #0
 8003e2c:	d001      	beq.n	8003e32 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e033      	b.n	8003e9a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e32:	1dbb      	adds	r3, r7, #6
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	18fb      	adds	r3, r7, r3
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	629a      	str	r2, [r3, #40]	; 0x28
 8003e48:	e019      	b.n	8003e7e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	18fb      	adds	r3, r7, r3
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	0a1b      	lsrs	r3, r3, #8
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	6a39      	ldr	r1, [r7, #32]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	0018      	movs	r0, r3
 8003e64:	f000 f89a 	bl	8003f9c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e68:	1e03      	subs	r3, r0, #0
 8003e6a:	d001      	beq.n	8003e70 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e014      	b.n	8003e9a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003e70:	2308      	movs	r3, #8
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	b2da      	uxtb	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a3a      	ldr	r2, [r7, #32]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	0013      	movs	r3, r2
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2140      	movs	r1, #64	; 0x40
 8003e8c:	f000 f82e 	bl	8003eec <I2C_WaitOnFlagUntilTimeout>
 8003e90:	1e03      	subs	r3, r0, #0
 8003e92:	d001      	beq.n	8003e98 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b004      	add	sp, #16
 8003ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	80002000 	.word	0x80002000

08003ea8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b082      	sub	sp, #8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	4013      	ands	r3, r2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d103      	bne.n	8003ec6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d007      	beq.n	8003ee4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699a      	ldr	r2, [r3, #24]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2101      	movs	r1, #1
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	619a      	str	r2, [r3, #24]
  }
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}

08003eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	1dfb      	adds	r3, r7, #7
 8003efa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003efc:	e03a      	b.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f000 f8d3 	bl	80040b0 <I2C_IsErrorOccurred>
 8003f0a:	1e03      	subs	r3, r0, #0
 8003f0c:	d001      	beq.n	8003f12 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e040      	b.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	d02d      	beq.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fe ff58 	bl	8002dcc <HAL_GetTick>
 8003f1c:	0002      	movs	r2, r0
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <I2C_WaitOnFlagUntilTimeout+0x42>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d122      	bne.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	4013      	ands	r3, r2
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	425a      	negs	r2, r3
 8003f3e:	4153      	adcs	r3, r2
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	001a      	movs	r2, r3
 8003f44:	1dfb      	adds	r3, r7, #7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d113      	bne.n	8003f74 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	2220      	movs	r2, #32
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2241      	movs	r2, #65	; 0x41
 8003f5c:	2120      	movs	r1, #32
 8003f5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2242      	movs	r2, #66	; 0x42
 8003f64:	2100      	movs	r1, #0
 8003f66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2240      	movs	r2, #64	; 0x40
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e00f      	b.n	8003f94 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	68ba      	ldr	r2, [r7, #8]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	425a      	negs	r2, r3
 8003f84:	4153      	adcs	r3, r2
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	001a      	movs	r2, r3
 8003f8a:	1dfb      	adds	r3, r7, #7
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d0b5      	beq.n	8003efe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b004      	add	sp, #16
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003fa8:	e032      	b.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	68b9      	ldr	r1, [r7, #8]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f000 f87d 	bl	80040b0 <I2C_IsErrorOccurred>
 8003fb6:	1e03      	subs	r3, r0, #0
 8003fb8:	d001      	beq.n	8003fbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e030      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	d025      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe ff02 	bl	8002dcc <HAL_GetTick>
 8003fc8:	0002      	movs	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d11a      	bne.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	699b      	ldr	r3, [r3, #24]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d013      	beq.n	8004010 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	2220      	movs	r2, #32
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2241      	movs	r2, #65	; 0x41
 8003ff8:	2120      	movs	r1, #32
 8003ffa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2242      	movs	r2, #66	; 0x42
 8004000:	2100      	movs	r1, #0
 8004002:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2240      	movs	r2, #64	; 0x40
 8004008:	2100      	movs	r1, #0
 800400a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e007      	b.n	8004020 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2202      	movs	r2, #2
 8004018:	4013      	ands	r3, r2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d1c5      	bne.n	8003faa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b004      	add	sp, #16
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004034:	e02f      	b.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	0018      	movs	r0, r3
 800403e:	f000 f837 	bl	80040b0 <I2C_IsErrorOccurred>
 8004042:	1e03      	subs	r3, r0, #0
 8004044:	d001      	beq.n	800404a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e02d      	b.n	80040a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404a:	f7fe febf 	bl	8002dcc <HAL_GetTick>
 800404e:	0002      	movs	r2, r0
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	d302      	bcc.n	8004060 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11a      	bne.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2220      	movs	r2, #32
 8004068:	4013      	ands	r3, r2
 800406a:	2b20      	cmp	r3, #32
 800406c:	d013      	beq.n	8004096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004072:	2220      	movs	r2, #32
 8004074:	431a      	orrs	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2241      	movs	r2, #65	; 0x41
 800407e:	2120      	movs	r1, #32
 8004080:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2242      	movs	r2, #66	; 0x42
 8004086:	2100      	movs	r1, #0
 8004088:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2240      	movs	r2, #64	; 0x40
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e007      	b.n	80040a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2220      	movs	r2, #32
 800409e:	4013      	ands	r3, r2
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d1c8      	bne.n	8004036 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	0018      	movs	r0, r3
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b004      	add	sp, #16
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b08b      	sub	sp, #44	; 0x2c
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040bc:	2327      	movs	r3, #39	; 0x27
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	2200      	movs	r2, #0
 80040c2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2210      	movs	r2, #16
 80040d8:	4013      	ands	r3, r2
 80040da:	d100      	bne.n	80040de <I2C_IsErrorOccurred+0x2e>
 80040dc:	e082      	b.n	80041e4 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2210      	movs	r2, #16
 80040e4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040e6:	e060      	b.n	80041aa <I2C_IsErrorOccurred+0xfa>
 80040e8:	2427      	movs	r4, #39	; 0x27
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	193a      	adds	r2, r7, r4
 80040ee:	7812      	ldrb	r2, [r2, #0]
 80040f0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	d058      	beq.n	80041aa <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040f8:	f7fe fe68 	bl	8002dcc <HAL_GetTick>
 80040fc:	0002      	movs	r2, r0
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	429a      	cmp	r2, r3
 8004106:	d306      	bcc.n	8004116 <I2C_IsErrorOccurred+0x66>
 8004108:	193b      	adds	r3, r7, r4
 800410a:	193a      	adds	r2, r7, r4
 800410c:	7812      	ldrb	r2, [r2, #0]
 800410e:	701a      	strb	r2, [r3, #0]
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d149      	bne.n	80041aa <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	2380      	movs	r3, #128	; 0x80
 800411e:	01db      	lsls	r3, r3, #7
 8004120:	4013      	ands	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004124:	2013      	movs	r0, #19
 8004126:	183b      	adds	r3, r7, r0
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	2142      	movs	r1, #66	; 0x42
 800412c:	5c52      	ldrb	r2, [r2, r1]
 800412e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	2380      	movs	r3, #128	; 0x80
 8004138:	021b      	lsls	r3, r3, #8
 800413a:	401a      	ands	r2, r3
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	021b      	lsls	r3, r3, #8
 8004140:	429a      	cmp	r2, r3
 8004142:	d126      	bne.n	8004192 <I2C_IsErrorOccurred+0xe2>
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	01db      	lsls	r3, r3, #7
 800414a:	429a      	cmp	r2, r3
 800414c:	d021      	beq.n	8004192 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800414e:	183b      	adds	r3, r7, r0
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b20      	cmp	r3, #32
 8004154:	d01d      	beq.n	8004192 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	01c9      	lsls	r1, r1, #7
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004168:	f7fe fe30 	bl	8002dcc <HAL_GetTick>
 800416c:	0003      	movs	r3, r0
 800416e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004170:	e00f      	b.n	8004192 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004172:	f7fe fe2b 	bl	8002dcc <HAL_GetTick>
 8004176:	0002      	movs	r2, r0
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b19      	cmp	r3, #25
 800417e:	d908      	bls.n	8004192 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	2220      	movs	r2, #32
 8004184:	4313      	orrs	r3, r2
 8004186:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004188:	2327      	movs	r3, #39	; 0x27
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]

              break;
 8004190:	e00b      	b.n	80041aa <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2220      	movs	r2, #32
 800419a:	4013      	ands	r3, r2
 800419c:	2127      	movs	r1, #39	; 0x27
 800419e:	187a      	adds	r2, r7, r1
 80041a0:	1879      	adds	r1, r7, r1
 80041a2:	7809      	ldrb	r1, [r1, #0]
 80041a4:	7011      	strb	r1, [r2, #0]
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d1e3      	bne.n	8004172 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2220      	movs	r2, #32
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	d004      	beq.n	80041c2 <I2C_IsErrorOccurred+0x112>
 80041b8:	2327      	movs	r3, #39	; 0x27
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d092      	beq.n	80040e8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80041c2:	2327      	movs	r3, #39	; 0x27
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2220      	movs	r2, #32
 80041d2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2204      	movs	r2, #4
 80041d8:	4313      	orrs	r3, r2
 80041da:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80041dc:	2327      	movs	r3, #39	; 0x27
 80041de:	18fb      	adds	r3, r7, r3
 80041e0:	2201      	movs	r2, #1
 80041e2:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	d00c      	beq.n	8004210 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	2201      	movs	r2, #1
 80041fa:	4313      	orrs	r3, r2
 80041fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2280      	movs	r2, #128	; 0x80
 8004204:	0052      	lsls	r2, r2, #1
 8004206:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004208:	2327      	movs	r3, #39	; 0x27
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	2201      	movs	r2, #1
 800420e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4013      	ands	r3, r2
 8004218:	d00c      	beq.n	8004234 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800421a:	6a3b      	ldr	r3, [r7, #32]
 800421c:	2208      	movs	r2, #8
 800421e:	4313      	orrs	r3, r2
 8004220:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2280      	movs	r2, #128	; 0x80
 8004228:	00d2      	lsls	r2, r2, #3
 800422a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800422c:	2327      	movs	r3, #39	; 0x27
 800422e:	18fb      	adds	r3, r7, r3
 8004230:	2201      	movs	r2, #1
 8004232:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	2380      	movs	r3, #128	; 0x80
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	4013      	ands	r3, r2
 800423c:	d00c      	beq.n	8004258 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	2202      	movs	r2, #2
 8004242:	4313      	orrs	r3, r2
 8004244:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2280      	movs	r2, #128	; 0x80
 800424c:	0092      	lsls	r2, r2, #2
 800424e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004250:	2327      	movs	r3, #39	; 0x27
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004258:	2327      	movs	r3, #39	; 0x27
 800425a:	18fb      	adds	r3, r7, r3
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01d      	beq.n	800429e <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	0018      	movs	r0, r3
 8004266:	f7ff fe1f 	bl	8003ea8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	490d      	ldr	r1, [pc, #52]	; (80042ac <I2C_IsErrorOccurred+0x1fc>)
 8004276:	400a      	ands	r2, r1
 8004278:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2241      	movs	r2, #65	; 0x41
 800428a:	2120      	movs	r1, #32
 800428c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2242      	movs	r2, #66	; 0x42
 8004292:	2100      	movs	r1, #0
 8004294:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2240      	movs	r2, #64	; 0x40
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800429e:	2327      	movs	r3, #39	; 0x27
 80042a0:	18fb      	adds	r3, r7, r3
 80042a2:	781b      	ldrb	r3, [r3, #0]
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b00b      	add	sp, #44	; 0x2c
 80042aa:	bd90      	pop	{r4, r7, pc}
 80042ac:	fe00e800 	.word	0xfe00e800

080042b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80042b0:	b590      	push	{r4, r7, lr}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	0008      	movs	r0, r1
 80042ba:	0011      	movs	r1, r2
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	240a      	movs	r4, #10
 80042c0:	193b      	adds	r3, r7, r4
 80042c2:	1c02      	adds	r2, r0, #0
 80042c4:	801a      	strh	r2, [r3, #0]
 80042c6:	2009      	movs	r0, #9
 80042c8:	183b      	adds	r3, r7, r0
 80042ca:	1c0a      	adds	r2, r1, #0
 80042cc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042ce:	193b      	adds	r3, r7, r4
 80042d0:	881b      	ldrh	r3, [r3, #0]
 80042d2:	059b      	lsls	r3, r3, #22
 80042d4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042d6:	183b      	adds	r3, r7, r0
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	0419      	lsls	r1, r3, #16
 80042dc:	23ff      	movs	r3, #255	; 0xff
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042e2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	4313      	orrs	r3, r2
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	085b      	lsrs	r3, r3, #1
 80042f0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042fa:	0d51      	lsrs	r1, r2, #21
 80042fc:	2280      	movs	r2, #128	; 0x80
 80042fe:	00d2      	lsls	r2, r2, #3
 8004300:	400a      	ands	r2, r1
 8004302:	4907      	ldr	r1, [pc, #28]	; (8004320 <I2C_TransferConfig+0x70>)
 8004304:	430a      	orrs	r2, r1
 8004306:	43d2      	mvns	r2, r2
 8004308:	401a      	ands	r2, r3
 800430a:	0011      	movs	r1, r2
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	430a      	orrs	r2, r1
 8004314:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	46bd      	mov	sp, r7
 800431a:	b007      	add	sp, #28
 800431c:	bd90      	pop	{r4, r7, pc}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	03ff63ff 	.word	0x03ff63ff

08004324 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2241      	movs	r2, #65	; 0x41
 8004332:	5c9b      	ldrb	r3, [r3, r2]
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b20      	cmp	r3, #32
 8004338:	d138      	bne.n	80043ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2240      	movs	r2, #64	; 0x40
 800433e:	5c9b      	ldrb	r3, [r3, r2]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004344:	2302      	movs	r3, #2
 8004346:	e032      	b.n	80043ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2240      	movs	r2, #64	; 0x40
 800434c:	2101      	movs	r1, #1
 800434e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2241      	movs	r2, #65	; 0x41
 8004354:	2124      	movs	r1, #36	; 0x24
 8004356:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2101      	movs	r1, #1
 8004364:	438a      	bics	r2, r1
 8004366:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4911      	ldr	r1, [pc, #68]	; (80043b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004374:	400a      	ands	r2, r1
 8004376:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6819      	ldr	r1, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2101      	movs	r1, #1
 8004394:	430a      	orrs	r2, r1
 8004396:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2241      	movs	r2, #65	; 0x41
 800439c:	2120      	movs	r1, #32
 800439e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2240      	movs	r2, #64	; 0x40
 80043a4:	2100      	movs	r1, #0
 80043a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b002      	add	sp, #8
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	ffffefff 	.word	0xffffefff

080043bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2241      	movs	r2, #65	; 0x41
 80043ca:	5c9b      	ldrb	r3, [r3, r2]
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	d139      	bne.n	8004446 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2240      	movs	r2, #64	; 0x40
 80043d6:	5c9b      	ldrb	r3, [r3, r2]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d101      	bne.n	80043e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043dc:	2302      	movs	r3, #2
 80043de:	e033      	b.n	8004448 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2240      	movs	r2, #64	; 0x40
 80043e4:	2101      	movs	r1, #1
 80043e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2241      	movs	r2, #65	; 0x41
 80043ec:	2124      	movs	r1, #36	; 0x24
 80043ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2101      	movs	r1, #1
 80043fc:	438a      	bics	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4a11      	ldr	r2, [pc, #68]	; (8004450 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	021b      	lsls	r3, r3, #8
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2101      	movs	r1, #1
 800442e:	430a      	orrs	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2241      	movs	r2, #65	; 0x41
 8004436:	2120      	movs	r1, #32
 8004438:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2240      	movs	r2, #64	; 0x40
 800443e:	2100      	movs	r1, #0
 8004440:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e000      	b.n	8004448 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004446:	2302      	movs	r3, #2
  }
}
 8004448:	0018      	movs	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	b004      	add	sp, #16
 800444e:	bd80      	pop	{r7, pc}
 8004450:	fffff0ff 	.word	0xfffff0ff

08004454 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a19      	ldr	r2, [pc, #100]	; (80044c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004462:	4013      	ands	r3, r2
 8004464:	0019      	movs	r1, r3
 8004466:	4b17      	ldr	r3, [pc, #92]	; (80044c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	430a      	orrs	r2, r1
 800446c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	429a      	cmp	r2, r3
 8004476:	d11f      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004478:	4b14      	ldr	r3, [pc, #80]	; (80044cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	0013      	movs	r3, r2
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	189b      	adds	r3, r3, r2
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4912      	ldr	r1, [pc, #72]	; (80044d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004486:	0018      	movs	r0, r3
 8004488:	f7fb fe4e 	bl	8000128 <__udivsi3>
 800448c:	0003      	movs	r3, r0
 800448e:	3301      	adds	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004492:	e008      	b.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3b01      	subs	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e001      	b.n	80044a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e009      	b.n	80044ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044a6:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	401a      	ands	r2, r3
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d0ed      	beq.n	8004494 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b004      	add	sp, #16
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			; (mov r8, r8)
 80044c4:	40007000 	.word	0x40007000
 80044c8:	fffff9ff 	.word	0xfffff9ff
 80044cc:	2000002c 	.word	0x2000002c
 80044d0:	000f4240 	.word	0x000f4240

080044d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	23e0      	movs	r3, #224	; 0xe0
 80044de:	01db      	lsls	r3, r3, #7
 80044e0:	4013      	ands	r3, r2
}
 80044e2:	0018      	movs	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000

080044ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b088      	sub	sp, #32
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e2fe      	b.n	8004afc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2201      	movs	r2, #1
 8004504:	4013      	ands	r3, r2
 8004506:	d100      	bne.n	800450a <HAL_RCC_OscConfig+0x1e>
 8004508:	e07c      	b.n	8004604 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450a:	4bc3      	ldr	r3, [pc, #780]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2238      	movs	r2, #56	; 0x38
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004514:	4bc0      	ldr	r3, [pc, #768]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2203      	movs	r2, #3
 800451a:	4013      	ands	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	2b10      	cmp	r3, #16
 8004522:	d102      	bne.n	800452a <HAL_RCC_OscConfig+0x3e>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d002      	beq.n	8004530 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	2b08      	cmp	r3, #8
 800452e:	d10b      	bne.n	8004548 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004530:	4bb9      	ldr	r3, [pc, #740]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	029b      	lsls	r3, r3, #10
 8004538:	4013      	ands	r3, r2
 800453a:	d062      	beq.n	8004602 <HAL_RCC_OscConfig+0x116>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d15e      	bne.n	8004602 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e2d9      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685a      	ldr	r2, [r3, #4]
 800454c:	2380      	movs	r3, #128	; 0x80
 800454e:	025b      	lsls	r3, r3, #9
 8004550:	429a      	cmp	r2, r3
 8004552:	d107      	bne.n	8004564 <HAL_RCC_OscConfig+0x78>
 8004554:	4bb0      	ldr	r3, [pc, #704]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	4baf      	ldr	r3, [pc, #700]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800455a:	2180      	movs	r1, #128	; 0x80
 800455c:	0249      	lsls	r1, r1, #9
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e020      	b.n	80045a6 <HAL_RCC_OscConfig+0xba>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	23a0      	movs	r3, #160	; 0xa0
 800456a:	02db      	lsls	r3, r3, #11
 800456c:	429a      	cmp	r2, r3
 800456e:	d10e      	bne.n	800458e <HAL_RCC_OscConfig+0xa2>
 8004570:	4ba9      	ldr	r3, [pc, #676]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4ba8      	ldr	r3, [pc, #672]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004576:	2180      	movs	r1, #128	; 0x80
 8004578:	02c9      	lsls	r1, r1, #11
 800457a:	430a      	orrs	r2, r1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	4ba6      	ldr	r3, [pc, #664]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4ba5      	ldr	r3, [pc, #660]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004584:	2180      	movs	r1, #128	; 0x80
 8004586:	0249      	lsls	r1, r1, #9
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	e00b      	b.n	80045a6 <HAL_RCC_OscConfig+0xba>
 800458e:	4ba2      	ldr	r3, [pc, #648]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4ba1      	ldr	r3, [pc, #644]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004594:	49a1      	ldr	r1, [pc, #644]	; (800481c <HAL_RCC_OscConfig+0x330>)
 8004596:	400a      	ands	r2, r1
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	4b9f      	ldr	r3, [pc, #636]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b9e      	ldr	r3, [pc, #632]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80045a0:	499f      	ldr	r1, [pc, #636]	; (8004820 <HAL_RCC_OscConfig+0x334>)
 80045a2:	400a      	ands	r2, r1
 80045a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d014      	beq.n	80045d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ae:	f7fe fc0d 	bl	8002dcc <HAL_GetTick>
 80045b2:	0003      	movs	r3, r0
 80045b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b8:	f7fe fc08 	bl	8002dcc <HAL_GetTick>
 80045bc:	0002      	movs	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b64      	cmp	r3, #100	; 0x64
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e298      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ca:	4b93      	ldr	r3, [pc, #588]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	2380      	movs	r3, #128	; 0x80
 80045d0:	029b      	lsls	r3, r3, #10
 80045d2:	4013      	ands	r3, r2
 80045d4:	d0f0      	beq.n	80045b8 <HAL_RCC_OscConfig+0xcc>
 80045d6:	e015      	b.n	8004604 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d8:	f7fe fbf8 	bl	8002dcc <HAL_GetTick>
 80045dc:	0003      	movs	r3, r0
 80045de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e2:	f7fe fbf3 	bl	8002dcc <HAL_GetTick>
 80045e6:	0002      	movs	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b64      	cmp	r3, #100	; 0x64
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e283      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045f4:	4b88      	ldr	r3, [pc, #544]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	029b      	lsls	r3, r3, #10
 80045fc:	4013      	ands	r3, r2
 80045fe:	d1f0      	bne.n	80045e2 <HAL_RCC_OscConfig+0xf6>
 8004600:	e000      	b.n	8004604 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004602:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2202      	movs	r2, #2
 800460a:	4013      	ands	r3, r2
 800460c:	d100      	bne.n	8004610 <HAL_RCC_OscConfig+0x124>
 800460e:	e099      	b.n	8004744 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004610:	4b81      	ldr	r3, [pc, #516]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	2238      	movs	r2, #56	; 0x38
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800461a:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2203      	movs	r2, #3
 8004620:	4013      	ands	r3, r2
 8004622:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	2b10      	cmp	r3, #16
 8004628:	d102      	bne.n	8004630 <HAL_RCC_OscConfig+0x144>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d002      	beq.n	8004636 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d135      	bne.n	80046a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004636:	4b78      	ldr	r3, [pc, #480]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4013      	ands	r3, r2
 8004640:	d005      	beq.n	800464e <HAL_RCC_OscConfig+0x162>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e256      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464e:	4b72      	ldr	r3, [pc, #456]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4a74      	ldr	r2, [pc, #464]	; (8004824 <HAL_RCC_OscConfig+0x338>)
 8004654:	4013      	ands	r3, r2
 8004656:	0019      	movs	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	021a      	lsls	r2, r3, #8
 800465e:	4b6e      	ldr	r3, [pc, #440]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004660:	430a      	orrs	r2, r1
 8004662:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d112      	bne.n	8004690 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800466a:	4b6b      	ldr	r3, [pc, #428]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a6e      	ldr	r2, [pc, #440]	; (8004828 <HAL_RCC_OscConfig+0x33c>)
 8004670:	4013      	ands	r3, r2
 8004672:	0019      	movs	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	4b67      	ldr	r3, [pc, #412]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800467a:	430a      	orrs	r2, r1
 800467c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800467e:	4b66      	ldr	r3, [pc, #408]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	0adb      	lsrs	r3, r3, #11
 8004684:	2207      	movs	r2, #7
 8004686:	4013      	ands	r3, r2
 8004688:	4a68      	ldr	r2, [pc, #416]	; (800482c <HAL_RCC_OscConfig+0x340>)
 800468a:	40da      	lsrs	r2, r3
 800468c:	4b68      	ldr	r3, [pc, #416]	; (8004830 <HAL_RCC_OscConfig+0x344>)
 800468e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004690:	4b68      	ldr	r3, [pc, #416]	; (8004834 <HAL_RCC_OscConfig+0x348>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0018      	movs	r0, r3
 8004696:	f7fe fb3d 	bl	8002d14 <HAL_InitTick>
 800469a:	1e03      	subs	r3, r0, #0
 800469c:	d051      	beq.n	8004742 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e22c      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d030      	beq.n	800470c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80046aa:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a5e      	ldr	r2, [pc, #376]	; (8004828 <HAL_RCC_OscConfig+0x33c>)
 80046b0:	4013      	ands	r3, r2
 80046b2:	0019      	movs	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	4b57      	ldr	r3, [pc, #348]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80046ba:	430a      	orrs	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80046be:	4b56      	ldr	r3, [pc, #344]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4b55      	ldr	r3, [pc, #340]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	0049      	lsls	r1, r1, #1
 80046c8:	430a      	orrs	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046cc:	f7fe fb7e 	bl	8002dcc <HAL_GetTick>
 80046d0:	0003      	movs	r3, r0
 80046d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d4:	e008      	b.n	80046e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d6:	f7fe fb79 	bl	8002dcc <HAL_GetTick>
 80046da:	0002      	movs	r2, r0
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e209      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e8:	4b4b      	ldr	r3, [pc, #300]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	2380      	movs	r3, #128	; 0x80
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4013      	ands	r3, r2
 80046f2:	d0f0      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f4:	4b48      	ldr	r3, [pc, #288]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	4a4a      	ldr	r2, [pc, #296]	; (8004824 <HAL_RCC_OscConfig+0x338>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	0019      	movs	r1, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	021a      	lsls	r2, r3, #8
 8004704:	4b44      	ldr	r3, [pc, #272]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004706:	430a      	orrs	r2, r1
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	e01b      	b.n	8004744 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800470c:	4b42      	ldr	r3, [pc, #264]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	4b41      	ldr	r3, [pc, #260]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004712:	4949      	ldr	r1, [pc, #292]	; (8004838 <HAL_RCC_OscConfig+0x34c>)
 8004714:	400a      	ands	r2, r1
 8004716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fe fb58 	bl	8002dcc <HAL_GetTick>
 800471c:	0003      	movs	r3, r0
 800471e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004720:	e008      	b.n	8004734 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004722:	f7fe fb53 	bl	8002dcc <HAL_GetTick>
 8004726:	0002      	movs	r2, r0
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b02      	cmp	r3, #2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e1e3      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004734:	4b38      	ldr	r3, [pc, #224]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	2380      	movs	r3, #128	; 0x80
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4013      	ands	r3, r2
 800473e:	d1f0      	bne.n	8004722 <HAL_RCC_OscConfig+0x236>
 8004740:	e000      	b.n	8004744 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004742:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2208      	movs	r2, #8
 800474a:	4013      	ands	r3, r2
 800474c:	d047      	beq.n	80047de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800474e:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2238      	movs	r2, #56	; 0x38
 8004754:	4013      	ands	r3, r2
 8004756:	2b18      	cmp	r3, #24
 8004758:	d10a      	bne.n	8004770 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800475a:	4b2f      	ldr	r3, [pc, #188]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	2202      	movs	r2, #2
 8004760:	4013      	ands	r3, r2
 8004762:	d03c      	beq.n	80047de <HAL_RCC_OscConfig+0x2f2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d138      	bne.n	80047de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e1c5      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d019      	beq.n	80047ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004778:	4b27      	ldr	r3, [pc, #156]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800477a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800477c:	4b26      	ldr	r3, [pc, #152]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 800477e:	2101      	movs	r1, #1
 8004780:	430a      	orrs	r2, r1
 8004782:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fe fb22 	bl	8002dcc <HAL_GetTick>
 8004788:	0003      	movs	r3, r0
 800478a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478e:	f7fe fb1d 	bl	8002dcc <HAL_GetTick>
 8004792:	0002      	movs	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e1ad      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a0:	4b1d      	ldr	r3, [pc, #116]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80047a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a4:	2202      	movs	r2, #2
 80047a6:	4013      	ands	r3, r2
 80047a8:	d0f1      	beq.n	800478e <HAL_RCC_OscConfig+0x2a2>
 80047aa:	e018      	b.n	80047de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80047ac:	4b1a      	ldr	r3, [pc, #104]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80047ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	438a      	bics	r2, r1
 80047b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fe fb08 	bl	8002dcc <HAL_GetTick>
 80047bc:	0003      	movs	r3, r0
 80047be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c2:	f7fe fb03 	bl	8002dcc <HAL_GetTick>
 80047c6:	0002      	movs	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e193      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047d4:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80047d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047d8:	2202      	movs	r2, #2
 80047da:	4013      	ands	r3, r2
 80047dc:	d1f1      	bne.n	80047c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2204      	movs	r2, #4
 80047e4:	4013      	ands	r3, r2
 80047e6:	d100      	bne.n	80047ea <HAL_RCC_OscConfig+0x2fe>
 80047e8:	e0c6      	b.n	8004978 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047ea:	231f      	movs	r3, #31
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80047f2:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2238      	movs	r2, #56	; 0x38
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d11e      	bne.n	800483c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80047fe:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCC_OscConfig+0x32c>)
 8004800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004802:	2202      	movs	r2, #2
 8004804:	4013      	ands	r3, r2
 8004806:	d100      	bne.n	800480a <HAL_RCC_OscConfig+0x31e>
 8004808:	e0b6      	b.n	8004978 <HAL_RCC_OscConfig+0x48c>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d000      	beq.n	8004814 <HAL_RCC_OscConfig+0x328>
 8004812:	e0b1      	b.n	8004978 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e171      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
 8004818:	40021000 	.word	0x40021000
 800481c:	fffeffff 	.word	0xfffeffff
 8004820:	fffbffff 	.word	0xfffbffff
 8004824:	ffff80ff 	.word	0xffff80ff
 8004828:	ffffc7ff 	.word	0xffffc7ff
 800482c:	00f42400 	.word	0x00f42400
 8004830:	2000002c 	.word	0x2000002c
 8004834:	20000030 	.word	0x20000030
 8004838:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800483c:	4bb1      	ldr	r3, [pc, #708]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 800483e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004840:	2380      	movs	r3, #128	; 0x80
 8004842:	055b      	lsls	r3, r3, #21
 8004844:	4013      	ands	r3, r2
 8004846:	d101      	bne.n	800484c <HAL_RCC_OscConfig+0x360>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <HAL_RCC_OscConfig+0x362>
 800484c:	2300      	movs	r3, #0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d011      	beq.n	8004876 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004852:	4bac      	ldr	r3, [pc, #688]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004856:	4bab      	ldr	r3, [pc, #684]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004858:	2180      	movs	r1, #128	; 0x80
 800485a:	0549      	lsls	r1, r1, #21
 800485c:	430a      	orrs	r2, r1
 800485e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004860:	4ba8      	ldr	r3, [pc, #672]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004864:	2380      	movs	r3, #128	; 0x80
 8004866:	055b      	lsls	r3, r3, #21
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800486e:	231f      	movs	r3, #31
 8004870:	18fb      	adds	r3, r7, r3
 8004872:	2201      	movs	r2, #1
 8004874:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004876:	4ba4      	ldr	r3, [pc, #656]	; (8004b08 <HAL_RCC_OscConfig+0x61c>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	4013      	ands	r3, r2
 8004880:	d11a      	bne.n	80048b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004882:	4ba1      	ldr	r3, [pc, #644]	; (8004b08 <HAL_RCC_OscConfig+0x61c>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4ba0      	ldr	r3, [pc, #640]	; (8004b08 <HAL_RCC_OscConfig+0x61c>)
 8004888:	2180      	movs	r1, #128	; 0x80
 800488a:	0049      	lsls	r1, r1, #1
 800488c:	430a      	orrs	r2, r1
 800488e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004890:	f7fe fa9c 	bl	8002dcc <HAL_GetTick>
 8004894:	0003      	movs	r3, r0
 8004896:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489a:	f7fe fa97 	bl	8002dcc <HAL_GetTick>
 800489e:	0002      	movs	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e127      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ac:	4b96      	ldr	r3, [pc, #600]	; (8004b08 <HAL_RCC_OscConfig+0x61c>)
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2380      	movs	r3, #128	; 0x80
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4013      	ands	r3, r2
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0x3e2>
 80048c0:	4b90      	ldr	r3, [pc, #576]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048c4:	4b8f      	ldr	r3, [pc, #572]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048c6:	2101      	movs	r1, #1
 80048c8:	430a      	orrs	r2, r1
 80048ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80048cc:	e01c      	b.n	8004908 <HAL_RCC_OscConfig+0x41c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x404>
 80048d6:	4b8b      	ldr	r3, [pc, #556]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048da:	4b8a      	ldr	r3, [pc, #552]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048dc:	2104      	movs	r1, #4
 80048de:	430a      	orrs	r2, r1
 80048e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80048e2:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048e6:	4b87      	ldr	r3, [pc, #540]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048e8:	2101      	movs	r1, #1
 80048ea:	430a      	orrs	r2, r1
 80048ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80048ee:	e00b      	b.n	8004908 <HAL_RCC_OscConfig+0x41c>
 80048f0:	4b84      	ldr	r3, [pc, #528]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048f4:	4b83      	ldr	r3, [pc, #524]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048f6:	2101      	movs	r1, #1
 80048f8:	438a      	bics	r2, r1
 80048fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80048fc:	4b81      	ldr	r3, [pc, #516]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80048fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004900:	4b80      	ldr	r3, [pc, #512]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004902:	2104      	movs	r1, #4
 8004904:	438a      	bics	r2, r1
 8004906:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d014      	beq.n	800493a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004910:	f7fe fa5c 	bl	8002dcc <HAL_GetTick>
 8004914:	0003      	movs	r3, r0
 8004916:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004918:	e009      	b.n	800492e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800491a:	f7fe fa57 	bl	8002dcc <HAL_GetTick>
 800491e:	0002      	movs	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	4a79      	ldr	r2, [pc, #484]	; (8004b0c <HAL_RCC_OscConfig+0x620>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e0e6      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800492e:	4b75      	ldr	r3, [pc, #468]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004932:	2202      	movs	r2, #2
 8004934:	4013      	ands	r3, r2
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x42e>
 8004938:	e013      	b.n	8004962 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fe fa47 	bl	8002dcc <HAL_GetTick>
 800493e:	0003      	movs	r3, r0
 8004940:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004942:	e009      	b.n	8004958 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004944:	f7fe fa42 	bl	8002dcc <HAL_GetTick>
 8004948:	0002      	movs	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	4a6f      	ldr	r2, [pc, #444]	; (8004b0c <HAL_RCC_OscConfig+0x620>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e0d1      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004958:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 800495a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495c:	2202      	movs	r2, #2
 800495e:	4013      	ands	r3, r2
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004962:	231f      	movs	r3, #31
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800496c:	4b65      	ldr	r3, [pc, #404]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 800496e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004970:	4b64      	ldr	r3, [pc, #400]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004972:	4967      	ldr	r1, [pc, #412]	; (8004b10 <HAL_RCC_OscConfig+0x624>)
 8004974:	400a      	ands	r2, r1
 8004976:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	69db      	ldr	r3, [r3, #28]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d100      	bne.n	8004982 <HAL_RCC_OscConfig+0x496>
 8004980:	e0bb      	b.n	8004afa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004982:	4b60      	ldr	r3, [pc, #384]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2238      	movs	r2, #56	; 0x38
 8004988:	4013      	ands	r3, r2
 800498a:	2b10      	cmp	r3, #16
 800498c:	d100      	bne.n	8004990 <HAL_RCC_OscConfig+0x4a4>
 800498e:	e07b      	b.n	8004a88 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d156      	bne.n	8004a46 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004998:	4b5a      	ldr	r3, [pc, #360]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b59      	ldr	r3, [pc, #356]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 800499e:	495d      	ldr	r1, [pc, #372]	; (8004b14 <HAL_RCC_OscConfig+0x628>)
 80049a0:	400a      	ands	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7fe fa12 	bl	8002dcc <HAL_GetTick>
 80049a8:	0003      	movs	r3, r0
 80049aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fe fa0d 	bl	8002dcc <HAL_GetTick>
 80049b2:	0002      	movs	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e09d      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c0:	4b50      	ldr	r3, [pc, #320]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	049b      	lsls	r3, r3, #18
 80049c8:	4013      	ands	r3, r2
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049cc:	4b4d      	ldr	r3, [pc, #308]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	4a51      	ldr	r2, [pc, #324]	; (8004b18 <HAL_RCC_OscConfig+0x62c>)
 80049d2:	4013      	ands	r3, r2
 80049d4:	0019      	movs	r1, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1a      	ldr	r2, [r3, #32]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	431a      	orrs	r2, r3
 80049fa:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 80049fc:	430a      	orrs	r2, r1
 80049fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a00:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b3f      	ldr	r3, [pc, #252]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a06:	2180      	movs	r1, #128	; 0x80
 8004a08:	0449      	lsls	r1, r1, #17
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004a0e:	4b3d      	ldr	r3, [pc, #244]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a10:	68da      	ldr	r2, [r3, #12]
 8004a12:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a14:	2180      	movs	r1, #128	; 0x80
 8004a16:	0549      	lsls	r1, r1, #21
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fe f9d6 	bl	8002dcc <HAL_GetTick>
 8004a20:	0003      	movs	r3, r0
 8004a22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a26:	f7fe f9d1 	bl	8002dcc <HAL_GetTick>
 8004a2a:	0002      	movs	r2, r0
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e061      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a38:	4b32      	ldr	r3, [pc, #200]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2380      	movs	r3, #128	; 0x80
 8004a3e:	049b      	lsls	r3, r3, #18
 8004a40:	4013      	ands	r3, r2
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x53a>
 8004a44:	e059      	b.n	8004afa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a46:	4b2f      	ldr	r3, [pc, #188]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	4b2e      	ldr	r3, [pc, #184]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a4c:	4931      	ldr	r1, [pc, #196]	; (8004b14 <HAL_RCC_OscConfig+0x628>)
 8004a4e:	400a      	ands	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a52:	f7fe f9bb 	bl	8002dcc <HAL_GetTick>
 8004a56:	0003      	movs	r3, r0
 8004a58:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a5c:	f7fe f9b6 	bl	8002dcc <HAL_GetTick>
 8004a60:	0002      	movs	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e046      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a6e:	4b25      	ldr	r3, [pc, #148]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	049b      	lsls	r3, r3, #18
 8004a76:	4013      	ands	r3, r2
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004a7a:	4b22      	ldr	r3, [pc, #136]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a80:	4926      	ldr	r1, [pc, #152]	; (8004b1c <HAL_RCC_OscConfig+0x630>)
 8004a82:	400a      	ands	r2, r1
 8004a84:	60da      	str	r2, [r3, #12]
 8004a86:	e038      	b.n	8004afa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e033      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_RCC_OscConfig+0x618>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d126      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2270      	movs	r2, #112	; 0x70
 8004aac:	401a      	ands	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d11f      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	23fe      	movs	r3, #254	; 0xfe
 8004aba:	01db      	lsls	r3, r3, #7
 8004abc:	401a      	ands	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d116      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	23f8      	movs	r3, #248	; 0xf8
 8004acc:	039b      	lsls	r3, r3, #14
 8004ace:	401a      	ands	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d10e      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	23e0      	movs	r3, #224	; 0xe0
 8004adc:	051b      	lsls	r3, r3, #20
 8004ade:	401a      	ands	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	0f5b      	lsrs	r3, r3, #29
 8004aec:	075a      	lsls	r2, r3, #29
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d001      	beq.n	8004afa <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e000      	b.n	8004afc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	0018      	movs	r0, r3
 8004afe:	46bd      	mov	sp, r7
 8004b00:	b008      	add	sp, #32
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	00001388 	.word	0x00001388
 8004b10:	efffffff 	.word	0xefffffff
 8004b14:	feffffff 	.word	0xfeffffff
 8004b18:	11c1808c 	.word	0x11c1808c
 8004b1c:	eefefffc 	.word	0xeefefffc

08004b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0e9      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b34:	4b76      	ldr	r3, [pc, #472]	; (8004d10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2207      	movs	r2, #7
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d91e      	bls.n	8004b80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b42:	4b73      	ldr	r3, [pc, #460]	; (8004d10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2207      	movs	r2, #7
 8004b48:	4393      	bics	r3, r2
 8004b4a:	0019      	movs	r1, r3
 8004b4c:	4b70      	ldr	r3, [pc, #448]	; (8004d10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	430a      	orrs	r2, r1
 8004b52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b54:	f7fe f93a 	bl	8002dcc <HAL_GetTick>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b5c:	e009      	b.n	8004b72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b5e:	f7fe f935 	bl	8002dcc <HAL_GetTick>
 8004b62:	0002      	movs	r2, r0
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	4a6a      	ldr	r2, [pc, #424]	; (8004d14 <HAL_RCC_ClockConfig+0x1f4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e0ca      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_RCC_ClockConfig+0x1f0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2207      	movs	r2, #7
 8004b78:	4013      	ands	r3, r2
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d1ee      	bne.n	8004b5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2202      	movs	r2, #2
 8004b86:	4013      	ands	r3, r2
 8004b88:	d015      	beq.n	8004bb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	4013      	ands	r3, r2
 8004b92:	d006      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004b94:	4b60      	ldr	r3, [pc, #384]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	4b5f      	ldr	r3, [pc, #380]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004b9a:	21e0      	movs	r1, #224	; 0xe0
 8004b9c:	01c9      	lsls	r1, r1, #7
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ba2:	4b5d      	ldr	r3, [pc, #372]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4a5d      	ldr	r2, [pc, #372]	; (8004d1c <HAL_RCC_ClockConfig+0x1fc>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	0019      	movs	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d057      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d107      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bc8:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	029b      	lsls	r3, r3, #10
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d12b      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e097      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d107      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be0:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	049b      	lsls	r3, r3, #18
 8004be8:	4013      	ands	r3, r2
 8004bea:	d11f      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e08b      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf8:	4b47      	ldr	r3, [pc, #284]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4013      	ands	r3, r2
 8004c02:	d113      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e07f      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c10:	4b41      	ldr	r3, [pc, #260]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c14:	2202      	movs	r2, #2
 8004c16:	4013      	ands	r3, r2
 8004c18:	d108      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e074      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c1e:	4b3e      	ldr	r3, [pc, #248]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c22:	2202      	movs	r2, #2
 8004c24:	4013      	ands	r3, r2
 8004c26:	d101      	bne.n	8004c2c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e06d      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c2c:	4b3a      	ldr	r3, [pc, #232]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2207      	movs	r2, #7
 8004c32:	4393      	bics	r3, r2
 8004c34:	0019      	movs	r1, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c40:	f7fe f8c4 	bl	8002dcc <HAL_GetTick>
 8004c44:	0003      	movs	r3, r0
 8004c46:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c48:	e009      	b.n	8004c5e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c4a:	f7fe f8bf 	bl	8002dcc <HAL_GetTick>
 8004c4e:	0002      	movs	r2, r0
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	4a2f      	ldr	r2, [pc, #188]	; (8004d14 <HAL_RCC_ClockConfig+0x1f4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e054      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5e:	4b2e      	ldr	r3, [pc, #184]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2238      	movs	r2, #56	; 0x38
 8004c64:	401a      	ands	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	00db      	lsls	r3, r3, #3
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d1ec      	bne.n	8004c4a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c70:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <HAL_RCC_ClockConfig+0x1f0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2207      	movs	r2, #7
 8004c76:	4013      	ands	r3, r2
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d21e      	bcs.n	8004cbc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_ClockConfig+0x1f0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2207      	movs	r2, #7
 8004c84:	4393      	bics	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	4b21      	ldr	r3, [pc, #132]	; (8004d10 <HAL_RCC_ClockConfig+0x1f0>)
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004c90:	f7fe f89c 	bl	8002dcc <HAL_GetTick>
 8004c94:	0003      	movs	r3, r0
 8004c96:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c98:	e009      	b.n	8004cae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c9a:	f7fe f897 	bl	8002dcc <HAL_GetTick>
 8004c9e:	0002      	movs	r2, r0
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	4a1b      	ldr	r2, [pc, #108]	; (8004d14 <HAL_RCC_ClockConfig+0x1f4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e02c      	b.n	8004d08 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004cae:	4b18      	ldr	r3, [pc, #96]	; (8004d10 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2207      	movs	r2, #7
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d1ee      	bne.n	8004c9a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d009      	beq.n	8004cda <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_RCC_ClockConfig+0x200>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004cda:	f000 f829 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 8004cde:	0001      	movs	r1, r0
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <HAL_RCC_ClockConfig+0x1f8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	0a1b      	lsrs	r3, r3, #8
 8004ce6:	220f      	movs	r2, #15
 8004ce8:	401a      	ands	r2, r3
 8004cea:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <HAL_RCC_ClockConfig+0x204>)
 8004cec:	0092      	lsls	r2, r2, #2
 8004cee:	58d3      	ldr	r3, [r2, r3]
 8004cf0:	221f      	movs	r2, #31
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	000a      	movs	r2, r1
 8004cf6:	40da      	lsrs	r2, r3
 8004cf8:	4b0b      	ldr	r3, [pc, #44]	; (8004d28 <HAL_RCC_ClockConfig+0x208>)
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004cfc:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_RCC_ClockConfig+0x20c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f7fe f807 	bl	8002d14 <HAL_InitTick>
 8004d06:	0003      	movs	r3, r0
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b004      	add	sp, #16
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40022000 	.word	0x40022000
 8004d14:	00001388 	.word	0x00001388
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	fffff0ff 	.word	0xfffff0ff
 8004d20:	ffff8fff 	.word	0xffff8fff
 8004d24:	08009ba0 	.word	0x08009ba0
 8004d28:	2000002c 	.word	0x2000002c
 8004d2c:	20000030 	.word	0x20000030

08004d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d36:	4b3c      	ldr	r3, [pc, #240]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2238      	movs	r2, #56	; 0x38
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d10f      	bne.n	8004d60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004d40:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	0adb      	lsrs	r3, r3, #11
 8004d46:	2207      	movs	r2, #7
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	0013      	movs	r3, r2
 8004d50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004d52:	6839      	ldr	r1, [r7, #0]
 8004d54:	4835      	ldr	r0, [pc, #212]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004d56:	f7fb f9e7 	bl	8000128 <__udivsi3>
 8004d5a:	0003      	movs	r3, r0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	e05d      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d60:	4b31      	ldr	r3, [pc, #196]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	2238      	movs	r2, #56	; 0x38
 8004d66:	4013      	ands	r3, r2
 8004d68:	2b08      	cmp	r3, #8
 8004d6a:	d102      	bne.n	8004d72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d6c:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x100>)
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	e054      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d72:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2238      	movs	r2, #56	; 0x38
 8004d78:	4013      	ands	r3, r2
 8004d7a:	2b10      	cmp	r3, #16
 8004d7c:	d138      	bne.n	8004df0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004d7e:	4b2a      	ldr	r3, [pc, #168]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	2203      	movs	r2, #3
 8004d84:	4013      	ands	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d88:	4b27      	ldr	r3, [pc, #156]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	091b      	lsrs	r3, r3, #4
 8004d8e:	2207      	movs	r2, #7
 8004d90:	4013      	ands	r3, r2
 8004d92:	3301      	adds	r3, #1
 8004d94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d10d      	bne.n	8004db8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	4824      	ldr	r0, [pc, #144]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x100>)
 8004da0:	f7fb f9c2 	bl	8000128 <__udivsi3>
 8004da4:	0003      	movs	r3, r0
 8004da6:	0019      	movs	r1, r3
 8004da8:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	0a1b      	lsrs	r3, r3, #8
 8004dae:	227f      	movs	r2, #127	; 0x7f
 8004db0:	4013      	ands	r3, r2
 8004db2:	434b      	muls	r3, r1
 8004db4:	617b      	str	r3, [r7, #20]
        break;
 8004db6:	e00d      	b.n	8004dd4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	481c      	ldr	r0, [pc, #112]	; (8004e2c <HAL_RCC_GetSysClockFreq+0xfc>)
 8004dbc:	f7fb f9b4 	bl	8000128 <__udivsi3>
 8004dc0:	0003      	movs	r3, r0
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	227f      	movs	r2, #127	; 0x7f
 8004dcc:	4013      	ands	r3, r2
 8004dce:	434b      	muls	r3, r1
 8004dd0:	617b      	str	r3, [r7, #20]
        break;
 8004dd2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004dd4:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	0f5b      	lsrs	r3, r3, #29
 8004dda:	2207      	movs	r2, #7
 8004ddc:	4013      	ands	r3, r2
 8004dde:	3301      	adds	r3, #1
 8004de0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f7fb f99f 	bl	8000128 <__udivsi3>
 8004dea:	0003      	movs	r3, r0
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	e015      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004df0:	4b0d      	ldr	r3, [pc, #52]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	2238      	movs	r2, #56	; 0x38
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d103      	bne.n	8004e04 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	021b      	lsls	r3, r3, #8
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	e00b      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004e04:	4b08      	ldr	r3, [pc, #32]	; (8004e28 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	2238      	movs	r2, #56	; 0x38
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	2b18      	cmp	r3, #24
 8004e0e:	d103      	bne.n	8004e18 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004e10:	23fa      	movs	r3, #250	; 0xfa
 8004e12:	01db      	lsls	r3, r3, #7
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	e001      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e1c:	693b      	ldr	r3, [r7, #16]
}
 8004e1e:	0018      	movs	r0, r3
 8004e20:	46bd      	mov	sp, r7
 8004e22:	b006      	add	sp, #24
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	00f42400 	.word	0x00f42400
 8004e30:	007a1200 	.word	0x007a1200

08004e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e38:	4b02      	ldr	r3, [pc, #8]	; (8004e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
}
 8004e3c:	0018      	movs	r0, r3
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	46c0      	nop			; (mov r8, r8)
 8004e44:	2000002c 	.word	0x2000002c

08004e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e48:	b5b0      	push	{r4, r5, r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004e4c:	f7ff fff2 	bl	8004e34 <HAL_RCC_GetHCLKFreq>
 8004e50:	0004      	movs	r4, r0
 8004e52:	f7ff fb3f 	bl	80044d4 <LL_RCC_GetAPB1Prescaler>
 8004e56:	0003      	movs	r3, r0
 8004e58:	0b1a      	lsrs	r2, r3, #12
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e5c:	0092      	lsls	r2, r2, #2
 8004e5e:	58d3      	ldr	r3, [r2, r3]
 8004e60:	221f      	movs	r2, #31
 8004e62:	4013      	ands	r3, r2
 8004e64:	40dc      	lsrs	r4, r3
 8004e66:	0023      	movs	r3, r4
}
 8004e68:	0018      	movs	r0, r3
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	08009be0 	.word	0x08009be0

08004e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b086      	sub	sp, #24
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004e7c:	2313      	movs	r3, #19
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	2200      	movs	r2, #0
 8004e82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e84:	2312      	movs	r3, #18
 8004e86:	18fb      	adds	r3, r7, r3
 8004e88:	2200      	movs	r2, #0
 8004e8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	029b      	lsls	r3, r3, #10
 8004e94:	4013      	ands	r3, r2
 8004e96:	d100      	bne.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004e98:	e0a3      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e9a:	2011      	movs	r0, #17
 8004e9c:	183b      	adds	r3, r7, r0
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea2:	4bc3      	ldr	r3, [pc, #780]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ea4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ea6:	2380      	movs	r3, #128	; 0x80
 8004ea8:	055b      	lsls	r3, r3, #21
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d110      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eae:	4bc0      	ldr	r3, [pc, #768]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb2:	4bbf      	ldr	r3, [pc, #764]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004eb4:	2180      	movs	r1, #128	; 0x80
 8004eb6:	0549      	lsls	r1, r1, #21
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	63da      	str	r2, [r3, #60]	; 0x3c
 8004ebc:	4bbc      	ldr	r3, [pc, #752]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ec0:	2380      	movs	r3, #128	; 0x80
 8004ec2:	055b      	lsls	r3, r3, #21
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eca:	183b      	adds	r3, r7, r0
 8004ecc:	2201      	movs	r2, #1
 8004ece:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ed0:	4bb8      	ldr	r3, [pc, #736]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	4bb7      	ldr	r3, [pc, #732]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004ed6:	2180      	movs	r1, #128	; 0x80
 8004ed8:	0049      	lsls	r1, r1, #1
 8004eda:	430a      	orrs	r2, r1
 8004edc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ede:	f7fd ff75 	bl	8002dcc <HAL_GetTick>
 8004ee2:	0003      	movs	r3, r0
 8004ee4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ee6:	e00b      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee8:	f7fd ff70 	bl	8002dcc <HAL_GetTick>
 8004eec:	0002      	movs	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d904      	bls.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004ef6:	2313      	movs	r3, #19
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	2203      	movs	r2, #3
 8004efc:	701a      	strb	r2, [r3, #0]
        break;
 8004efe:	e005      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004f00:	4bac      	ldr	r3, [pc, #688]	; (80051b4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d0ed      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004f0c:	2313      	movs	r3, #19
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d154      	bne.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f16:	4ba6      	ldr	r3, [pc, #664]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f1a:	23c0      	movs	r3, #192	; 0xc0
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4013      	ands	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d019      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d014      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f32:	4b9f      	ldr	r3, [pc, #636]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f36:	4aa0      	ldr	r2, [pc, #640]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f3c:	4b9c      	ldr	r3, [pc, #624]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f40:	4b9b      	ldr	r3, [pc, #620]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f42:	2180      	movs	r1, #128	; 0x80
 8004f44:	0249      	lsls	r1, r1, #9
 8004f46:	430a      	orrs	r2, r1
 8004f48:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f4a:	4b99      	ldr	r3, [pc, #612]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f4e:	4b98      	ldr	r3, [pc, #608]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f50:	499a      	ldr	r1, [pc, #616]	; (80051bc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8004f52:	400a      	ands	r2, r1
 8004f54:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f56:	4b96      	ldr	r3, [pc, #600]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	4013      	ands	r3, r2
 8004f62:	d016      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fd ff32 	bl	8002dcc <HAL_GetTick>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f6c:	e00c      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f6e:	f7fd ff2d 	bl	8002dcc <HAL_GetTick>
 8004f72:	0002      	movs	r2, r0
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	4a91      	ldr	r2, [pc, #580]	; (80051c0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d904      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004f7e:	2313      	movs	r3, #19
 8004f80:	18fb      	adds	r3, r7, r3
 8004f82:	2203      	movs	r2, #3
 8004f84:	701a      	strb	r2, [r3, #0]
            break;
 8004f86:	e004      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f88:	4b89      	ldr	r3, [pc, #548]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	4013      	ands	r3, r2
 8004f90:	d0ed      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004f92:	2313      	movs	r3, #19
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f9c:	4b84      	ldr	r3, [pc, #528]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fa0:	4a85      	ldr	r2, [pc, #532]	; (80051b8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004faa:	4b81      	ldr	r3, [pc, #516]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fac:	430a      	orrs	r2, r1
 8004fae:	65da      	str	r2, [r3, #92]	; 0x5c
 8004fb0:	e00c      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fb2:	2312      	movs	r3, #18
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	2213      	movs	r2, #19
 8004fb8:	18ba      	adds	r2, r7, r2
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	701a      	strb	r2, [r3, #0]
 8004fbe:	e005      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc0:	2312      	movs	r3, #18
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	2213      	movs	r2, #19
 8004fc6:	18ba      	adds	r2, r7, r2
 8004fc8:	7812      	ldrb	r2, [r2, #0]
 8004fca:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fcc:	2311      	movs	r3, #17
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d105      	bne.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fd6:	4b76      	ldr	r3, [pc, #472]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fda:	4b75      	ldr	r3, [pc, #468]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fdc:	4979      	ldr	r1, [pc, #484]	; (80051c4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8004fde:	400a      	ands	r2, r1
 8004fe0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	4013      	ands	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fec:	4b70      	ldr	r3, [pc, #448]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff0:	2203      	movs	r2, #3
 8004ff2:	4393      	bics	r3, r2
 8004ff4:	0019      	movs	r1, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	4b6d      	ldr	r3, [pc, #436]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2202      	movs	r2, #2
 8005006:	4013      	ands	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800500a:	4b69      	ldr	r3, [pc, #420]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800500c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500e:	220c      	movs	r2, #12
 8005010:	4393      	bics	r3, r2
 8005012:	0019      	movs	r1, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689a      	ldr	r2, [r3, #8]
 8005018:	4b65      	ldr	r3, [pc, #404]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800501a:	430a      	orrs	r2, r1
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2210      	movs	r2, #16
 8005024:	4013      	ands	r3, r2
 8005026:	d009      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005028:	4b61      	ldr	r3, [pc, #388]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800502a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502c:	4a66      	ldr	r2, [pc, #408]	; (80051c8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800502e:	4013      	ands	r3, r2
 8005030:	0019      	movs	r1, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	4b5e      	ldr	r3, [pc, #376]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005038:	430a      	orrs	r2, r1
 800503a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	2380      	movs	r3, #128	; 0x80
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	4013      	ands	r3, r2
 8005046:	d009      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800504a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504c:	4a5f      	ldr	r2, [pc, #380]	; (80051cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800504e:	4013      	ands	r3, r2
 8005050:	0019      	movs	r1, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	4b56      	ldr	r3, [pc, #344]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005058:	430a      	orrs	r2, r1
 800505a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	4013      	ands	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005068:	4b51      	ldr	r3, [pc, #324]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800506a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800506c:	4a58      	ldr	r2, [pc, #352]	; (80051d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800506e:	4013      	ands	r3, r2
 8005070:	0019      	movs	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	69da      	ldr	r2, [r3, #28]
 8005076:	4b4e      	ldr	r3, [pc, #312]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005078:	430a      	orrs	r2, r1
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2220      	movs	r2, #32
 8005082:	4013      	ands	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005086:	4b4a      	ldr	r3, [pc, #296]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	4a52      	ldr	r2, [pc, #328]	; (80051d4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800508c:	4013      	ands	r3, r2
 800508e:	0019      	movs	r1, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691a      	ldr	r2, [r3, #16]
 8005094:	4b46      	ldr	r3, [pc, #280]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005096:	430a      	orrs	r2, r1
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	2380      	movs	r3, #128	; 0x80
 80050a0:	01db      	lsls	r3, r3, #7
 80050a2:	4013      	ands	r3, r2
 80050a4:	d015      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a6:	4b42      	ldr	r3, [pc, #264]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	0899      	lsrs	r1, r3, #2
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1a      	ldr	r2, [r3, #32]
 80050b2:	4b3f      	ldr	r3, [pc, #252]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050b4:	430a      	orrs	r2, r1
 80050b6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a1a      	ldr	r2, [r3, #32]
 80050bc:	2380      	movs	r3, #128	; 0x80
 80050be:	05db      	lsls	r3, r3, #23
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d106      	bne.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80050c4:	4b3a      	ldr	r3, [pc, #232]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050ca:	2180      	movs	r1, #128	; 0x80
 80050cc:	0249      	lsls	r1, r1, #9
 80050ce:	430a      	orrs	r2, r1
 80050d0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	2380      	movs	r3, #128	; 0x80
 80050d8:	031b      	lsls	r3, r3, #12
 80050da:	4013      	ands	r3, r2
 80050dc:	d009      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050de:	4b34      	ldr	r3, [pc, #208]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	2240      	movs	r2, #64	; 0x40
 80050e4:	4393      	bics	r3, r2
 80050e6:	0019      	movs	r1, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ec:	4b30      	ldr	r3, [pc, #192]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80050ee:	430a      	orrs	r2, r1
 80050f0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	2380      	movs	r3, #128	; 0x80
 80050f8:	039b      	lsls	r3, r3, #14
 80050fa:	4013      	ands	r3, r2
 80050fc:	d016      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050fe:	4b2c      	ldr	r3, [pc, #176]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	4a35      	ldr	r2, [pc, #212]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005104:	4013      	ands	r3, r2
 8005106:	0019      	movs	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800510c:	4b28      	ldr	r3, [pc, #160]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800510e:	430a      	orrs	r2, r1
 8005110:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005116:	2380      	movs	r3, #128	; 0x80
 8005118:	03db      	lsls	r3, r3, #15
 800511a:	429a      	cmp	r2, r3
 800511c:	d106      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800511e:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005124:	2180      	movs	r1, #128	; 0x80
 8005126:	0449      	lsls	r1, r1, #17
 8005128:	430a      	orrs	r2, r1
 800512a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	03db      	lsls	r3, r3, #15
 8005134:	4013      	ands	r3, r2
 8005136:	d016      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005138:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	4a27      	ldr	r2, [pc, #156]	; (80051dc <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800513e:	4013      	ands	r3, r2
 8005140:	0019      	movs	r1, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005148:	430a      	orrs	r2, r1
 800514a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005150:	2380      	movs	r3, #128	; 0x80
 8005152:	045b      	lsls	r3, r3, #17
 8005154:	429a      	cmp	r2, r3
 8005156:	d106      	bne.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005158:	4b15      	ldr	r3, [pc, #84]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	4b14      	ldr	r3, [pc, #80]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	0449      	lsls	r1, r1, #17
 8005162:	430a      	orrs	r2, r1
 8005164:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	011b      	lsls	r3, r3, #4
 800516e:	4013      	ands	r3, r2
 8005170:	d016      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005172:	4b0f      	ldr	r3, [pc, #60]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	4a1a      	ldr	r2, [pc, #104]	; (80051e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005178:	4013      	ands	r3, r2
 800517a:	0019      	movs	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005182:	430a      	orrs	r2, r1
 8005184:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	01db      	lsls	r3, r3, #7
 800518e:	429a      	cmp	r2, r3
 8005190:	d106      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005192:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005198:	2180      	movs	r1, #128	; 0x80
 800519a:	0249      	lsls	r1, r1, #9
 800519c:	430a      	orrs	r2, r1
 800519e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80051a0:	2312      	movs	r3, #18
 80051a2:	18fb      	adds	r3, r7, r3
 80051a4:	781b      	ldrb	r3, [r3, #0]
}
 80051a6:	0018      	movs	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b006      	add	sp, #24
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40007000 	.word	0x40007000
 80051b8:	fffffcff 	.word	0xfffffcff
 80051bc:	fffeffff 	.word	0xfffeffff
 80051c0:	00001388 	.word	0x00001388
 80051c4:	efffffff 	.word	0xefffffff
 80051c8:	fffff3ff 	.word	0xfffff3ff
 80051cc:	fff3ffff 	.word	0xfff3ffff
 80051d0:	ffcfffff 	.word	0xffcfffff
 80051d4:	ffffcfff 	.word	0xffffcfff
 80051d8:	ffbfffff 	.word	0xffbfffff
 80051dc:	feffffff 	.word	0xfeffffff
 80051e0:	ffff3fff 	.word	0xffff3fff

080051e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e04a      	b.n	800528c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	223d      	movs	r2, #61	; 0x3d
 80051fa:	5c9b      	ldrb	r3, [r3, r2]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d107      	bne.n	8005212 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	223c      	movs	r2, #60	; 0x3c
 8005206:	2100      	movs	r1, #0
 8005208:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	0018      	movs	r0, r3
 800520e:	f7fd fc4d 	bl	8002aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	223d      	movs	r2, #61	; 0x3d
 8005216:	2102      	movs	r1, #2
 8005218:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	0019      	movs	r1, r3
 8005224:	0010      	movs	r0, r2
 8005226:	f000 f90b 	bl	8005440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2248      	movs	r2, #72	; 0x48
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	223e      	movs	r2, #62	; 0x3e
 8005236:	2101      	movs	r1, #1
 8005238:	5499      	strb	r1, [r3, r2]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223f      	movs	r2, #63	; 0x3f
 800523e:	2101      	movs	r1, #1
 8005240:	5499      	strb	r1, [r3, r2]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2240      	movs	r2, #64	; 0x40
 8005246:	2101      	movs	r1, #1
 8005248:	5499      	strb	r1, [r3, r2]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2241      	movs	r2, #65	; 0x41
 800524e:	2101      	movs	r1, #1
 8005250:	5499      	strb	r1, [r3, r2]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2242      	movs	r2, #66	; 0x42
 8005256:	2101      	movs	r1, #1
 8005258:	5499      	strb	r1, [r3, r2]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2243      	movs	r2, #67	; 0x43
 800525e:	2101      	movs	r1, #1
 8005260:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2244      	movs	r2, #68	; 0x44
 8005266:	2101      	movs	r1, #1
 8005268:	5499      	strb	r1, [r3, r2]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2245      	movs	r2, #69	; 0x45
 800526e:	2101      	movs	r1, #1
 8005270:	5499      	strb	r1, [r3, r2]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2246      	movs	r2, #70	; 0x46
 8005276:	2101      	movs	r1, #1
 8005278:	5499      	strb	r1, [r3, r2]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2247      	movs	r2, #71	; 0x47
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	223d      	movs	r2, #61	; 0x3d
 8005286:	2101      	movs	r1, #1
 8005288:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	0018      	movs	r0, r3
 800528e:	46bd      	mov	sp, r7
 8005290:	b002      	add	sp, #8
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800529e:	230f      	movs	r3, #15
 80052a0:	18fb      	adds	r3, r7, r3
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	223c      	movs	r2, #60	; 0x3c
 80052aa:	5c9b      	ldrb	r3, [r3, r2]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIM_ConfigClockSource+0x20>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e0bc      	b.n	800542e <HAL_TIM_ConfigClockSource+0x19a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	223c      	movs	r2, #60	; 0x3c
 80052b8:	2101      	movs	r1, #1
 80052ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	223d      	movs	r2, #61	; 0x3d
 80052c0:	2102      	movs	r1, #2
 80052c2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4a5a      	ldr	r2, [pc, #360]	; (8005438 <HAL_TIM_ConfigClockSource+0x1a4>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4a59      	ldr	r2, [pc, #356]	; (800543c <HAL_TIM_ConfigClockSource+0x1a8>)
 80052d8:	4013      	ands	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2280      	movs	r2, #128	; 0x80
 80052ea:	0192      	lsls	r2, r2, #6
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d040      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0xde>
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	0192      	lsls	r2, r2, #6
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d900      	bls.n	80052fa <HAL_TIM_ConfigClockSource+0x66>
 80052f8:	e088      	b.n	800540c <HAL_TIM_ConfigClockSource+0x178>
 80052fa:	2280      	movs	r2, #128	; 0x80
 80052fc:	0152      	lsls	r2, r2, #5
 80052fe:	4293      	cmp	r3, r2
 8005300:	d100      	bne.n	8005304 <HAL_TIM_ConfigClockSource+0x70>
 8005302:	e088      	b.n	8005416 <HAL_TIM_ConfigClockSource+0x182>
 8005304:	2280      	movs	r2, #128	; 0x80
 8005306:	0152      	lsls	r2, r2, #5
 8005308:	4293      	cmp	r3, r2
 800530a:	d900      	bls.n	800530e <HAL_TIM_ConfigClockSource+0x7a>
 800530c:	e07e      	b.n	800540c <HAL_TIM_ConfigClockSource+0x178>
 800530e:	2b70      	cmp	r3, #112	; 0x70
 8005310:	d018      	beq.n	8005344 <HAL_TIM_ConfigClockSource+0xb0>
 8005312:	d900      	bls.n	8005316 <HAL_TIM_ConfigClockSource+0x82>
 8005314:	e07a      	b.n	800540c <HAL_TIM_ConfigClockSource+0x178>
 8005316:	2b60      	cmp	r3, #96	; 0x60
 8005318:	d04f      	beq.n	80053ba <HAL_TIM_ConfigClockSource+0x126>
 800531a:	d900      	bls.n	800531e <HAL_TIM_ConfigClockSource+0x8a>
 800531c:	e076      	b.n	800540c <HAL_TIM_ConfigClockSource+0x178>
 800531e:	2b50      	cmp	r3, #80	; 0x50
 8005320:	d03b      	beq.n	800539a <HAL_TIM_ConfigClockSource+0x106>
 8005322:	d900      	bls.n	8005326 <HAL_TIM_ConfigClockSource+0x92>
 8005324:	e072      	b.n	800540c <HAL_TIM_ConfigClockSource+0x178>
 8005326:	2b40      	cmp	r3, #64	; 0x40
 8005328:	d057      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x146>
 800532a:	d900      	bls.n	800532e <HAL_TIM_ConfigClockSource+0x9a>
 800532c:	e06e      	b.n	800540c <HAL_TIM_ConfigClockSource+0x178>
 800532e:	2b30      	cmp	r3, #48	; 0x30
 8005330:	d063      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x166>
 8005332:	d86b      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x178>
 8005334:	2b20      	cmp	r3, #32
 8005336:	d060      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x166>
 8005338:	d868      	bhi.n	800540c <HAL_TIM_ConfigClockSource+0x178>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d05d      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x166>
 800533e:	2b10      	cmp	r3, #16
 8005340:	d05b      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0x166>
 8005342:	e063      	b.n	800540c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005354:	f000 f97e 	bl	8005654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2277      	movs	r2, #119	; 0x77
 8005364:	4313      	orrs	r3, r2
 8005366:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	609a      	str	r2, [r3, #8]
      break;
 8005370:	e052      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005382:	f000 f967 	bl	8005654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	01c9      	lsls	r1, r1, #7
 8005394:	430a      	orrs	r2, r1
 8005396:	609a      	str	r2, [r3, #8]
      break;
 8005398:	e03e      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053a6:	001a      	movs	r2, r3
 80053a8:	f000 f8d8 	bl	800555c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2150      	movs	r1, #80	; 0x50
 80053b2:	0018      	movs	r0, r3
 80053b4:	f000 f932 	bl	800561c <TIM_ITRx_SetConfig>
      break;
 80053b8:	e02e      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053c6:	001a      	movs	r2, r3
 80053c8:	f000 f8f6 	bl	80055b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2160      	movs	r1, #96	; 0x60
 80053d2:	0018      	movs	r0, r3
 80053d4:	f000 f922 	bl	800561c <TIM_ITRx_SetConfig>
      break;
 80053d8:	e01e      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053e6:	001a      	movs	r2, r3
 80053e8:	f000 f8b8 	bl	800555c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2140      	movs	r1, #64	; 0x40
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 f912 	bl	800561c <TIM_ITRx_SetConfig>
      break;
 80053f8:	e00e      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	0019      	movs	r1, r3
 8005404:	0010      	movs	r0, r2
 8005406:	f000 f909 	bl	800561c <TIM_ITRx_SetConfig>
      break;
 800540a:	e005      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800540c:	230f      	movs	r3, #15
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	2201      	movs	r2, #1
 8005412:	701a      	strb	r2, [r3, #0]
      break;
 8005414:	e000      	b.n	8005418 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8005416:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	223d      	movs	r2, #61	; 0x3d
 800541c:	2101      	movs	r1, #1
 800541e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	223c      	movs	r2, #60	; 0x3c
 8005424:	2100      	movs	r1, #0
 8005426:	5499      	strb	r1, [r3, r2]

  return status;
 8005428:	230f      	movs	r3, #15
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	781b      	ldrb	r3, [r3, #0]
}
 800542e:	0018      	movs	r0, r3
 8005430:	46bd      	mov	sp, r7
 8005432:	b004      	add	sp, #16
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	ffceff88 	.word	0xffceff88
 800543c:	ffff00ff 	.word	0xffff00ff

08005440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <TIM_Base_SetConfig+0x100>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d008      	beq.n	800546a <TIM_Base_SetConfig+0x2a>
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	2380      	movs	r3, #128	; 0x80
 800545c:	05db      	lsls	r3, r3, #23
 800545e:	429a      	cmp	r2, r3
 8005460:	d003      	beq.n	800546a <TIM_Base_SetConfig+0x2a>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a37      	ldr	r2, [pc, #220]	; (8005544 <TIM_Base_SetConfig+0x104>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d108      	bne.n	800547c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2270      	movs	r2, #112	; 0x70
 800546e:	4393      	bics	r3, r2
 8005470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a30      	ldr	r2, [pc, #192]	; (8005540 <TIM_Base_SetConfig+0x100>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d018      	beq.n	80054b6 <TIM_Base_SetConfig+0x76>
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	05db      	lsls	r3, r3, #23
 800548a:	429a      	cmp	r2, r3
 800548c:	d013      	beq.n	80054b6 <TIM_Base_SetConfig+0x76>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2c      	ldr	r2, [pc, #176]	; (8005544 <TIM_Base_SetConfig+0x104>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00f      	beq.n	80054b6 <TIM_Base_SetConfig+0x76>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <TIM_Base_SetConfig+0x108>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00b      	beq.n	80054b6 <TIM_Base_SetConfig+0x76>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2a      	ldr	r2, [pc, #168]	; (800554c <TIM_Base_SetConfig+0x10c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d007      	beq.n	80054b6 <TIM_Base_SetConfig+0x76>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a29      	ldr	r2, [pc, #164]	; (8005550 <TIM_Base_SetConfig+0x110>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_Base_SetConfig+0x76>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a28      	ldr	r2, [pc, #160]	; (8005554 <TIM_Base_SetConfig+0x114>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d108      	bne.n	80054c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4a27      	ldr	r2, [pc, #156]	; (8005558 <TIM_Base_SetConfig+0x118>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2280      	movs	r2, #128	; 0x80
 80054cc:	4393      	bics	r3, r2
 80054ce:	001a      	movs	r2, r3
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <TIM_Base_SetConfig+0x100>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00b      	beq.n	800550e <TIM_Base_SetConfig+0xce>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a14      	ldr	r2, [pc, #80]	; (800554c <TIM_Base_SetConfig+0x10c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d007      	beq.n	800550e <TIM_Base_SetConfig+0xce>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a13      	ldr	r2, [pc, #76]	; (8005550 <TIM_Base_SetConfig+0x110>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d003      	beq.n	800550e <TIM_Base_SetConfig+0xce>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a12      	ldr	r2, [pc, #72]	; (8005554 <TIM_Base_SetConfig+0x114>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d103      	bne.n	8005516 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	691a      	ldr	r2, [r3, #16]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	2201      	movs	r2, #1
 8005522:	4013      	ands	r3, r2
 8005524:	2b01      	cmp	r3, #1
 8005526:	d106      	bne.n	8005536 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	2201      	movs	r2, #1
 800552e:	4393      	bics	r3, r2
 8005530:	001a      	movs	r2, r3
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	611a      	str	r2, [r3, #16]
  }
}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	46bd      	mov	sp, r7
 800553a:	b004      	add	sp, #16
 800553c:	bd80      	pop	{r7, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	40012c00 	.word	0x40012c00
 8005544:	40000400 	.word	0x40000400
 8005548:	40002000 	.word	0x40002000
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800
 8005558:	fffffcff 	.word	0xfffffcff

0800555c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b086      	sub	sp, #24
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	2201      	movs	r2, #1
 8005574:	4393      	bics	r3, r2
 8005576:	001a      	movs	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	22f0      	movs	r2, #240	; 0xf0
 8005586:	4393      	bics	r3, r2
 8005588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	220a      	movs	r2, #10
 8005598:	4393      	bics	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	621a      	str	r2, [r3, #32]
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	b006      	add	sp, #24
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	60f8      	str	r0, [r7, #12]
 80055c0:	60b9      	str	r1, [r7, #8]
 80055c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	2210      	movs	r2, #16
 80055d0:	4393      	bics	r3, r2
 80055d2:	001a      	movs	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	4a0d      	ldr	r2, [pc, #52]	; (8005618 <TIM_TI2_ConfigInputStage+0x60>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	22a0      	movs	r2, #160	; 0xa0
 80055f4:	4393      	bics	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	46bd      	mov	sp, r7
 8005612:	b006      	add	sp, #24
 8005614:	bd80      	pop	{r7, pc}
 8005616:	46c0      	nop			; (mov r8, r8)
 8005618:	ffff0fff 	.word	0xffff0fff

0800561c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a08      	ldr	r2, [pc, #32]	; (8005650 <TIM_ITRx_SetConfig+0x34>)
 8005630:	4013      	ands	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	4313      	orrs	r3, r2
 800563a:	2207      	movs	r2, #7
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	609a      	str	r2, [r3, #8]
}
 8005646:	46c0      	nop			; (mov r8, r8)
 8005648:	46bd      	mov	sp, r7
 800564a:	b004      	add	sp, #16
 800564c:	bd80      	pop	{r7, pc}
 800564e:	46c0      	nop			; (mov r8, r8)
 8005650:	ffcfff8f 	.word	0xffcfff8f

08005654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	4a09      	ldr	r2, [pc, #36]	; (8005690 <TIM_ETR_SetConfig+0x3c>)
 800566c:	4013      	ands	r3, r2
 800566e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	021a      	lsls	r2, r3, #8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	431a      	orrs	r2, r3
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	4313      	orrs	r3, r2
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	609a      	str	r2, [r3, #8]
}
 8005688:	46c0      	nop			; (mov r8, r8)
 800568a:	46bd      	mov	sp, r7
 800568c:	b006      	add	sp, #24
 800568e:	bd80      	pop	{r7, pc}
 8005690:	ffff00ff 	.word	0xffff00ff

08005694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	223c      	movs	r2, #60	; 0x3c
 80056a2:	5c9b      	ldrb	r3, [r3, r2]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e055      	b.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	223c      	movs	r2, #60	; 0x3c
 80056b0:	2101      	movs	r1, #1
 80056b2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	223d      	movs	r2, #61	; 0x3d
 80056b8:	2102      	movs	r1, #2
 80056ba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a23      	ldr	r2, [pc, #140]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d108      	bne.n	80056e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a22      	ldr	r2, [pc, #136]	; (8005764 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80056da:	4013      	ands	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2270      	movs	r2, #112	; 0x70
 80056ec:	4393      	bics	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a16      	ldr	r2, [pc, #88]	; (8005760 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00f      	beq.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	2380      	movs	r3, #128	; 0x80
 8005712:	05db      	lsls	r3, r3, #23
 8005714:	429a      	cmp	r2, r3
 8005716:	d009      	beq.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a12      	ldr	r2, [pc, #72]	; (8005768 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a11      	ldr	r2, [pc, #68]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d10c      	bne.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2280      	movs	r2, #128	; 0x80
 8005730:	4393      	bics	r3, r2
 8005732:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	223d      	movs	r2, #61	; 0x3d
 800574a:	2101      	movs	r1, #1
 800574c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	223c      	movs	r2, #60	; 0x3c
 8005752:	2100      	movs	r1, #0
 8005754:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b004      	add	sp, #16
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40012c00 	.word	0x40012c00
 8005764:	ff0fffff 	.word	0xff0fffff
 8005768:	40000400 	.word	0x40000400
 800576c:	40014000 	.word	0x40014000

08005770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e046      	b.n	8005810 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2288      	movs	r2, #136	; 0x88
 8005786:	589b      	ldr	r3, [r3, r2]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d107      	bne.n	800579c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2284      	movs	r2, #132	; 0x84
 8005790:	2100      	movs	r1, #0
 8005792:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	0018      	movs	r0, r3
 8005798:	f7fd f9be 	bl	8002b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2288      	movs	r2, #136	; 0x88
 80057a0:	2124      	movs	r1, #36	; 0x24
 80057a2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2101      	movs	r1, #1
 80057b0:	438a      	bics	r2, r1
 80057b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d003      	beq.n	80057c4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	0018      	movs	r0, r3
 80057c0:	f000 fb8e 	bl	8005ee0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	0018      	movs	r0, r3
 80057c8:	f000 f8cc 	bl	8005964 <UART_SetConfig>
 80057cc:	0003      	movs	r3, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e01c      	b.n	8005810 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	490d      	ldr	r1, [pc, #52]	; (8005818 <HAL_UART_Init+0xa8>)
 80057e2:	400a      	ands	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689a      	ldr	r2, [r3, #8]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	212a      	movs	r1, #42	; 0x2a
 80057f2:	438a      	bics	r2, r1
 80057f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2101      	movs	r1, #1
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	0018      	movs	r0, r3
 800580a:	f000 fc1d 	bl	8006048 <UART_CheckIdleState>
 800580e:	0003      	movs	r3, r0
}
 8005810:	0018      	movs	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	b002      	add	sp, #8
 8005816:	bd80      	pop	{r7, pc}
 8005818:	ffffb7ff 	.word	0xffffb7ff

0800581c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af02      	add	r7, sp, #8
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	1dbb      	adds	r3, r7, #6
 800582a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2288      	movs	r2, #136	; 0x88
 8005830:	589b      	ldr	r3, [r3, r2]
 8005832:	2b20      	cmp	r3, #32
 8005834:	d000      	beq.n	8005838 <HAL_UART_Transmit+0x1c>
 8005836:	e090      	b.n	800595a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_UART_Transmit+0x2a>
 800583e:	1dbb      	adds	r3, r7, #6
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d101      	bne.n	800584a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e088      	b.n	800595c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	689a      	ldr	r2, [r3, #8]
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	015b      	lsls	r3, r3, #5
 8005852:	429a      	cmp	r2, r3
 8005854:	d109      	bne.n	800586a <HAL_UART_Transmit+0x4e>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d105      	bne.n	800586a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2201      	movs	r2, #1
 8005862:	4013      	ands	r3, r2
 8005864:	d001      	beq.n	800586a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e078      	b.n	800595c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2290      	movs	r2, #144	; 0x90
 800586e:	2100      	movs	r1, #0
 8005870:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2288      	movs	r2, #136	; 0x88
 8005876:	2121      	movs	r1, #33	; 0x21
 8005878:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800587a:	f7fd faa7 	bl	8002dcc <HAL_GetTick>
 800587e:	0003      	movs	r3, r0
 8005880:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	1dba      	adds	r2, r7, #6
 8005886:	2154      	movs	r1, #84	; 0x54
 8005888:	8812      	ldrh	r2, [r2, #0]
 800588a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	1dba      	adds	r2, r7, #6
 8005890:	2156      	movs	r1, #86	; 0x56
 8005892:	8812      	ldrh	r2, [r2, #0]
 8005894:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	689a      	ldr	r2, [r3, #8]
 800589a:	2380      	movs	r3, #128	; 0x80
 800589c:	015b      	lsls	r3, r3, #5
 800589e:	429a      	cmp	r2, r3
 80058a0:	d108      	bne.n	80058b4 <HAL_UART_Transmit+0x98>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d104      	bne.n	80058b4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	e003      	b.n	80058bc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058bc:	e030      	b.n	8005920 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	9300      	str	r3, [sp, #0]
 80058c6:	0013      	movs	r3, r2
 80058c8:	2200      	movs	r2, #0
 80058ca:	2180      	movs	r1, #128	; 0x80
 80058cc:	f000 fc66 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 80058d0:	1e03      	subs	r3, r0, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2288      	movs	r2, #136	; 0x88
 80058d8:	2120      	movs	r1, #32
 80058da:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e03d      	b.n	800595c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10b      	bne.n	80058fe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	881b      	ldrh	r3, [r3, #0]
 80058ea:	001a      	movs	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	05d2      	lsls	r2, r2, #23
 80058f2:	0dd2      	lsrs	r2, r2, #23
 80058f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	3302      	adds	r3, #2
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e007      	b.n	800590e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	781a      	ldrb	r2, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	3301      	adds	r3, #1
 800590c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2256      	movs	r2, #86	; 0x56
 8005912:	5a9b      	ldrh	r3, [r3, r2]
 8005914:	b29b      	uxth	r3, r3
 8005916:	3b01      	subs	r3, #1
 8005918:	b299      	uxth	r1, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2256      	movs	r2, #86	; 0x56
 800591e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2256      	movs	r2, #86	; 0x56
 8005924:	5a9b      	ldrh	r3, [r3, r2]
 8005926:	b29b      	uxth	r3, r3
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1c8      	bne.n	80058be <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	9300      	str	r3, [sp, #0]
 8005934:	0013      	movs	r3, r2
 8005936:	2200      	movs	r2, #0
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	f000 fc2f 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d005      	beq.n	800594e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2288      	movs	r2, #136	; 0x88
 8005946:	2120      	movs	r1, #32
 8005948:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e006      	b.n	800595c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2288      	movs	r2, #136	; 0x88
 8005952:	2120      	movs	r1, #32
 8005954:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e000      	b.n	800595c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
  }
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b008      	add	sp, #32
 8005962:	bd80      	pop	{r7, pc}

08005964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005964:	b5b0      	push	{r4, r5, r7, lr}
 8005966:	b090      	sub	sp, #64	; 0x40
 8005968:	af00      	add	r7, sp, #0
 800596a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800596c:	231a      	movs	r3, #26
 800596e:	2220      	movs	r2, #32
 8005970:	189b      	adds	r3, r3, r2
 8005972:	19db      	adds	r3, r3, r7
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	431a      	orrs	r2, r3
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	431a      	orrs	r2, r3
 8005988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	4313      	orrs	r3, r2
 800598e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4aaf      	ldr	r2, [pc, #700]	; (8005c54 <UART_SetConfig+0x2f0>)
 8005998:	4013      	ands	r3, r2
 800599a:	0019      	movs	r1, r3
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4aaa      	ldr	r2, [pc, #680]	; (8005c58 <UART_SetConfig+0x2f4>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	0018      	movs	r0, r3
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	68d9      	ldr	r1, [r3, #12]
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	0003      	movs	r3, r0
 80059bc:	430b      	orrs	r3, r1
 80059be:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4aa4      	ldr	r2, [pc, #656]	; (8005c5c <UART_SetConfig+0x2f8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059d6:	4313      	orrs	r3, r2
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	4a9f      	ldr	r2, [pc, #636]	; (8005c60 <UART_SetConfig+0x2fc>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	0019      	movs	r1, r3
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	220f      	movs	r2, #15
 80059f8:	4393      	bics	r3, r2
 80059fa:	0018      	movs	r0, r3
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	0003      	movs	r3, r0
 8005a06:	430b      	orrs	r3, r1
 8005a08:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a95      	ldr	r2, [pc, #596]	; (8005c64 <UART_SetConfig+0x300>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d131      	bne.n	8005a78 <UART_SetConfig+0x114>
 8005a14:	4b94      	ldr	r3, [pc, #592]	; (8005c68 <UART_SetConfig+0x304>)
 8005a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a18:	2203      	movs	r2, #3
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d01d      	beq.n	8005a5c <UART_SetConfig+0xf8>
 8005a20:	d823      	bhi.n	8005a6a <UART_SetConfig+0x106>
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d00c      	beq.n	8005a40 <UART_SetConfig+0xdc>
 8005a26:	d820      	bhi.n	8005a6a <UART_SetConfig+0x106>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <UART_SetConfig+0xce>
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d00e      	beq.n	8005a4e <UART_SetConfig+0xea>
 8005a30:	e01b      	b.n	8005a6a <UART_SetConfig+0x106>
 8005a32:	231b      	movs	r3, #27
 8005a34:	2220      	movs	r2, #32
 8005a36:	189b      	adds	r3, r3, r2
 8005a38:	19db      	adds	r3, r3, r7
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
 8005a3e:	e0b4      	b.n	8005baa <UART_SetConfig+0x246>
 8005a40:	231b      	movs	r3, #27
 8005a42:	2220      	movs	r2, #32
 8005a44:	189b      	adds	r3, r3, r2
 8005a46:	19db      	adds	r3, r3, r7
 8005a48:	2202      	movs	r2, #2
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e0ad      	b.n	8005baa <UART_SetConfig+0x246>
 8005a4e:	231b      	movs	r3, #27
 8005a50:	2220      	movs	r2, #32
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	19db      	adds	r3, r3, r7
 8005a56:	2204      	movs	r2, #4
 8005a58:	701a      	strb	r2, [r3, #0]
 8005a5a:	e0a6      	b.n	8005baa <UART_SetConfig+0x246>
 8005a5c:	231b      	movs	r3, #27
 8005a5e:	2220      	movs	r2, #32
 8005a60:	189b      	adds	r3, r3, r2
 8005a62:	19db      	adds	r3, r3, r7
 8005a64:	2208      	movs	r2, #8
 8005a66:	701a      	strb	r2, [r3, #0]
 8005a68:	e09f      	b.n	8005baa <UART_SetConfig+0x246>
 8005a6a:	231b      	movs	r3, #27
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	19db      	adds	r3, r3, r7
 8005a72:	2210      	movs	r2, #16
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e098      	b.n	8005baa <UART_SetConfig+0x246>
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a7b      	ldr	r2, [pc, #492]	; (8005c6c <UART_SetConfig+0x308>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d131      	bne.n	8005ae6 <UART_SetConfig+0x182>
 8005a82:	4b79      	ldr	r3, [pc, #484]	; (8005c68 <UART_SetConfig+0x304>)
 8005a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a86:	220c      	movs	r2, #12
 8005a88:	4013      	ands	r3, r2
 8005a8a:	2b0c      	cmp	r3, #12
 8005a8c:	d01d      	beq.n	8005aca <UART_SetConfig+0x166>
 8005a8e:	d823      	bhi.n	8005ad8 <UART_SetConfig+0x174>
 8005a90:	2b08      	cmp	r3, #8
 8005a92:	d00c      	beq.n	8005aae <UART_SetConfig+0x14a>
 8005a94:	d820      	bhi.n	8005ad8 <UART_SetConfig+0x174>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <UART_SetConfig+0x13c>
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d00e      	beq.n	8005abc <UART_SetConfig+0x158>
 8005a9e:	e01b      	b.n	8005ad8 <UART_SetConfig+0x174>
 8005aa0:	231b      	movs	r3, #27
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	189b      	adds	r3, r3, r2
 8005aa6:	19db      	adds	r3, r3, r7
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	e07d      	b.n	8005baa <UART_SetConfig+0x246>
 8005aae:	231b      	movs	r3, #27
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	189b      	adds	r3, r3, r2
 8005ab4:	19db      	adds	r3, r3, r7
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	701a      	strb	r2, [r3, #0]
 8005aba:	e076      	b.n	8005baa <UART_SetConfig+0x246>
 8005abc:	231b      	movs	r3, #27
 8005abe:	2220      	movs	r2, #32
 8005ac0:	189b      	adds	r3, r3, r2
 8005ac2:	19db      	adds	r3, r3, r7
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e06f      	b.n	8005baa <UART_SetConfig+0x246>
 8005aca:	231b      	movs	r3, #27
 8005acc:	2220      	movs	r2, #32
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	19db      	adds	r3, r3, r7
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	701a      	strb	r2, [r3, #0]
 8005ad6:	e068      	b.n	8005baa <UART_SetConfig+0x246>
 8005ad8:	231b      	movs	r3, #27
 8005ada:	2220      	movs	r2, #32
 8005adc:	189b      	adds	r3, r3, r2
 8005ade:	19db      	adds	r3, r3, r7
 8005ae0:	2210      	movs	r2, #16
 8005ae2:	701a      	strb	r2, [r3, #0]
 8005ae4:	e061      	b.n	8005baa <UART_SetConfig+0x246>
 8005ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a61      	ldr	r2, [pc, #388]	; (8005c70 <UART_SetConfig+0x30c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d106      	bne.n	8005afe <UART_SetConfig+0x19a>
 8005af0:	231b      	movs	r3, #27
 8005af2:	2220      	movs	r2, #32
 8005af4:	189b      	adds	r3, r3, r2
 8005af6:	19db      	adds	r3, r3, r7
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
 8005afc:	e055      	b.n	8005baa <UART_SetConfig+0x246>
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a5c      	ldr	r2, [pc, #368]	; (8005c74 <UART_SetConfig+0x310>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d106      	bne.n	8005b16 <UART_SetConfig+0x1b2>
 8005b08:	231b      	movs	r3, #27
 8005b0a:	2220      	movs	r2, #32
 8005b0c:	189b      	adds	r3, r3, r2
 8005b0e:	19db      	adds	r3, r3, r7
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
 8005b14:	e049      	b.n	8005baa <UART_SetConfig+0x246>
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a50      	ldr	r2, [pc, #320]	; (8005c5c <UART_SetConfig+0x2f8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d13e      	bne.n	8005b9e <UART_SetConfig+0x23a>
 8005b20:	4b51      	ldr	r3, [pc, #324]	; (8005c68 <UART_SetConfig+0x304>)
 8005b22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b24:	23c0      	movs	r3, #192	; 0xc0
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	4013      	ands	r3, r2
 8005b2a:	22c0      	movs	r2, #192	; 0xc0
 8005b2c:	0112      	lsls	r2, r2, #4
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d027      	beq.n	8005b82 <UART_SetConfig+0x21e>
 8005b32:	22c0      	movs	r2, #192	; 0xc0
 8005b34:	0112      	lsls	r2, r2, #4
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d82a      	bhi.n	8005b90 <UART_SetConfig+0x22c>
 8005b3a:	2280      	movs	r2, #128	; 0x80
 8005b3c:	0112      	lsls	r2, r2, #4
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d011      	beq.n	8005b66 <UART_SetConfig+0x202>
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	0112      	lsls	r2, r2, #4
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d822      	bhi.n	8005b90 <UART_SetConfig+0x22c>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d004      	beq.n	8005b58 <UART_SetConfig+0x1f4>
 8005b4e:	2280      	movs	r2, #128	; 0x80
 8005b50:	00d2      	lsls	r2, r2, #3
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <UART_SetConfig+0x210>
 8005b56:	e01b      	b.n	8005b90 <UART_SetConfig+0x22c>
 8005b58:	231b      	movs	r3, #27
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	189b      	adds	r3, r3, r2
 8005b5e:	19db      	adds	r3, r3, r7
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
 8005b64:	e021      	b.n	8005baa <UART_SetConfig+0x246>
 8005b66:	231b      	movs	r3, #27
 8005b68:	2220      	movs	r2, #32
 8005b6a:	189b      	adds	r3, r3, r2
 8005b6c:	19db      	adds	r3, r3, r7
 8005b6e:	2202      	movs	r2, #2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	e01a      	b.n	8005baa <UART_SetConfig+0x246>
 8005b74:	231b      	movs	r3, #27
 8005b76:	2220      	movs	r2, #32
 8005b78:	189b      	adds	r3, r3, r2
 8005b7a:	19db      	adds	r3, r3, r7
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	e013      	b.n	8005baa <UART_SetConfig+0x246>
 8005b82:	231b      	movs	r3, #27
 8005b84:	2220      	movs	r2, #32
 8005b86:	189b      	adds	r3, r3, r2
 8005b88:	19db      	adds	r3, r3, r7
 8005b8a:	2208      	movs	r2, #8
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e00c      	b.n	8005baa <UART_SetConfig+0x246>
 8005b90:	231b      	movs	r3, #27
 8005b92:	2220      	movs	r2, #32
 8005b94:	189b      	adds	r3, r3, r2
 8005b96:	19db      	adds	r3, r3, r7
 8005b98:	2210      	movs	r2, #16
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e005      	b.n	8005baa <UART_SetConfig+0x246>
 8005b9e:	231b      	movs	r3, #27
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	19db      	adds	r3, r3, r7
 8005ba6:	2210      	movs	r2, #16
 8005ba8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2b      	ldr	r2, [pc, #172]	; (8005c5c <UART_SetConfig+0x2f8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d000      	beq.n	8005bb6 <UART_SetConfig+0x252>
 8005bb4:	e0a9      	b.n	8005d0a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005bb6:	231b      	movs	r3, #27
 8005bb8:	2220      	movs	r2, #32
 8005bba:	189b      	adds	r3, r3, r2
 8005bbc:	19db      	adds	r3, r3, r7
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d015      	beq.n	8005bf0 <UART_SetConfig+0x28c>
 8005bc4:	dc18      	bgt.n	8005bf8 <UART_SetConfig+0x294>
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d00d      	beq.n	8005be6 <UART_SetConfig+0x282>
 8005bca:	dc15      	bgt.n	8005bf8 <UART_SetConfig+0x294>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <UART_SetConfig+0x272>
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d005      	beq.n	8005be0 <UART_SetConfig+0x27c>
 8005bd4:	e010      	b.n	8005bf8 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bd6:	f7ff f937 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8005bda:	0003      	movs	r3, r0
 8005bdc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bde:	e014      	b.n	8005c0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be0:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <UART_SetConfig+0x314>)
 8005be2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005be4:	e011      	b.n	8005c0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005be6:	f7ff f8a3 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 8005bea:	0003      	movs	r3, r0
 8005bec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bee:	e00c      	b.n	8005c0a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf0:	2380      	movs	r3, #128	; 0x80
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005bf6:	e008      	b.n	8005c0a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005bfc:	231a      	movs	r3, #26
 8005bfe:	2220      	movs	r2, #32
 8005c00:	189b      	adds	r3, r3, r2
 8005c02:	19db      	adds	r3, r3, r7
 8005c04:	2201      	movs	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
        break;
 8005c08:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d100      	bne.n	8005c12 <UART_SetConfig+0x2ae>
 8005c10:	e14b      	b.n	8005eaa <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c16:	4b19      	ldr	r3, [pc, #100]	; (8005c7c <UART_SetConfig+0x318>)
 8005c18:	0052      	lsls	r2, r2, #1
 8005c1a:	5ad3      	ldrh	r3, [r2, r3]
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005c20:	f7fa fa82 	bl	8000128 <__udivsi3>
 8005c24:	0003      	movs	r3, r0
 8005c26:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	0013      	movs	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	189b      	adds	r3, r3, r2
 8005c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d305      	bcc.n	8005c44 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005c3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d91d      	bls.n	8005c80 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005c44:	231a      	movs	r3, #26
 8005c46:	2220      	movs	r2, #32
 8005c48:	189b      	adds	r3, r3, r2
 8005c4a:	19db      	adds	r3, r3, r7
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	e12b      	b.n	8005eaa <UART_SetConfig+0x546>
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	cfff69f3 	.word	0xcfff69f3
 8005c58:	ffffcfff 	.word	0xffffcfff
 8005c5c:	40008000 	.word	0x40008000
 8005c60:	11fff4ff 	.word	0x11fff4ff
 8005c64:	40013800 	.word	0x40013800
 8005c68:	40021000 	.word	0x40021000
 8005c6c:	40004400 	.word	0x40004400
 8005c70:	40004800 	.word	0x40004800
 8005c74:	40004c00 	.word	0x40004c00
 8005c78:	00f42400 	.word	0x00f42400
 8005c7c:	08009c00 	.word	0x08009c00
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c82:	61bb      	str	r3, [r7, #24]
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]
 8005c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c8c:	4b92      	ldr	r3, [pc, #584]	; (8005ed8 <UART_SetConfig+0x574>)
 8005c8e:	0052      	lsls	r2, r2, #1
 8005c90:	5ad3      	ldrh	r3, [r2, r3]
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	2300      	movs	r3, #0
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	69b8      	ldr	r0, [r7, #24]
 8005c9e:	69f9      	ldr	r1, [r7, #28]
 8005ca0:	f7fa fbb8 	bl	8000414 <__aeabi_uldivmod>
 8005ca4:	0002      	movs	r2, r0
 8005ca6:	000b      	movs	r3, r1
 8005ca8:	0e11      	lsrs	r1, r2, #24
 8005caa:	021d      	lsls	r5, r3, #8
 8005cac:	430d      	orrs	r5, r1
 8005cae:	0214      	lsls	r4, r2, #8
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	085b      	lsrs	r3, r3, #1
 8005cb6:	60bb      	str	r3, [r7, #8]
 8005cb8:	2300      	movs	r3, #0
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68b8      	ldr	r0, [r7, #8]
 8005cbe:	68f9      	ldr	r1, [r7, #12]
 8005cc0:	1900      	adds	r0, r0, r4
 8005cc2:	4169      	adcs	r1, r5
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	603b      	str	r3, [r7, #0]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	683a      	ldr	r2, [r7, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f7fa fb9f 	bl	8000414 <__aeabi_uldivmod>
 8005cd6:	0002      	movs	r2, r0
 8005cd8:	000b      	movs	r3, r1
 8005cda:	0013      	movs	r3, r2
 8005cdc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ce0:	23c0      	movs	r3, #192	; 0xc0
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d309      	bcc.n	8005cfc <UART_SetConfig+0x398>
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cea:	2380      	movs	r3, #128	; 0x80
 8005cec:	035b      	lsls	r3, r3, #13
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d204      	bcs.n	8005cfc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	e0d6      	b.n	8005eaa <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005cfc:	231a      	movs	r3, #26
 8005cfe:	2220      	movs	r2, #32
 8005d00:	189b      	adds	r3, r3, r2
 8005d02:	19db      	adds	r3, r3, r7
 8005d04:	2201      	movs	r2, #1
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	e0cf      	b.n	8005eaa <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	69da      	ldr	r2, [r3, #28]
 8005d0e:	2380      	movs	r3, #128	; 0x80
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d000      	beq.n	8005d18 <UART_SetConfig+0x3b4>
 8005d16:	e070      	b.n	8005dfa <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8005d18:	231b      	movs	r3, #27
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	189b      	adds	r3, r3, r2
 8005d1e:	19db      	adds	r3, r3, r7
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d015      	beq.n	8005d52 <UART_SetConfig+0x3ee>
 8005d26:	dc18      	bgt.n	8005d5a <UART_SetConfig+0x3f6>
 8005d28:	2b04      	cmp	r3, #4
 8005d2a:	d00d      	beq.n	8005d48 <UART_SetConfig+0x3e4>
 8005d2c:	dc15      	bgt.n	8005d5a <UART_SetConfig+0x3f6>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <UART_SetConfig+0x3d4>
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d005      	beq.n	8005d42 <UART_SetConfig+0x3de>
 8005d36:	e010      	b.n	8005d5a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d38:	f7ff f886 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d40:	e014      	b.n	8005d6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d42:	4b66      	ldr	r3, [pc, #408]	; (8005edc <UART_SetConfig+0x578>)
 8005d44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d46:	e011      	b.n	8005d6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d48:	f7fe fff2 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 8005d4c:	0003      	movs	r3, r0
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d50:	e00c      	b.n	8005d6c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d52:	2380      	movs	r3, #128	; 0x80
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005d58:	e008      	b.n	8005d6c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005d5e:	231a      	movs	r3, #26
 8005d60:	2220      	movs	r2, #32
 8005d62:	189b      	adds	r3, r3, r2
 8005d64:	19db      	adds	r3, r3, r7
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
        break;
 8005d6a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d100      	bne.n	8005d74 <UART_SetConfig+0x410>
 8005d72:	e09a      	b.n	8005eaa <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d78:	4b57      	ldr	r3, [pc, #348]	; (8005ed8 <UART_SetConfig+0x574>)
 8005d7a:	0052      	lsls	r2, r2, #1
 8005d7c:	5ad3      	ldrh	r3, [r2, r3]
 8005d7e:	0019      	movs	r1, r3
 8005d80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005d82:	f7fa f9d1 	bl	8000128 <__udivsi3>
 8005d86:	0003      	movs	r3, r0
 8005d88:	005a      	lsls	r2, r3, #1
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	085b      	lsrs	r3, r3, #1
 8005d90:	18d2      	adds	r2, r2, r3
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	0019      	movs	r1, r3
 8005d98:	0010      	movs	r0, r2
 8005d9a:	f7fa f9c5 	bl	8000128 <__udivsi3>
 8005d9e:	0003      	movs	r3, r0
 8005da0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2b0f      	cmp	r3, #15
 8005da6:	d921      	bls.n	8005dec <UART_SetConfig+0x488>
 8005da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	025b      	lsls	r3, r3, #9
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d21c      	bcs.n	8005dec <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	200e      	movs	r0, #14
 8005db8:	2420      	movs	r4, #32
 8005dba:	1903      	adds	r3, r0, r4
 8005dbc:	19db      	adds	r3, r3, r7
 8005dbe:	210f      	movs	r1, #15
 8005dc0:	438a      	bics	r2, r1
 8005dc2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	2207      	movs	r2, #7
 8005dcc:	4013      	ands	r3, r2
 8005dce:	b299      	uxth	r1, r3
 8005dd0:	1903      	adds	r3, r0, r4
 8005dd2:	19db      	adds	r3, r3, r7
 8005dd4:	1902      	adds	r2, r0, r4
 8005dd6:	19d2      	adds	r2, r2, r7
 8005dd8:	8812      	ldrh	r2, [r2, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	1902      	adds	r2, r0, r4
 8005de4:	19d2      	adds	r2, r2, r7
 8005de6:	8812      	ldrh	r2, [r2, #0]
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	e05e      	b.n	8005eaa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005dec:	231a      	movs	r3, #26
 8005dee:	2220      	movs	r2, #32
 8005df0:	189b      	adds	r3, r3, r2
 8005df2:	19db      	adds	r3, r3, r7
 8005df4:	2201      	movs	r2, #1
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	e057      	b.n	8005eaa <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dfa:	231b      	movs	r3, #27
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	189b      	adds	r3, r3, r2
 8005e00:	19db      	adds	r3, r3, r7
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	d015      	beq.n	8005e34 <UART_SetConfig+0x4d0>
 8005e08:	dc18      	bgt.n	8005e3c <UART_SetConfig+0x4d8>
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d00d      	beq.n	8005e2a <UART_SetConfig+0x4c6>
 8005e0e:	dc15      	bgt.n	8005e3c <UART_SetConfig+0x4d8>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <UART_SetConfig+0x4b6>
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d005      	beq.n	8005e24 <UART_SetConfig+0x4c0>
 8005e18:	e010      	b.n	8005e3c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e1a:	f7ff f815 	bl	8004e48 <HAL_RCC_GetPCLK1Freq>
 8005e1e:	0003      	movs	r3, r0
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e22:	e014      	b.n	8005e4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e24:	4b2d      	ldr	r3, [pc, #180]	; (8005edc <UART_SetConfig+0x578>)
 8005e26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e28:	e011      	b.n	8005e4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2a:	f7fe ff81 	bl	8004d30 <HAL_RCC_GetSysClockFreq>
 8005e2e:	0003      	movs	r3, r0
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e32:	e00c      	b.n	8005e4e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e34:	2380      	movs	r3, #128	; 0x80
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005e3a:	e008      	b.n	8005e4e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8005e40:	231a      	movs	r3, #26
 8005e42:	2220      	movs	r2, #32
 8005e44:	189b      	adds	r3, r3, r2
 8005e46:	19db      	adds	r3, r3, r7
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
        break;
 8005e4c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02a      	beq.n	8005eaa <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e58:	4b1f      	ldr	r3, [pc, #124]	; (8005ed8 <UART_SetConfig+0x574>)
 8005e5a:	0052      	lsls	r2, r2, #1
 8005e5c:	5ad3      	ldrh	r3, [r2, r3]
 8005e5e:	0019      	movs	r1, r3
 8005e60:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e62:	f7fa f961 	bl	8000128 <__udivsi3>
 8005e66:	0003      	movs	r3, r0
 8005e68:	001a      	movs	r2, r3
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	085b      	lsrs	r3, r3, #1
 8005e70:	18d2      	adds	r2, r2, r3
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	0019      	movs	r1, r3
 8005e78:	0010      	movs	r0, r2
 8005e7a:	f7fa f955 	bl	8000128 <__udivsi3>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e84:	2b0f      	cmp	r3, #15
 8005e86:	d90a      	bls.n	8005e9e <UART_SetConfig+0x53a>
 8005e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	025b      	lsls	r3, r3, #9
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d205      	bcs.n	8005e9e <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e94:	b29a      	uxth	r2, r3
 8005e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	60da      	str	r2, [r3, #12]
 8005e9c:	e005      	b.n	8005eaa <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005e9e:	231a      	movs	r3, #26
 8005ea0:	2220      	movs	r2, #32
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	19db      	adds	r3, r3, r7
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	226a      	movs	r2, #106	; 0x6a
 8005eae:	2101      	movs	r1, #1
 8005eb0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb4:	2268      	movs	r2, #104	; 0x68
 8005eb6:	2101      	movs	r1, #1
 8005eb8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005ec6:	231a      	movs	r3, #26
 8005ec8:	2220      	movs	r2, #32
 8005eca:	189b      	adds	r3, r3, r2
 8005ecc:	19db      	adds	r3, r3, r7
 8005ece:	781b      	ldrb	r3, [r3, #0]
}
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	b010      	add	sp, #64	; 0x40
 8005ed6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ed8:	08009c00 	.word	0x08009c00
 8005edc:	00f42400 	.word	0x00f42400

08005ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	2208      	movs	r2, #8
 8005eee:	4013      	ands	r3, r2
 8005ef0:	d00b      	beq.n	8005f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4a4a      	ldr	r2, [pc, #296]	; (8006024 <UART_AdvFeatureConfig+0x144>)
 8005efa:	4013      	ands	r3, r2
 8005efc:	0019      	movs	r1, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4013      	ands	r3, r2
 8005f12:	d00b      	beq.n	8005f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	4a43      	ldr	r2, [pc, #268]	; (8006028 <UART_AdvFeatureConfig+0x148>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	0019      	movs	r1, r3
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	2202      	movs	r2, #2
 8005f32:	4013      	ands	r3, r2
 8005f34:	d00b      	beq.n	8005f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a3b      	ldr	r2, [pc, #236]	; (800602c <UART_AdvFeatureConfig+0x14c>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	0019      	movs	r1, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f52:	2204      	movs	r2, #4
 8005f54:	4013      	ands	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4a34      	ldr	r2, [pc, #208]	; (8006030 <UART_AdvFeatureConfig+0x150>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	2210      	movs	r2, #16
 8005f76:	4013      	ands	r3, r2
 8005f78:	d00b      	beq.n	8005f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4a2c      	ldr	r2, [pc, #176]	; (8006034 <UART_AdvFeatureConfig+0x154>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	0019      	movs	r1, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f96:	2220      	movs	r2, #32
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	4a25      	ldr	r2, [pc, #148]	; (8006038 <UART_AdvFeatureConfig+0x158>)
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	0019      	movs	r1, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	2240      	movs	r2, #64	; 0x40
 8005fba:	4013      	ands	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	4a1d      	ldr	r2, [pc, #116]	; (800603c <UART_AdvFeatureConfig+0x15c>)
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	0019      	movs	r1, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fda:	2380      	movs	r3, #128	; 0x80
 8005fdc:	035b      	lsls	r3, r3, #13
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d10b      	bne.n	8005ffa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <UART_AdvFeatureConfig+0x160>)
 8005fea:	4013      	ands	r3, r2
 8005fec:	0019      	movs	r1, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	2280      	movs	r2, #128	; 0x80
 8006000:	4013      	ands	r3, r2
 8006002:	d00b      	beq.n	800601c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4a0e      	ldr	r2, [pc, #56]	; (8006044 <UART_AdvFeatureConfig+0x164>)
 800600c:	4013      	ands	r3, r2
 800600e:	0019      	movs	r1, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	605a      	str	r2, [r3, #4]
  }
}
 800601c:	46c0      	nop			; (mov r8, r8)
 800601e:	46bd      	mov	sp, r7
 8006020:	b002      	add	sp, #8
 8006022:	bd80      	pop	{r7, pc}
 8006024:	ffff7fff 	.word	0xffff7fff
 8006028:	fffdffff 	.word	0xfffdffff
 800602c:	fffeffff 	.word	0xfffeffff
 8006030:	fffbffff 	.word	0xfffbffff
 8006034:	ffffefff 	.word	0xffffefff
 8006038:	ffffdfff 	.word	0xffffdfff
 800603c:	ffefffff 	.word	0xffefffff
 8006040:	ff9fffff 	.word	0xff9fffff
 8006044:	fff7ffff 	.word	0xfff7ffff

08006048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b092      	sub	sp, #72	; 0x48
 800604c:	af02      	add	r7, sp, #8
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2290      	movs	r2, #144	; 0x90
 8006054:	2100      	movs	r1, #0
 8006056:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006058:	f7fc feb8 	bl	8002dcc <HAL_GetTick>
 800605c:	0003      	movs	r3, r0
 800605e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2208      	movs	r2, #8
 8006068:	4013      	ands	r3, r2
 800606a:	2b08      	cmp	r3, #8
 800606c:	d12d      	bne.n	80060ca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	2280      	movs	r2, #128	; 0x80
 8006072:	0391      	lsls	r1, r2, #14
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	4a47      	ldr	r2, [pc, #284]	; (8006194 <UART_CheckIdleState+0x14c>)
 8006078:	9200      	str	r2, [sp, #0]
 800607a:	2200      	movs	r2, #0
 800607c:	f000 f88e 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 8006080:	1e03      	subs	r3, r0, #0
 8006082:	d022      	beq.n	80060ca <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006084:	f3ef 8310 	mrs	r3, PRIMASK
 8006088:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800608c:	63bb      	str	r3, [r7, #56]	; 0x38
 800608e:	2301      	movs	r3, #1
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	f383 8810 	msr	PRIMASK, r3
}
 8006098:	46c0      	nop			; (mov r8, r8)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2180      	movs	r1, #128	; 0x80
 80060a6:	438a      	bics	r2, r1
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	f383 8810 	msr	PRIMASK, r3
}
 80060b4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2288      	movs	r2, #136	; 0x88
 80060ba:	2120      	movs	r1, #32
 80060bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2284      	movs	r2, #132	; 0x84
 80060c2:	2100      	movs	r1, #0
 80060c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e060      	b.n	800618c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2204      	movs	r2, #4
 80060d2:	4013      	ands	r3, r2
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d146      	bne.n	8006166 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060da:	2280      	movs	r2, #128	; 0x80
 80060dc:	03d1      	lsls	r1, r2, #15
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4a2c      	ldr	r2, [pc, #176]	; (8006194 <UART_CheckIdleState+0x14c>)
 80060e2:	9200      	str	r2, [sp, #0]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f000 f859 	bl	800619c <UART_WaitOnFlagUntilTimeout>
 80060ea:	1e03      	subs	r3, r0, #0
 80060ec:	d03b      	beq.n	8006166 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ee:	f3ef 8310 	mrs	r3, PRIMASK
 80060f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80060f4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80060f6:	637b      	str	r3, [r7, #52]	; 0x34
 80060f8:	2301      	movs	r3, #1
 80060fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	f383 8810 	msr	PRIMASK, r3
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4922      	ldr	r1, [pc, #136]	; (8006198 <UART_CheckIdleState+0x150>)
 8006110:	400a      	ands	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006116:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	f383 8810 	msr	PRIMASK, r3
}
 800611e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006120:	f3ef 8310 	mrs	r3, PRIMASK
 8006124:	61bb      	str	r3, [r7, #24]
  return(result);
 8006126:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006128:	633b      	str	r3, [r7, #48]	; 0x30
 800612a:	2301      	movs	r3, #1
 800612c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f383 8810 	msr	PRIMASK, r3
}
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2101      	movs	r1, #1
 8006142:	438a      	bics	r2, r1
 8006144:	609a      	str	r2, [r3, #8]
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f383 8810 	msr	PRIMASK, r3
}
 8006150:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	228c      	movs	r2, #140	; 0x8c
 8006156:	2120      	movs	r1, #32
 8006158:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2284      	movs	r2, #132	; 0x84
 800615e:	2100      	movs	r1, #0
 8006160:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e012      	b.n	800618c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2288      	movs	r2, #136	; 0x88
 800616a:	2120      	movs	r1, #32
 800616c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	228c      	movs	r2, #140	; 0x8c
 8006172:	2120      	movs	r1, #32
 8006174:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2284      	movs	r2, #132	; 0x84
 8006186:	2100      	movs	r1, #0
 8006188:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	0018      	movs	r0, r3
 800618e:	46bd      	mov	sp, r7
 8006190:	b010      	add	sp, #64	; 0x40
 8006192:	bd80      	pop	{r7, pc}
 8006194:	01ffffff 	.word	0x01ffffff
 8006198:	fffffedf 	.word	0xfffffedf

0800619c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	603b      	str	r3, [r7, #0]
 80061a8:	1dfb      	adds	r3, r7, #7
 80061aa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ac:	e051      	b.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	3301      	adds	r3, #1
 80061b2:	d04e      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b4:	f7fc fe0a 	bl	8002dcc <HAL_GetTick>
 80061b8:	0002      	movs	r2, r0
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d302      	bcc.n	80061ca <UART_WaitOnFlagUntilTimeout+0x2e>
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e051      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2204      	movs	r2, #4
 80061d6:	4013      	ands	r3, r2
 80061d8:	d03b      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb6>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b80      	cmp	r3, #128	; 0x80
 80061de:	d038      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb6>
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d035      	beq.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	2208      	movs	r2, #8
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d111      	bne.n	8006218 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2208      	movs	r2, #8
 80061fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	0018      	movs	r0, r3
 8006200:	f000 f83c 	bl	800627c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2290      	movs	r2, #144	; 0x90
 8006208:	2108      	movs	r1, #8
 800620a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2284      	movs	r2, #132	; 0x84
 8006210:	2100      	movs	r1, #0
 8006212:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e02c      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	69da      	ldr	r2, [r3, #28]
 800621e:	2380      	movs	r3, #128	; 0x80
 8006220:	011b      	lsls	r3, r3, #4
 8006222:	401a      	ands	r2, r3
 8006224:	2380      	movs	r3, #128	; 0x80
 8006226:	011b      	lsls	r3, r3, #4
 8006228:	429a      	cmp	r2, r3
 800622a:	d112      	bne.n	8006252 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2280      	movs	r2, #128	; 0x80
 8006232:	0112      	lsls	r2, r2, #4
 8006234:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	0018      	movs	r0, r3
 800623a:	f000 f81f 	bl	800627c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2290      	movs	r2, #144	; 0x90
 8006242:	2120      	movs	r1, #32
 8006244:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2284      	movs	r2, #132	; 0x84
 800624a:	2100      	movs	r1, #0
 800624c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e00f      	b.n	8006272 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	4013      	ands	r3, r2
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	425a      	negs	r2, r3
 8006262:	4153      	adcs	r3, r2
 8006264:	b2db      	uxtb	r3, r3
 8006266:	001a      	movs	r2, r3
 8006268:	1dfb      	adds	r3, r7, #7
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	429a      	cmp	r2, r3
 800626e:	d09e      	beq.n	80061ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	0018      	movs	r0, r3
 8006274:	46bd      	mov	sp, r7
 8006276:	b004      	add	sp, #16
 8006278:	bd80      	pop	{r7, pc}
	...

0800627c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08e      	sub	sp, #56	; 0x38
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006284:	f3ef 8310 	mrs	r3, PRIMASK
 8006288:	617b      	str	r3, [r7, #20]
  return(result);
 800628a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800628c:	637b      	str	r3, [r7, #52]	; 0x34
 800628e:	2301      	movs	r3, #1
 8006290:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	f383 8810 	msr	PRIMASK, r3
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4926      	ldr	r1, [pc, #152]	; (8006340 <UART_EndRxTransfer+0xc4>)
 80062a6:	400a      	ands	r2, r1
 80062a8:	601a      	str	r2, [r3, #0]
 80062aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f383 8810 	msr	PRIMASK, r3
}
 80062b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062b6:	f3ef 8310 	mrs	r3, PRIMASK
 80062ba:	623b      	str	r3, [r7, #32]
  return(result);
 80062bc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062be:	633b      	str	r3, [r7, #48]	; 0x30
 80062c0:	2301      	movs	r3, #1
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	f383 8810 	msr	PRIMASK, r3
}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	491b      	ldr	r1, [pc, #108]	; (8006344 <UART_EndRxTransfer+0xc8>)
 80062d8:	400a      	ands	r2, r1
 80062da:	609a      	str	r2, [r3, #8]
 80062dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	f383 8810 	msr	PRIMASK, r3
}
 80062e6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d118      	bne.n	8006322 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062f0:	f3ef 8310 	mrs	r3, PRIMASK
 80062f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80062f6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fa:	2301      	movs	r3, #1
 80062fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f383 8810 	msr	PRIMASK, r3
}
 8006304:	46c0      	nop			; (mov r8, r8)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2110      	movs	r1, #16
 8006312:	438a      	bics	r2, r1
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006318:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f383 8810 	msr	PRIMASK, r3
}
 8006320:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	228c      	movs	r2, #140	; 0x8c
 8006326:	2120      	movs	r1, #32
 8006328:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	46bd      	mov	sp, r7
 800633a:	b00e      	add	sp, #56	; 0x38
 800633c:	bd80      	pop	{r7, pc}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	fffffedf 	.word	0xfffffedf
 8006344:	effffffe 	.word	0xeffffffe

08006348 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2284      	movs	r2, #132	; 0x84
 8006354:	5c9b      	ldrb	r3, [r3, r2]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_UARTEx_DisableFifoMode+0x16>
 800635a:	2302      	movs	r3, #2
 800635c:	e027      	b.n	80063ae <HAL_UARTEx_DisableFifoMode+0x66>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2284      	movs	r2, #132	; 0x84
 8006362:	2101      	movs	r1, #1
 8006364:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2288      	movs	r2, #136	; 0x88
 800636a:	2124      	movs	r1, #36	; 0x24
 800636c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2101      	movs	r1, #1
 8006382:	438a      	bics	r2, r1
 8006384:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a0b      	ldr	r2, [pc, #44]	; (80063b8 <HAL_UARTEx_DisableFifoMode+0x70>)
 800638a:	4013      	ands	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2288      	movs	r2, #136	; 0x88
 80063a0:	2120      	movs	r1, #32
 80063a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2284      	movs	r2, #132	; 0x84
 80063a8:	2100      	movs	r1, #0
 80063aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b004      	add	sp, #16
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	46c0      	nop			; (mov r8, r8)
 80063b8:	dfffffff 	.word	0xdfffffff

080063bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2284      	movs	r2, #132	; 0x84
 80063ca:	5c9b      	ldrb	r3, [r3, r2]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d101      	bne.n	80063d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80063d0:	2302      	movs	r3, #2
 80063d2:	e02e      	b.n	8006432 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2284      	movs	r2, #132	; 0x84
 80063d8:	2101      	movs	r1, #1
 80063da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2288      	movs	r2, #136	; 0x88
 80063e0:	2124      	movs	r1, #36	; 0x24
 80063e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2101      	movs	r1, #1
 80063f8:	438a      	bics	r2, r1
 80063fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	08d9      	lsrs	r1, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	430a      	orrs	r2, r1
 800640e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	0018      	movs	r0, r3
 8006414:	f000 f854 	bl	80064c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2288      	movs	r2, #136	; 0x88
 8006424:	2120      	movs	r1, #32
 8006426:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2284      	movs	r2, #132	; 0x84
 800642c:	2100      	movs	r1, #0
 800642e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	0018      	movs	r0, r3
 8006434:	46bd      	mov	sp, r7
 8006436:	b004      	add	sp, #16
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2284      	movs	r2, #132	; 0x84
 800644a:	5c9b      	ldrb	r3, [r3, r2]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d101      	bne.n	8006454 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006450:	2302      	movs	r3, #2
 8006452:	e02f      	b.n	80064b4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2284      	movs	r2, #132	; 0x84
 8006458:	2101      	movs	r1, #1
 800645a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2288      	movs	r2, #136	; 0x88
 8006460:	2124      	movs	r1, #36	; 0x24
 8006462:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2101      	movs	r1, #1
 8006478:	438a      	bics	r2, r1
 800647a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	4a0e      	ldr	r2, [pc, #56]	; (80064bc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006484:	4013      	ands	r3, r2
 8006486:	0019      	movs	r1, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	0018      	movs	r0, r3
 8006496:	f000 f813 	bl	80064c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68fa      	ldr	r2, [r7, #12]
 80064a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2288      	movs	r2, #136	; 0x88
 80064a6:	2120      	movs	r1, #32
 80064a8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2284      	movs	r2, #132	; 0x84
 80064ae:	2100      	movs	r1, #0
 80064b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	0018      	movs	r0, r3
 80064b6:	46bd      	mov	sp, r7
 80064b8:	b004      	add	sp, #16
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	f1ffffff 	.word	0xf1ffffff

080064c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d108      	bne.n	80064e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	226a      	movs	r2, #106	; 0x6a
 80064d4:	2101      	movs	r1, #1
 80064d6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2268      	movs	r2, #104	; 0x68
 80064dc:	2101      	movs	r1, #1
 80064de:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80064e0:	e043      	b.n	800656a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80064e2:	260f      	movs	r6, #15
 80064e4:	19bb      	adds	r3, r7, r6
 80064e6:	2208      	movs	r2, #8
 80064e8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80064ea:	200e      	movs	r0, #14
 80064ec:	183b      	adds	r3, r7, r0
 80064ee:	2208      	movs	r2, #8
 80064f0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	0e5b      	lsrs	r3, r3, #25
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	240d      	movs	r4, #13
 80064fe:	193b      	adds	r3, r7, r4
 8006500:	2107      	movs	r1, #7
 8006502:	400a      	ands	r2, r1
 8006504:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	0f5b      	lsrs	r3, r3, #29
 800650e:	b2da      	uxtb	r2, r3
 8006510:	250c      	movs	r5, #12
 8006512:	197b      	adds	r3, r7, r5
 8006514:	2107      	movs	r1, #7
 8006516:	400a      	ands	r2, r1
 8006518:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800651a:	183b      	adds	r3, r7, r0
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	197a      	adds	r2, r7, r5
 8006520:	7812      	ldrb	r2, [r2, #0]
 8006522:	4914      	ldr	r1, [pc, #80]	; (8006574 <UARTEx_SetNbDataToProcess+0xb4>)
 8006524:	5c8a      	ldrb	r2, [r1, r2]
 8006526:	435a      	muls	r2, r3
 8006528:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800652a:	197b      	adds	r3, r7, r5
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	4a12      	ldr	r2, [pc, #72]	; (8006578 <UARTEx_SetNbDataToProcess+0xb8>)
 8006530:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006532:	0019      	movs	r1, r3
 8006534:	f7f9 fe82 	bl	800023c <__divsi3>
 8006538:	0003      	movs	r3, r0
 800653a:	b299      	uxth	r1, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	226a      	movs	r2, #106	; 0x6a
 8006540:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006542:	19bb      	adds	r3, r7, r6
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	193a      	adds	r2, r7, r4
 8006548:	7812      	ldrb	r2, [r2, #0]
 800654a:	490a      	ldr	r1, [pc, #40]	; (8006574 <UARTEx_SetNbDataToProcess+0xb4>)
 800654c:	5c8a      	ldrb	r2, [r1, r2]
 800654e:	435a      	muls	r2, r3
 8006550:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006552:	193b      	adds	r3, r7, r4
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	4a08      	ldr	r2, [pc, #32]	; (8006578 <UARTEx_SetNbDataToProcess+0xb8>)
 8006558:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800655a:	0019      	movs	r1, r3
 800655c:	f7f9 fe6e 	bl	800023c <__divsi3>
 8006560:	0003      	movs	r3, r0
 8006562:	b299      	uxth	r1, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2268      	movs	r2, #104	; 0x68
 8006568:	5299      	strh	r1, [r3, r2]
}
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	46bd      	mov	sp, r7
 800656e:	b005      	add	sp, #20
 8006570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	08009c18 	.word	0x08009c18
 8006578:	08009c20 	.word	0x08009c20

0800657c <siprintf>:
 800657c:	b40e      	push	{r1, r2, r3}
 800657e:	b500      	push	{lr}
 8006580:	490b      	ldr	r1, [pc, #44]	; (80065b0 <siprintf+0x34>)
 8006582:	b09c      	sub	sp, #112	; 0x70
 8006584:	ab1d      	add	r3, sp, #116	; 0x74
 8006586:	9002      	str	r0, [sp, #8]
 8006588:	9006      	str	r0, [sp, #24]
 800658a:	9107      	str	r1, [sp, #28]
 800658c:	9104      	str	r1, [sp, #16]
 800658e:	4809      	ldr	r0, [pc, #36]	; (80065b4 <siprintf+0x38>)
 8006590:	4909      	ldr	r1, [pc, #36]	; (80065b8 <siprintf+0x3c>)
 8006592:	cb04      	ldmia	r3!, {r2}
 8006594:	9105      	str	r1, [sp, #20]
 8006596:	6800      	ldr	r0, [r0, #0]
 8006598:	a902      	add	r1, sp, #8
 800659a:	9301      	str	r3, [sp, #4]
 800659c:	f000 f9a2 	bl	80068e4 <_svfiprintf_r>
 80065a0:	2200      	movs	r2, #0
 80065a2:	9b02      	ldr	r3, [sp, #8]
 80065a4:	701a      	strb	r2, [r3, #0]
 80065a6:	b01c      	add	sp, #112	; 0x70
 80065a8:	bc08      	pop	{r3}
 80065aa:	b003      	add	sp, #12
 80065ac:	4718      	bx	r3
 80065ae:	46c0      	nop			; (mov r8, r8)
 80065b0:	7fffffff 	.word	0x7fffffff
 80065b4:	20000084 	.word	0x20000084
 80065b8:	ffff0208 	.word	0xffff0208

080065bc <memset>:
 80065bc:	0003      	movs	r3, r0
 80065be:	1882      	adds	r2, r0, r2
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d100      	bne.n	80065c6 <memset+0xa>
 80065c4:	4770      	bx	lr
 80065c6:	7019      	strb	r1, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	e7f9      	b.n	80065c0 <memset+0x4>

080065cc <__errno>:
 80065cc:	4b01      	ldr	r3, [pc, #4]	; (80065d4 <__errno+0x8>)
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	4770      	bx	lr
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	20000084 	.word	0x20000084

080065d8 <__libc_init_array>:
 80065d8:	b570      	push	{r4, r5, r6, lr}
 80065da:	2600      	movs	r6, #0
 80065dc:	4c0c      	ldr	r4, [pc, #48]	; (8006610 <__libc_init_array+0x38>)
 80065de:	4d0d      	ldr	r5, [pc, #52]	; (8006614 <__libc_init_array+0x3c>)
 80065e0:	1b64      	subs	r4, r4, r5
 80065e2:	10a4      	asrs	r4, r4, #2
 80065e4:	42a6      	cmp	r6, r4
 80065e6:	d109      	bne.n	80065fc <__libc_init_array+0x24>
 80065e8:	2600      	movs	r6, #0
 80065ea:	f000 fc6d 	bl	8006ec8 <_init>
 80065ee:	4c0a      	ldr	r4, [pc, #40]	; (8006618 <__libc_init_array+0x40>)
 80065f0:	4d0a      	ldr	r5, [pc, #40]	; (800661c <__libc_init_array+0x44>)
 80065f2:	1b64      	subs	r4, r4, r5
 80065f4:	10a4      	asrs	r4, r4, #2
 80065f6:	42a6      	cmp	r6, r4
 80065f8:	d105      	bne.n	8006606 <__libc_init_array+0x2e>
 80065fa:	bd70      	pop	{r4, r5, r6, pc}
 80065fc:	00b3      	lsls	r3, r6, #2
 80065fe:	58eb      	ldr	r3, [r5, r3]
 8006600:	4798      	blx	r3
 8006602:	3601      	adds	r6, #1
 8006604:	e7ee      	b.n	80065e4 <__libc_init_array+0xc>
 8006606:	00b3      	lsls	r3, r6, #2
 8006608:	58eb      	ldr	r3, [r5, r3]
 800660a:	4798      	blx	r3
 800660c:	3601      	adds	r6, #1
 800660e:	e7f2      	b.n	80065f6 <__libc_init_array+0x1e>
 8006610:	08009c64 	.word	0x08009c64
 8006614:	08009c64 	.word	0x08009c64
 8006618:	08009c68 	.word	0x08009c68
 800661c:	08009c64 	.word	0x08009c64

08006620 <__retarget_lock_acquire_recursive>:
 8006620:	4770      	bx	lr

08006622 <__retarget_lock_release_recursive>:
 8006622:	4770      	bx	lr

08006624 <_free_r>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	0005      	movs	r5, r0
 8006628:	2900      	cmp	r1, #0
 800662a:	d010      	beq.n	800664e <_free_r+0x2a>
 800662c:	1f0c      	subs	r4, r1, #4
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	da00      	bge.n	8006636 <_free_r+0x12>
 8006634:	18e4      	adds	r4, r4, r3
 8006636:	0028      	movs	r0, r5
 8006638:	f000 f8e2 	bl	8006800 <__malloc_lock>
 800663c:	4a1d      	ldr	r2, [pc, #116]	; (80066b4 <_free_r+0x90>)
 800663e:	6813      	ldr	r3, [r2, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d105      	bne.n	8006650 <_free_r+0x2c>
 8006644:	6063      	str	r3, [r4, #4]
 8006646:	6014      	str	r4, [r2, #0]
 8006648:	0028      	movs	r0, r5
 800664a:	f000 f8e1 	bl	8006810 <__malloc_unlock>
 800664e:	bd70      	pop	{r4, r5, r6, pc}
 8006650:	42a3      	cmp	r3, r4
 8006652:	d908      	bls.n	8006666 <_free_r+0x42>
 8006654:	6820      	ldr	r0, [r4, #0]
 8006656:	1821      	adds	r1, r4, r0
 8006658:	428b      	cmp	r3, r1
 800665a:	d1f3      	bne.n	8006644 <_free_r+0x20>
 800665c:	6819      	ldr	r1, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	1809      	adds	r1, r1, r0
 8006662:	6021      	str	r1, [r4, #0]
 8006664:	e7ee      	b.n	8006644 <_free_r+0x20>
 8006666:	001a      	movs	r2, r3
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <_free_r+0x4e>
 800666e:	42a3      	cmp	r3, r4
 8006670:	d9f9      	bls.n	8006666 <_free_r+0x42>
 8006672:	6811      	ldr	r1, [r2, #0]
 8006674:	1850      	adds	r0, r2, r1
 8006676:	42a0      	cmp	r0, r4
 8006678:	d10b      	bne.n	8006692 <_free_r+0x6e>
 800667a:	6820      	ldr	r0, [r4, #0]
 800667c:	1809      	adds	r1, r1, r0
 800667e:	1850      	adds	r0, r2, r1
 8006680:	6011      	str	r1, [r2, #0]
 8006682:	4283      	cmp	r3, r0
 8006684:	d1e0      	bne.n	8006648 <_free_r+0x24>
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	1841      	adds	r1, r0, r1
 800668c:	6011      	str	r1, [r2, #0]
 800668e:	6053      	str	r3, [r2, #4]
 8006690:	e7da      	b.n	8006648 <_free_r+0x24>
 8006692:	42a0      	cmp	r0, r4
 8006694:	d902      	bls.n	800669c <_free_r+0x78>
 8006696:	230c      	movs	r3, #12
 8006698:	602b      	str	r3, [r5, #0]
 800669a:	e7d5      	b.n	8006648 <_free_r+0x24>
 800669c:	6820      	ldr	r0, [r4, #0]
 800669e:	1821      	adds	r1, r4, r0
 80066a0:	428b      	cmp	r3, r1
 80066a2:	d103      	bne.n	80066ac <_free_r+0x88>
 80066a4:	6819      	ldr	r1, [r3, #0]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	1809      	adds	r1, r1, r0
 80066aa:	6021      	str	r1, [r4, #0]
 80066ac:	6063      	str	r3, [r4, #4]
 80066ae:	6054      	str	r4, [r2, #4]
 80066b0:	e7ca      	b.n	8006648 <_free_r+0x24>
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	2000077c 	.word	0x2000077c

080066b8 <sbrk_aligned>:
 80066b8:	b570      	push	{r4, r5, r6, lr}
 80066ba:	4e0f      	ldr	r6, [pc, #60]	; (80066f8 <sbrk_aligned+0x40>)
 80066bc:	000d      	movs	r5, r1
 80066be:	6831      	ldr	r1, [r6, #0]
 80066c0:	0004      	movs	r4, r0
 80066c2:	2900      	cmp	r1, #0
 80066c4:	d102      	bne.n	80066cc <sbrk_aligned+0x14>
 80066c6:	f000 fba1 	bl	8006e0c <_sbrk_r>
 80066ca:	6030      	str	r0, [r6, #0]
 80066cc:	0029      	movs	r1, r5
 80066ce:	0020      	movs	r0, r4
 80066d0:	f000 fb9c 	bl	8006e0c <_sbrk_r>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d00a      	beq.n	80066ee <sbrk_aligned+0x36>
 80066d8:	2303      	movs	r3, #3
 80066da:	1cc5      	adds	r5, r0, #3
 80066dc:	439d      	bics	r5, r3
 80066de:	42a8      	cmp	r0, r5
 80066e0:	d007      	beq.n	80066f2 <sbrk_aligned+0x3a>
 80066e2:	1a29      	subs	r1, r5, r0
 80066e4:	0020      	movs	r0, r4
 80066e6:	f000 fb91 	bl	8006e0c <_sbrk_r>
 80066ea:	3001      	adds	r0, #1
 80066ec:	d101      	bne.n	80066f2 <sbrk_aligned+0x3a>
 80066ee:	2501      	movs	r5, #1
 80066f0:	426d      	negs	r5, r5
 80066f2:	0028      	movs	r0, r5
 80066f4:	bd70      	pop	{r4, r5, r6, pc}
 80066f6:	46c0      	nop			; (mov r8, r8)
 80066f8:	20000780 	.word	0x20000780

080066fc <_malloc_r>:
 80066fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066fe:	2203      	movs	r2, #3
 8006700:	1ccb      	adds	r3, r1, #3
 8006702:	4393      	bics	r3, r2
 8006704:	3308      	adds	r3, #8
 8006706:	0006      	movs	r6, r0
 8006708:	001f      	movs	r7, r3
 800670a:	2b0c      	cmp	r3, #12
 800670c:	d238      	bcs.n	8006780 <_malloc_r+0x84>
 800670e:	270c      	movs	r7, #12
 8006710:	42b9      	cmp	r1, r7
 8006712:	d837      	bhi.n	8006784 <_malloc_r+0x88>
 8006714:	0030      	movs	r0, r6
 8006716:	f000 f873 	bl	8006800 <__malloc_lock>
 800671a:	4b38      	ldr	r3, [pc, #224]	; (80067fc <_malloc_r+0x100>)
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	001c      	movs	r4, r3
 8006722:	2c00      	cmp	r4, #0
 8006724:	d133      	bne.n	800678e <_malloc_r+0x92>
 8006726:	0039      	movs	r1, r7
 8006728:	0030      	movs	r0, r6
 800672a:	f7ff ffc5 	bl	80066b8 <sbrk_aligned>
 800672e:	0004      	movs	r4, r0
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d15e      	bne.n	80067f2 <_malloc_r+0xf6>
 8006734:	9b00      	ldr	r3, [sp, #0]
 8006736:	681c      	ldr	r4, [r3, #0]
 8006738:	0025      	movs	r5, r4
 800673a:	2d00      	cmp	r5, #0
 800673c:	d14e      	bne.n	80067dc <_malloc_r+0xe0>
 800673e:	2c00      	cmp	r4, #0
 8006740:	d051      	beq.n	80067e6 <_malloc_r+0xea>
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	0029      	movs	r1, r5
 8006746:	18e3      	adds	r3, r4, r3
 8006748:	0030      	movs	r0, r6
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	f000 fb5e 	bl	8006e0c <_sbrk_r>
 8006750:	9b01      	ldr	r3, [sp, #4]
 8006752:	4283      	cmp	r3, r0
 8006754:	d147      	bne.n	80067e6 <_malloc_r+0xea>
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	0030      	movs	r0, r6
 800675a:	1aff      	subs	r7, r7, r3
 800675c:	0039      	movs	r1, r7
 800675e:	f7ff ffab 	bl	80066b8 <sbrk_aligned>
 8006762:	3001      	adds	r0, #1
 8006764:	d03f      	beq.n	80067e6 <_malloc_r+0xea>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	19db      	adds	r3, r3, r7
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	9b00      	ldr	r3, [sp, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d040      	beq.n	80067f6 <_malloc_r+0xfa>
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	42a2      	cmp	r2, r4
 8006778:	d133      	bne.n	80067e2 <_malloc_r+0xe6>
 800677a:	2200      	movs	r2, #0
 800677c:	605a      	str	r2, [r3, #4]
 800677e:	e014      	b.n	80067aa <_malloc_r+0xae>
 8006780:	2b00      	cmp	r3, #0
 8006782:	dac5      	bge.n	8006710 <_malloc_r+0x14>
 8006784:	230c      	movs	r3, #12
 8006786:	2500      	movs	r5, #0
 8006788:	6033      	str	r3, [r6, #0]
 800678a:	0028      	movs	r0, r5
 800678c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800678e:	6821      	ldr	r1, [r4, #0]
 8006790:	1bc9      	subs	r1, r1, r7
 8006792:	d420      	bmi.n	80067d6 <_malloc_r+0xda>
 8006794:	290b      	cmp	r1, #11
 8006796:	d918      	bls.n	80067ca <_malloc_r+0xce>
 8006798:	19e2      	adds	r2, r4, r7
 800679a:	6027      	str	r7, [r4, #0]
 800679c:	42a3      	cmp	r3, r4
 800679e:	d112      	bne.n	80067c6 <_malloc_r+0xca>
 80067a0:	9b00      	ldr	r3, [sp, #0]
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	6863      	ldr	r3, [r4, #4]
 80067a6:	6011      	str	r1, [r2, #0]
 80067a8:	6053      	str	r3, [r2, #4]
 80067aa:	0030      	movs	r0, r6
 80067ac:	0025      	movs	r5, r4
 80067ae:	f000 f82f 	bl	8006810 <__malloc_unlock>
 80067b2:	2207      	movs	r2, #7
 80067b4:	350b      	adds	r5, #11
 80067b6:	1d23      	adds	r3, r4, #4
 80067b8:	4395      	bics	r5, r2
 80067ba:	1aea      	subs	r2, r5, r3
 80067bc:	429d      	cmp	r5, r3
 80067be:	d0e4      	beq.n	800678a <_malloc_r+0x8e>
 80067c0:	1b5b      	subs	r3, r3, r5
 80067c2:	50a3      	str	r3, [r4, r2]
 80067c4:	e7e1      	b.n	800678a <_malloc_r+0x8e>
 80067c6:	605a      	str	r2, [r3, #4]
 80067c8:	e7ec      	b.n	80067a4 <_malloc_r+0xa8>
 80067ca:	6862      	ldr	r2, [r4, #4]
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d1d5      	bne.n	800677c <_malloc_r+0x80>
 80067d0:	9b00      	ldr	r3, [sp, #0]
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e7e9      	b.n	80067aa <_malloc_r+0xae>
 80067d6:	0023      	movs	r3, r4
 80067d8:	6864      	ldr	r4, [r4, #4]
 80067da:	e7a2      	b.n	8006722 <_malloc_r+0x26>
 80067dc:	002c      	movs	r4, r5
 80067de:	686d      	ldr	r5, [r5, #4]
 80067e0:	e7ab      	b.n	800673a <_malloc_r+0x3e>
 80067e2:	0013      	movs	r3, r2
 80067e4:	e7c4      	b.n	8006770 <_malloc_r+0x74>
 80067e6:	230c      	movs	r3, #12
 80067e8:	0030      	movs	r0, r6
 80067ea:	6033      	str	r3, [r6, #0]
 80067ec:	f000 f810 	bl	8006810 <__malloc_unlock>
 80067f0:	e7cb      	b.n	800678a <_malloc_r+0x8e>
 80067f2:	6027      	str	r7, [r4, #0]
 80067f4:	e7d9      	b.n	80067aa <_malloc_r+0xae>
 80067f6:	605b      	str	r3, [r3, #4]
 80067f8:	deff      	udf	#255	; 0xff
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	2000077c 	.word	0x2000077c

08006800 <__malloc_lock>:
 8006800:	b510      	push	{r4, lr}
 8006802:	4802      	ldr	r0, [pc, #8]	; (800680c <__malloc_lock+0xc>)
 8006804:	f7ff ff0c 	bl	8006620 <__retarget_lock_acquire_recursive>
 8006808:	bd10      	pop	{r4, pc}
 800680a:	46c0      	nop			; (mov r8, r8)
 800680c:	20000778 	.word	0x20000778

08006810 <__malloc_unlock>:
 8006810:	b510      	push	{r4, lr}
 8006812:	4802      	ldr	r0, [pc, #8]	; (800681c <__malloc_unlock+0xc>)
 8006814:	f7ff ff05 	bl	8006622 <__retarget_lock_release_recursive>
 8006818:	bd10      	pop	{r4, pc}
 800681a:	46c0      	nop			; (mov r8, r8)
 800681c:	20000778 	.word	0x20000778

08006820 <__ssputs_r>:
 8006820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006822:	b085      	sub	sp, #20
 8006824:	9301      	str	r3, [sp, #4]
 8006826:	9203      	str	r2, [sp, #12]
 8006828:	688e      	ldr	r6, [r1, #8]
 800682a:	9a01      	ldr	r2, [sp, #4]
 800682c:	0007      	movs	r7, r0
 800682e:	000c      	movs	r4, r1
 8006830:	680b      	ldr	r3, [r1, #0]
 8006832:	4296      	cmp	r6, r2
 8006834:	d831      	bhi.n	800689a <__ssputs_r+0x7a>
 8006836:	898a      	ldrh	r2, [r1, #12]
 8006838:	2190      	movs	r1, #144	; 0x90
 800683a:	00c9      	lsls	r1, r1, #3
 800683c:	420a      	tst	r2, r1
 800683e:	d029      	beq.n	8006894 <__ssputs_r+0x74>
 8006840:	2003      	movs	r0, #3
 8006842:	6921      	ldr	r1, [r4, #16]
 8006844:	1a5b      	subs	r3, r3, r1
 8006846:	9302      	str	r3, [sp, #8]
 8006848:	6963      	ldr	r3, [r4, #20]
 800684a:	4343      	muls	r3, r0
 800684c:	0fdd      	lsrs	r5, r3, #31
 800684e:	18ed      	adds	r5, r5, r3
 8006850:	9b01      	ldr	r3, [sp, #4]
 8006852:	9802      	ldr	r0, [sp, #8]
 8006854:	3301      	adds	r3, #1
 8006856:	181b      	adds	r3, r3, r0
 8006858:	106d      	asrs	r5, r5, #1
 800685a:	42ab      	cmp	r3, r5
 800685c:	d900      	bls.n	8006860 <__ssputs_r+0x40>
 800685e:	001d      	movs	r5, r3
 8006860:	0552      	lsls	r2, r2, #21
 8006862:	d529      	bpl.n	80068b8 <__ssputs_r+0x98>
 8006864:	0029      	movs	r1, r5
 8006866:	0038      	movs	r0, r7
 8006868:	f7ff ff48 	bl	80066fc <_malloc_r>
 800686c:	1e06      	subs	r6, r0, #0
 800686e:	d02d      	beq.n	80068cc <__ssputs_r+0xac>
 8006870:	9a02      	ldr	r2, [sp, #8]
 8006872:	6921      	ldr	r1, [r4, #16]
 8006874:	f000 fae7 	bl	8006e46 <memcpy>
 8006878:	89a2      	ldrh	r2, [r4, #12]
 800687a:	4b19      	ldr	r3, [pc, #100]	; (80068e0 <__ssputs_r+0xc0>)
 800687c:	401a      	ands	r2, r3
 800687e:	2380      	movs	r3, #128	; 0x80
 8006880:	4313      	orrs	r3, r2
 8006882:	81a3      	strh	r3, [r4, #12]
 8006884:	9b02      	ldr	r3, [sp, #8]
 8006886:	6126      	str	r6, [r4, #16]
 8006888:	18f6      	adds	r6, r6, r3
 800688a:	6026      	str	r6, [r4, #0]
 800688c:	6165      	str	r5, [r4, #20]
 800688e:	9e01      	ldr	r6, [sp, #4]
 8006890:	1aed      	subs	r5, r5, r3
 8006892:	60a5      	str	r5, [r4, #8]
 8006894:	9b01      	ldr	r3, [sp, #4]
 8006896:	429e      	cmp	r6, r3
 8006898:	d900      	bls.n	800689c <__ssputs_r+0x7c>
 800689a:	9e01      	ldr	r6, [sp, #4]
 800689c:	0032      	movs	r2, r6
 800689e:	9903      	ldr	r1, [sp, #12]
 80068a0:	6820      	ldr	r0, [r4, #0]
 80068a2:	f000 fa9f 	bl	8006de4 <memmove>
 80068a6:	2000      	movs	r0, #0
 80068a8:	68a3      	ldr	r3, [r4, #8]
 80068aa:	1b9b      	subs	r3, r3, r6
 80068ac:	60a3      	str	r3, [r4, #8]
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	199b      	adds	r3, r3, r6
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	b005      	add	sp, #20
 80068b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b8:	002a      	movs	r2, r5
 80068ba:	0038      	movs	r0, r7
 80068bc:	f000 facc 	bl	8006e58 <_realloc_r>
 80068c0:	1e06      	subs	r6, r0, #0
 80068c2:	d1df      	bne.n	8006884 <__ssputs_r+0x64>
 80068c4:	0038      	movs	r0, r7
 80068c6:	6921      	ldr	r1, [r4, #16]
 80068c8:	f7ff feac 	bl	8006624 <_free_r>
 80068cc:	230c      	movs	r3, #12
 80068ce:	2001      	movs	r0, #1
 80068d0:	603b      	str	r3, [r7, #0]
 80068d2:	89a2      	ldrh	r2, [r4, #12]
 80068d4:	3334      	adds	r3, #52	; 0x34
 80068d6:	4313      	orrs	r3, r2
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	4240      	negs	r0, r0
 80068dc:	e7ea      	b.n	80068b4 <__ssputs_r+0x94>
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	fffffb7f 	.word	0xfffffb7f

080068e4 <_svfiprintf_r>:
 80068e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068e6:	b0a1      	sub	sp, #132	; 0x84
 80068e8:	9003      	str	r0, [sp, #12]
 80068ea:	001d      	movs	r5, r3
 80068ec:	898b      	ldrh	r3, [r1, #12]
 80068ee:	000f      	movs	r7, r1
 80068f0:	0016      	movs	r6, r2
 80068f2:	061b      	lsls	r3, r3, #24
 80068f4:	d511      	bpl.n	800691a <_svfiprintf_r+0x36>
 80068f6:	690b      	ldr	r3, [r1, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10e      	bne.n	800691a <_svfiprintf_r+0x36>
 80068fc:	2140      	movs	r1, #64	; 0x40
 80068fe:	f7ff fefd 	bl	80066fc <_malloc_r>
 8006902:	6038      	str	r0, [r7, #0]
 8006904:	6138      	str	r0, [r7, #16]
 8006906:	2800      	cmp	r0, #0
 8006908:	d105      	bne.n	8006916 <_svfiprintf_r+0x32>
 800690a:	230c      	movs	r3, #12
 800690c:	9a03      	ldr	r2, [sp, #12]
 800690e:	3801      	subs	r0, #1
 8006910:	6013      	str	r3, [r2, #0]
 8006912:	b021      	add	sp, #132	; 0x84
 8006914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006916:	2340      	movs	r3, #64	; 0x40
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	2300      	movs	r3, #0
 800691c:	ac08      	add	r4, sp, #32
 800691e:	6163      	str	r3, [r4, #20]
 8006920:	3320      	adds	r3, #32
 8006922:	7663      	strb	r3, [r4, #25]
 8006924:	3310      	adds	r3, #16
 8006926:	76a3      	strb	r3, [r4, #26]
 8006928:	9507      	str	r5, [sp, #28]
 800692a:	0035      	movs	r5, r6
 800692c:	782b      	ldrb	r3, [r5, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d001      	beq.n	8006936 <_svfiprintf_r+0x52>
 8006932:	2b25      	cmp	r3, #37	; 0x25
 8006934:	d148      	bne.n	80069c8 <_svfiprintf_r+0xe4>
 8006936:	1bab      	subs	r3, r5, r6
 8006938:	9305      	str	r3, [sp, #20]
 800693a:	42b5      	cmp	r5, r6
 800693c:	d00b      	beq.n	8006956 <_svfiprintf_r+0x72>
 800693e:	0032      	movs	r2, r6
 8006940:	0039      	movs	r1, r7
 8006942:	9803      	ldr	r0, [sp, #12]
 8006944:	f7ff ff6c 	bl	8006820 <__ssputs_r>
 8006948:	3001      	adds	r0, #1
 800694a:	d100      	bne.n	800694e <_svfiprintf_r+0x6a>
 800694c:	e0af      	b.n	8006aae <_svfiprintf_r+0x1ca>
 800694e:	6963      	ldr	r3, [r4, #20]
 8006950:	9a05      	ldr	r2, [sp, #20]
 8006952:	189b      	adds	r3, r3, r2
 8006954:	6163      	str	r3, [r4, #20]
 8006956:	782b      	ldrb	r3, [r5, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d100      	bne.n	800695e <_svfiprintf_r+0x7a>
 800695c:	e0a7      	b.n	8006aae <_svfiprintf_r+0x1ca>
 800695e:	2201      	movs	r2, #1
 8006960:	2300      	movs	r3, #0
 8006962:	4252      	negs	r2, r2
 8006964:	6062      	str	r2, [r4, #4]
 8006966:	a904      	add	r1, sp, #16
 8006968:	3254      	adds	r2, #84	; 0x54
 800696a:	1852      	adds	r2, r2, r1
 800696c:	1c6e      	adds	r6, r5, #1
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	60e3      	str	r3, [r4, #12]
 8006972:	60a3      	str	r3, [r4, #8]
 8006974:	7013      	strb	r3, [r2, #0]
 8006976:	65a3      	str	r3, [r4, #88]	; 0x58
 8006978:	4b55      	ldr	r3, [pc, #340]	; (8006ad0 <_svfiprintf_r+0x1ec>)
 800697a:	2205      	movs	r2, #5
 800697c:	0018      	movs	r0, r3
 800697e:	7831      	ldrb	r1, [r6, #0]
 8006980:	9305      	str	r3, [sp, #20]
 8006982:	f000 fa55 	bl	8006e30 <memchr>
 8006986:	1c75      	adds	r5, r6, #1
 8006988:	2800      	cmp	r0, #0
 800698a:	d11f      	bne.n	80069cc <_svfiprintf_r+0xe8>
 800698c:	6822      	ldr	r2, [r4, #0]
 800698e:	06d3      	lsls	r3, r2, #27
 8006990:	d504      	bpl.n	800699c <_svfiprintf_r+0xb8>
 8006992:	2353      	movs	r3, #83	; 0x53
 8006994:	a904      	add	r1, sp, #16
 8006996:	185b      	adds	r3, r3, r1
 8006998:	2120      	movs	r1, #32
 800699a:	7019      	strb	r1, [r3, #0]
 800699c:	0713      	lsls	r3, r2, #28
 800699e:	d504      	bpl.n	80069aa <_svfiprintf_r+0xc6>
 80069a0:	2353      	movs	r3, #83	; 0x53
 80069a2:	a904      	add	r1, sp, #16
 80069a4:	185b      	adds	r3, r3, r1
 80069a6:	212b      	movs	r1, #43	; 0x2b
 80069a8:	7019      	strb	r1, [r3, #0]
 80069aa:	7833      	ldrb	r3, [r6, #0]
 80069ac:	2b2a      	cmp	r3, #42	; 0x2a
 80069ae:	d016      	beq.n	80069de <_svfiprintf_r+0xfa>
 80069b0:	0035      	movs	r5, r6
 80069b2:	2100      	movs	r1, #0
 80069b4:	200a      	movs	r0, #10
 80069b6:	68e3      	ldr	r3, [r4, #12]
 80069b8:	782a      	ldrb	r2, [r5, #0]
 80069ba:	1c6e      	adds	r6, r5, #1
 80069bc:	3a30      	subs	r2, #48	; 0x30
 80069be:	2a09      	cmp	r2, #9
 80069c0:	d94e      	bls.n	8006a60 <_svfiprintf_r+0x17c>
 80069c2:	2900      	cmp	r1, #0
 80069c4:	d111      	bne.n	80069ea <_svfiprintf_r+0x106>
 80069c6:	e017      	b.n	80069f8 <_svfiprintf_r+0x114>
 80069c8:	3501      	adds	r5, #1
 80069ca:	e7af      	b.n	800692c <_svfiprintf_r+0x48>
 80069cc:	9b05      	ldr	r3, [sp, #20]
 80069ce:	6822      	ldr	r2, [r4, #0]
 80069d0:	1ac0      	subs	r0, r0, r3
 80069d2:	2301      	movs	r3, #1
 80069d4:	4083      	lsls	r3, r0
 80069d6:	4313      	orrs	r3, r2
 80069d8:	002e      	movs	r6, r5
 80069da:	6023      	str	r3, [r4, #0]
 80069dc:	e7cc      	b.n	8006978 <_svfiprintf_r+0x94>
 80069de:	9b07      	ldr	r3, [sp, #28]
 80069e0:	1d19      	adds	r1, r3, #4
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	9107      	str	r1, [sp, #28]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	db01      	blt.n	80069ee <_svfiprintf_r+0x10a>
 80069ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ec:	e004      	b.n	80069f8 <_svfiprintf_r+0x114>
 80069ee:	425b      	negs	r3, r3
 80069f0:	60e3      	str	r3, [r4, #12]
 80069f2:	2302      	movs	r3, #2
 80069f4:	4313      	orrs	r3, r2
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	782b      	ldrb	r3, [r5, #0]
 80069fa:	2b2e      	cmp	r3, #46	; 0x2e
 80069fc:	d10a      	bne.n	8006a14 <_svfiprintf_r+0x130>
 80069fe:	786b      	ldrb	r3, [r5, #1]
 8006a00:	2b2a      	cmp	r3, #42	; 0x2a
 8006a02:	d135      	bne.n	8006a70 <_svfiprintf_r+0x18c>
 8006a04:	9b07      	ldr	r3, [sp, #28]
 8006a06:	3502      	adds	r5, #2
 8006a08:	1d1a      	adds	r2, r3, #4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	9207      	str	r2, [sp, #28]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	db2b      	blt.n	8006a6a <_svfiprintf_r+0x186>
 8006a12:	9309      	str	r3, [sp, #36]	; 0x24
 8006a14:	4e2f      	ldr	r6, [pc, #188]	; (8006ad4 <_svfiprintf_r+0x1f0>)
 8006a16:	2203      	movs	r2, #3
 8006a18:	0030      	movs	r0, r6
 8006a1a:	7829      	ldrb	r1, [r5, #0]
 8006a1c:	f000 fa08 	bl	8006e30 <memchr>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	d006      	beq.n	8006a32 <_svfiprintf_r+0x14e>
 8006a24:	2340      	movs	r3, #64	; 0x40
 8006a26:	1b80      	subs	r0, r0, r6
 8006a28:	4083      	lsls	r3, r0
 8006a2a:	6822      	ldr	r2, [r4, #0]
 8006a2c:	3501      	adds	r5, #1
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	7829      	ldrb	r1, [r5, #0]
 8006a34:	2206      	movs	r2, #6
 8006a36:	4828      	ldr	r0, [pc, #160]	; (8006ad8 <_svfiprintf_r+0x1f4>)
 8006a38:	1c6e      	adds	r6, r5, #1
 8006a3a:	7621      	strb	r1, [r4, #24]
 8006a3c:	f000 f9f8 	bl	8006e30 <memchr>
 8006a40:	2800      	cmp	r0, #0
 8006a42:	d03c      	beq.n	8006abe <_svfiprintf_r+0x1da>
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <_svfiprintf_r+0x1f8>)
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d125      	bne.n	8006a96 <_svfiprintf_r+0x1b2>
 8006a4a:	2207      	movs	r2, #7
 8006a4c:	9b07      	ldr	r3, [sp, #28]
 8006a4e:	3307      	adds	r3, #7
 8006a50:	4393      	bics	r3, r2
 8006a52:	3308      	adds	r3, #8
 8006a54:	9307      	str	r3, [sp, #28]
 8006a56:	6963      	ldr	r3, [r4, #20]
 8006a58:	9a04      	ldr	r2, [sp, #16]
 8006a5a:	189b      	adds	r3, r3, r2
 8006a5c:	6163      	str	r3, [r4, #20]
 8006a5e:	e764      	b.n	800692a <_svfiprintf_r+0x46>
 8006a60:	4343      	muls	r3, r0
 8006a62:	0035      	movs	r5, r6
 8006a64:	2101      	movs	r1, #1
 8006a66:	189b      	adds	r3, r3, r2
 8006a68:	e7a6      	b.n	80069b8 <_svfiprintf_r+0xd4>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	425b      	negs	r3, r3
 8006a6e:	e7d0      	b.n	8006a12 <_svfiprintf_r+0x12e>
 8006a70:	2300      	movs	r3, #0
 8006a72:	200a      	movs	r0, #10
 8006a74:	001a      	movs	r2, r3
 8006a76:	3501      	adds	r5, #1
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	7829      	ldrb	r1, [r5, #0]
 8006a7c:	1c6e      	adds	r6, r5, #1
 8006a7e:	3930      	subs	r1, #48	; 0x30
 8006a80:	2909      	cmp	r1, #9
 8006a82:	d903      	bls.n	8006a8c <_svfiprintf_r+0x1a8>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0c5      	beq.n	8006a14 <_svfiprintf_r+0x130>
 8006a88:	9209      	str	r2, [sp, #36]	; 0x24
 8006a8a:	e7c3      	b.n	8006a14 <_svfiprintf_r+0x130>
 8006a8c:	4342      	muls	r2, r0
 8006a8e:	0035      	movs	r5, r6
 8006a90:	2301      	movs	r3, #1
 8006a92:	1852      	adds	r2, r2, r1
 8006a94:	e7f1      	b.n	8006a7a <_svfiprintf_r+0x196>
 8006a96:	aa07      	add	r2, sp, #28
 8006a98:	9200      	str	r2, [sp, #0]
 8006a9a:	0021      	movs	r1, r4
 8006a9c:	003a      	movs	r2, r7
 8006a9e:	4b10      	ldr	r3, [pc, #64]	; (8006ae0 <_svfiprintf_r+0x1fc>)
 8006aa0:	9803      	ldr	r0, [sp, #12]
 8006aa2:	e000      	b.n	8006aa6 <_svfiprintf_r+0x1c2>
 8006aa4:	bf00      	nop
 8006aa6:	9004      	str	r0, [sp, #16]
 8006aa8:	9b04      	ldr	r3, [sp, #16]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	d1d3      	bne.n	8006a56 <_svfiprintf_r+0x172>
 8006aae:	89bb      	ldrh	r3, [r7, #12]
 8006ab0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006ab2:	065b      	lsls	r3, r3, #25
 8006ab4:	d400      	bmi.n	8006ab8 <_svfiprintf_r+0x1d4>
 8006ab6:	e72c      	b.n	8006912 <_svfiprintf_r+0x2e>
 8006ab8:	2001      	movs	r0, #1
 8006aba:	4240      	negs	r0, r0
 8006abc:	e729      	b.n	8006912 <_svfiprintf_r+0x2e>
 8006abe:	aa07      	add	r2, sp, #28
 8006ac0:	9200      	str	r2, [sp, #0]
 8006ac2:	0021      	movs	r1, r4
 8006ac4:	003a      	movs	r2, r7
 8006ac6:	4b06      	ldr	r3, [pc, #24]	; (8006ae0 <_svfiprintf_r+0x1fc>)
 8006ac8:	9803      	ldr	r0, [sp, #12]
 8006aca:	f000 f87b 	bl	8006bc4 <_printf_i>
 8006ace:	e7ea      	b.n	8006aa6 <_svfiprintf_r+0x1c2>
 8006ad0:	08009c28 	.word	0x08009c28
 8006ad4:	08009c2e 	.word	0x08009c2e
 8006ad8:	08009c32 	.word	0x08009c32
 8006adc:	00000000 	.word	0x00000000
 8006ae0:	08006821 	.word	0x08006821

08006ae4 <_printf_common>:
 8006ae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ae6:	0016      	movs	r6, r2
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	688a      	ldr	r2, [r1, #8]
 8006aec:	690b      	ldr	r3, [r1, #16]
 8006aee:	000c      	movs	r4, r1
 8006af0:	9000      	str	r0, [sp, #0]
 8006af2:	4293      	cmp	r3, r2
 8006af4:	da00      	bge.n	8006af8 <_printf_common+0x14>
 8006af6:	0013      	movs	r3, r2
 8006af8:	0022      	movs	r2, r4
 8006afa:	6033      	str	r3, [r6, #0]
 8006afc:	3243      	adds	r2, #67	; 0x43
 8006afe:	7812      	ldrb	r2, [r2, #0]
 8006b00:	2a00      	cmp	r2, #0
 8006b02:	d001      	beq.n	8006b08 <_printf_common+0x24>
 8006b04:	3301      	adds	r3, #1
 8006b06:	6033      	str	r3, [r6, #0]
 8006b08:	6823      	ldr	r3, [r4, #0]
 8006b0a:	069b      	lsls	r3, r3, #26
 8006b0c:	d502      	bpl.n	8006b14 <_printf_common+0x30>
 8006b0e:	6833      	ldr	r3, [r6, #0]
 8006b10:	3302      	adds	r3, #2
 8006b12:	6033      	str	r3, [r6, #0]
 8006b14:	6822      	ldr	r2, [r4, #0]
 8006b16:	2306      	movs	r3, #6
 8006b18:	0015      	movs	r5, r2
 8006b1a:	401d      	ands	r5, r3
 8006b1c:	421a      	tst	r2, r3
 8006b1e:	d027      	beq.n	8006b70 <_printf_common+0x8c>
 8006b20:	0023      	movs	r3, r4
 8006b22:	3343      	adds	r3, #67	; 0x43
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	1e5a      	subs	r2, r3, #1
 8006b28:	4193      	sbcs	r3, r2
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	0692      	lsls	r2, r2, #26
 8006b2e:	d430      	bmi.n	8006b92 <_printf_common+0xae>
 8006b30:	0022      	movs	r2, r4
 8006b32:	9901      	ldr	r1, [sp, #4]
 8006b34:	9800      	ldr	r0, [sp, #0]
 8006b36:	9d08      	ldr	r5, [sp, #32]
 8006b38:	3243      	adds	r2, #67	; 0x43
 8006b3a:	47a8      	blx	r5
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d025      	beq.n	8006b8c <_printf_common+0xa8>
 8006b40:	2206      	movs	r2, #6
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	2500      	movs	r5, #0
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	d105      	bne.n	8006b58 <_printf_common+0x74>
 8006b4c:	6833      	ldr	r3, [r6, #0]
 8006b4e:	68e5      	ldr	r5, [r4, #12]
 8006b50:	1aed      	subs	r5, r5, r3
 8006b52:	43eb      	mvns	r3, r5
 8006b54:	17db      	asrs	r3, r3, #31
 8006b56:	401d      	ands	r5, r3
 8006b58:	68a3      	ldr	r3, [r4, #8]
 8006b5a:	6922      	ldr	r2, [r4, #16]
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	dd01      	ble.n	8006b64 <_printf_common+0x80>
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	18ed      	adds	r5, r5, r3
 8006b64:	2600      	movs	r6, #0
 8006b66:	42b5      	cmp	r5, r6
 8006b68:	d120      	bne.n	8006bac <_printf_common+0xc8>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e010      	b.n	8006b90 <_printf_common+0xac>
 8006b6e:	3501      	adds	r5, #1
 8006b70:	68e3      	ldr	r3, [r4, #12]
 8006b72:	6832      	ldr	r2, [r6, #0]
 8006b74:	1a9b      	subs	r3, r3, r2
 8006b76:	42ab      	cmp	r3, r5
 8006b78:	ddd2      	ble.n	8006b20 <_printf_common+0x3c>
 8006b7a:	0022      	movs	r2, r4
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	9901      	ldr	r1, [sp, #4]
 8006b80:	9800      	ldr	r0, [sp, #0]
 8006b82:	9f08      	ldr	r7, [sp, #32]
 8006b84:	3219      	adds	r2, #25
 8006b86:	47b8      	blx	r7
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d1f0      	bne.n	8006b6e <_printf_common+0x8a>
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	4240      	negs	r0, r0
 8006b90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b92:	2030      	movs	r0, #48	; 0x30
 8006b94:	18e1      	adds	r1, r4, r3
 8006b96:	3143      	adds	r1, #67	; 0x43
 8006b98:	7008      	strb	r0, [r1, #0]
 8006b9a:	0021      	movs	r1, r4
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	3145      	adds	r1, #69	; 0x45
 8006ba0:	7809      	ldrb	r1, [r1, #0]
 8006ba2:	18a2      	adds	r2, r4, r2
 8006ba4:	3243      	adds	r2, #67	; 0x43
 8006ba6:	3302      	adds	r3, #2
 8006ba8:	7011      	strb	r1, [r2, #0]
 8006baa:	e7c1      	b.n	8006b30 <_printf_common+0x4c>
 8006bac:	0022      	movs	r2, r4
 8006bae:	2301      	movs	r3, #1
 8006bb0:	9901      	ldr	r1, [sp, #4]
 8006bb2:	9800      	ldr	r0, [sp, #0]
 8006bb4:	9f08      	ldr	r7, [sp, #32]
 8006bb6:	321a      	adds	r2, #26
 8006bb8:	47b8      	blx	r7
 8006bba:	3001      	adds	r0, #1
 8006bbc:	d0e6      	beq.n	8006b8c <_printf_common+0xa8>
 8006bbe:	3601      	adds	r6, #1
 8006bc0:	e7d1      	b.n	8006b66 <_printf_common+0x82>
	...

08006bc4 <_printf_i>:
 8006bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bc6:	b08b      	sub	sp, #44	; 0x2c
 8006bc8:	9206      	str	r2, [sp, #24]
 8006bca:	000a      	movs	r2, r1
 8006bcc:	3243      	adds	r2, #67	; 0x43
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	9005      	str	r0, [sp, #20]
 8006bd2:	9204      	str	r2, [sp, #16]
 8006bd4:	7e0a      	ldrb	r2, [r1, #24]
 8006bd6:	000c      	movs	r4, r1
 8006bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006bda:	2a78      	cmp	r2, #120	; 0x78
 8006bdc:	d809      	bhi.n	8006bf2 <_printf_i+0x2e>
 8006bde:	2a62      	cmp	r2, #98	; 0x62
 8006be0:	d80b      	bhi.n	8006bfa <_printf_i+0x36>
 8006be2:	2a00      	cmp	r2, #0
 8006be4:	d100      	bne.n	8006be8 <_printf_i+0x24>
 8006be6:	e0be      	b.n	8006d66 <_printf_i+0x1a2>
 8006be8:	497c      	ldr	r1, [pc, #496]	; (8006ddc <_printf_i+0x218>)
 8006bea:	9103      	str	r1, [sp, #12]
 8006bec:	2a58      	cmp	r2, #88	; 0x58
 8006bee:	d100      	bne.n	8006bf2 <_printf_i+0x2e>
 8006bf0:	e093      	b.n	8006d1a <_printf_i+0x156>
 8006bf2:	0026      	movs	r6, r4
 8006bf4:	3642      	adds	r6, #66	; 0x42
 8006bf6:	7032      	strb	r2, [r6, #0]
 8006bf8:	e022      	b.n	8006c40 <_printf_i+0x7c>
 8006bfa:	0010      	movs	r0, r2
 8006bfc:	3863      	subs	r0, #99	; 0x63
 8006bfe:	2815      	cmp	r0, #21
 8006c00:	d8f7      	bhi.n	8006bf2 <_printf_i+0x2e>
 8006c02:	f7f9 fa87 	bl	8000114 <__gnu_thumb1_case_shi>
 8006c06:	0016      	.short	0x0016
 8006c08:	fff6001f 	.word	0xfff6001f
 8006c0c:	fff6fff6 	.word	0xfff6fff6
 8006c10:	001ffff6 	.word	0x001ffff6
 8006c14:	fff6fff6 	.word	0xfff6fff6
 8006c18:	fff6fff6 	.word	0xfff6fff6
 8006c1c:	003600a3 	.word	0x003600a3
 8006c20:	fff60083 	.word	0xfff60083
 8006c24:	00b4fff6 	.word	0x00b4fff6
 8006c28:	0036fff6 	.word	0x0036fff6
 8006c2c:	fff6fff6 	.word	0xfff6fff6
 8006c30:	0087      	.short	0x0087
 8006c32:	0026      	movs	r6, r4
 8006c34:	681a      	ldr	r2, [r3, #0]
 8006c36:	3642      	adds	r6, #66	; 0x42
 8006c38:	1d11      	adds	r1, r2, #4
 8006c3a:	6019      	str	r1, [r3, #0]
 8006c3c:	6813      	ldr	r3, [r2, #0]
 8006c3e:	7033      	strb	r3, [r6, #0]
 8006c40:	2301      	movs	r3, #1
 8006c42:	e0a2      	b.n	8006d8a <_printf_i+0x1c6>
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	6809      	ldr	r1, [r1, #0]
 8006c48:	1d02      	adds	r2, r0, #4
 8006c4a:	060d      	lsls	r5, r1, #24
 8006c4c:	d50b      	bpl.n	8006c66 <_printf_i+0xa2>
 8006c4e:	6805      	ldr	r5, [r0, #0]
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	2d00      	cmp	r5, #0
 8006c54:	da03      	bge.n	8006c5e <_printf_i+0x9a>
 8006c56:	232d      	movs	r3, #45	; 0x2d
 8006c58:	9a04      	ldr	r2, [sp, #16]
 8006c5a:	426d      	negs	r5, r5
 8006c5c:	7013      	strb	r3, [r2, #0]
 8006c5e:	4b5f      	ldr	r3, [pc, #380]	; (8006ddc <_printf_i+0x218>)
 8006c60:	270a      	movs	r7, #10
 8006c62:	9303      	str	r3, [sp, #12]
 8006c64:	e01b      	b.n	8006c9e <_printf_i+0xda>
 8006c66:	6805      	ldr	r5, [r0, #0]
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	0649      	lsls	r1, r1, #25
 8006c6c:	d5f1      	bpl.n	8006c52 <_printf_i+0x8e>
 8006c6e:	b22d      	sxth	r5, r5
 8006c70:	e7ef      	b.n	8006c52 <_printf_i+0x8e>
 8006c72:	680d      	ldr	r5, [r1, #0]
 8006c74:	6819      	ldr	r1, [r3, #0]
 8006c76:	1d08      	adds	r0, r1, #4
 8006c78:	6018      	str	r0, [r3, #0]
 8006c7a:	062e      	lsls	r6, r5, #24
 8006c7c:	d501      	bpl.n	8006c82 <_printf_i+0xbe>
 8006c7e:	680d      	ldr	r5, [r1, #0]
 8006c80:	e003      	b.n	8006c8a <_printf_i+0xc6>
 8006c82:	066d      	lsls	r5, r5, #25
 8006c84:	d5fb      	bpl.n	8006c7e <_printf_i+0xba>
 8006c86:	680d      	ldr	r5, [r1, #0]
 8006c88:	b2ad      	uxth	r5, r5
 8006c8a:	4b54      	ldr	r3, [pc, #336]	; (8006ddc <_printf_i+0x218>)
 8006c8c:	2708      	movs	r7, #8
 8006c8e:	9303      	str	r3, [sp, #12]
 8006c90:	2a6f      	cmp	r2, #111	; 0x6f
 8006c92:	d000      	beq.n	8006c96 <_printf_i+0xd2>
 8006c94:	3702      	adds	r7, #2
 8006c96:	0023      	movs	r3, r4
 8006c98:	2200      	movs	r2, #0
 8006c9a:	3343      	adds	r3, #67	; 0x43
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	6863      	ldr	r3, [r4, #4]
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	db03      	blt.n	8006cae <_printf_i+0xea>
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	6822      	ldr	r2, [r4, #0]
 8006caa:	438a      	bics	r2, r1
 8006cac:	6022      	str	r2, [r4, #0]
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	d102      	bne.n	8006cb8 <_printf_i+0xf4>
 8006cb2:	9e04      	ldr	r6, [sp, #16]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00c      	beq.n	8006cd2 <_printf_i+0x10e>
 8006cb8:	9e04      	ldr	r6, [sp, #16]
 8006cba:	0028      	movs	r0, r5
 8006cbc:	0039      	movs	r1, r7
 8006cbe:	f7f9 fab9 	bl	8000234 <__aeabi_uidivmod>
 8006cc2:	9b03      	ldr	r3, [sp, #12]
 8006cc4:	3e01      	subs	r6, #1
 8006cc6:	5c5b      	ldrb	r3, [r3, r1]
 8006cc8:	7033      	strb	r3, [r6, #0]
 8006cca:	002b      	movs	r3, r5
 8006ccc:	0005      	movs	r5, r0
 8006cce:	429f      	cmp	r7, r3
 8006cd0:	d9f3      	bls.n	8006cba <_printf_i+0xf6>
 8006cd2:	2f08      	cmp	r7, #8
 8006cd4:	d109      	bne.n	8006cea <_printf_i+0x126>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	07db      	lsls	r3, r3, #31
 8006cda:	d506      	bpl.n	8006cea <_printf_i+0x126>
 8006cdc:	6862      	ldr	r2, [r4, #4]
 8006cde:	6923      	ldr	r3, [r4, #16]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	dc02      	bgt.n	8006cea <_printf_i+0x126>
 8006ce4:	2330      	movs	r3, #48	; 0x30
 8006ce6:	3e01      	subs	r6, #1
 8006ce8:	7033      	strb	r3, [r6, #0]
 8006cea:	9b04      	ldr	r3, [sp, #16]
 8006cec:	1b9b      	subs	r3, r3, r6
 8006cee:	6123      	str	r3, [r4, #16]
 8006cf0:	9b07      	ldr	r3, [sp, #28]
 8006cf2:	0021      	movs	r1, r4
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	9805      	ldr	r0, [sp, #20]
 8006cf8:	9b06      	ldr	r3, [sp, #24]
 8006cfa:	aa09      	add	r2, sp, #36	; 0x24
 8006cfc:	f7ff fef2 	bl	8006ae4 <_printf_common>
 8006d00:	3001      	adds	r0, #1
 8006d02:	d147      	bne.n	8006d94 <_printf_i+0x1d0>
 8006d04:	2001      	movs	r0, #1
 8006d06:	4240      	negs	r0, r0
 8006d08:	b00b      	add	sp, #44	; 0x2c
 8006d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	6809      	ldr	r1, [r1, #0]
 8006d10:	430a      	orrs	r2, r1
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	2278      	movs	r2, #120	; 0x78
 8006d16:	4932      	ldr	r1, [pc, #200]	; (8006de0 <_printf_i+0x21c>)
 8006d18:	9103      	str	r1, [sp, #12]
 8006d1a:	0021      	movs	r1, r4
 8006d1c:	3145      	adds	r1, #69	; 0x45
 8006d1e:	700a      	strb	r2, [r1, #0]
 8006d20:	6819      	ldr	r1, [r3, #0]
 8006d22:	6822      	ldr	r2, [r4, #0]
 8006d24:	c920      	ldmia	r1!, {r5}
 8006d26:	0610      	lsls	r0, r2, #24
 8006d28:	d402      	bmi.n	8006d30 <_printf_i+0x16c>
 8006d2a:	0650      	lsls	r0, r2, #25
 8006d2c:	d500      	bpl.n	8006d30 <_printf_i+0x16c>
 8006d2e:	b2ad      	uxth	r5, r5
 8006d30:	6019      	str	r1, [r3, #0]
 8006d32:	07d3      	lsls	r3, r2, #31
 8006d34:	d502      	bpl.n	8006d3c <_printf_i+0x178>
 8006d36:	2320      	movs	r3, #32
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	6023      	str	r3, [r4, #0]
 8006d3c:	2710      	movs	r7, #16
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	d1a9      	bne.n	8006c96 <_printf_i+0xd2>
 8006d42:	2220      	movs	r2, #32
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	4393      	bics	r3, r2
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	e7a4      	b.n	8006c96 <_printf_i+0xd2>
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	680d      	ldr	r5, [r1, #0]
 8006d50:	1d10      	adds	r0, r2, #4
 8006d52:	6949      	ldr	r1, [r1, #20]
 8006d54:	6018      	str	r0, [r3, #0]
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	062e      	lsls	r6, r5, #24
 8006d5a:	d501      	bpl.n	8006d60 <_printf_i+0x19c>
 8006d5c:	6019      	str	r1, [r3, #0]
 8006d5e:	e002      	b.n	8006d66 <_printf_i+0x1a2>
 8006d60:	066d      	lsls	r5, r5, #25
 8006d62:	d5fb      	bpl.n	8006d5c <_printf_i+0x198>
 8006d64:	8019      	strh	r1, [r3, #0]
 8006d66:	2300      	movs	r3, #0
 8006d68:	9e04      	ldr	r6, [sp, #16]
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	e7c0      	b.n	8006cf0 <_printf_i+0x12c>
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	1d11      	adds	r1, r2, #4
 8006d72:	6019      	str	r1, [r3, #0]
 8006d74:	6816      	ldr	r6, [r2, #0]
 8006d76:	2100      	movs	r1, #0
 8006d78:	0030      	movs	r0, r6
 8006d7a:	6862      	ldr	r2, [r4, #4]
 8006d7c:	f000 f858 	bl	8006e30 <memchr>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d001      	beq.n	8006d88 <_printf_i+0x1c4>
 8006d84:	1b80      	subs	r0, r0, r6
 8006d86:	6060      	str	r0, [r4, #4]
 8006d88:	6863      	ldr	r3, [r4, #4]
 8006d8a:	6123      	str	r3, [r4, #16]
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	9a04      	ldr	r2, [sp, #16]
 8006d90:	7013      	strb	r3, [r2, #0]
 8006d92:	e7ad      	b.n	8006cf0 <_printf_i+0x12c>
 8006d94:	0032      	movs	r2, r6
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	9906      	ldr	r1, [sp, #24]
 8006d9a:	9805      	ldr	r0, [sp, #20]
 8006d9c:	9d07      	ldr	r5, [sp, #28]
 8006d9e:	47a8      	blx	r5
 8006da0:	3001      	adds	r0, #1
 8006da2:	d0af      	beq.n	8006d04 <_printf_i+0x140>
 8006da4:	6823      	ldr	r3, [r4, #0]
 8006da6:	079b      	lsls	r3, r3, #30
 8006da8:	d415      	bmi.n	8006dd6 <_printf_i+0x212>
 8006daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dac:	68e0      	ldr	r0, [r4, #12]
 8006dae:	4298      	cmp	r0, r3
 8006db0:	daaa      	bge.n	8006d08 <_printf_i+0x144>
 8006db2:	0018      	movs	r0, r3
 8006db4:	e7a8      	b.n	8006d08 <_printf_i+0x144>
 8006db6:	0022      	movs	r2, r4
 8006db8:	2301      	movs	r3, #1
 8006dba:	9906      	ldr	r1, [sp, #24]
 8006dbc:	9805      	ldr	r0, [sp, #20]
 8006dbe:	9e07      	ldr	r6, [sp, #28]
 8006dc0:	3219      	adds	r2, #25
 8006dc2:	47b0      	blx	r6
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d09d      	beq.n	8006d04 <_printf_i+0x140>
 8006dc8:	3501      	adds	r5, #1
 8006dca:	68e3      	ldr	r3, [r4, #12]
 8006dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dce:	1a9b      	subs	r3, r3, r2
 8006dd0:	42ab      	cmp	r3, r5
 8006dd2:	dcf0      	bgt.n	8006db6 <_printf_i+0x1f2>
 8006dd4:	e7e9      	b.n	8006daa <_printf_i+0x1e6>
 8006dd6:	2500      	movs	r5, #0
 8006dd8:	e7f7      	b.n	8006dca <_printf_i+0x206>
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	08009c39 	.word	0x08009c39
 8006de0:	08009c4a 	.word	0x08009c4a

08006de4 <memmove>:
 8006de4:	b510      	push	{r4, lr}
 8006de6:	4288      	cmp	r0, r1
 8006de8:	d902      	bls.n	8006df0 <memmove+0xc>
 8006dea:	188b      	adds	r3, r1, r2
 8006dec:	4298      	cmp	r0, r3
 8006dee:	d303      	bcc.n	8006df8 <memmove+0x14>
 8006df0:	2300      	movs	r3, #0
 8006df2:	e007      	b.n	8006e04 <memmove+0x20>
 8006df4:	5c8b      	ldrb	r3, [r1, r2]
 8006df6:	5483      	strb	r3, [r0, r2]
 8006df8:	3a01      	subs	r2, #1
 8006dfa:	d2fb      	bcs.n	8006df4 <memmove+0x10>
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	5ccc      	ldrb	r4, [r1, r3]
 8006e00:	54c4      	strb	r4, [r0, r3]
 8006e02:	3301      	adds	r3, #1
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d1fa      	bne.n	8006dfe <memmove+0x1a>
 8006e08:	e7f8      	b.n	8006dfc <memmove+0x18>
	...

08006e0c <_sbrk_r>:
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	b570      	push	{r4, r5, r6, lr}
 8006e10:	4d06      	ldr	r5, [pc, #24]	; (8006e2c <_sbrk_r+0x20>)
 8006e12:	0004      	movs	r4, r0
 8006e14:	0008      	movs	r0, r1
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	f7fb fef6 	bl	8002c08 <_sbrk>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d103      	bne.n	8006e28 <_sbrk_r+0x1c>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d000      	beq.n	8006e28 <_sbrk_r+0x1c>
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	bd70      	pop	{r4, r5, r6, pc}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	20000774 	.word	0x20000774

08006e30 <memchr>:
 8006e30:	b2c9      	uxtb	r1, r1
 8006e32:	1882      	adds	r2, r0, r2
 8006e34:	4290      	cmp	r0, r2
 8006e36:	d101      	bne.n	8006e3c <memchr+0xc>
 8006e38:	2000      	movs	r0, #0
 8006e3a:	4770      	bx	lr
 8006e3c:	7803      	ldrb	r3, [r0, #0]
 8006e3e:	428b      	cmp	r3, r1
 8006e40:	d0fb      	beq.n	8006e3a <memchr+0xa>
 8006e42:	3001      	adds	r0, #1
 8006e44:	e7f6      	b.n	8006e34 <memchr+0x4>

08006e46 <memcpy>:
 8006e46:	2300      	movs	r3, #0
 8006e48:	b510      	push	{r4, lr}
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d100      	bne.n	8006e50 <memcpy+0xa>
 8006e4e:	bd10      	pop	{r4, pc}
 8006e50:	5ccc      	ldrb	r4, [r1, r3]
 8006e52:	54c4      	strb	r4, [r0, r3]
 8006e54:	3301      	adds	r3, #1
 8006e56:	e7f8      	b.n	8006e4a <memcpy+0x4>

08006e58 <_realloc_r>:
 8006e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e5a:	0007      	movs	r7, r0
 8006e5c:	000e      	movs	r6, r1
 8006e5e:	0014      	movs	r4, r2
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d105      	bne.n	8006e70 <_realloc_r+0x18>
 8006e64:	0011      	movs	r1, r2
 8006e66:	f7ff fc49 	bl	80066fc <_malloc_r>
 8006e6a:	0005      	movs	r5, r0
 8006e6c:	0028      	movs	r0, r5
 8006e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	d103      	bne.n	8006e7c <_realloc_r+0x24>
 8006e74:	f7ff fbd6 	bl	8006624 <_free_r>
 8006e78:	0025      	movs	r5, r4
 8006e7a:	e7f7      	b.n	8006e6c <_realloc_r+0x14>
 8006e7c:	f000 f81b 	bl	8006eb6 <_malloc_usable_size_r>
 8006e80:	9001      	str	r0, [sp, #4]
 8006e82:	4284      	cmp	r4, r0
 8006e84:	d803      	bhi.n	8006e8e <_realloc_r+0x36>
 8006e86:	0035      	movs	r5, r6
 8006e88:	0843      	lsrs	r3, r0, #1
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	d3ee      	bcc.n	8006e6c <_realloc_r+0x14>
 8006e8e:	0021      	movs	r1, r4
 8006e90:	0038      	movs	r0, r7
 8006e92:	f7ff fc33 	bl	80066fc <_malloc_r>
 8006e96:	1e05      	subs	r5, r0, #0
 8006e98:	d0e8      	beq.n	8006e6c <_realloc_r+0x14>
 8006e9a:	9b01      	ldr	r3, [sp, #4]
 8006e9c:	0022      	movs	r2, r4
 8006e9e:	429c      	cmp	r4, r3
 8006ea0:	d900      	bls.n	8006ea4 <_realloc_r+0x4c>
 8006ea2:	001a      	movs	r2, r3
 8006ea4:	0031      	movs	r1, r6
 8006ea6:	0028      	movs	r0, r5
 8006ea8:	f7ff ffcd 	bl	8006e46 <memcpy>
 8006eac:	0031      	movs	r1, r6
 8006eae:	0038      	movs	r0, r7
 8006eb0:	f7ff fbb8 	bl	8006624 <_free_r>
 8006eb4:	e7da      	b.n	8006e6c <_realloc_r+0x14>

08006eb6 <_malloc_usable_size_r>:
 8006eb6:	1f0b      	subs	r3, r1, #4
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	1f18      	subs	r0, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da01      	bge.n	8006ec4 <_malloc_usable_size_r+0xe>
 8006ec0:	580b      	ldr	r3, [r1, r0]
 8006ec2:	18c0      	adds	r0, r0, r3
 8006ec4:	4770      	bx	lr
	...

08006ec8 <_init>:
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eca:	46c0      	nop			; (mov r8, r8)
 8006ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ece:	bc08      	pop	{r3}
 8006ed0:	469e      	mov	lr, r3
 8006ed2:	4770      	bx	lr

08006ed4 <_fini>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eda:	bc08      	pop	{r3}
 8006edc:	469e      	mov	lr, r3
 8006ede:	4770      	bx	lr
