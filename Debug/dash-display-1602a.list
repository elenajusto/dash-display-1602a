
dash-display-1602a.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d9c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f1c  08003f1c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f24  08003f24  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f28  08003f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08003f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  20000088  08003fb4  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08003fb4  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de86  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc4  00000000  00000000  0002df79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  0002ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008d4  00000000  00000000  00030a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b52  00000000  00000000  00031364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb7b  00000000  00000000  00033eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099a87  00000000  00000000  00043a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d00  00000000  00000000  000dd4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e01b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000088 	.word	0x20000088
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003e40 	.word	0x08003e40

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000008c 	.word	0x2000008c
 8000100:	08003e40 	.word	0x08003e40

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_uldivmod>:
 8000404:	2b00      	cmp	r3, #0
 8000406:	d111      	bne.n	800042c <__aeabi_uldivmod+0x28>
 8000408:	2a00      	cmp	r2, #0
 800040a:	d10f      	bne.n	800042c <__aeabi_uldivmod+0x28>
 800040c:	2900      	cmp	r1, #0
 800040e:	d100      	bne.n	8000412 <__aeabi_uldivmod+0xe>
 8000410:	2800      	cmp	r0, #0
 8000412:	d002      	beq.n	800041a <__aeabi_uldivmod+0x16>
 8000414:	2100      	movs	r1, #0
 8000416:	43c9      	mvns	r1, r1
 8000418:	0008      	movs	r0, r1
 800041a:	b407      	push	{r0, r1, r2}
 800041c:	4802      	ldr	r0, [pc, #8]	; (8000428 <__aeabi_uldivmod+0x24>)
 800041e:	a102      	add	r1, pc, #8	; (adr r1, 8000428 <__aeabi_uldivmod+0x24>)
 8000420:	1840      	adds	r0, r0, r1
 8000422:	9002      	str	r0, [sp, #8]
 8000424:	bd03      	pop	{r0, r1, pc}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	ffffffd9 	.word	0xffffffd9
 800042c:	b403      	push	{r0, r1}
 800042e:	4668      	mov	r0, sp
 8000430:	b501      	push	{r0, lr}
 8000432:	9802      	ldr	r0, [sp, #8]
 8000434:	f000 f806 	bl	8000444 <__udivmoddi4>
 8000438:	9b01      	ldr	r3, [sp, #4]
 800043a:	469e      	mov	lr, r3
 800043c:	b002      	add	sp, #8
 800043e:	bc0c      	pop	{r2, r3}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__udivmoddi4>:
 8000444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000446:	4657      	mov	r7, sl
 8000448:	464e      	mov	r6, r9
 800044a:	4645      	mov	r5, r8
 800044c:	46de      	mov	lr, fp
 800044e:	b5e0      	push	{r5, r6, r7, lr}
 8000450:	0004      	movs	r4, r0
 8000452:	000d      	movs	r5, r1
 8000454:	4692      	mov	sl, r2
 8000456:	4699      	mov	r9, r3
 8000458:	b083      	sub	sp, #12
 800045a:	428b      	cmp	r3, r1
 800045c:	d830      	bhi.n	80004c0 <__udivmoddi4+0x7c>
 800045e:	d02d      	beq.n	80004bc <__udivmoddi4+0x78>
 8000460:	4649      	mov	r1, r9
 8000462:	4650      	mov	r0, sl
 8000464:	f000 f8ba 	bl	80005dc <__clzdi2>
 8000468:	0029      	movs	r1, r5
 800046a:	0006      	movs	r6, r0
 800046c:	0020      	movs	r0, r4
 800046e:	f000 f8b5 	bl	80005dc <__clzdi2>
 8000472:	1a33      	subs	r3, r6, r0
 8000474:	4698      	mov	r8, r3
 8000476:	3b20      	subs	r3, #32
 8000478:	d434      	bmi.n	80004e4 <__udivmoddi4+0xa0>
 800047a:	469b      	mov	fp, r3
 800047c:	4653      	mov	r3, sl
 800047e:	465a      	mov	r2, fp
 8000480:	4093      	lsls	r3, r2
 8000482:	4642      	mov	r2, r8
 8000484:	001f      	movs	r7, r3
 8000486:	4653      	mov	r3, sl
 8000488:	4093      	lsls	r3, r2
 800048a:	001e      	movs	r6, r3
 800048c:	42af      	cmp	r7, r5
 800048e:	d83b      	bhi.n	8000508 <__udivmoddi4+0xc4>
 8000490:	42af      	cmp	r7, r5
 8000492:	d100      	bne.n	8000496 <__udivmoddi4+0x52>
 8000494:	e079      	b.n	800058a <__udivmoddi4+0x146>
 8000496:	465b      	mov	r3, fp
 8000498:	1ba4      	subs	r4, r4, r6
 800049a:	41bd      	sbcs	r5, r7
 800049c:	2b00      	cmp	r3, #0
 800049e:	da00      	bge.n	80004a2 <__udivmoddi4+0x5e>
 80004a0:	e076      	b.n	8000590 <__udivmoddi4+0x14c>
 80004a2:	2200      	movs	r2, #0
 80004a4:	2300      	movs	r3, #0
 80004a6:	9200      	str	r2, [sp, #0]
 80004a8:	9301      	str	r3, [sp, #4]
 80004aa:	2301      	movs	r3, #1
 80004ac:	465a      	mov	r2, fp
 80004ae:	4093      	lsls	r3, r2
 80004b0:	9301      	str	r3, [sp, #4]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4642      	mov	r2, r8
 80004b6:	4093      	lsls	r3, r2
 80004b8:	9300      	str	r3, [sp, #0]
 80004ba:	e029      	b.n	8000510 <__udivmoddi4+0xcc>
 80004bc:	4282      	cmp	r2, r0
 80004be:	d9cf      	bls.n	8000460 <__udivmoddi4+0x1c>
 80004c0:	2200      	movs	r2, #0
 80004c2:	2300      	movs	r3, #0
 80004c4:	9200      	str	r2, [sp, #0]
 80004c6:	9301      	str	r3, [sp, #4]
 80004c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <__udivmoddi4+0x8e>
 80004ce:	601c      	str	r4, [r3, #0]
 80004d0:	605d      	str	r5, [r3, #4]
 80004d2:	9800      	ldr	r0, [sp, #0]
 80004d4:	9901      	ldr	r1, [sp, #4]
 80004d6:	b003      	add	sp, #12
 80004d8:	bcf0      	pop	{r4, r5, r6, r7}
 80004da:	46bb      	mov	fp, r7
 80004dc:	46b2      	mov	sl, r6
 80004de:	46a9      	mov	r9, r5
 80004e0:	46a0      	mov	r8, r4
 80004e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004e4:	4642      	mov	r2, r8
 80004e6:	469b      	mov	fp, r3
 80004e8:	2320      	movs	r3, #32
 80004ea:	1a9b      	subs	r3, r3, r2
 80004ec:	4652      	mov	r2, sl
 80004ee:	40da      	lsrs	r2, r3
 80004f0:	4641      	mov	r1, r8
 80004f2:	0013      	movs	r3, r2
 80004f4:	464a      	mov	r2, r9
 80004f6:	408a      	lsls	r2, r1
 80004f8:	0017      	movs	r7, r2
 80004fa:	4642      	mov	r2, r8
 80004fc:	431f      	orrs	r7, r3
 80004fe:	4653      	mov	r3, sl
 8000500:	4093      	lsls	r3, r2
 8000502:	001e      	movs	r6, r3
 8000504:	42af      	cmp	r7, r5
 8000506:	d9c3      	bls.n	8000490 <__udivmoddi4+0x4c>
 8000508:	2200      	movs	r2, #0
 800050a:	2300      	movs	r3, #0
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9301      	str	r3, [sp, #4]
 8000510:	4643      	mov	r3, r8
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0d8      	beq.n	80004c8 <__udivmoddi4+0x84>
 8000516:	07fb      	lsls	r3, r7, #31
 8000518:	0872      	lsrs	r2, r6, #1
 800051a:	431a      	orrs	r2, r3
 800051c:	4646      	mov	r6, r8
 800051e:	087b      	lsrs	r3, r7, #1
 8000520:	e00e      	b.n	8000540 <__udivmoddi4+0xfc>
 8000522:	42ab      	cmp	r3, r5
 8000524:	d101      	bne.n	800052a <__udivmoddi4+0xe6>
 8000526:	42a2      	cmp	r2, r4
 8000528:	d80c      	bhi.n	8000544 <__udivmoddi4+0x100>
 800052a:	1aa4      	subs	r4, r4, r2
 800052c:	419d      	sbcs	r5, r3
 800052e:	2001      	movs	r0, #1
 8000530:	1924      	adds	r4, r4, r4
 8000532:	416d      	adcs	r5, r5
 8000534:	2100      	movs	r1, #0
 8000536:	3e01      	subs	r6, #1
 8000538:	1824      	adds	r4, r4, r0
 800053a:	414d      	adcs	r5, r1
 800053c:	2e00      	cmp	r6, #0
 800053e:	d006      	beq.n	800054e <__udivmoddi4+0x10a>
 8000540:	42ab      	cmp	r3, r5
 8000542:	d9ee      	bls.n	8000522 <__udivmoddi4+0xde>
 8000544:	3e01      	subs	r6, #1
 8000546:	1924      	adds	r4, r4, r4
 8000548:	416d      	adcs	r5, r5
 800054a:	2e00      	cmp	r6, #0
 800054c:	d1f8      	bne.n	8000540 <__udivmoddi4+0xfc>
 800054e:	9800      	ldr	r0, [sp, #0]
 8000550:	9901      	ldr	r1, [sp, #4]
 8000552:	465b      	mov	r3, fp
 8000554:	1900      	adds	r0, r0, r4
 8000556:	4169      	adcs	r1, r5
 8000558:	2b00      	cmp	r3, #0
 800055a:	db24      	blt.n	80005a6 <__udivmoddi4+0x162>
 800055c:	002b      	movs	r3, r5
 800055e:	465a      	mov	r2, fp
 8000560:	4644      	mov	r4, r8
 8000562:	40d3      	lsrs	r3, r2
 8000564:	002a      	movs	r2, r5
 8000566:	40e2      	lsrs	r2, r4
 8000568:	001c      	movs	r4, r3
 800056a:	465b      	mov	r3, fp
 800056c:	0015      	movs	r5, r2
 800056e:	2b00      	cmp	r3, #0
 8000570:	db2a      	blt.n	80005c8 <__udivmoddi4+0x184>
 8000572:	0026      	movs	r6, r4
 8000574:	409e      	lsls	r6, r3
 8000576:	0033      	movs	r3, r6
 8000578:	0026      	movs	r6, r4
 800057a:	4647      	mov	r7, r8
 800057c:	40be      	lsls	r6, r7
 800057e:	0032      	movs	r2, r6
 8000580:	1a80      	subs	r0, r0, r2
 8000582:	4199      	sbcs	r1, r3
 8000584:	9000      	str	r0, [sp, #0]
 8000586:	9101      	str	r1, [sp, #4]
 8000588:	e79e      	b.n	80004c8 <__udivmoddi4+0x84>
 800058a:	42a3      	cmp	r3, r4
 800058c:	d8bc      	bhi.n	8000508 <__udivmoddi4+0xc4>
 800058e:	e782      	b.n	8000496 <__udivmoddi4+0x52>
 8000590:	4642      	mov	r2, r8
 8000592:	2320      	movs	r3, #32
 8000594:	2100      	movs	r1, #0
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	2200      	movs	r2, #0
 800059a:	9100      	str	r1, [sp, #0]
 800059c:	9201      	str	r2, [sp, #4]
 800059e:	2201      	movs	r2, #1
 80005a0:	40da      	lsrs	r2, r3
 80005a2:	9201      	str	r2, [sp, #4]
 80005a4:	e785      	b.n	80004b2 <__udivmoddi4+0x6e>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2320      	movs	r3, #32
 80005aa:	1a9b      	subs	r3, r3, r2
 80005ac:	002a      	movs	r2, r5
 80005ae:	4646      	mov	r6, r8
 80005b0:	409a      	lsls	r2, r3
 80005b2:	0023      	movs	r3, r4
 80005b4:	40f3      	lsrs	r3, r6
 80005b6:	4644      	mov	r4, r8
 80005b8:	4313      	orrs	r3, r2
 80005ba:	002a      	movs	r2, r5
 80005bc:	40e2      	lsrs	r2, r4
 80005be:	001c      	movs	r4, r3
 80005c0:	465b      	mov	r3, fp
 80005c2:	0015      	movs	r5, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	dad4      	bge.n	8000572 <__udivmoddi4+0x12e>
 80005c8:	4642      	mov	r2, r8
 80005ca:	002f      	movs	r7, r5
 80005cc:	2320      	movs	r3, #32
 80005ce:	0026      	movs	r6, r4
 80005d0:	4097      	lsls	r7, r2
 80005d2:	1a9b      	subs	r3, r3, r2
 80005d4:	40de      	lsrs	r6, r3
 80005d6:	003b      	movs	r3, r7
 80005d8:	4333      	orrs	r3, r6
 80005da:	e7cd      	b.n	8000578 <__udivmoddi4+0x134>

080005dc <__clzdi2>:
 80005dc:	b510      	push	{r4, lr}
 80005de:	2900      	cmp	r1, #0
 80005e0:	d103      	bne.n	80005ea <__clzdi2+0xe>
 80005e2:	f000 f807 	bl	80005f4 <__clzsi2>
 80005e6:	3020      	adds	r0, #32
 80005e8:	e002      	b.n	80005f0 <__clzdi2+0x14>
 80005ea:	0008      	movs	r0, r1
 80005ec:	f000 f802 	bl	80005f4 <__clzsi2>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	46c0      	nop			; (mov r8, r8)

080005f4 <__clzsi2>:
 80005f4:	211c      	movs	r1, #28
 80005f6:	2301      	movs	r3, #1
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0xe>
 80005fe:	0c00      	lsrs	r0, r0, #16
 8000600:	3910      	subs	r1, #16
 8000602:	0a1b      	lsrs	r3, r3, #8
 8000604:	4298      	cmp	r0, r3
 8000606:	d301      	bcc.n	800060c <__clzsi2+0x18>
 8000608:	0a00      	lsrs	r0, r0, #8
 800060a:	3908      	subs	r1, #8
 800060c:	091b      	lsrs	r3, r3, #4
 800060e:	4298      	cmp	r0, r3
 8000610:	d301      	bcc.n	8000616 <__clzsi2+0x22>
 8000612:	0900      	lsrs	r0, r0, #4
 8000614:	3904      	subs	r1, #4
 8000616:	a202      	add	r2, pc, #8	; (adr r2, 8000620 <__clzsi2+0x2c>)
 8000618:	5c10      	ldrb	r0, [r2, r0]
 800061a:	1840      	adds	r0, r0, r1
 800061c:	4770      	bx	lr
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	02020304 	.word	0x02020304
 8000624:	01010101 	.word	0x01010101
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000634:	f000 fb0a 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000638:	f000 f809 	bl	800064e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063c:	f000 f8de 	bl	80007fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000640:	f000 f88e 	bl	8000760 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000644:	f000 f84c 	bl	80006e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  	  i2cScanner();
 8000648:	f000 f934 	bl	80008b4 <i2cScanner>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064c:	e7fe      	b.n	800064c <main+0x1c>

0800064e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064e:	b590      	push	{r4, r7, lr}
 8000650:	b093      	sub	sp, #76	; 0x4c
 8000652:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000654:	2410      	movs	r4, #16
 8000656:	193b      	adds	r3, r7, r4
 8000658:	0018      	movs	r0, r3
 800065a:	2338      	movs	r3, #56	; 0x38
 800065c:	001a      	movs	r2, r3
 800065e:	2100      	movs	r1, #0
 8000660:	f002 ff68 	bl	8003534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	003b      	movs	r3, r7
 8000666:	0018      	movs	r0, r3
 8000668:	2310      	movs	r3, #16
 800066a:	001a      	movs	r2, r3
 800066c:	2100      	movs	r1, #0
 800066e:	f002 ff61 	bl	8003534 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	009b      	lsls	r3, r3, #2
 8000676:	0018      	movs	r0, r3
 8000678:	f001 f96e 	bl	8001958 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	193b      	adds	r3, r7, r4
 800067e:	2202      	movs	r2, #2
 8000680:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	193b      	adds	r3, r7, r4
 8000684:	2280      	movs	r2, #128	; 0x80
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800068a:	193b      	adds	r3, r7, r4
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	193b      	adds	r3, r7, r4
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000696:	193b      	adds	r3, r7, r4
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	193b      	adds	r3, r7, r4
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 f9a6 	bl	80019f0 <HAL_RCC_OscConfig>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006a8:	f000 f962 	bl	8000970 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	003b      	movs	r3, r7
 80006ae:	2207      	movs	r2, #7
 80006b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	003b      	movs	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006be:	003b      	movs	r3, r7
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	003b      	movs	r3, r7
 80006c6:	2100      	movs	r1, #0
 80006c8:	0018      	movs	r0, r3
 80006ca:	f001 fcab 	bl	8002024 <HAL_RCC_ClockConfig>
 80006ce:	1e03      	subs	r3, r0, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80006d2:	f000 f94d 	bl	8000970 <Error_Handler>
  }
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b013      	add	sp, #76	; 0x4c
 80006dc:	bd90      	pop	{r4, r7, pc}
	...

080006e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_I2C1_Init+0x74>)
 80006e6:	4a1c      	ldr	r2, [pc, #112]	; (8000758 <MX_I2C1_Init+0x78>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_I2C1_Init+0x74>)
 80006ec:	4a1b      	ldr	r2, [pc, #108]	; (800075c <MX_I2C1_Init+0x7c>)
 80006ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_I2C1_Init+0x74>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x74>)
 800071c:	0018      	movs	r0, r3
 800071e:	f000 fd67 	bl	80011f0 <HAL_I2C_Init>
 8000722:	1e03      	subs	r3, r0, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000726:	f000 f923 	bl	8000970 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x74>)
 800072c:	2100      	movs	r1, #0
 800072e:	0018      	movs	r0, r3
 8000730:	f001 f87a 	bl	8001828 <HAL_I2CEx_ConfigAnalogFilter>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d001      	beq.n	800073c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000738:	f000 f91a 	bl	8000970 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <MX_I2C1_Init+0x74>)
 800073e:	2100      	movs	r1, #0
 8000740:	0018      	movs	r0, r3
 8000742:	f001 f8bd 	bl	80018c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000746:	1e03      	subs	r3, r0, #0
 8000748:	d001      	beq.n	800074e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 f911 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000a4 	.word	0x200000a4
 8000758:	40005400 	.word	0x40005400
 800075c:	00303d5b 	.word	0x00303d5b

08000760 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000766:	4a24      	ldr	r2, [pc, #144]	; (80007f8 <MX_USART2_UART_Init+0x98>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800076c:	22e1      	movs	r2, #225	; 0xe1
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a8:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 ff9c 	bl	80026e8 <HAL_UART_Init>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007b4:	f000 f8dc 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007ba:	2100      	movs	r1, #0
 80007bc:	0018      	movs	r0, r3
 80007be:	f002 fdb9 	bl	8003334 <HAL_UARTEx_SetTxFifoThreshold>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007c6:	f000 f8d3 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007cc:	2100      	movs	r1, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fdf0 	bl	80033b4 <HAL_UARTEx_SetRxFifoThreshold>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007d8:	f000 f8ca 	bl	8000970 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x94>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f002 fd6e 	bl	80032c0 <HAL_UARTEx_DisableFifoMode>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007e8:	f000 f8c2 	bl	8000970 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	200000f8 	.word	0x200000f8
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b08b      	sub	sp, #44	; 0x2c
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	2414      	movs	r4, #20
 8000804:	193b      	adds	r3, r7, r4
 8000806:	0018      	movs	r0, r3
 8000808:	2314      	movs	r3, #20
 800080a:	001a      	movs	r2, r3
 800080c:	2100      	movs	r1, #0
 800080e:	f002 fe91 	bl	8003534 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b27      	ldr	r3, [pc, #156]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000818:	2104      	movs	r1, #4
 800081a:	430a      	orrs	r2, r1
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
 800081e:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000822:	2204      	movs	r2, #4
 8000824:	4013      	ands	r3, r2
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <MX_GPIO_Init+0xb4>)
 800082c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000830:	2120      	movs	r1, #32
 8000832:	430a      	orrs	r2, r1
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
 8000836:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800083a:	2220      	movs	r2, #32
 800083c:	4013      	ands	r3, r2
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000846:	4b1a      	ldr	r3, [pc, #104]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000848:	2101      	movs	r1, #1
 800084a:	430a      	orrs	r2, r1
 800084c:	635a      	str	r2, [r3, #52]	; 0x34
 800084e:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000852:	2201      	movs	r2, #1
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <MX_GPIO_Init+0xb4>)
 800085c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000860:	2102      	movs	r1, #2
 8000862:	430a      	orrs	r2, r1
 8000864:	635a      	str	r2, [r3, #52]	; 0x34
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_GPIO_Init+0xb4>)
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086a:	2202      	movs	r2, #2
 800086c:	4013      	ands	r3, r2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	05db      	lsls	r3, r3, #23
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	0018      	movs	r0, r3
 800087c:	f000 fc9a 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000880:	0021      	movs	r1, r4
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2220      	movs	r2, #32
 8000886:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2201      	movs	r2, #1
 800088c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2202      	movs	r2, #2
 8000898:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800089a:	187a      	adds	r2, r7, r1
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fb22 	bl	8000eec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b00b      	add	sp, #44	; 0x2c
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	40021000 	.word	0x40021000

080008b4 <i2cScanner>:

/* USER CODE BEGIN 4 */

	void i2cScanner(){
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
		uint8_t i = 0, ret;
 80008ba:	1dfb      	adds	r3, r7, #7
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, StartMSG, sizeof(StartMSG), 10000);
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <i2cScanner+0x9c>)
 80008c2:	4924      	ldr	r1, [pc, #144]	; (8000954 <i2cScanner+0xa0>)
 80008c4:	4824      	ldr	r0, [pc, #144]	; (8000958 <i2cScanner+0xa4>)
 80008c6:	221a      	movs	r2, #26
 80008c8:	f001 ff64 	bl	8002794 <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
 80008d2:	e02d      	b.n	8000930 <i2cScanner+0x7c>
		{
			ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 80008d4:	1dfb      	adds	r3, r7, #7
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	18db      	adds	r3, r3, r3
 80008dc:	b299      	uxth	r1, r3
 80008de:	1dbc      	adds	r4, r7, #6
 80008e0:	481e      	ldr	r0, [pc, #120]	; (800095c <i2cScanner+0xa8>)
 80008e2:	2305      	movs	r3, #5
 80008e4:	2203      	movs	r2, #3
 80008e6:	f000 fd29 	bl	800133c <HAL_I2C_IsDeviceReady>
 80008ea:	0003      	movs	r3, r0
 80008ec:	7023      	strb	r3, [r4, #0]
			if (ret != HAL_OK) /* No ACK Received At That Address */
 80008ee:	1dbb      	adds	r3, r7, #6
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d006      	beq.n	8000904 <i2cScanner+0x50>
			{
				HAL_UART_Transmit(&huart2, Space, sizeof(Space), 10000);
 80008f6:	4b16      	ldr	r3, [pc, #88]	; (8000950 <i2cScanner+0x9c>)
 80008f8:	4919      	ldr	r1, [pc, #100]	; (8000960 <i2cScanner+0xac>)
 80008fa:	4817      	ldr	r0, [pc, #92]	; (8000958 <i2cScanner+0xa4>)
 80008fc:	2204      	movs	r2, #4
 80008fe:	f001 ff49 	bl	8002794 <HAL_UART_Transmit>
 8000902:	e010      	b.n	8000926 <i2cScanner+0x72>
			}
			else if(ret == HAL_OK)
 8000904:	1dbb      	adds	r3, r7, #6
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d10c      	bne.n	8000926 <i2cScanner+0x72>
			{
				sprintf(Buffer, "0x%X", i);
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	4914      	ldr	r1, [pc, #80]	; (8000964 <i2cScanner+0xb0>)
 8000912:	4b15      	ldr	r3, [pc, #84]	; (8000968 <i2cScanner+0xb4>)
 8000914:	0018      	movs	r0, r3
 8000916:	f002 fded 	bl	80034f4 <siprintf>
				HAL_UART_Transmit(&huart2, Buffer, sizeof(Buffer), 10000);
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <i2cScanner+0x9c>)
 800091c:	4912      	ldr	r1, [pc, #72]	; (8000968 <i2cScanner+0xb4>)
 800091e:	480e      	ldr	r0, [pc, #56]	; (8000958 <i2cScanner+0xa4>)
 8000920:	2219      	movs	r2, #25
 8000922:	f001 ff37 	bl	8002794 <HAL_UART_Transmit>
		for(i=1; i<128; i++)
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	3201      	adds	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b25b      	sxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	dacc      	bge.n	80008d4 <i2cScanner+0x20>
			}
		}
		HAL_UART_Transmit(&huart2, EndMSG, sizeof(EndMSG), 10000);
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <i2cScanner+0x9c>)
 800093c:	490b      	ldr	r1, [pc, #44]	; (800096c <i2cScanner+0xb8>)
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <i2cScanner+0xa4>)
 8000940:	220b      	movs	r2, #11
 8000942:	f001 ff27 	bl	8002794 <HAL_UART_Transmit>
	}
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b003      	add	sp, #12
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	00002710 	.word	0x00002710
 8000954:	20000004 	.word	0x20000004
 8000958:	200000f8 	.word	0x200000f8
 800095c:	200000a4 	.word	0x200000a4
 8000960:	20000000 	.word	0x20000000
 8000964:	08003e58 	.word	0x08003e58
 8000968:	2000018c 	.word	0x2000018c
 800096c:	20000020 	.word	0x20000020

08000970 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000974:	b672      	cpsid	i
}
 8000976:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000978:	e7fe      	b.n	8000978 <Error_Handler+0x8>
	...

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_MspInit+0x4c>)
 8000984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_MspInit+0x4c>)
 8000988:	2101      	movs	r1, #1
 800098a:	430a      	orrs	r2, r1
 800098c:	641a      	str	r2, [r3, #64]	; 0x40
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	2201      	movs	r2, #1
 8000994:	4013      	ands	r3, r2
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_MspInit+0x4c>)
 800099c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <HAL_MspInit+0x4c>)
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	0549      	lsls	r1, r1, #21
 80009a4:	430a      	orrs	r2, r1
 80009a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009a8:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <HAL_MspInit+0x4c>)
 80009aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	055b      	lsls	r3, r3, #21
 80009b0:	4013      	ands	r3, r2
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80009b6:	23c0      	movs	r3, #192	; 0xc0
 80009b8:	00db      	lsls	r3, r3, #3
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f9cc 	bl	8000d58 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b002      	add	sp, #8
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40021000 	.word	0x40021000

080009cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b097      	sub	sp, #92	; 0x5c
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	2344      	movs	r3, #68	; 0x44
 80009d6:	18fb      	adds	r3, r7, r3
 80009d8:	0018      	movs	r0, r3
 80009da:	2314      	movs	r3, #20
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f002 fda8 	bl	8003534 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	2410      	movs	r4, #16
 80009e6:	193b      	adds	r3, r7, r4
 80009e8:	0018      	movs	r0, r3
 80009ea:	2334      	movs	r3, #52	; 0x34
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f002 fda0 	bl	8003534 <memset>
  if(hi2c->Instance==I2C1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a22      	ldr	r2, [pc, #136]	; (8000a84 <HAL_I2C_MspInit+0xb8>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d13e      	bne.n	8000a7c <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009fe:	193b      	adds	r3, r7, r4
 8000a00:	2220      	movs	r2, #32
 8000a02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 fcb3 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 8000a12:	1e03      	subs	r3, r0, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a16:	f7ff ffab 	bl	8000970 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a20:	2102      	movs	r1, #2
 8000a22:	430a      	orrs	r2, r1
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
 8000a26:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a32:	2144      	movs	r1, #68	; 0x44
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	22c0      	movs	r2, #192	; 0xc0
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2212      	movs	r2, #18
 8000a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2206      	movs	r2, #6
 8000a52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <HAL_I2C_MspInit+0xc0>)
 8000a58:	0019      	movs	r1, r3
 8000a5a:	0010      	movs	r0, r2
 8000a5c:	f000 fa46 	bl	8000eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a66:	2180      	movs	r1, #128	; 0x80
 8000a68:	0389      	lsls	r1, r1, #14
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_I2C_MspInit+0xbc>)
 8000a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	039b      	lsls	r3, r3, #14
 8000a76:	4013      	ands	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b017      	add	sp, #92	; 0x5c
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	40005400 	.word	0x40005400
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	50000400 	.word	0x50000400

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b097      	sub	sp, #92	; 0x5c
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	2344      	movs	r3, #68	; 0x44
 8000a9a:	18fb      	adds	r3, r7, r3
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	2314      	movs	r3, #20
 8000aa0:	001a      	movs	r2, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f002 fd46 	bl	8003534 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa8:	2410      	movs	r4, #16
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2334      	movs	r3, #52	; 0x34
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f002 fd3e 	bl	8003534 <memset>
  if(huart->Instance==USART2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a22      	ldr	r2, [pc, #136]	; (8000b48 <HAL_UART_MspInit+0xb8>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d13e      	bne.n	8000b40 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 fc51 	bl	8002378 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000ada:	f7ff ff49 	bl	8000970 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <HAL_UART_MspInit+0xbc>)
 8000ae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_UART_MspInit+0xbc>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	0289      	lsls	r1, r1, #10
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0xbc>)
 8000aee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	029b      	lsls	r3, r3, #10
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_MspInit+0xbc>)
 8000afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <HAL_UART_MspInit+0xbc>)
 8000b00:	2101      	movs	r1, #1
 8000b02:	430a      	orrs	r2, r1
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0xbc>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000b12:	2144      	movs	r1, #68	; 0x44
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	2201      	movs	r2, #1
 8000b24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	2200      	movs	r2, #0
 8000b2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000b2c:	187b      	adds	r3, r7, r1
 8000b2e:	2201      	movs	r2, #1
 8000b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	187a      	adds	r2, r7, r1
 8000b34:	23a0      	movs	r3, #160	; 0xa0
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f000 f9d6 	bl	8000eec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b40:	46c0      	nop			; (mov r8, r8)
 8000b42:	46bd      	mov	sp, r7
 8000b44:	b017      	add	sp, #92	; 0x5c
 8000b46:	bd90      	pop	{r4, r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b60:	46c0      	nop			; (mov r8, r8)
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f8d4 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f002 fcc8 	bl	8003544 <__errno>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	220c      	movs	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	18d2      	adds	r2, r2, r3
 8000bce:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b006      	add	sp, #24
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20009000 	.word	0x20009000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	200001a8 	.word	0x200001a8
 8000be8:	200002f8 	.word	0x200002f8

08000bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
	...

08000bf8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bfa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bfc:	f7ff fff6 	bl	8000bec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	; (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	; (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	; (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c26:	f002 fc93 	bl	8003550 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c2a:	f7ff fd01 	bl	8000630 <main>

08000c2e <LoopForever>:

LoopForever:
  b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   r0, =_estack
 8000c30:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000c3c:	08003f2c 	.word	0x08003f2c
  ldr r2, =_sbss
 8000c40:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000c44:	200002f8 	.word	0x200002f8

08000c48 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_COMP_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_Init+0x3c>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <HAL_Init+0x3c>)
 8000c5e:	2180      	movs	r1, #128	; 0x80
 8000c60:	0049      	lsls	r1, r1, #1
 8000c62:	430a      	orrs	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f810 	bl	8000c8c <HAL_InitTick>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000c70:	1dfb      	adds	r3, r7, #7
 8000c72:	2201      	movs	r2, #1
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e001      	b.n	8000c7c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe80 	bl	800097c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7c:	1dfb      	adds	r3, r7, #7
 8000c7e:	781b      	ldrb	r3, [r3, #0]
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b002      	add	sp, #8
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	230f      	movs	r3, #15
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <HAL_InitTick+0x88>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d02b      	beq.n	8000cfc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_InitTick+0x8c>)
 8000ca6:	681c      	ldr	r4, [r3, #0]
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_InitTick+0x88>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	0019      	movs	r1, r3
 8000cae:	23fa      	movs	r3, #250	; 0xfa
 8000cb0:	0098      	lsls	r0, r3, #2
 8000cb2:	f7ff fa31 	bl	8000118 <__udivsi3>
 8000cb6:	0003      	movs	r3, r0
 8000cb8:	0019      	movs	r1, r3
 8000cba:	0020      	movs	r0, r4
 8000cbc:	f7ff fa2c 	bl	8000118 <__udivsi3>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 f905 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000cc8:	1e03      	subs	r3, r0, #0
 8000cca:	d112      	bne.n	8000cf2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d80a      	bhi.n	8000ce8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f000 f8e4 	bl	8000ea8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_InitTick+0x90>)
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e00d      	b.n	8000d04 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ce8:	230f      	movs	r3, #15
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	2201      	movs	r2, #1
 8000cee:	701a      	strb	r2, [r3, #0]
 8000cf0:	e008      	b.n	8000d04 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	701a      	strb	r2, [r3, #0]
 8000cfa:	e003      	b.n	8000d04 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	18fb      	adds	r3, r7, r3
 8000d00:	2201      	movs	r2, #1
 8000d02:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d04:	230f      	movs	r3, #15
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	781b      	ldrb	r3, [r3, #0]
}
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b005      	add	sp, #20
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000034 	.word	0x20000034
 8000d18:	2000002c 	.word	0x2000002c
 8000d1c:	20000030 	.word	0x20000030

08000d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	001a      	movs	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	18d2      	adds	r2, r2, r3
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_IncTick+0x20>)
 8000d32:	601a      	str	r2, [r3, #0]
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000034 	.word	0x20000034
 8000d40:	200001ac 	.word	0x200001ac

08000d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	200001ac 	.word	0x200001ac

08000d58 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	0019      	movs	r1, r3
 8000d6a:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	601a      	str	r2, [r3, #0]
}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	fffff9ff 	.word	0xfffff9ff

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	0002      	movs	r2, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	1dfb      	adds	r3, r7, #7
 8000d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b7f      	cmp	r3, #127	; 0x7f
 8000d98:	d828      	bhi.n	8000dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d9a:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <__NVIC_SetPriority+0xd4>)
 8000d9c:	1dfb      	adds	r3, r7, #7
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	33c0      	adds	r3, #192	; 0xc0
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	589b      	ldr	r3, [r3, r2]
 8000daa:	1dfa      	adds	r2, r7, #7
 8000dac:	7812      	ldrb	r2, [r2, #0]
 8000dae:	0011      	movs	r1, r2
 8000db0:	2203      	movs	r2, #3
 8000db2:	400a      	ands	r2, r1
 8000db4:	00d2      	lsls	r2, r2, #3
 8000db6:	21ff      	movs	r1, #255	; 0xff
 8000db8:	4091      	lsls	r1, r2
 8000dba:	000a      	movs	r2, r1
 8000dbc:	43d2      	mvns	r2, r2
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	019b      	lsls	r3, r3, #6
 8000dc6:	22ff      	movs	r2, #255	; 0xff
 8000dc8:	401a      	ands	r2, r3
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	0018      	movs	r0, r3
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	4003      	ands	r3, r0
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dd8:	481f      	ldr	r0, [pc, #124]	; (8000e58 <__NVIC_SetPriority+0xd4>)
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	089b      	lsrs	r3, r3, #2
 8000de2:	430a      	orrs	r2, r1
 8000de4:	33c0      	adds	r3, #192	; 0xc0
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000dea:	e031      	b.n	8000e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dec:	4a1b      	ldr	r2, [pc, #108]	; (8000e5c <__NVIC_SetPriority+0xd8>)
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0019      	movs	r1, r3
 8000df4:	230f      	movs	r3, #15
 8000df6:	400b      	ands	r3, r1
 8000df8:	3b08      	subs	r3, #8
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	3306      	adds	r3, #6
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	18d3      	adds	r3, r2, r3
 8000e02:	3304      	adds	r3, #4
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	1dfa      	adds	r2, r7, #7
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	400a      	ands	r2, r1
 8000e10:	00d2      	lsls	r2, r2, #3
 8000e12:	21ff      	movs	r1, #255	; 0xff
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	22ff      	movs	r2, #255	; 0xff
 8000e24:	401a      	ands	r2, r3
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	4003      	ands	r3, r0
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <__NVIC_SetPriority+0xd8>)
 8000e36:	1dfb      	adds	r3, r7, #7
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	001c      	movs	r4, r3
 8000e3c:	230f      	movs	r3, #15
 8000e3e:	4023      	ands	r3, r4
 8000e40:	3b08      	subs	r3, #8
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	430a      	orrs	r2, r1
 8000e46:	3306      	adds	r3, #6
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	18c3      	adds	r3, r0, r3
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	601a      	str	r2, [r3, #0]
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b003      	add	sp, #12
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	e000e100 	.word	0xe000e100
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	045b      	lsls	r3, r3, #17
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d301      	bcc.n	8000e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e74:	2301      	movs	r3, #1
 8000e76:	e010      	b.n	8000e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <SysTick_Config+0x44>)
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	3a01      	subs	r2, #1
 8000e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e80:	2301      	movs	r3, #1
 8000e82:	425b      	negs	r3, r3
 8000e84:	2103      	movs	r1, #3
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff ff7c 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x44>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x44>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	1c02      	adds	r2, r0, #0
 8000eb8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	b25b      	sxtb	r3, r3
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b004      	add	sp, #16
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff ffbf 	bl	8000e60 <SysTick_Config>
 8000ee2:	0003      	movs	r3, r0
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b002      	add	sp, #8
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	e147      	b.n	800118c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2101      	movs	r1, #1
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4091      	lsls	r1, r2
 8000f06:	000a      	movs	r2, r1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d100      	bne.n	8000f14 <HAL_GPIO_Init+0x28>
 8000f12:	e138      	b.n	8001186 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	2203      	movs	r2, #3
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d005      	beq.n	8000f2c <HAL_GPIO_Init+0x40>
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2203      	movs	r2, #3
 8000f26:	4013      	ands	r3, r2
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d130      	bne.n	8000f8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	409a      	lsls	r2, r3
 8000f3a:	0013      	movs	r3, r2
 8000f3c:	43da      	mvns	r2, r3
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4013      	ands	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
 8000f68:	0013      	movs	r3, r2
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	2201      	movs	r2, #1
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
 8000f80:	0013      	movs	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2203      	movs	r2, #3
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d017      	beq.n	8000fca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	43da      	mvns	r2, r3
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	409a      	lsls	r2, r3
 8000fbc:	0013      	movs	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2203      	movs	r2, #3
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d123      	bne.n	800101e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	08da      	lsrs	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3208      	adds	r2, #8
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	58d3      	ldr	r3, [r2, r3]
 8000fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	4013      	ands	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	220f      	movs	r2, #15
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	0013      	movs	r3, r2
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	691a      	ldr	r2, [r3, #16]
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	2107      	movs	r1, #7
 8001002:	400b      	ands	r3, r1
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	08da      	lsrs	r2, r3, #3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3208      	adds	r2, #8
 8001018:	0092      	lsls	r2, r2, #2
 800101a:	6939      	ldr	r1, [r7, #16]
 800101c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	409a      	lsls	r2, r3
 800102c:	0013      	movs	r3, r2
 800102e:	43da      	mvns	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2203      	movs	r2, #3
 800103c:	401a      	ands	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	409a      	lsls	r2, r3
 8001044:	0013      	movs	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	23c0      	movs	r3, #192	; 0xc0
 8001058:	029b      	lsls	r3, r3, #10
 800105a:	4013      	ands	r3, r2
 800105c:	d100      	bne.n	8001060 <HAL_GPIO_Init+0x174>
 800105e:	e092      	b.n	8001186 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001060:	4a50      	ldr	r2, [pc, #320]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	089b      	lsrs	r3, r3, #2
 8001066:	3318      	adds	r3, #24
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	589b      	ldr	r3, [r3, r2]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2203      	movs	r2, #3
 8001072:	4013      	ands	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	220f      	movs	r2, #15
 8001078:	409a      	lsls	r2, r3
 800107a:	0013      	movs	r3, r2
 800107c:	43da      	mvns	r2, r3
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4013      	ands	r3, r2
 8001082:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	23a0      	movs	r3, #160	; 0xa0
 8001088:	05db      	lsls	r3, r3, #23
 800108a:	429a      	cmp	r2, r3
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0x1ca>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a45      	ldr	r2, [pc, #276]	; (80011a8 <HAL_GPIO_Init+0x2bc>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d00d      	beq.n	80010b2 <HAL_GPIO_Init+0x1c6>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a44      	ldr	r2, [pc, #272]	; (80011ac <HAL_GPIO_Init+0x2c0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d007      	beq.n	80010ae <HAL_GPIO_Init+0x1c2>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a43      	ldr	r2, [pc, #268]	; (80011b0 <HAL_GPIO_Init+0x2c4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_GPIO_Init+0x1be>
 80010a6:	2303      	movs	r3, #3
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x1cc>
 80010aa:	2305      	movs	r3, #5
 80010ac:	e004      	b.n	80010b8 <HAL_GPIO_Init+0x1cc>
 80010ae:	2302      	movs	r3, #2
 80010b0:	e002      	b.n	80010b8 <HAL_GPIO_Init+0x1cc>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_GPIO_Init+0x1cc>
 80010b6:	2300      	movs	r3, #0
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	2103      	movs	r1, #3
 80010bc:	400a      	ands	r2, r1
 80010be:	00d2      	lsls	r2, r2, #3
 80010c0:	4093      	lsls	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80010c8:	4936      	ldr	r1, [pc, #216]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3318      	adds	r3, #24
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d6:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	035b      	lsls	r3, r3, #13
 80010ee:	4013      	ands	r3, r2
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43da      	mvns	r2, r3
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	039b      	lsls	r3, r3, #14
 8001118:	4013      	ands	r3, r2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 800112c:	2384      	movs	r3, #132	; 0x84
 800112e:	58d3      	ldr	r3, [r2, r3]
 8001130:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	43da      	mvns	r2, r3
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001150:	4914      	ldr	r1, [pc, #80]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 8001152:	2284      	movs	r2, #132	; 0x84
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001158:	4a12      	ldr	r2, [pc, #72]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	58d3      	ldr	r3, [r2, r3]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43da      	mvns	r2, r3
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	025b      	lsls	r3, r3, #9
 8001172:	4013      	ands	r3, r2
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800117e:	4909      	ldr	r1, [pc, #36]	; (80011a4 <HAL_GPIO_Init+0x2b8>)
 8001180:	2280      	movs	r2, #128	; 0x80
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	3301      	adds	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	40da      	lsrs	r2, r3
 8001194:	1e13      	subs	r3, r2, #0
 8001196:	d000      	beq.n	800119a <HAL_GPIO_Init+0x2ae>
 8001198:	e6b0      	b.n	8000efc <HAL_GPIO_Init+0x10>
  }
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b006      	add	sp, #24
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021800 	.word	0x40021800
 80011a8:	50000400 	.word	0x50000400
 80011ac:	50000800 	.word	0x50000800
 80011b0:	50000c00 	.word	0x50000c00

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	0008      	movs	r0, r1
 80011be:	0011      	movs	r1, r2
 80011c0:	1cbb      	adds	r3, r7, #2
 80011c2:	1c02      	adds	r2, r0, #0
 80011c4:	801a      	strh	r2, [r3, #0]
 80011c6:	1c7b      	adds	r3, r7, #1
 80011c8:	1c0a      	adds	r2, r1, #0
 80011ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011cc:	1c7b      	adds	r3, r7, #1
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d004      	beq.n	80011de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d4:	1cbb      	adds	r3, r7, #2
 80011d6:	881a      	ldrh	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011dc:	e003      	b.n	80011e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011de:	1cbb      	adds	r3, r7, #2
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e08f      	b.n	8001322 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2241      	movs	r2, #65	; 0x41
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d107      	bne.n	800121e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2240      	movs	r2, #64	; 0x40
 8001212:	2100      	movs	r1, #0
 8001214:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff fbd7 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2241      	movs	r2, #65	; 0x41
 8001222:	2124      	movs	r1, #36	; 0x24
 8001224:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	438a      	bics	r2, r1
 8001234:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	685a      	ldr	r2, [r3, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	493b      	ldr	r1, [pc, #236]	; (800132c <HAL_I2C_Init+0x13c>)
 8001240:	400a      	ands	r2, r1
 8001242:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4938      	ldr	r1, [pc, #224]	; (8001330 <HAL_I2C_Init+0x140>)
 8001250:	400a      	ands	r2, r1
 8001252:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d108      	bne.n	800126e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2180      	movs	r1, #128	; 0x80
 8001266:	0209      	lsls	r1, r1, #8
 8001268:	430a      	orrs	r2, r1
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	e007      	b.n	800127e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2184      	movs	r1, #132	; 0x84
 8001278:	0209      	lsls	r1, r1, #8
 800127a:	430a      	orrs	r2, r1
 800127c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d109      	bne.n	800129a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0109      	lsls	r1, r1, #4
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	e007      	b.n	80012aa <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4923      	ldr	r1, [pc, #140]	; (8001334 <HAL_I2C_Init+0x144>)
 80012a6:	400a      	ands	r2, r1
 80012a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4920      	ldr	r1, [pc, #128]	; (8001338 <HAL_I2C_Init+0x148>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	491a      	ldr	r1, [pc, #104]	; (8001330 <HAL_I2C_Init+0x140>)
 80012c6:	400a      	ands	r2, r1
 80012c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69d9      	ldr	r1, [r3, #28]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1a      	ldr	r2, [r3, #32]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2101      	movs	r1, #1
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2241      	movs	r2, #65	; 0x41
 800130e:	2120      	movs	r1, #32
 8001310:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2242      	movs	r2, #66	; 0x42
 800131c:	2100      	movs	r1, #0
 800131e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001320:	2300      	movs	r3, #0
}
 8001322:	0018      	movs	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	b002      	add	sp, #8
 8001328:	bd80      	pop	{r7, pc}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	f0ffffff 	.word	0xf0ffffff
 8001330:	ffff7fff 	.word	0xffff7fff
 8001334:	fffff7ff 	.word	0xfffff7ff
 8001338:	02008000 	.word	0x02008000

0800133c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af02      	add	r7, sp, #8
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	230a      	movs	r3, #10
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	1c0a      	adds	r2, r1, #0
 800134e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2241      	movs	r2, #65	; 0x41
 8001358:	5c9b      	ldrb	r3, [r3, r2]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b20      	cmp	r3, #32
 800135e:	d000      	beq.n	8001362 <HAL_I2C_IsDeviceReady+0x26>
 8001360:	e0df      	b.n	8001522 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	699a      	ldr	r2, [r3, #24]
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	401a      	ands	r2, r3
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	429a      	cmp	r2, r3
 8001374:	d101      	bne.n	800137a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001376:	2302      	movs	r3, #2
 8001378:	e0d4      	b.n	8001524 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2240      	movs	r2, #64	; 0x40
 800137e:	5c9b      	ldrb	r3, [r3, r2]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_I2C_IsDeviceReady+0x4c>
 8001384:	2302      	movs	r3, #2
 8001386:	e0cd      	b.n	8001524 <HAL_I2C_IsDeviceReady+0x1e8>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	2101      	movs	r1, #1
 800138e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2241      	movs	r2, #65	; 0x41
 8001394:	2124      	movs	r1, #36	; 0x24
 8001396:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d107      	bne.n	80013b6 <HAL_I2C_IsDeviceReady+0x7a>
 80013a6:	230a      	movs	r3, #10
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	059b      	lsls	r3, r3, #22
 80013ae:	0d9b      	lsrs	r3, r3, #22
 80013b0:	4a5e      	ldr	r2, [pc, #376]	; (800152c <HAL_I2C_IsDeviceReady+0x1f0>)
 80013b2:	431a      	orrs	r2, r3
 80013b4:	e006      	b.n	80013c4 <HAL_I2C_IsDeviceReady+0x88>
 80013b6:	230a      	movs	r3, #10
 80013b8:	18fb      	adds	r3, r7, r3
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	059b      	lsls	r3, r3, #22
 80013be:	0d9b      	lsrs	r3, r3, #22
 80013c0:	4a5b      	ldr	r2, [pc, #364]	; (8001530 <HAL_I2C_IsDeviceReady+0x1f4>)
 80013c2:	431a      	orrs	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff fcbb 	bl	8000d44 <HAL_GetTick>
 80013ce:	0003      	movs	r3, r0
 80013d0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	2220      	movs	r2, #32
 80013da:	4013      	ands	r3, r2
 80013dc:	3b20      	subs	r3, #32
 80013de:	425a      	negs	r2, r3
 80013e0:	4153      	adcs	r3, r2
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	231f      	movs	r3, #31
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2210      	movs	r2, #16
 80013f2:	4013      	ands	r3, r2
 80013f4:	3b10      	subs	r3, #16
 80013f6:	425a      	negs	r2, r3
 80013f8:	4153      	adcs	r3, r2
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	231e      	movs	r3, #30
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001402:	e035      	b.n	8001470 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	d01a      	beq.n	8001440 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800140a:	f7ff fc9b 	bl	8000d44 <HAL_GetTick>
 800140e:	0002      	movs	r2, r0
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d302      	bcc.n	8001420 <HAL_I2C_IsDeviceReady+0xe4>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d10f      	bne.n	8001440 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2241      	movs	r2, #65	; 0x41
 8001424:	2120      	movs	r1, #32
 8001426:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142c:	2220      	movs	r2, #32
 800142e:	431a      	orrs	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e071      	b.n	8001524 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2220      	movs	r2, #32
 8001448:	4013      	ands	r3, r2
 800144a:	3b20      	subs	r3, #32
 800144c:	425a      	negs	r2, r3
 800144e:	4153      	adcs	r3, r2
 8001450:	b2da      	uxtb	r2, r3
 8001452:	231f      	movs	r3, #31
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2210      	movs	r2, #16
 8001460:	4013      	ands	r3, r2
 8001462:	3b10      	subs	r3, #16
 8001464:	425a      	negs	r2, r3
 8001466:	4153      	adcs	r3, r2
 8001468:	b2da      	uxtb	r2, r3
 800146a:	231e      	movs	r3, #30
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001470:	231f      	movs	r3, #31
 8001472:	18fb      	adds	r3, r7, r3
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d104      	bne.n	8001484 <HAL_I2C_IsDeviceReady+0x148>
 800147a:	231e      	movs	r3, #30
 800147c:	18fb      	adds	r3, r7, r3
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0bf      	beq.n	8001404 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	2210      	movs	r2, #16
 800148c:	4013      	ands	r3, r2
 800148e:	2b10      	cmp	r3, #16
 8001490:	d01a      	beq.n	80014c8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	0013      	movs	r3, r2
 800149c:	2200      	movs	r2, #0
 800149e:	2120      	movs	r1, #32
 80014a0:	f000 f86a 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 80014a4:	1e03      	subs	r3, r0, #0
 80014a6:	d001      	beq.n	80014ac <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e03b      	b.n	8001524 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2220      	movs	r2, #32
 80014b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2241      	movs	r2, #65	; 0x41
 80014b8:	2120      	movs	r1, #32
 80014ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2240      	movs	r2, #64	; 0x40
 80014c0:	2100      	movs	r1, #0
 80014c2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e02d      	b.n	8001524 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	0013      	movs	r3, r2
 80014d2:	2200      	movs	r2, #0
 80014d4:	2120      	movs	r1, #32
 80014d6:	f000 f84f 	bl	8001578 <I2C_WaitOnFlagUntilTimeout>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e020      	b.n	8001524 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2210      	movs	r2, #16
 80014e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2220      	movs	r2, #32
 80014f0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d900      	bls.n	8001502 <HAL_I2C_IsDeviceReady+0x1c6>
 8001500:	e74d      	b.n	800139e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2241      	movs	r2, #65	; 0x41
 8001506:	2120      	movs	r1, #32
 8001508:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150e:	2220      	movs	r2, #32
 8001510:	431a      	orrs	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2240      	movs	r2, #64	; 0x40
 800151a:	2100      	movs	r1, #0
 800151c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8001522:	2302      	movs	r3, #2
  }
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b008      	add	sp, #32
 800152a:	bd80      	pop	{r7, pc}
 800152c:	02002000 	.word	0x02002000
 8001530:	02002800 	.word	0x02002800

08001534 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	2b02      	cmp	r3, #2
 8001548:	d103      	bne.n	8001552 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2201      	movs	r2, #1
 800155a:	4013      	ands	r3, r2
 800155c:	2b01      	cmp	r3, #1
 800155e:	d007      	beq.n	8001570 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	699a      	ldr	r2, [r3, #24]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2101      	movs	r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	619a      	str	r2, [r3, #24]
  }
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}

08001578 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	1dfb      	adds	r3, r7, #7
 8001586:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001588:	e03a      	b.n	8001600 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	0018      	movs	r0, r3
 8001592:	f000 f849 	bl	8001628 <I2C_IsErrorOccurred>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d001      	beq.n	800159e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e040      	b.n	8001620 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	d02d      	beq.n	8001600 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a4:	f7ff fbce 	bl	8000d44 <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d302      	bcc.n	80015ba <I2C_WaitOnFlagUntilTimeout+0x42>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d122      	bne.n	8001600 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	4013      	ands	r3, r2
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	425a      	negs	r2, r3
 80015ca:	4153      	adcs	r3, r2
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	001a      	movs	r2, r3
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d113      	bne.n	8001600 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015dc:	2220      	movs	r2, #32
 80015de:	431a      	orrs	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2241      	movs	r2, #65	; 0x41
 80015e8:	2120      	movs	r1, #32
 80015ea:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2242      	movs	r2, #66	; 0x42
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2240      	movs	r2, #64	; 0x40
 80015f8:	2100      	movs	r1, #0
 80015fa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e00f      	b.n	8001620 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4013      	ands	r3, r2
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	425a      	negs	r2, r3
 8001610:	4153      	adcs	r3, r2
 8001612:	b2db      	uxtb	r3, r3
 8001614:	001a      	movs	r2, r3
 8001616:	1dfb      	adds	r3, r7, #7
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d0b5      	beq.n	800158a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b004      	add	sp, #16
 8001626:	bd80      	pop	{r7, pc}

08001628 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001634:	2327      	movs	r3, #39	; 0x27
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2210      	movs	r2, #16
 8001650:	4013      	ands	r3, r2
 8001652:	d100      	bne.n	8001656 <I2C_IsErrorOccurred+0x2e>
 8001654:	e082      	b.n	800175c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2210      	movs	r2, #16
 800165c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800165e:	e060      	b.n	8001722 <I2C_IsErrorOccurred+0xfa>
 8001660:	2427      	movs	r4, #39	; 0x27
 8001662:	193b      	adds	r3, r7, r4
 8001664:	193a      	adds	r2, r7, r4
 8001666:	7812      	ldrb	r2, [r2, #0]
 8001668:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	3301      	adds	r3, #1
 800166e:	d058      	beq.n	8001722 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001670:	f7ff fb68 	bl	8000d44 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	429a      	cmp	r2, r3
 800167e:	d306      	bcc.n	800168e <I2C_IsErrorOccurred+0x66>
 8001680:	193b      	adds	r3, r7, r4
 8001682:	193a      	adds	r2, r7, r4
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d149      	bne.n	8001722 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	01db      	lsls	r3, r3, #7
 8001698:	4013      	ands	r3, r2
 800169a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800169c:	2013      	movs	r0, #19
 800169e:	183b      	adds	r3, r7, r0
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	2142      	movs	r1, #66	; 0x42
 80016a4:	5c52      	ldrb	r2, [r2, r1]
 80016a6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	401a      	ands	r2, r3
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d126      	bne.n	800170a <I2C_IsErrorOccurred+0xe2>
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	2380      	movs	r3, #128	; 0x80
 80016c0:	01db      	lsls	r3, r3, #7
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d021      	beq.n	800170a <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 80016c6:	183b      	adds	r3, r7, r0
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b20      	cmp	r3, #32
 80016cc:	d01d      	beq.n	800170a <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	01c9      	lsls	r1, r1, #7
 80016dc:	430a      	orrs	r2, r1
 80016de:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80016e0:	f7ff fb30 	bl	8000d44 <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e8:	e00f      	b.n	800170a <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016ea:	f7ff fb2b 	bl	8000d44 <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b19      	cmp	r3, #25
 80016f6:	d908      	bls.n	800170a <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	2220      	movs	r2, #32
 80016fc:	4313      	orrs	r3, r2
 80016fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001700:	2327      	movs	r3, #39	; 0x27
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]

              break;
 8001708:	e00b      	b.n	8001722 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	2220      	movs	r2, #32
 8001712:	4013      	ands	r3, r2
 8001714:	2127      	movs	r1, #39	; 0x27
 8001716:	187a      	adds	r2, r7, r1
 8001718:	1879      	adds	r1, r7, r1
 800171a:	7809      	ldrb	r1, [r1, #0]
 800171c:	7011      	strb	r1, [r2, #0]
 800171e:	2b20      	cmp	r3, #32
 8001720:	d1e3      	bne.n	80016ea <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	2220      	movs	r2, #32
 800172a:	4013      	ands	r3, r2
 800172c:	2b20      	cmp	r3, #32
 800172e:	d004      	beq.n	800173a <I2C_IsErrorOccurred+0x112>
 8001730:	2327      	movs	r3, #39	; 0x27
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d092      	beq.n	8001660 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800173a:	2327      	movs	r3, #39	; 0x27
 800173c:	18fb      	adds	r3, r7, r3
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2220      	movs	r2, #32
 800174a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800174c:	6a3b      	ldr	r3, [r7, #32]
 800174e:	2204      	movs	r2, #4
 8001750:	4313      	orrs	r3, r2
 8001752:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001754:	2327      	movs	r3, #39	; 0x27
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4013      	ands	r3, r2
 800176c:	d00c      	beq.n	8001788 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	2201      	movs	r2, #1
 8001772:	4313      	orrs	r3, r2
 8001774:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2280      	movs	r2, #128	; 0x80
 800177c:	0052      	lsls	r2, r2, #1
 800177e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001780:	2327      	movs	r3, #39	; 0x27
 8001782:	18fb      	adds	r3, r7, r3
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4013      	ands	r3, r2
 8001790:	d00c      	beq.n	80017ac <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2208      	movs	r2, #8
 8001796:	4313      	orrs	r3, r2
 8001798:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2280      	movs	r2, #128	; 0x80
 80017a0:	00d2      	lsls	r2, r2, #3
 80017a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017a4:	2327      	movs	r3, #39	; 0x27
 80017a6:	18fb      	adds	r3, r7, r3
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	2380      	movs	r3, #128	; 0x80
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4013      	ands	r3, r2
 80017b4:	d00c      	beq.n	80017d0 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80017b6:	6a3b      	ldr	r3, [r7, #32]
 80017b8:	2202      	movs	r2, #2
 80017ba:	4313      	orrs	r3, r2
 80017bc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2280      	movs	r2, #128	; 0x80
 80017c4:	0092      	lsls	r2, r2, #2
 80017c6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017c8:	2327      	movs	r3, #39	; 0x27
 80017ca:	18fb      	adds	r3, r7, r3
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80017d0:	2327      	movs	r3, #39	; 0x27
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01d      	beq.n	8001816 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	0018      	movs	r0, r3
 80017de:	f7ff fea9 	bl	8001534 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	490d      	ldr	r1, [pc, #52]	; (8001824 <I2C_IsErrorOccurred+0x1fc>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017f6:	6a3b      	ldr	r3, [r7, #32]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2241      	movs	r2, #65	; 0x41
 8001802:	2120      	movs	r1, #32
 8001804:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2242      	movs	r2, #66	; 0x42
 800180a:	2100      	movs	r1, #0
 800180c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2240      	movs	r2, #64	; 0x40
 8001812:	2100      	movs	r1, #0
 8001814:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001816:	2327      	movs	r3, #39	; 0x27
 8001818:	18fb      	adds	r3, r7, r3
 800181a:	781b      	ldrb	r3, [r3, #0]
}
 800181c:	0018      	movs	r0, r3
 800181e:	46bd      	mov	sp, r7
 8001820:	b00b      	add	sp, #44	; 0x2c
 8001822:	bd90      	pop	{r4, r7, pc}
 8001824:	fe00e800 	.word	0xfe00e800

08001828 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2241      	movs	r2, #65	; 0x41
 8001836:	5c9b      	ldrb	r3, [r3, r2]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b20      	cmp	r3, #32
 800183c:	d138      	bne.n	80018b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2240      	movs	r2, #64	; 0x40
 8001842:	5c9b      	ldrb	r3, [r3, r2]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001848:	2302      	movs	r3, #2
 800184a:	e032      	b.n	80018b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2240      	movs	r2, #64	; 0x40
 8001850:	2101      	movs	r1, #1
 8001852:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2241      	movs	r2, #65	; 0x41
 8001858:	2124      	movs	r1, #36	; 0x24
 800185a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4911      	ldr	r1, [pc, #68]	; (80018bc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001878:	400a      	ands	r2, r1
 800187a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	430a      	orrs	r2, r1
 800188a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2241      	movs	r2, #65	; 0x41
 80018a0:	2120      	movs	r1, #32
 80018a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2240      	movs	r2, #64	; 0x40
 80018a8:	2100      	movs	r1, #0
 80018aa:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e000      	b.n	80018b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018b0:	2302      	movs	r3, #2
  }
}
 80018b2:	0018      	movs	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	ffffefff 	.word	0xffffefff

080018c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2241      	movs	r2, #65	; 0x41
 80018ce:	5c9b      	ldrb	r3, [r3, r2]
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b20      	cmp	r3, #32
 80018d4:	d139      	bne.n	800194a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2240      	movs	r2, #64	; 0x40
 80018da:	5c9b      	ldrb	r3, [r3, r2]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e033      	b.n	800194c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2240      	movs	r2, #64	; 0x40
 80018e8:	2101      	movs	r1, #1
 80018ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2241      	movs	r2, #65	; 0x41
 80018f0:	2124      	movs	r1, #36	; 0x24
 80018f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2101      	movs	r1, #1
 8001900:	438a      	bics	r2, r1
 8001902:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001910:	4013      	ands	r3, r2
 8001912:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	021b      	lsls	r3, r3, #8
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2241      	movs	r2, #65	; 0x41
 800193a:	2120      	movs	r1, #32
 800193c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2240      	movs	r2, #64	; 0x40
 8001942:	2100      	movs	r1, #0
 8001944:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800194a:	2302      	movs	r3, #2
  }
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b004      	add	sp, #16
 8001952:	bd80      	pop	{r7, pc}
 8001954:	fffff0ff 	.word	0xfffff0ff

08001958 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a19      	ldr	r2, [pc, #100]	; (80019cc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001966:	4013      	ands	r3, r2
 8001968:	0019      	movs	r1, r3
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	430a      	orrs	r2, r1
 8001970:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	429a      	cmp	r2, r3
 800197a:	d11f      	bne.n	80019bc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800197c:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	0013      	movs	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	189b      	adds	r3, r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4912      	ldr	r1, [pc, #72]	; (80019d4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800198a:	0018      	movs	r0, r3
 800198c:	f7fe fbc4 	bl	8000118 <__udivsi3>
 8001990:	0003      	movs	r3, r0
 8001992:	3301      	adds	r3, #1
 8001994:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001996:	e008      	b.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e001      	b.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e009      	b.n	80019be <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	401a      	ands	r2, r3
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d0ed      	beq.n	8001998 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b004      	add	sp, #16
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	40007000 	.word	0x40007000
 80019cc:	fffff9ff 	.word	0xfffff9ff
 80019d0:	2000002c 	.word	0x2000002c
 80019d4:	000f4240 	.word	0x000f4240

080019d8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <LL_RCC_GetAPB1Prescaler+0x14>)
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	23e0      	movs	r3, #224	; 0xe0
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4013      	ands	r3, r2
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e2fe      	b.n	8002000 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_OscConfig+0x1e>
 8001a0c:	e07c      	b.n	8001b08 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a0e:	4bc3      	ldr	r3, [pc, #780]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2238      	movs	r2, #56	; 0x38
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a18:	4bc0      	ldr	r3, [pc, #768]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	4013      	ands	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3e>
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d002      	beq.n	8001a34 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d10b      	bne.n	8001a4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	4bb9      	ldr	r3, [pc, #740]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	029b      	lsls	r3, r3, #10
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	d062      	beq.n	8001b06 <HAL_RCC_OscConfig+0x116>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d15e      	bne.n	8001b06 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e2d9      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	025b      	lsls	r3, r3, #9
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x78>
 8001a58:	4bb0      	ldr	r3, [pc, #704]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4baf      	ldr	r3, [pc, #700]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	2180      	movs	r1, #128	; 0x80
 8001a60:	0249      	lsls	r1, r1, #9
 8001a62:	430a      	orrs	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	e020      	b.n	8001aaa <HAL_RCC_OscConfig+0xba>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	23a0      	movs	r3, #160	; 0xa0
 8001a6e:	02db      	lsls	r3, r3, #11
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d10e      	bne.n	8001a92 <HAL_RCC_OscConfig+0xa2>
 8001a74:	4ba9      	ldr	r3, [pc, #676]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	4ba8      	ldr	r3, [pc, #672]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	02c9      	lsls	r1, r1, #11
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	4ba6      	ldr	r3, [pc, #664]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4ba5      	ldr	r3, [pc, #660]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a88:	2180      	movs	r1, #128	; 0x80
 8001a8a:	0249      	lsls	r1, r1, #9
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e00b      	b.n	8001aaa <HAL_RCC_OscConfig+0xba>
 8001a92:	4ba2      	ldr	r3, [pc, #648]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4ba1      	ldr	r3, [pc, #644]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001a98:	49a1      	ldr	r1, [pc, #644]	; (8001d20 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	400a      	ands	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	4b9f      	ldr	r3, [pc, #636]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4b9e      	ldr	r3, [pc, #632]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001aa4:	499f      	ldr	r1, [pc, #636]	; (8001d24 <HAL_RCC_OscConfig+0x334>)
 8001aa6:	400a      	ands	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d014      	beq.n	8001adc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab2:	f7ff f947 	bl	8000d44 <HAL_GetTick>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff f942 	bl	8000d44 <HAL_GetTick>
 8001ac0:	0002      	movs	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e298      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ace:	4b93      	ldr	r3, [pc, #588]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	029b      	lsls	r3, r3, #10
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0xcc>
 8001ada:	e015      	b.n	8001b08 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f932 	bl	8000d44 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae6:	f7ff f92d 	bl	8000d44 <HAL_GetTick>
 8001aea:	0002      	movs	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b64      	cmp	r3, #100	; 0x64
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e283      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001af8:	4b88      	ldr	r3, [pc, #544]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	4013      	ands	r3, r2
 8001b02:	d1f0      	bne.n	8001ae6 <HAL_RCC_OscConfig+0xf6>
 8001b04:	e000      	b.n	8001b08 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b06:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d100      	bne.n	8001b14 <HAL_RCC_OscConfig+0x124>
 8001b12:	e099      	b.n	8001c48 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b14:	4b81      	ldr	r3, [pc, #516]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2238      	movs	r2, #56	; 0x38
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1e:	4b7f      	ldr	r3, [pc, #508]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	2203      	movs	r2, #3
 8001b24:	4013      	ands	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b10      	cmp	r3, #16
 8001b2c:	d102      	bne.n	8001b34 <HAL_RCC_OscConfig+0x144>
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d002      	beq.n	8001b3a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d135      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b3a:	4b78      	ldr	r3, [pc, #480]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4013      	ands	r3, r2
 8001b44:	d005      	beq.n	8001b52 <HAL_RCC_OscConfig+0x162>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e256      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b52:	4b72      	ldr	r3, [pc, #456]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a74      	ldr	r2, [pc, #464]	; (8001d28 <HAL_RCC_OscConfig+0x338>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	021a      	lsls	r2, r3, #8
 8001b62:	4b6e      	ldr	r3, [pc, #440]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b64:	430a      	orrs	r2, r1
 8001b66:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d112      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b6e:	4b6b      	ldr	r3, [pc, #428]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x33c>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b82:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	0adb      	lsrs	r3, r3, #11
 8001b88:	2207      	movs	r2, #7
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	4a68      	ldr	r2, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x340>)
 8001b8e:	40da      	lsrs	r2, r3
 8001b90:	4b68      	ldr	r3, [pc, #416]	; (8001d34 <HAL_RCC_OscConfig+0x344>)
 8001b92:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b94:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_OscConfig+0x348>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7ff f877 	bl	8000c8c <HAL_InitTick>
 8001b9e:	1e03      	subs	r3, r0, #0
 8001ba0:	d051      	beq.n	8001c46 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e22c      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d030      	beq.n	8001c10 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bae:	4b5b      	ldr	r3, [pc, #364]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a5e      	ldr	r2, [pc, #376]	; (8001d2c <HAL_RCC_OscConfig+0x33c>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	4b57      	ldr	r3, [pc, #348]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001bc2:	4b56      	ldr	r3, [pc, #344]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b55      	ldr	r3, [pc, #340]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	2180      	movs	r1, #128	; 0x80
 8001bca:	0049      	lsls	r1, r1, #1
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f8b8 	bl	8000d44 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff f8b3 	bl	8000d44 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e209      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bec:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d0f0      	beq.n	8001bda <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b48      	ldr	r3, [pc, #288]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a4a      	ldr	r2, [pc, #296]	; (8001d28 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	021a      	lsls	r2, r3, #8
 8001c08:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	e01b      	b.n	8001c48 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c10:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b41      	ldr	r3, [pc, #260]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c16:	4949      	ldr	r1, [pc, #292]	; (8001d3c <HAL_RCC_OscConfig+0x34c>)
 8001c18:	400a      	ands	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff f892 	bl	8000d44 <HAL_GetTick>
 8001c20:	0003      	movs	r3, r0
 8001c22:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c26:	f7ff f88d 	bl	8000d44 <HAL_GetTick>
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e1e3      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c38:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4013      	ands	r3, r2
 8001c42:	d1f0      	bne.n	8001c26 <HAL_RCC_OscConfig+0x236>
 8001c44:	e000      	b.n	8001c48 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2208      	movs	r2, #8
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d047      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c52:	4b32      	ldr	r3, [pc, #200]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b18      	cmp	r3, #24
 8001c5c:	d10a      	bne.n	8001c74 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c5e:	4b2f      	ldr	r3, [pc, #188]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	2202      	movs	r2, #2
 8001c64:	4013      	ands	r3, r2
 8001c66:	d03c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x2f2>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d138      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e1c5      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d019      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c80:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	430a      	orrs	r2, r1
 8001c86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff f85c 	bl	8000d44 <HAL_GetTick>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c92:	f7ff f857 	bl	8000d44 <HAL_GetTick>
 8001c96:	0002      	movs	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e1ad      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca8:	2202      	movs	r2, #2
 8001caa:	4013      	ands	r3, r2
 8001cac:	d0f1      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2a2>
 8001cae:	e018      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cb0:	4b1a      	ldr	r3, [pc, #104]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001cb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	438a      	bics	r2, r1
 8001cba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7ff f842 	bl	8000d44 <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc6:	f7ff f83d 	bl	8000d44 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e193      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cdc:	2202      	movs	r2, #2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d1f1      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d100      	bne.n	8001cee <HAL_RCC_OscConfig+0x2fe>
 8001cec:	e0c6      	b.n	8001e7c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cee:	231f      	movs	r3, #31
 8001cf0:	18fb      	adds	r3, r7, r3
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2238      	movs	r2, #56	; 0x38
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d11e      	bne.n	8001d40 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HAL_RCC_OscConfig+0x32c>)
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x31e>
 8001d0c:	e0b6      	b.n	8001e7c <HAL_RCC_OscConfig+0x48c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d000      	beq.n	8001d18 <HAL_RCC_OscConfig+0x328>
 8001d16:	e0b1      	b.n	8001e7c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e171      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	fffeffff 	.word	0xfffeffff
 8001d24:	fffbffff 	.word	0xfffbffff
 8001d28:	ffff80ff 	.word	0xffff80ff
 8001d2c:	ffffc7ff 	.word	0xffffc7ff
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	2000002c 	.word	0x2000002c
 8001d38:	20000030 	.word	0x20000030
 8001d3c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d40:	4bb1      	ldr	r3, [pc, #708]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	055b      	lsls	r3, r3, #21
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_OscConfig+0x360>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x362>
 8001d50:	2300      	movs	r3, #0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d011      	beq.n	8001d7a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	4bac      	ldr	r3, [pc, #688]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001d58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d5a:	4bab      	ldr	r3, [pc, #684]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	0549      	lsls	r1, r1, #21
 8001d60:	430a      	orrs	r2, r1
 8001d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d64:	4ba8      	ldr	r3, [pc, #672]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d68:	2380      	movs	r3, #128	; 0x80
 8001d6a:	055b      	lsls	r3, r3, #21
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001d72:	231f      	movs	r3, #31
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7a:	4ba4      	ldr	r3, [pc, #656]	; (800200c <HAL_RCC_OscConfig+0x61c>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	2380      	movs	r3, #128	; 0x80
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	4013      	ands	r3, r2
 8001d84:	d11a      	bne.n	8001dbc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d86:	4ba1      	ldr	r3, [pc, #644]	; (800200c <HAL_RCC_OscConfig+0x61c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4ba0      	ldr	r3, [pc, #640]	; (800200c <HAL_RCC_OscConfig+0x61c>)
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	0049      	lsls	r1, r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001d94:	f7fe ffd6 	bl	8000d44 <HAL_GetTick>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7fe ffd1 	bl	8000d44 <HAL_GetTick>
 8001da2:	0002      	movs	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e127      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001db0:	4b96      	ldr	r3, [pc, #600]	; (800200c <HAL_RCC_OscConfig+0x61c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4013      	ands	r3, r2
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x3e2>
 8001dc4:	4b90      	ldr	r3, [pc, #576]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001dc6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dc8:	4b8f      	ldr	r3, [pc, #572]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	65da      	str	r2, [r3, #92]	; 0x5c
 8001dd0:	e01c      	b.n	8001e0c <HAL_RCC_OscConfig+0x41c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b05      	cmp	r3, #5
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x404>
 8001dda:	4b8b      	ldr	r3, [pc, #556]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001ddc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dde:	4b8a      	ldr	r3, [pc, #552]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001de0:	2104      	movs	r1, #4
 8001de2:	430a      	orrs	r2, r1
 8001de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de6:	4b88      	ldr	r3, [pc, #544]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001de8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001dea:	4b87      	ldr	r3, [pc, #540]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	430a      	orrs	r2, r1
 8001df0:	65da      	str	r2, [r3, #92]	; 0x5c
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0x41c>
 8001df4:	4b84      	ldr	r3, [pc, #528]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001df6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001df8:	4b83      	ldr	r3, [pc, #524]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	438a      	bics	r2, r1
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e00:	4b81      	ldr	r3, [pc, #516]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e04:	4b80      	ldr	r3, [pc, #512]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001e06:	2104      	movs	r1, #4
 8001e08:	438a      	bics	r2, r1
 8001e0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d014      	beq.n	8001e3e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7fe ff96 	bl	8000d44 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1c:	e009      	b.n	8001e32 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe ff91 	bl	8000d44 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	4a79      	ldr	r2, [pc, #484]	; (8002010 <HAL_RCC_OscConfig+0x620>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e0e6      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e32:	4b75      	ldr	r3, [pc, #468]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e36:	2202      	movs	r2, #2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x42e>
 8001e3c:	e013      	b.n	8001e66 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e3e:	f7fe ff81 	bl	8000d44 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e46:	e009      	b.n	8001e5c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e48:	f7fe ff7c 	bl	8000d44 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	4a6f      	ldr	r2, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x620>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e0d1      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e5c:	4b6a      	ldr	r3, [pc, #424]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e66:	231f      	movs	r3, #31
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d105      	bne.n	8001e7c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001e70:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e74:	4b64      	ldr	r3, [pc, #400]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001e76:	4967      	ldr	r1, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x624>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d100      	bne.n	8001e86 <HAL_RCC_OscConfig+0x496>
 8001e84:	e0bb      	b.n	8001ffe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e86:	4b60      	ldr	r3, [pc, #384]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	2238      	movs	r2, #56	; 0x38
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	d100      	bne.n	8001e94 <HAL_RCC_OscConfig+0x4a4>
 8001e92:	e07b      	b.n	8001f8c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d156      	bne.n	8001f4a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e9c:	4b5a      	ldr	r3, [pc, #360]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001ea2:	495d      	ldr	r1, [pc, #372]	; (8002018 <HAL_RCC_OscConfig+0x628>)
 8001ea4:	400a      	ands	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7fe ff4c 	bl	8000d44 <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7fe ff47 	bl	8000d44 <HAL_GetTick>
 8001eb6:	0002      	movs	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e09d      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	049b      	lsls	r3, r3, #18
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4a51      	ldr	r2, [pc, #324]	; (800201c <HAL_RCC_OscConfig+0x62c>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	0019      	movs	r1, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	431a      	orrs	r2, r3
 8001efe:	4b42      	ldr	r3, [pc, #264]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f00:	430a      	orrs	r2, r1
 8001f02:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f04:	4b40      	ldr	r3, [pc, #256]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b3f      	ldr	r3, [pc, #252]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0449      	lsls	r1, r1, #17
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	4b3c      	ldr	r3, [pc, #240]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	0549      	lsls	r1, r1, #21
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe ff10 	bl	8000d44 <HAL_GetTick>
 8001f24:	0003      	movs	r3, r0
 8001f26:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe ff0b 	bl	8000d44 <HAL_GetTick>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e061      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	2380      	movs	r3, #128	; 0x80
 8001f42:	049b      	lsls	r3, r3, #18
 8001f44:	4013      	ands	r3, r2
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x53a>
 8001f48:	e059      	b.n	8001ffe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f50:	4931      	ldr	r1, [pc, #196]	; (8002018 <HAL_RCC_OscConfig+0x628>)
 8001f52:	400a      	ands	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7fe fef5 	bl	8000d44 <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f60:	f7fe fef0 	bl	8000d44 <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e046      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	2380      	movs	r3, #128	; 0x80
 8001f78:	049b      	lsls	r3, r3, #18
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f84:	4926      	ldr	r1, [pc, #152]	; (8002020 <HAL_RCC_OscConfig+0x630>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	e038      	b.n	8001ffe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e033      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x618>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d126      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2270      	movs	r2, #112	; 0x70
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d11f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	23fe      	movs	r3, #254	; 0xfe
 8001fbe:	01db      	lsls	r3, r3, #7
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc6:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d116      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fcc:	697a      	ldr	r2, [r7, #20]
 8001fce:	23f8      	movs	r3, #248	; 0xf8
 8001fd0:	039b      	lsls	r3, r3, #14
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d10e      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	23e0      	movs	r3, #224	; 0xe0
 8001fe0:	051b      	lsls	r3, r3, #20
 8001fe2:	401a      	ands	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	0f5b      	lsrs	r3, r3, #29
 8001ff0:	075a      	lsls	r2, r3, #29
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d001      	beq.n	8001ffe <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	0018      	movs	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	b008      	add	sp, #32
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40007000 	.word	0x40007000
 8002010:	00001388 	.word	0x00001388
 8002014:	efffffff 	.word	0xefffffff
 8002018:	feffffff 	.word	0xfeffffff
 800201c:	11c1808c 	.word	0x11c1808c
 8002020:	eefefffc 	.word	0xeefefffc

08002024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0e9      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b76      	ldr	r3, [pc, #472]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2207      	movs	r2, #7
 800203e:	4013      	ands	r3, r2
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d91e      	bls.n	8002084 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b73      	ldr	r3, [pc, #460]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2207      	movs	r2, #7
 800204c:	4393      	bics	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	4b70      	ldr	r3, [pc, #448]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	430a      	orrs	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002058:	f7fe fe74 	bl	8000d44 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002060:	e009      	b.n	8002076 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002062:	f7fe fe6f 	bl	8000d44 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a6a      	ldr	r2, [pc, #424]	; (8002218 <HAL_RCC_ClockConfig+0x1f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0ca      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2207      	movs	r2, #7
 800207c:	4013      	ands	r3, r2
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2202      	movs	r2, #2
 800208a:	4013      	ands	r3, r2
 800208c:	d015      	beq.n	80020ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2204      	movs	r2, #4
 8002094:	4013      	ands	r3, r2
 8002096:	d006      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002098:	4b60      	ldr	r3, [pc, #384]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	4b5f      	ldr	r3, [pc, #380]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 800209e:	21e0      	movs	r1, #224	; 0xe0
 80020a0:	01c9      	lsls	r1, r1, #7
 80020a2:	430a      	orrs	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a6:	4b5d      	ldr	r3, [pc, #372]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	4a5d      	ldr	r2, [pc, #372]	; (8002220 <HAL_RCC_ClockConfig+0x1fc>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	0019      	movs	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4b59      	ldr	r3, [pc, #356]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	430a      	orrs	r2, r1
 80020b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2201      	movs	r2, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d057      	beq.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d107      	bne.n	80020dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020cc:	4b53      	ldr	r3, [pc, #332]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	2380      	movs	r3, #128	; 0x80
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	4013      	ands	r3, r2
 80020d6:	d12b      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e097      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2380      	movs	r3, #128	; 0x80
 80020ea:	049b      	lsls	r3, r3, #18
 80020ec:	4013      	ands	r3, r2
 80020ee:	d11f      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e08b      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fc:	4b47      	ldr	r3, [pc, #284]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4013      	ands	r3, r2
 8002106:	d113      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e07f      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d106      	bne.n	8002122 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002114:	4b41      	ldr	r3, [pc, #260]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002118:	2202      	movs	r2, #2
 800211a:	4013      	ands	r3, r2
 800211c:	d108      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e074      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002122:	4b3e      	ldr	r3, [pc, #248]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002126:	2202      	movs	r2, #2
 8002128:	4013      	ands	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e06d      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002130:	4b3a      	ldr	r3, [pc, #232]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2207      	movs	r2, #7
 8002136:	4393      	bics	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4b37      	ldr	r3, [pc, #220]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002144:	f7fe fdfe 	bl	8000d44 <HAL_GetTick>
 8002148:	0003      	movs	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214c:	e009      	b.n	8002162 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214e:	f7fe fdf9 	bl	8000d44 <HAL_GetTick>
 8002152:	0002      	movs	r2, r0
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <HAL_RCC_ClockConfig+0x1f4>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e054      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b2e      	ldr	r3, [pc, #184]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	2238      	movs	r2, #56	; 0x38
 8002168:	401a      	ands	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	429a      	cmp	r2, r3
 8002172:	d1ec      	bne.n	800214e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2207      	movs	r2, #7
 800217a:	4013      	ands	r3, r2
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d21e      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2207      	movs	r2, #7
 8002188:	4393      	bics	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002194:	f7fe fdd6 	bl	8000d44 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800219c:	e009      	b.n	80021b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219e:	f7fe fdd1 	bl	8000d44 <HAL_GetTick>
 80021a2:	0002      	movs	r2, r0
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <HAL_RCC_ClockConfig+0x1f4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e02c      	b.n	800220c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2207      	movs	r2, #7
 80021b8:	4013      	ands	r3, r2
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1ee      	bne.n	800219e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2204      	movs	r2, #4
 80021c6:	4013      	ands	r3, r2
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021ca:	4b14      	ldr	r3, [pc, #80]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	4a15      	ldr	r2, [pc, #84]	; (8002224 <HAL_RCC_ClockConfig+0x200>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	0019      	movs	r1, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4b10      	ldr	r3, [pc, #64]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021de:	f000 f829 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021e2:	0001      	movs	r1, r0
 80021e4:	4b0d      	ldr	r3, [pc, #52]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	220f      	movs	r2, #15
 80021ec:	401a      	ands	r2, r3
 80021ee:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_RCC_ClockConfig+0x204>)
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	58d3      	ldr	r3, [r2, r3]
 80021f4:	221f      	movs	r2, #31
 80021f6:	4013      	ands	r3, r2
 80021f8:	000a      	movs	r2, r1
 80021fa:	40da      	lsrs	r2, r3
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x208>)
 80021fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <HAL_RCC_ClockConfig+0x20c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0018      	movs	r0, r3
 8002206:	f7fe fd41 	bl	8000c8c <HAL_InitTick>
 800220a:	0003      	movs	r3, r0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40022000 	.word	0x40022000
 8002218:	00001388 	.word	0x00001388
 800221c:	40021000 	.word	0x40021000
 8002220:	fffff0ff 	.word	0xfffff0ff
 8002224:	ffff8fff 	.word	0xffff8fff
 8002228:	08003e60 	.word	0x08003e60
 800222c:	2000002c 	.word	0x2000002c
 8002230:	20000030 	.word	0x20000030

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2238      	movs	r2, #56	; 0x38
 8002240:	4013      	ands	r3, r2
 8002242:	d10f      	bne.n	8002264 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002244:	4b39      	ldr	r3, [pc, #228]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0adb      	lsrs	r3, r3, #11
 800224a:	2207      	movs	r2, #7
 800224c:	4013      	ands	r3, r2
 800224e:	2201      	movs	r2, #1
 8002250:	409a      	lsls	r2, r3
 8002252:	0013      	movs	r3, r2
 8002254:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	4835      	ldr	r0, [pc, #212]	; (8002330 <HAL_RCC_GetSysClockFreq+0xfc>)
 800225a:	f7fd ff5d 	bl	8000118 <__udivsi3>
 800225e:	0003      	movs	r3, r0
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	e05d      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2238      	movs	r2, #56	; 0x38
 800226a:	4013      	ands	r3, r2
 800226c:	2b08      	cmp	r3, #8
 800226e:	d102      	bne.n	8002276 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_RCC_GetSysClockFreq+0x100>)
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	e054      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002276:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2238      	movs	r2, #56	; 0x38
 800227c:	4013      	ands	r3, r2
 800227e:	2b10      	cmp	r3, #16
 8002280:	d138      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2203      	movs	r2, #3
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800228c:	4b27      	ldr	r3, [pc, #156]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	2207      	movs	r2, #7
 8002294:	4013      	ands	r3, r2
 8002296:	3301      	adds	r3, #1
 8002298:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d10d      	bne.n	80022bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	4824      	ldr	r0, [pc, #144]	; (8002334 <HAL_RCC_GetSysClockFreq+0x100>)
 80022a4:	f7fd ff38 	bl	8000118 <__udivsi3>
 80022a8:	0003      	movs	r3, r0
 80022aa:	0019      	movs	r1, r3
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	227f      	movs	r2, #127	; 0x7f
 80022b4:	4013      	ands	r3, r2
 80022b6:	434b      	muls	r3, r1
 80022b8:	617b      	str	r3, [r7, #20]
        break;
 80022ba:	e00d      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	481c      	ldr	r0, [pc, #112]	; (8002330 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022c0:	f7fd ff2a 	bl	8000118 <__udivsi3>
 80022c4:	0003      	movs	r3, r0
 80022c6:	0019      	movs	r1, r3
 80022c8:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	227f      	movs	r2, #127	; 0x7f
 80022d0:	4013      	ands	r3, r2
 80022d2:	434b      	muls	r3, r1
 80022d4:	617b      	str	r3, [r7, #20]
        break;
 80022d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80022d8:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0f5b      	lsrs	r3, r3, #29
 80022de:	2207      	movs	r2, #7
 80022e0:	4013      	ands	r3, r2
 80022e2:	3301      	adds	r3, #1
 80022e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	6978      	ldr	r0, [r7, #20]
 80022ea:	f7fd ff15 	bl	8000118 <__udivsi3>
 80022ee:	0003      	movs	r3, r0
 80022f0:	613b      	str	r3, [r7, #16]
 80022f2:	e015      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2238      	movs	r2, #56	; 0x38
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b20      	cmp	r3, #32
 80022fe:	d103      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	e00b      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_RCC_GetSysClockFreq+0xf8>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2238      	movs	r2, #56	; 0x38
 800230e:	4013      	ands	r3, r2
 8002310:	2b18      	cmp	r3, #24
 8002312:	d103      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002314:	23fa      	movs	r3, #250	; 0xfa
 8002316:	01db      	lsls	r3, r3, #7
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	e001      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002320:	693b      	ldr	r3, [r7, #16]
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b006      	add	sp, #24
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	40021000 	.word	0x40021000
 8002330:	00f42400 	.word	0x00f42400
 8002334:	007a1200 	.word	0x007a1200

08002338 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b02      	ldr	r3, [pc, #8]	; (8002348 <HAL_RCC_GetHCLKFreq+0x10>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	0018      	movs	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	2000002c 	.word	0x2000002c

0800234c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002350:	f7ff fff2 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002354:	0004      	movs	r4, r0
 8002356:	f7ff fb3f 	bl	80019d8 <LL_RCC_GetAPB1Prescaler>
 800235a:	0003      	movs	r3, r0
 800235c:	0b1a      	lsrs	r2, r3, #12
 800235e:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002360:	0092      	lsls	r2, r2, #2
 8002362:	58d3      	ldr	r3, [r2, r3]
 8002364:	221f      	movs	r2, #31
 8002366:	4013      	ands	r3, r2
 8002368:	40dc      	lsrs	r4, r3
 800236a:	0023      	movs	r3, r4
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bdb0      	pop	{r4, r5, r7, pc}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	08003ea0 	.word	0x08003ea0

08002378 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002380:	2313      	movs	r3, #19
 8002382:	18fb      	adds	r3, r7, r3
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002388:	2312      	movs	r3, #18
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	; 0x80
 8002396:	029b      	lsls	r3, r3, #10
 8002398:	4013      	ands	r3, r2
 800239a:	d100      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800239c:	e0a3      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239e:	2011      	movs	r0, #17
 80023a0:	183b      	adds	r3, r7, r0
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a6:	4bc3      	ldr	r3, [pc, #780]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	055b      	lsls	r3, r3, #21
 80023ae:	4013      	ands	r3, r2
 80023b0:	d110      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b2:	4bc0      	ldr	r3, [pc, #768]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b6:	4bbf      	ldr	r3, [pc, #764]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023b8:	2180      	movs	r1, #128	; 0x80
 80023ba:	0549      	lsls	r1, r1, #21
 80023bc:	430a      	orrs	r2, r1
 80023be:	63da      	str	r2, [r3, #60]	; 0x3c
 80023c0:	4bbc      	ldr	r3, [pc, #752]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80023c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	055b      	lsls	r3, r3, #21
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ce:	183b      	adds	r3, r7, r0
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d4:	4bb8      	ldr	r3, [pc, #736]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4bb7      	ldr	r3, [pc, #732]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	0049      	lsls	r1, r1, #1
 80023de:	430a      	orrs	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023e2:	f7fe fcaf 	bl	8000d44 <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023ea:	e00b      	b.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ec:	f7fe fcaa 	bl	8000d44 <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d904      	bls.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80023fa:	2313      	movs	r3, #19
 80023fc:	18fb      	adds	r3, r7, r3
 80023fe:	2203      	movs	r2, #3
 8002400:	701a      	strb	r2, [r3, #0]
        break;
 8002402:	e005      	b.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002404:	4bac      	ldr	r3, [pc, #688]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	; 0x80
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	4013      	ands	r3, r2
 800240e:	d0ed      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002410:	2313      	movs	r3, #19
 8002412:	18fb      	adds	r3, r7, r3
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d154      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800241a:	4ba6      	ldr	r3, [pc, #664]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800241c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800241e:	23c0      	movs	r3, #192	; 0xc0
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4013      	ands	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d019      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	429a      	cmp	r2, r3
 8002434:	d014      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002436:	4b9f      	ldr	r3, [pc, #636]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	4aa0      	ldr	r2, [pc, #640]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800243c:	4013      	ands	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002440:	4b9c      	ldr	r3, [pc, #624]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002442:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002444:	4b9b      	ldr	r3, [pc, #620]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002446:	2180      	movs	r1, #128	; 0x80
 8002448:	0249      	lsls	r1, r1, #9
 800244a:	430a      	orrs	r2, r1
 800244c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800244e:	4b99      	ldr	r3, [pc, #612]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002452:	4b98      	ldr	r3, [pc, #608]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002454:	499a      	ldr	r1, [pc, #616]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002456:	400a      	ands	r2, r1
 8002458:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800245a:	4b96      	ldr	r3, [pc, #600]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2201      	movs	r2, #1
 8002464:	4013      	ands	r3, r2
 8002466:	d016      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7fe fc6c 	bl	8000d44 <HAL_GetTick>
 800246c:	0003      	movs	r3, r0
 800246e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002470:	e00c      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fc67 	bl	8000d44 <HAL_GetTick>
 8002476:	0002      	movs	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	4a91      	ldr	r2, [pc, #580]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d904      	bls.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002482:	2313      	movs	r3, #19
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	2203      	movs	r2, #3
 8002488:	701a      	strb	r2, [r3, #0]
            break;
 800248a:	e004      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248c:	4b89      	ldr	r3, [pc, #548]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	2202      	movs	r2, #2
 8002492:	4013      	ands	r3, r2
 8002494:	d0ed      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002496:	2313      	movs	r3, #19
 8002498:	18fb      	adds	r3, r7, r3
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d10a      	bne.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024a0:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	4a85      	ldr	r2, [pc, #532]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ae:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	65da      	str	r2, [r3, #92]	; 0x5c
 80024b4:	e00c      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024b6:	2312      	movs	r3, #18
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	2213      	movs	r2, #19
 80024bc:	18ba      	adds	r2, r7, r2
 80024be:	7812      	ldrb	r2, [r2, #0]
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e005      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c4:	2312      	movs	r3, #18
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2213      	movs	r2, #19
 80024ca:	18ba      	adds	r2, r7, r2
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024d0:	2311      	movs	r3, #17
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024de:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024e0:	4979      	ldr	r1, [pc, #484]	; (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80024e2:	400a      	ands	r2, r1
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4013      	ands	r3, r2
 80024ee:	d009      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f0:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80024f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f4:	2203      	movs	r2, #3
 80024f6:	4393      	bics	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002500:	430a      	orrs	r2, r1
 8002502:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2202      	movs	r2, #2
 800250a:	4013      	ands	r3, r2
 800250c:	d009      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800250e:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	220c      	movs	r2, #12
 8002514:	4393      	bics	r3, r2
 8002516:	0019      	movs	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800251e:	430a      	orrs	r2, r1
 8002520:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2210      	movs	r2, #16
 8002528:	4013      	ands	r3, r2
 800252a:	d009      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800252c:	4b61      	ldr	r3, [pc, #388]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	4a66      	ldr	r2, [pc, #408]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002532:	4013      	ands	r3, r2
 8002534:	0019      	movs	r1, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800253c:	430a      	orrs	r2, r1
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4013      	ands	r3, r2
 800254a:	d009      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800254c:	4b59      	ldr	r3, [pc, #356]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	4a5f      	ldr	r2, [pc, #380]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002552:	4013      	ands	r3, r2
 8002554:	0019      	movs	r1, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699a      	ldr	r2, [r3, #24]
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800255c:	430a      	orrs	r2, r1
 800255e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4013      	ands	r3, r2
 800256a:	d009      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800256c:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800256e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002570:	4a58      	ldr	r2, [pc, #352]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002572:	4013      	ands	r3, r2
 8002574:	0019      	movs	r1, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69da      	ldr	r2, [r3, #28]
 800257a:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800257c:	430a      	orrs	r2, r1
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2220      	movs	r2, #32
 8002586:	4013      	ands	r3, r2
 8002588:	d009      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	4a52      	ldr	r2, [pc, #328]	; (80026d8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002590:	4013      	ands	r3, r2
 8002592:	0019      	movs	r1, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800259a:	430a      	orrs	r2, r1
 800259c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	01db      	lsls	r3, r3, #7
 80025a6:	4013      	ands	r3, r2
 80025a8:	d015      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025aa:	4b42      	ldr	r3, [pc, #264]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	0899      	lsrs	r1, r3, #2
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1a      	ldr	r2, [r3, #32]
 80025b6:	4b3f      	ldr	r3, [pc, #252]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025b8:	430a      	orrs	r2, r1
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1a      	ldr	r2, [r3, #32]
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	05db      	lsls	r3, r3, #23
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d106      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ce:	2180      	movs	r1, #128	; 0x80
 80025d0:	0249      	lsls	r1, r1, #9
 80025d2:	430a      	orrs	r2, r1
 80025d4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	031b      	lsls	r3, r3, #12
 80025de:	4013      	ands	r3, r2
 80025e0:	d009      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025e2:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	4393      	bics	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f2:	430a      	orrs	r2, r1
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	039b      	lsls	r3, r3, #14
 80025fe:	4013      	ands	r3, r2
 8002600:	d016      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002602:	4b2c      	ldr	r3, [pc, #176]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	4a35      	ldr	r2, [pc, #212]	; (80026dc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002608:	4013      	ands	r3, r2
 800260a:	0019      	movs	r1, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002612:	430a      	orrs	r2, r1
 8002614:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	03db      	lsls	r3, r3, #15
 800261e:	429a      	cmp	r2, r3
 8002620:	d106      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002624:	68da      	ldr	r2, [r3, #12]
 8002626:	4b23      	ldr	r3, [pc, #140]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002628:	2180      	movs	r1, #128	; 0x80
 800262a:	0449      	lsls	r1, r1, #17
 800262c:	430a      	orrs	r2, r1
 800262e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	03db      	lsls	r3, r3, #15
 8002638:	4013      	ands	r3, r2
 800263a:	d016      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800263c:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	4a27      	ldr	r2, [pc, #156]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002642:	4013      	ands	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800264a:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800264c:	430a      	orrs	r2, r1
 800264e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	045b      	lsls	r3, r3, #17
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800265c:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002662:	2180      	movs	r1, #128	; 0x80
 8002664:	0449      	lsls	r1, r1, #17
 8002666:	430a      	orrs	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4013      	ands	r3, r2
 8002674:	d016      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	4a1a      	ldr	r2, [pc, #104]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800267c:	4013      	ands	r3, r2
 800267e:	0019      	movs	r1, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002686:	430a      	orrs	r2, r1
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	2380      	movs	r3, #128	; 0x80
 8002690:	01db      	lsls	r3, r3, #7
 8002692:	429a      	cmp	r2, r3
 8002694:	d106      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800269c:	2180      	movs	r1, #128	; 0x80
 800269e:	0249      	lsls	r1, r1, #9
 80026a0:	430a      	orrs	r2, r1
 80026a2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80026a4:	2312      	movs	r3, #18
 80026a6:	18fb      	adds	r3, r7, r3
 80026a8:	781b      	ldrb	r3, [r3, #0]
}
 80026aa:	0018      	movs	r0, r3
 80026ac:	46bd      	mov	sp, r7
 80026ae:	b006      	add	sp, #24
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40007000 	.word	0x40007000
 80026bc:	fffffcff 	.word	0xfffffcff
 80026c0:	fffeffff 	.word	0xfffeffff
 80026c4:	00001388 	.word	0x00001388
 80026c8:	efffffff 	.word	0xefffffff
 80026cc:	fffff3ff 	.word	0xfffff3ff
 80026d0:	fff3ffff 	.word	0xfff3ffff
 80026d4:	ffcfffff 	.word	0xffcfffff
 80026d8:	ffffcfff 	.word	0xffffcfff
 80026dc:	ffbfffff 	.word	0xffbfffff
 80026e0:	feffffff 	.word	0xfeffffff
 80026e4:	ffff3fff 	.word	0xffff3fff

080026e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e046      	b.n	8002788 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2288      	movs	r2, #136	; 0x88
 80026fe:	589b      	ldr	r3, [r3, r2]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2284      	movs	r2, #132	; 0x84
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f7fe f9be 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2288      	movs	r2, #136	; 0x88
 8002718:	2124      	movs	r1, #36	; 0x24
 800271a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2101      	movs	r1, #1
 8002728:	438a      	bics	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 fb8e 	bl	8002e58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	0018      	movs	r0, r3
 8002740:	f000 f8cc 	bl	80028dc <UART_SetConfig>
 8002744:	0003      	movs	r3, r0
 8002746:	2b01      	cmp	r3, #1
 8002748:	d101      	bne.n	800274e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e01c      	b.n	8002788 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	490d      	ldr	r1, [pc, #52]	; (8002790 <HAL_UART_Init+0xa8>)
 800275a:	400a      	ands	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	212a      	movs	r1, #42	; 0x2a
 800276a:	438a      	bics	r2, r1
 800276c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	430a      	orrs	r2, r1
 800277c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	0018      	movs	r0, r3
 8002782:	f000 fc1d 	bl	8002fc0 <UART_CheckIdleState>
 8002786:	0003      	movs	r3, r0
}
 8002788:	0018      	movs	r0, r3
 800278a:	46bd      	mov	sp, r7
 800278c:	b002      	add	sp, #8
 800278e:	bd80      	pop	{r7, pc}
 8002790:	ffffb7ff 	.word	0xffffb7ff

08002794 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	1dbb      	adds	r3, r7, #6
 80027a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2288      	movs	r2, #136	; 0x88
 80027a8:	589b      	ldr	r3, [r3, r2]
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d000      	beq.n	80027b0 <HAL_UART_Transmit+0x1c>
 80027ae:	e090      	b.n	80028d2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_UART_Transmit+0x2a>
 80027b6:	1dbb      	adds	r3, r7, #6
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e088      	b.n	80028d4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	015b      	lsls	r3, r3, #5
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d109      	bne.n	80027e2 <HAL_UART_Transmit+0x4e>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d105      	bne.n	80027e2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	d001      	beq.n	80027e2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e078      	b.n	80028d4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2290      	movs	r2, #144	; 0x90
 80027e6:	2100      	movs	r1, #0
 80027e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2288      	movs	r2, #136	; 0x88
 80027ee:	2121      	movs	r1, #33	; 0x21
 80027f0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027f2:	f7fe faa7 	bl	8000d44 <HAL_GetTick>
 80027f6:	0003      	movs	r3, r0
 80027f8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1dba      	adds	r2, r7, #6
 80027fe:	2154      	movs	r1, #84	; 0x54
 8002800:	8812      	ldrh	r2, [r2, #0]
 8002802:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	1dba      	adds	r2, r7, #6
 8002808:	2156      	movs	r1, #86	; 0x56
 800280a:	8812      	ldrh	r2, [r2, #0]
 800280c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	2380      	movs	r3, #128	; 0x80
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	429a      	cmp	r2, r3
 8002818:	d108      	bne.n	800282c <HAL_UART_Transmit+0x98>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e003      	b.n	8002834 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002834:	e030      	b.n	8002898 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	0013      	movs	r3, r2
 8002840:	2200      	movs	r2, #0
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	f000 fc66 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d005      	beq.n	8002858 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2288      	movs	r2, #136	; 0x88
 8002850:	2120      	movs	r1, #32
 8002852:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e03d      	b.n	80028d4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	001a      	movs	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	05d2      	lsls	r2, r2, #23
 800286a:	0dd2      	lsrs	r2, r2, #23
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3302      	adds	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	e007      	b.n	8002886 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2256      	movs	r2, #86	; 0x56
 800288a:	5a9b      	ldrh	r3, [r3, r2]
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b299      	uxth	r1, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2256      	movs	r2, #86	; 0x56
 8002896:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2256      	movs	r2, #86	; 0x56
 800289c:	5a9b      	ldrh	r3, [r3, r2]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1c8      	bne.n	8002836 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	0013      	movs	r3, r2
 80028ae:	2200      	movs	r2, #0
 80028b0:	2140      	movs	r1, #64	; 0x40
 80028b2:	f000 fc2f 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 80028b6:	1e03      	subs	r3, r0, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2288      	movs	r2, #136	; 0x88
 80028be:	2120      	movs	r1, #32
 80028c0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e006      	b.n	80028d4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2288      	movs	r2, #136	; 0x88
 80028ca:	2120      	movs	r1, #32
 80028cc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b008      	add	sp, #32
 80028da:	bd80      	pop	{r7, pc}

080028dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028dc:	b5b0      	push	{r4, r5, r7, lr}
 80028de:	b090      	sub	sp, #64	; 0x40
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80028e4:	231a      	movs	r3, #26
 80028e6:	2220      	movs	r2, #32
 80028e8:	189b      	adds	r3, r3, r2
 80028ea:	19db      	adds	r3, r3, r7
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	431a      	orrs	r2, r3
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	4313      	orrs	r3, r2
 8002906:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4aaf      	ldr	r2, [pc, #700]	; (8002bcc <UART_SetConfig+0x2f0>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800291a:	430b      	orrs	r3, r1
 800291c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4aaa      	ldr	r2, [pc, #680]	; (8002bd0 <UART_SetConfig+0x2f4>)
 8002926:	4013      	ands	r3, r2
 8002928:	0018      	movs	r0, r3
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	68d9      	ldr	r1, [r3, #12]
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	0003      	movs	r3, r0
 8002934:	430b      	orrs	r3, r1
 8002936:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4aa4      	ldr	r2, [pc, #656]	; (8002bd4 <UART_SetConfig+0x2f8>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d004      	beq.n	8002952 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800294e:	4313      	orrs	r3, r2
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a9f      	ldr	r2, [pc, #636]	; (8002bd8 <UART_SetConfig+0x2fc>)
 800295a:	4013      	ands	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002964:	430b      	orrs	r3, r1
 8002966:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296e:	220f      	movs	r2, #15
 8002970:	4393      	bics	r3, r2
 8002972:	0018      	movs	r0, r3
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	0003      	movs	r3, r0
 800297e:	430b      	orrs	r3, r1
 8002980:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a95      	ldr	r2, [pc, #596]	; (8002bdc <UART_SetConfig+0x300>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d131      	bne.n	80029f0 <UART_SetConfig+0x114>
 800298c:	4b94      	ldr	r3, [pc, #592]	; (8002be0 <UART_SetConfig+0x304>)
 800298e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002990:	2203      	movs	r2, #3
 8002992:	4013      	ands	r3, r2
 8002994:	2b03      	cmp	r3, #3
 8002996:	d01d      	beq.n	80029d4 <UART_SetConfig+0xf8>
 8002998:	d823      	bhi.n	80029e2 <UART_SetConfig+0x106>
 800299a:	2b02      	cmp	r3, #2
 800299c:	d00c      	beq.n	80029b8 <UART_SetConfig+0xdc>
 800299e:	d820      	bhi.n	80029e2 <UART_SetConfig+0x106>
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <UART_SetConfig+0xce>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d00e      	beq.n	80029c6 <UART_SetConfig+0xea>
 80029a8:	e01b      	b.n	80029e2 <UART_SetConfig+0x106>
 80029aa:	231b      	movs	r3, #27
 80029ac:	2220      	movs	r2, #32
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	19db      	adds	r3, r3, r7
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e0b4      	b.n	8002b22 <UART_SetConfig+0x246>
 80029b8:	231b      	movs	r3, #27
 80029ba:	2220      	movs	r2, #32
 80029bc:	189b      	adds	r3, r3, r2
 80029be:	19db      	adds	r3, r3, r7
 80029c0:	2202      	movs	r2, #2
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e0ad      	b.n	8002b22 <UART_SetConfig+0x246>
 80029c6:	231b      	movs	r3, #27
 80029c8:	2220      	movs	r2, #32
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	19db      	adds	r3, r3, r7
 80029ce:	2204      	movs	r2, #4
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e0a6      	b.n	8002b22 <UART_SetConfig+0x246>
 80029d4:	231b      	movs	r3, #27
 80029d6:	2220      	movs	r2, #32
 80029d8:	189b      	adds	r3, r3, r2
 80029da:	19db      	adds	r3, r3, r7
 80029dc:	2208      	movs	r2, #8
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e09f      	b.n	8002b22 <UART_SetConfig+0x246>
 80029e2:	231b      	movs	r3, #27
 80029e4:	2220      	movs	r2, #32
 80029e6:	189b      	adds	r3, r3, r2
 80029e8:	19db      	adds	r3, r3, r7
 80029ea:	2210      	movs	r2, #16
 80029ec:	701a      	strb	r2, [r3, #0]
 80029ee:	e098      	b.n	8002b22 <UART_SetConfig+0x246>
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a7b      	ldr	r2, [pc, #492]	; (8002be4 <UART_SetConfig+0x308>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d131      	bne.n	8002a5e <UART_SetConfig+0x182>
 80029fa:	4b79      	ldr	r3, [pc, #484]	; (8002be0 <UART_SetConfig+0x304>)
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	220c      	movs	r2, #12
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d01d      	beq.n	8002a42 <UART_SetConfig+0x166>
 8002a06:	d823      	bhi.n	8002a50 <UART_SetConfig+0x174>
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d00c      	beq.n	8002a26 <UART_SetConfig+0x14a>
 8002a0c:	d820      	bhi.n	8002a50 <UART_SetConfig+0x174>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <UART_SetConfig+0x13c>
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d00e      	beq.n	8002a34 <UART_SetConfig+0x158>
 8002a16:	e01b      	b.n	8002a50 <UART_SetConfig+0x174>
 8002a18:	231b      	movs	r3, #27
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	189b      	adds	r3, r3, r2
 8002a1e:	19db      	adds	r3, r3, r7
 8002a20:	2200      	movs	r2, #0
 8002a22:	701a      	strb	r2, [r3, #0]
 8002a24:	e07d      	b.n	8002b22 <UART_SetConfig+0x246>
 8002a26:	231b      	movs	r3, #27
 8002a28:	2220      	movs	r2, #32
 8002a2a:	189b      	adds	r3, r3, r2
 8002a2c:	19db      	adds	r3, r3, r7
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e076      	b.n	8002b22 <UART_SetConfig+0x246>
 8002a34:	231b      	movs	r3, #27
 8002a36:	2220      	movs	r2, #32
 8002a38:	189b      	adds	r3, r3, r2
 8002a3a:	19db      	adds	r3, r3, r7
 8002a3c:	2204      	movs	r2, #4
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	e06f      	b.n	8002b22 <UART_SetConfig+0x246>
 8002a42:	231b      	movs	r3, #27
 8002a44:	2220      	movs	r2, #32
 8002a46:	189b      	adds	r3, r3, r2
 8002a48:	19db      	adds	r3, r3, r7
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	701a      	strb	r2, [r3, #0]
 8002a4e:	e068      	b.n	8002b22 <UART_SetConfig+0x246>
 8002a50:	231b      	movs	r3, #27
 8002a52:	2220      	movs	r2, #32
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	19db      	adds	r3, r3, r7
 8002a58:	2210      	movs	r2, #16
 8002a5a:	701a      	strb	r2, [r3, #0]
 8002a5c:	e061      	b.n	8002b22 <UART_SetConfig+0x246>
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a61      	ldr	r2, [pc, #388]	; (8002be8 <UART_SetConfig+0x30c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d106      	bne.n	8002a76 <UART_SetConfig+0x19a>
 8002a68:	231b      	movs	r3, #27
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	19db      	adds	r3, r3, r7
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e055      	b.n	8002b22 <UART_SetConfig+0x246>
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a5c      	ldr	r2, [pc, #368]	; (8002bec <UART_SetConfig+0x310>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d106      	bne.n	8002a8e <UART_SetConfig+0x1b2>
 8002a80:	231b      	movs	r3, #27
 8002a82:	2220      	movs	r2, #32
 8002a84:	189b      	adds	r3, r3, r2
 8002a86:	19db      	adds	r3, r3, r7
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	e049      	b.n	8002b22 <UART_SetConfig+0x246>
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a50      	ldr	r2, [pc, #320]	; (8002bd4 <UART_SetConfig+0x2f8>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d13e      	bne.n	8002b16 <UART_SetConfig+0x23a>
 8002a98:	4b51      	ldr	r3, [pc, #324]	; (8002be0 <UART_SetConfig+0x304>)
 8002a9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002a9c:	23c0      	movs	r3, #192	; 0xc0
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	22c0      	movs	r2, #192	; 0xc0
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d027      	beq.n	8002afa <UART_SetConfig+0x21e>
 8002aaa:	22c0      	movs	r2, #192	; 0xc0
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d82a      	bhi.n	8002b08 <UART_SetConfig+0x22c>
 8002ab2:	2280      	movs	r2, #128	; 0x80
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d011      	beq.n	8002ade <UART_SetConfig+0x202>
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	0112      	lsls	r2, r2, #4
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d822      	bhi.n	8002b08 <UART_SetConfig+0x22c>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <UART_SetConfig+0x1f4>
 8002ac6:	2280      	movs	r2, #128	; 0x80
 8002ac8:	00d2      	lsls	r2, r2, #3
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00e      	beq.n	8002aec <UART_SetConfig+0x210>
 8002ace:	e01b      	b.n	8002b08 <UART_SetConfig+0x22c>
 8002ad0:	231b      	movs	r3, #27
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	189b      	adds	r3, r3, r2
 8002ad6:	19db      	adds	r3, r3, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e021      	b.n	8002b22 <UART_SetConfig+0x246>
 8002ade:	231b      	movs	r3, #27
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	19db      	adds	r3, r3, r7
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	701a      	strb	r2, [r3, #0]
 8002aea:	e01a      	b.n	8002b22 <UART_SetConfig+0x246>
 8002aec:	231b      	movs	r3, #27
 8002aee:	2220      	movs	r2, #32
 8002af0:	189b      	adds	r3, r3, r2
 8002af2:	19db      	adds	r3, r3, r7
 8002af4:	2204      	movs	r2, #4
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e013      	b.n	8002b22 <UART_SetConfig+0x246>
 8002afa:	231b      	movs	r3, #27
 8002afc:	2220      	movs	r2, #32
 8002afe:	189b      	adds	r3, r3, r2
 8002b00:	19db      	adds	r3, r3, r7
 8002b02:	2208      	movs	r2, #8
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e00c      	b.n	8002b22 <UART_SetConfig+0x246>
 8002b08:	231b      	movs	r3, #27
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	189b      	adds	r3, r3, r2
 8002b0e:	19db      	adds	r3, r3, r7
 8002b10:	2210      	movs	r2, #16
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	e005      	b.n	8002b22 <UART_SetConfig+0x246>
 8002b16:	231b      	movs	r3, #27
 8002b18:	2220      	movs	r2, #32
 8002b1a:	189b      	adds	r3, r3, r2
 8002b1c:	19db      	adds	r3, r3, r7
 8002b1e:	2210      	movs	r2, #16
 8002b20:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2b      	ldr	r2, [pc, #172]	; (8002bd4 <UART_SetConfig+0x2f8>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d000      	beq.n	8002b2e <UART_SetConfig+0x252>
 8002b2c:	e0a9      	b.n	8002c82 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b2e:	231b      	movs	r3, #27
 8002b30:	2220      	movs	r2, #32
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	19db      	adds	r3, r3, r7
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d015      	beq.n	8002b68 <UART_SetConfig+0x28c>
 8002b3c:	dc18      	bgt.n	8002b70 <UART_SetConfig+0x294>
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d00d      	beq.n	8002b5e <UART_SetConfig+0x282>
 8002b42:	dc15      	bgt.n	8002b70 <UART_SetConfig+0x294>
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <UART_SetConfig+0x272>
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d005      	beq.n	8002b58 <UART_SetConfig+0x27c>
 8002b4c:	e010      	b.n	8002b70 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b4e:	f7ff fbfd 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8002b52:	0003      	movs	r3, r0
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b56:	e014      	b.n	8002b82 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <UART_SetConfig+0x314>)
 8002b5a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b5c:	e011      	b.n	8002b82 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b5e:	f7ff fb69 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002b62:	0003      	movs	r3, r0
 8002b64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b66:	e00c      	b.n	8002b82 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b68:	2380      	movs	r3, #128	; 0x80
 8002b6a:	021b      	lsls	r3, r3, #8
 8002b6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002b6e:	e008      	b.n	8002b82 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002b74:	231a      	movs	r3, #26
 8002b76:	2220      	movs	r2, #32
 8002b78:	189b      	adds	r3, r3, r2
 8002b7a:	19db      	adds	r3, r3, r7
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
        break;
 8002b80:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d100      	bne.n	8002b8a <UART_SetConfig+0x2ae>
 8002b88:	e14b      	b.n	8002e22 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b8e:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <UART_SetConfig+0x318>)
 8002b90:	0052      	lsls	r2, r2, #1
 8002b92:	5ad3      	ldrh	r3, [r2, r3]
 8002b94:	0019      	movs	r1, r3
 8002b96:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b98:	f7fd fabe 	bl	8000118 <__udivsi3>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	0013      	movs	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	189b      	adds	r3, r3, r2
 8002baa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d305      	bcc.n	8002bbc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002bb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d91d      	bls.n	8002bf8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002bbc:	231a      	movs	r3, #26
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	189b      	adds	r3, r3, r2
 8002bc2:	19db      	adds	r3, r3, r7
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	701a      	strb	r2, [r3, #0]
 8002bc8:	e12b      	b.n	8002e22 <UART_SetConfig+0x546>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	cfff69f3 	.word	0xcfff69f3
 8002bd0:	ffffcfff 	.word	0xffffcfff
 8002bd4:	40008000 	.word	0x40008000
 8002bd8:	11fff4ff 	.word	0x11fff4ff
 8002bdc:	40013800 	.word	0x40013800
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40004800 	.word	0x40004800
 8002bec:	40004c00 	.word	0x40004c00
 8002bf0:	00f42400 	.word	0x00f42400
 8002bf4:	08003ec0 	.word	0x08003ec0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c04:	4b92      	ldr	r3, [pc, #584]	; (8002e50 <UART_SetConfig+0x574>)
 8002c06:	0052      	lsls	r2, r2, #1
 8002c08:	5ad3      	ldrh	r3, [r2, r3]
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	69b8      	ldr	r0, [r7, #24]
 8002c16:	69f9      	ldr	r1, [r7, #28]
 8002c18:	f7fd fbf4 	bl	8000404 <__aeabi_uldivmod>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	000b      	movs	r3, r1
 8002c20:	0e11      	lsrs	r1, r2, #24
 8002c22:	021d      	lsls	r5, r3, #8
 8002c24:	430d      	orrs	r5, r1
 8002c26:	0214      	lsls	r4, r2, #8
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	085b      	lsrs	r3, r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	68b8      	ldr	r0, [r7, #8]
 8002c36:	68f9      	ldr	r1, [r7, #12]
 8002c38:	1900      	adds	r0, r0, r4
 8002c3a:	4169      	adcs	r1, r5
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f7fd fbdb 	bl	8000404 <__aeabi_uldivmod>
 8002c4e:	0002      	movs	r2, r0
 8002c50:	000b      	movs	r3, r1
 8002c52:	0013      	movs	r3, r2
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c58:	23c0      	movs	r3, #192	; 0xc0
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d309      	bcc.n	8002c74 <UART_SetConfig+0x398>
 8002c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	035b      	lsls	r3, r3, #13
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d204      	bcs.n	8002c74 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	e0d6      	b.n	8002e22 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8002c74:	231a      	movs	r3, #26
 8002c76:	2220      	movs	r2, #32
 8002c78:	189b      	adds	r3, r3, r2
 8002c7a:	19db      	adds	r3, r3, r7
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	e0cf      	b.n	8002e22 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	69da      	ldr	r2, [r3, #28]
 8002c86:	2380      	movs	r3, #128	; 0x80
 8002c88:	021b      	lsls	r3, r3, #8
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d000      	beq.n	8002c90 <UART_SetConfig+0x3b4>
 8002c8e:	e070      	b.n	8002d72 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8002c90:	231b      	movs	r3, #27
 8002c92:	2220      	movs	r2, #32
 8002c94:	189b      	adds	r3, r3, r2
 8002c96:	19db      	adds	r3, r3, r7
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d015      	beq.n	8002cca <UART_SetConfig+0x3ee>
 8002c9e:	dc18      	bgt.n	8002cd2 <UART_SetConfig+0x3f6>
 8002ca0:	2b04      	cmp	r3, #4
 8002ca2:	d00d      	beq.n	8002cc0 <UART_SetConfig+0x3e4>
 8002ca4:	dc15      	bgt.n	8002cd2 <UART_SetConfig+0x3f6>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d002      	beq.n	8002cb0 <UART_SetConfig+0x3d4>
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d005      	beq.n	8002cba <UART_SetConfig+0x3de>
 8002cae:	e010      	b.n	8002cd2 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cb0:	f7ff fb4c 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cb8:	e014      	b.n	8002ce4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cba:	4b66      	ldr	r3, [pc, #408]	; (8002e54 <UART_SetConfig+0x578>)
 8002cbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cbe:	e011      	b.n	8002ce4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cc0:	f7ff fab8 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cc8:	e00c      	b.n	8002ce4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002cd0:	e008      	b.n	8002ce4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002cd6:	231a      	movs	r3, #26
 8002cd8:	2220      	movs	r2, #32
 8002cda:	189b      	adds	r3, r3, r2
 8002cdc:	19db      	adds	r3, r3, r7
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]
        break;
 8002ce2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d100      	bne.n	8002cec <UART_SetConfig+0x410>
 8002cea:	e09a      	b.n	8002e22 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cf0:	4b57      	ldr	r3, [pc, #348]	; (8002e50 <UART_SetConfig+0x574>)
 8002cf2:	0052      	lsls	r2, r2, #1
 8002cf4:	5ad3      	ldrh	r3, [r2, r3]
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cfa:	f7fd fa0d 	bl	8000118 <__udivsi3>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	005a      	lsls	r2, r3, #1
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	18d2      	adds	r2, r2, r3
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0019      	movs	r1, r3
 8002d10:	0010      	movs	r0, r2
 8002d12:	f7fd fa01 	bl	8000118 <__udivsi3>
 8002d16:	0003      	movs	r3, r0
 8002d18:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	d921      	bls.n	8002d64 <UART_SetConfig+0x488>
 8002d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	025b      	lsls	r3, r3, #9
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d21c      	bcs.n	8002d64 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	200e      	movs	r0, #14
 8002d30:	2420      	movs	r4, #32
 8002d32:	1903      	adds	r3, r0, r4
 8002d34:	19db      	adds	r3, r3, r7
 8002d36:	210f      	movs	r1, #15
 8002d38:	438a      	bics	r2, r1
 8002d3a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	2207      	movs	r2, #7
 8002d44:	4013      	ands	r3, r2
 8002d46:	b299      	uxth	r1, r3
 8002d48:	1903      	adds	r3, r0, r4
 8002d4a:	19db      	adds	r3, r3, r7
 8002d4c:	1902      	adds	r2, r0, r4
 8002d4e:	19d2      	adds	r2, r2, r7
 8002d50:	8812      	ldrh	r2, [r2, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1902      	adds	r2, r0, r4
 8002d5c:	19d2      	adds	r2, r2, r7
 8002d5e:	8812      	ldrh	r2, [r2, #0]
 8002d60:	60da      	str	r2, [r3, #12]
 8002d62:	e05e      	b.n	8002e22 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002d64:	231a      	movs	r3, #26
 8002d66:	2220      	movs	r2, #32
 8002d68:	189b      	adds	r3, r3, r2
 8002d6a:	19db      	adds	r3, r3, r7
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	e057      	b.n	8002e22 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002d72:	231b      	movs	r3, #27
 8002d74:	2220      	movs	r2, #32
 8002d76:	189b      	adds	r3, r3, r2
 8002d78:	19db      	adds	r3, r3, r7
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d015      	beq.n	8002dac <UART_SetConfig+0x4d0>
 8002d80:	dc18      	bgt.n	8002db4 <UART_SetConfig+0x4d8>
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00d      	beq.n	8002da2 <UART_SetConfig+0x4c6>
 8002d86:	dc15      	bgt.n	8002db4 <UART_SetConfig+0x4d8>
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <UART_SetConfig+0x4b6>
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d005      	beq.n	8002d9c <UART_SetConfig+0x4c0>
 8002d90:	e010      	b.n	8002db4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d92:	f7ff fadb 	bl	800234c <HAL_RCC_GetPCLK1Freq>
 8002d96:	0003      	movs	r3, r0
 8002d98:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002d9a:	e014      	b.n	8002dc6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <UART_SetConfig+0x578>)
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002da0:	e011      	b.n	8002dc6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002da2:	f7ff fa47 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002da6:	0003      	movs	r3, r0
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002daa:	e00c      	b.n	8002dc6 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dac:	2380      	movs	r3, #128	; 0x80
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002db2:	e008      	b.n	8002dc6 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002db8:	231a      	movs	r3, #26
 8002dba:	2220      	movs	r2, #32
 8002dbc:	189b      	adds	r3, r3, r2
 8002dbe:	19db      	adds	r3, r3, r7
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
        break;
 8002dc4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02a      	beq.n	8002e22 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd0:	4b1f      	ldr	r3, [pc, #124]	; (8002e50 <UART_SetConfig+0x574>)
 8002dd2:	0052      	lsls	r2, r2, #1
 8002dd4:	5ad3      	ldrh	r3, [r2, r3]
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002dda:	f7fd f99d 	bl	8000118 <__udivsi3>
 8002dde:	0003      	movs	r3, r0
 8002de0:	001a      	movs	r2, r3
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	18d2      	adds	r2, r2, r3
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	0019      	movs	r1, r3
 8002df0:	0010      	movs	r0, r2
 8002df2:	f7fd f991 	bl	8000118 <__udivsi3>
 8002df6:	0003      	movs	r3, r0
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d90a      	bls.n	8002e16 <UART_SetConfig+0x53a>
 8002e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	025b      	lsls	r3, r3, #9
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d205      	bcs.n	8002e16 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60da      	str	r2, [r3, #12]
 8002e14:	e005      	b.n	8002e22 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8002e16:	231a      	movs	r3, #26
 8002e18:	2220      	movs	r2, #32
 8002e1a:	189b      	adds	r3, r3, r2
 8002e1c:	19db      	adds	r3, r3, r7
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	226a      	movs	r2, #106	; 0x6a
 8002e26:	2101      	movs	r1, #1
 8002e28:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	2268      	movs	r2, #104	; 0x68
 8002e2e:	2101      	movs	r1, #1
 8002e30:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e34:	2200      	movs	r2, #0
 8002e36:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002e3e:	231a      	movs	r3, #26
 8002e40:	2220      	movs	r2, #32
 8002e42:	189b      	adds	r3, r3, r2
 8002e44:	19db      	adds	r3, r3, r7
 8002e46:	781b      	ldrb	r3, [r3, #0]
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b010      	add	sp, #64	; 0x40
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e50:	08003ec0 	.word	0x08003ec0
 8002e54:	00f42400 	.word	0x00f42400

08002e58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	2208      	movs	r2, #8
 8002e66:	4013      	ands	r3, r2
 8002e68:	d00b      	beq.n	8002e82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4a4a      	ldr	r2, [pc, #296]	; (8002f9c <UART_AdvFeatureConfig+0x144>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	0019      	movs	r1, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e86:	2201      	movs	r2, #1
 8002e88:	4013      	ands	r3, r2
 8002e8a:	d00b      	beq.n	8002ea4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a43      	ldr	r2, [pc, #268]	; (8002fa0 <UART_AdvFeatureConfig+0x148>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	0019      	movs	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d00b      	beq.n	8002ec6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <UART_AdvFeatureConfig+0x14c>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d00b      	beq.n	8002ee8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	4a34      	ldr	r2, [pc, #208]	; (8002fa8 <UART_AdvFeatureConfig+0x150>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	2210      	movs	r2, #16
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d00b      	beq.n	8002f0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	4a2c      	ldr	r2, [pc, #176]	; (8002fac <UART_AdvFeatureConfig+0x154>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	0019      	movs	r1, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2220      	movs	r2, #32
 8002f10:	4013      	ands	r3, r2
 8002f12:	d00b      	beq.n	8002f2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <UART_AdvFeatureConfig+0x158>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f30:	2240      	movs	r2, #64	; 0x40
 8002f32:	4013      	ands	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <UART_AdvFeatureConfig+0x15c>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	0019      	movs	r1, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	035b      	lsls	r3, r3, #13
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d10b      	bne.n	8002f72 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <UART_AdvFeatureConfig+0x160>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	0019      	movs	r1, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a0e      	ldr	r2, [pc, #56]	; (8002fbc <UART_AdvFeatureConfig+0x164>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	0019      	movs	r1, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }
}
 8002f94:	46c0      	nop			; (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	ffff7fff 	.word	0xffff7fff
 8002fa0:	fffdffff 	.word	0xfffdffff
 8002fa4:	fffeffff 	.word	0xfffeffff
 8002fa8:	fffbffff 	.word	0xfffbffff
 8002fac:	ffffefff 	.word	0xffffefff
 8002fb0:	ffffdfff 	.word	0xffffdfff
 8002fb4:	ffefffff 	.word	0xffefffff
 8002fb8:	ff9fffff 	.word	0xff9fffff
 8002fbc:	fff7ffff 	.word	0xfff7ffff

08002fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b092      	sub	sp, #72	; 0x48
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2290      	movs	r2, #144	; 0x90
 8002fcc:	2100      	movs	r1, #0
 8002fce:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd0:	f7fd feb8 	bl	8000d44 <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d12d      	bne.n	8003042 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	0391      	lsls	r1, r2, #14
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4a47      	ldr	r2, [pc, #284]	; (800310c <UART_CheckIdleState+0x14c>)
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f000 f88e 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002ff8:	1e03      	subs	r3, r0, #0
 8002ffa:	d022      	beq.n	8003042 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003004:	63bb      	str	r3, [r7, #56]	; 0x38
 8003006:	2301      	movs	r3, #1
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	46c0      	nop			; (mov r8, r8)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	438a      	bics	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003028:	f383 8810 	msr	PRIMASK, r3
}
 800302c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2288      	movs	r2, #136	; 0x88
 8003032:	2120      	movs	r1, #32
 8003034:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2284      	movs	r2, #132	; 0x84
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e060      	b.n	8003104 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2204      	movs	r2, #4
 800304a:	4013      	ands	r3, r2
 800304c:	2b04      	cmp	r3, #4
 800304e:	d146      	bne.n	80030de <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003052:	2280      	movs	r2, #128	; 0x80
 8003054:	03d1      	lsls	r1, r2, #15
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4a2c      	ldr	r2, [pc, #176]	; (800310c <UART_CheckIdleState+0x14c>)
 800305a:	9200      	str	r2, [sp, #0]
 800305c:	2200      	movs	r2, #0
 800305e:	f000 f859 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d03b      	beq.n	80030de <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003066:	f3ef 8310 	mrs	r3, PRIMASK
 800306a:	60fb      	str	r3, [r7, #12]
  return(result);
 800306c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
 8003070:	2301      	movs	r3, #1
 8003072:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f383 8810 	msr	PRIMASK, r3
}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4922      	ldr	r1, [pc, #136]	; (8003110 <UART_CheckIdleState+0x150>)
 8003088:	400a      	ands	r2, r1
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f383 8810 	msr	PRIMASK, r3
}
 8003096:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003098:	f3ef 8310 	mrs	r3, PRIMASK
 800309c:	61bb      	str	r3, [r7, #24]
  return(result);
 800309e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	633b      	str	r3, [r7, #48]	; 0x30
 80030a2:	2301      	movs	r3, #1
 80030a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	f383 8810 	msr	PRIMASK, r3
}
 80030ac:	46c0      	nop			; (mov r8, r8)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2101      	movs	r1, #1
 80030ba:	438a      	bics	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	f383 8810 	msr	PRIMASK, r3
}
 80030c8:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	228c      	movs	r2, #140	; 0x8c
 80030ce:	2120      	movs	r1, #32
 80030d0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2284      	movs	r2, #132	; 0x84
 80030d6:	2100      	movs	r1, #0
 80030d8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e012      	b.n	8003104 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2288      	movs	r2, #136	; 0x88
 80030e2:	2120      	movs	r1, #32
 80030e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	228c      	movs	r2, #140	; 0x8c
 80030ea:	2120      	movs	r1, #32
 80030ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2284      	movs	r2, #132	; 0x84
 80030fe:	2100      	movs	r1, #0
 8003100:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b010      	add	sp, #64	; 0x40
 800310a:	bd80      	pop	{r7, pc}
 800310c:	01ffffff 	.word	0x01ffffff
 8003110:	fffffedf 	.word	0xfffffedf

08003114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	1dfb      	adds	r3, r7, #7
 8003122:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003124:	e051      	b.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3301      	adds	r3, #1
 800312a:	d04e      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312c:	f7fd fe0a 	bl	8000d44 <HAL_GetTick>
 8003130:	0002      	movs	r2, r0
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d302      	bcc.n	8003142 <UART_WaitOnFlagUntilTimeout+0x2e>
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e051      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2204      	movs	r2, #4
 800314e:	4013      	ands	r3, r2
 8003150:	d03b      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d038      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb6>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d035      	beq.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	2208      	movs	r2, #8
 8003166:	4013      	ands	r3, r2
 8003168:	2b08      	cmp	r3, #8
 800316a:	d111      	bne.n	8003190 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2208      	movs	r2, #8
 8003172:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	0018      	movs	r0, r3
 8003178:	f000 f83c 	bl	80031f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2290      	movs	r2, #144	; 0x90
 8003180:	2108      	movs	r1, #8
 8003182:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2284      	movs	r2, #132	; 0x84
 8003188:	2100      	movs	r1, #0
 800318a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e02c      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69da      	ldr	r2, [r3, #28]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	401a      	ands	r2, r3
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d112      	bne.n	80031ca <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2280      	movs	r2, #128	; 0x80
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	0018      	movs	r0, r3
 80031b2:	f000 f81f 	bl	80031f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2290      	movs	r2, #144	; 0x90
 80031ba:	2120      	movs	r1, #32
 80031bc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2284      	movs	r2, #132	; 0x84
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e00f      	b.n	80031ea <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4013      	ands	r3, r2
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	425a      	negs	r2, r3
 80031da:	4153      	adcs	r3, r2
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	001a      	movs	r2, r3
 80031e0:	1dfb      	adds	r3, r7, #7
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d09e      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b004      	add	sp, #16
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08e      	sub	sp, #56	; 0x38
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003200:	617b      	str	r3, [r7, #20]
  return(result);
 8003202:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
 8003206:	2301      	movs	r3, #1
 8003208:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	f383 8810 	msr	PRIMASK, r3
}
 8003210:	46c0      	nop			; (mov r8, r8)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4926      	ldr	r1, [pc, #152]	; (80032b8 <UART_EndRxTransfer+0xc4>)
 800321e:	400a      	ands	r2, r1
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003224:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	f383 8810 	msr	PRIMASK, r3
}
 800322c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800322e:	f3ef 8310 	mrs	r3, PRIMASK
 8003232:	623b      	str	r3, [r7, #32]
  return(result);
 8003234:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003236:	633b      	str	r3, [r7, #48]	; 0x30
 8003238:	2301      	movs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	f383 8810 	msr	PRIMASK, r3
}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	491b      	ldr	r1, [pc, #108]	; (80032bc <UART_EndRxTransfer+0xc8>)
 8003250:	400a      	ands	r2, r1
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325a:	f383 8810 	msr	PRIMASK, r3
}
 800325e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d118      	bne.n	800329a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003268:	f3ef 8310 	mrs	r3, PRIMASK
 800326c:	60bb      	str	r3, [r7, #8]
  return(result);
 800326e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003272:	2301      	movs	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f383 8810 	msr	PRIMASK, r3
}
 800327c:	46c0      	nop			; (mov r8, r8)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2110      	movs	r1, #16
 800328a:	438a      	bics	r2, r1
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f383 8810 	msr	PRIMASK, r3
}
 8003298:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	228c      	movs	r2, #140	; 0x8c
 800329e:	2120      	movs	r1, #32
 80032a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80032ae:	46c0      	nop			; (mov r8, r8)
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b00e      	add	sp, #56	; 0x38
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	46c0      	nop			; (mov r8, r8)
 80032b8:	fffffedf 	.word	0xfffffedf
 80032bc:	effffffe 	.word	0xeffffffe

080032c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2284      	movs	r2, #132	; 0x84
 80032cc:	5c9b      	ldrb	r3, [r3, r2]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e027      	b.n	8003326 <HAL_UARTEx_DisableFifoMode+0x66>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2284      	movs	r2, #132	; 0x84
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2288      	movs	r2, #136	; 0x88
 80032e2:	2124      	movs	r1, #36	; 0x24
 80032e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2101      	movs	r1, #1
 80032fa:	438a      	bics	r2, r1
 80032fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a0b      	ldr	r2, [pc, #44]	; (8003330 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003302:	4013      	ands	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2288      	movs	r2, #136	; 0x88
 8003318:	2120      	movs	r1, #32
 800331a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2284      	movs	r2, #132	; 0x84
 8003320:	2100      	movs	r1, #0
 8003322:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	0018      	movs	r0, r3
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}
 800332e:	46c0      	nop			; (mov r8, r8)
 8003330:	dfffffff 	.word	0xdfffffff

08003334 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2284      	movs	r2, #132	; 0x84
 8003342:	5c9b      	ldrb	r3, [r3, r2]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e02e      	b.n	80033aa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2284      	movs	r2, #132	; 0x84
 8003350:	2101      	movs	r1, #1
 8003352:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2288      	movs	r2, #136	; 0x88
 8003358:	2124      	movs	r1, #36	; 0x24
 800335a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2101      	movs	r1, #1
 8003370:	438a      	bics	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	08d9      	lsrs	r1, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	0018      	movs	r0, r3
 800338c:	f000 f854 	bl	8003438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2288      	movs	r2, #136	; 0x88
 800339c:	2120      	movs	r1, #32
 800339e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2284      	movs	r2, #132	; 0x84
 80033a4:	2100      	movs	r1, #0
 80033a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2284      	movs	r2, #132	; 0x84
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e02f      	b.n	800342c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2284      	movs	r2, #132	; 0x84
 80033d0:	2101      	movs	r1, #1
 80033d2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2288      	movs	r2, #136	; 0x88
 80033d8:	2124      	movs	r1, #36	; 0x24
 80033da:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	438a      	bics	r2, r1
 80033f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	0019      	movs	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f813 	bl	8003438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2288      	movs	r2, #136	; 0x88
 800341e:	2120      	movs	r1, #32
 8003420:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2284      	movs	r2, #132	; 0x84
 8003426:	2100      	movs	r1, #0
 8003428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800342a:	2300      	movs	r3, #0
}
 800342c:	0018      	movs	r0, r3
 800342e:	46bd      	mov	sp, r7
 8003430:	b004      	add	sp, #16
 8003432:	bd80      	pop	{r7, pc}
 8003434:	f1ffffff 	.word	0xf1ffffff

08003438 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003444:	2b00      	cmp	r3, #0
 8003446:	d108      	bne.n	800345a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	226a      	movs	r2, #106	; 0x6a
 800344c:	2101      	movs	r1, #1
 800344e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2268      	movs	r2, #104	; 0x68
 8003454:	2101      	movs	r1, #1
 8003456:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003458:	e043      	b.n	80034e2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800345a:	260f      	movs	r6, #15
 800345c:	19bb      	adds	r3, r7, r6
 800345e:	2208      	movs	r2, #8
 8003460:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003462:	200e      	movs	r0, #14
 8003464:	183b      	adds	r3, r7, r0
 8003466:	2208      	movs	r2, #8
 8003468:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	0e5b      	lsrs	r3, r3, #25
 8003472:	b2da      	uxtb	r2, r3
 8003474:	240d      	movs	r4, #13
 8003476:	193b      	adds	r3, r7, r4
 8003478:	2107      	movs	r1, #7
 800347a:	400a      	ands	r2, r1
 800347c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	0f5b      	lsrs	r3, r3, #29
 8003486:	b2da      	uxtb	r2, r3
 8003488:	250c      	movs	r5, #12
 800348a:	197b      	adds	r3, r7, r5
 800348c:	2107      	movs	r1, #7
 800348e:	400a      	ands	r2, r1
 8003490:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003492:	183b      	adds	r3, r7, r0
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	197a      	adds	r2, r7, r5
 8003498:	7812      	ldrb	r2, [r2, #0]
 800349a:	4914      	ldr	r1, [pc, #80]	; (80034ec <UARTEx_SetNbDataToProcess+0xb4>)
 800349c:	5c8a      	ldrb	r2, [r1, r2]
 800349e:	435a      	muls	r2, r3
 80034a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80034a2:	197b      	adds	r3, r7, r5
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80034a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80034aa:	0019      	movs	r1, r3
 80034ac:	f7fc febe 	bl	800022c <__divsi3>
 80034b0:	0003      	movs	r3, r0
 80034b2:	b299      	uxth	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	226a      	movs	r2, #106	; 0x6a
 80034b8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034ba:	19bb      	adds	r3, r7, r6
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	193a      	adds	r2, r7, r4
 80034c0:	7812      	ldrb	r2, [r2, #0]
 80034c2:	490a      	ldr	r1, [pc, #40]	; (80034ec <UARTEx_SetNbDataToProcess+0xb4>)
 80034c4:	5c8a      	ldrb	r2, [r1, r2]
 80034c6:	435a      	muls	r2, r3
 80034c8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80034ca:	193b      	adds	r3, r7, r4
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <UARTEx_SetNbDataToProcess+0xb8>)
 80034d0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034d2:	0019      	movs	r1, r3
 80034d4:	f7fc feaa 	bl	800022c <__divsi3>
 80034d8:	0003      	movs	r3, r0
 80034da:	b299      	uxth	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2268      	movs	r2, #104	; 0x68
 80034e0:	5299      	strh	r1, [r3, r2]
}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	46bd      	mov	sp, r7
 80034e6:	b005      	add	sp, #20
 80034e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	08003ed8 	.word	0x08003ed8
 80034f0:	08003ee0 	.word	0x08003ee0

080034f4 <siprintf>:
 80034f4:	b40e      	push	{r1, r2, r3}
 80034f6:	b500      	push	{lr}
 80034f8:	490b      	ldr	r1, [pc, #44]	; (8003528 <siprintf+0x34>)
 80034fa:	b09c      	sub	sp, #112	; 0x70
 80034fc:	ab1d      	add	r3, sp, #116	; 0x74
 80034fe:	9002      	str	r0, [sp, #8]
 8003500:	9006      	str	r0, [sp, #24]
 8003502:	9107      	str	r1, [sp, #28]
 8003504:	9104      	str	r1, [sp, #16]
 8003506:	4809      	ldr	r0, [pc, #36]	; (800352c <siprintf+0x38>)
 8003508:	4909      	ldr	r1, [pc, #36]	; (8003530 <siprintf+0x3c>)
 800350a:	cb04      	ldmia	r3!, {r2}
 800350c:	9105      	str	r1, [sp, #20]
 800350e:	6800      	ldr	r0, [r0, #0]
 8003510:	a902      	add	r1, sp, #8
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	f000 f9a2 	bl	800385c <_svfiprintf_r>
 8003518:	2200      	movs	r2, #0
 800351a:	9b02      	ldr	r3, [sp, #8]
 800351c:	701a      	strb	r2, [r3, #0]
 800351e:	b01c      	add	sp, #112	; 0x70
 8003520:	bc08      	pop	{r3}
 8003522:	b003      	add	sp, #12
 8003524:	4718      	bx	r3
 8003526:	46c0      	nop			; (mov r8, r8)
 8003528:	7fffffff 	.word	0x7fffffff
 800352c:	20000084 	.word	0x20000084
 8003530:	ffff0208 	.word	0xffff0208

08003534 <memset>:
 8003534:	0003      	movs	r3, r0
 8003536:	1882      	adds	r2, r0, r2
 8003538:	4293      	cmp	r3, r2
 800353a:	d100      	bne.n	800353e <memset+0xa>
 800353c:	4770      	bx	lr
 800353e:	7019      	strb	r1, [r3, #0]
 8003540:	3301      	adds	r3, #1
 8003542:	e7f9      	b.n	8003538 <memset+0x4>

08003544 <__errno>:
 8003544:	4b01      	ldr	r3, [pc, #4]	; (800354c <__errno+0x8>)
 8003546:	6818      	ldr	r0, [r3, #0]
 8003548:	4770      	bx	lr
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	20000084 	.word	0x20000084

08003550 <__libc_init_array>:
 8003550:	b570      	push	{r4, r5, r6, lr}
 8003552:	2600      	movs	r6, #0
 8003554:	4c0c      	ldr	r4, [pc, #48]	; (8003588 <__libc_init_array+0x38>)
 8003556:	4d0d      	ldr	r5, [pc, #52]	; (800358c <__libc_init_array+0x3c>)
 8003558:	1b64      	subs	r4, r4, r5
 800355a:	10a4      	asrs	r4, r4, #2
 800355c:	42a6      	cmp	r6, r4
 800355e:	d109      	bne.n	8003574 <__libc_init_array+0x24>
 8003560:	2600      	movs	r6, #0
 8003562:	f000 fc6d 	bl	8003e40 <_init>
 8003566:	4c0a      	ldr	r4, [pc, #40]	; (8003590 <__libc_init_array+0x40>)
 8003568:	4d0a      	ldr	r5, [pc, #40]	; (8003594 <__libc_init_array+0x44>)
 800356a:	1b64      	subs	r4, r4, r5
 800356c:	10a4      	asrs	r4, r4, #2
 800356e:	42a6      	cmp	r6, r4
 8003570:	d105      	bne.n	800357e <__libc_init_array+0x2e>
 8003572:	bd70      	pop	{r4, r5, r6, pc}
 8003574:	00b3      	lsls	r3, r6, #2
 8003576:	58eb      	ldr	r3, [r5, r3]
 8003578:	4798      	blx	r3
 800357a:	3601      	adds	r6, #1
 800357c:	e7ee      	b.n	800355c <__libc_init_array+0xc>
 800357e:	00b3      	lsls	r3, r6, #2
 8003580:	58eb      	ldr	r3, [r5, r3]
 8003582:	4798      	blx	r3
 8003584:	3601      	adds	r6, #1
 8003586:	e7f2      	b.n	800356e <__libc_init_array+0x1e>
 8003588:	08003f24 	.word	0x08003f24
 800358c:	08003f24 	.word	0x08003f24
 8003590:	08003f28 	.word	0x08003f28
 8003594:	08003f24 	.word	0x08003f24

08003598 <__retarget_lock_acquire_recursive>:
 8003598:	4770      	bx	lr

0800359a <__retarget_lock_release_recursive>:
 800359a:	4770      	bx	lr

0800359c <_free_r>:
 800359c:	b570      	push	{r4, r5, r6, lr}
 800359e:	0005      	movs	r5, r0
 80035a0:	2900      	cmp	r1, #0
 80035a2:	d010      	beq.n	80035c6 <_free_r+0x2a>
 80035a4:	1f0c      	subs	r4, r1, #4
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da00      	bge.n	80035ae <_free_r+0x12>
 80035ac:	18e4      	adds	r4, r4, r3
 80035ae:	0028      	movs	r0, r5
 80035b0:	f000 f8e2 	bl	8003778 <__malloc_lock>
 80035b4:	4a1d      	ldr	r2, [pc, #116]	; (800362c <_free_r+0x90>)
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <_free_r+0x2c>
 80035bc:	6063      	str	r3, [r4, #4]
 80035be:	6014      	str	r4, [r2, #0]
 80035c0:	0028      	movs	r0, r5
 80035c2:	f000 f8e1 	bl	8003788 <__malloc_unlock>
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	d908      	bls.n	80035de <_free_r+0x42>
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	1821      	adds	r1, r4, r0
 80035d0:	428b      	cmp	r3, r1
 80035d2:	d1f3      	bne.n	80035bc <_free_r+0x20>
 80035d4:	6819      	ldr	r1, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	1809      	adds	r1, r1, r0
 80035da:	6021      	str	r1, [r4, #0]
 80035dc:	e7ee      	b.n	80035bc <_free_r+0x20>
 80035de:	001a      	movs	r2, r3
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <_free_r+0x4e>
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	d9f9      	bls.n	80035de <_free_r+0x42>
 80035ea:	6811      	ldr	r1, [r2, #0]
 80035ec:	1850      	adds	r0, r2, r1
 80035ee:	42a0      	cmp	r0, r4
 80035f0:	d10b      	bne.n	800360a <_free_r+0x6e>
 80035f2:	6820      	ldr	r0, [r4, #0]
 80035f4:	1809      	adds	r1, r1, r0
 80035f6:	1850      	adds	r0, r2, r1
 80035f8:	6011      	str	r1, [r2, #0]
 80035fa:	4283      	cmp	r3, r0
 80035fc:	d1e0      	bne.n	80035c0 <_free_r+0x24>
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	1841      	adds	r1, r0, r1
 8003604:	6011      	str	r1, [r2, #0]
 8003606:	6053      	str	r3, [r2, #4]
 8003608:	e7da      	b.n	80035c0 <_free_r+0x24>
 800360a:	42a0      	cmp	r0, r4
 800360c:	d902      	bls.n	8003614 <_free_r+0x78>
 800360e:	230c      	movs	r3, #12
 8003610:	602b      	str	r3, [r5, #0]
 8003612:	e7d5      	b.n	80035c0 <_free_r+0x24>
 8003614:	6820      	ldr	r0, [r4, #0]
 8003616:	1821      	adds	r1, r4, r0
 8003618:	428b      	cmp	r3, r1
 800361a:	d103      	bne.n	8003624 <_free_r+0x88>
 800361c:	6819      	ldr	r1, [r3, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	1809      	adds	r1, r1, r0
 8003622:	6021      	str	r1, [r4, #0]
 8003624:	6063      	str	r3, [r4, #4]
 8003626:	6054      	str	r4, [r2, #4]
 8003628:	e7ca      	b.n	80035c0 <_free_r+0x24>
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	200002f0 	.word	0x200002f0

08003630 <sbrk_aligned>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	4e0f      	ldr	r6, [pc, #60]	; (8003670 <sbrk_aligned+0x40>)
 8003634:	000d      	movs	r5, r1
 8003636:	6831      	ldr	r1, [r6, #0]
 8003638:	0004      	movs	r4, r0
 800363a:	2900      	cmp	r1, #0
 800363c:	d102      	bne.n	8003644 <sbrk_aligned+0x14>
 800363e:	f000 fba1 	bl	8003d84 <_sbrk_r>
 8003642:	6030      	str	r0, [r6, #0]
 8003644:	0029      	movs	r1, r5
 8003646:	0020      	movs	r0, r4
 8003648:	f000 fb9c 	bl	8003d84 <_sbrk_r>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d00a      	beq.n	8003666 <sbrk_aligned+0x36>
 8003650:	2303      	movs	r3, #3
 8003652:	1cc5      	adds	r5, r0, #3
 8003654:	439d      	bics	r5, r3
 8003656:	42a8      	cmp	r0, r5
 8003658:	d007      	beq.n	800366a <sbrk_aligned+0x3a>
 800365a:	1a29      	subs	r1, r5, r0
 800365c:	0020      	movs	r0, r4
 800365e:	f000 fb91 	bl	8003d84 <_sbrk_r>
 8003662:	3001      	adds	r0, #1
 8003664:	d101      	bne.n	800366a <sbrk_aligned+0x3a>
 8003666:	2501      	movs	r5, #1
 8003668:	426d      	negs	r5, r5
 800366a:	0028      	movs	r0, r5
 800366c:	bd70      	pop	{r4, r5, r6, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	200002f4 	.word	0x200002f4

08003674 <_malloc_r>:
 8003674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003676:	2203      	movs	r2, #3
 8003678:	1ccb      	adds	r3, r1, #3
 800367a:	4393      	bics	r3, r2
 800367c:	3308      	adds	r3, #8
 800367e:	0006      	movs	r6, r0
 8003680:	001f      	movs	r7, r3
 8003682:	2b0c      	cmp	r3, #12
 8003684:	d238      	bcs.n	80036f8 <_malloc_r+0x84>
 8003686:	270c      	movs	r7, #12
 8003688:	42b9      	cmp	r1, r7
 800368a:	d837      	bhi.n	80036fc <_malloc_r+0x88>
 800368c:	0030      	movs	r0, r6
 800368e:	f000 f873 	bl	8003778 <__malloc_lock>
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <_malloc_r+0x100>)
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	001c      	movs	r4, r3
 800369a:	2c00      	cmp	r4, #0
 800369c:	d133      	bne.n	8003706 <_malloc_r+0x92>
 800369e:	0039      	movs	r1, r7
 80036a0:	0030      	movs	r0, r6
 80036a2:	f7ff ffc5 	bl	8003630 <sbrk_aligned>
 80036a6:	0004      	movs	r4, r0
 80036a8:	1c43      	adds	r3, r0, #1
 80036aa:	d15e      	bne.n	800376a <_malloc_r+0xf6>
 80036ac:	9b00      	ldr	r3, [sp, #0]
 80036ae:	681c      	ldr	r4, [r3, #0]
 80036b0:	0025      	movs	r5, r4
 80036b2:	2d00      	cmp	r5, #0
 80036b4:	d14e      	bne.n	8003754 <_malloc_r+0xe0>
 80036b6:	2c00      	cmp	r4, #0
 80036b8:	d051      	beq.n	800375e <_malloc_r+0xea>
 80036ba:	6823      	ldr	r3, [r4, #0]
 80036bc:	0029      	movs	r1, r5
 80036be:	18e3      	adds	r3, r4, r3
 80036c0:	0030      	movs	r0, r6
 80036c2:	9301      	str	r3, [sp, #4]
 80036c4:	f000 fb5e 	bl	8003d84 <_sbrk_r>
 80036c8:	9b01      	ldr	r3, [sp, #4]
 80036ca:	4283      	cmp	r3, r0
 80036cc:	d147      	bne.n	800375e <_malloc_r+0xea>
 80036ce:	6823      	ldr	r3, [r4, #0]
 80036d0:	0030      	movs	r0, r6
 80036d2:	1aff      	subs	r7, r7, r3
 80036d4:	0039      	movs	r1, r7
 80036d6:	f7ff ffab 	bl	8003630 <sbrk_aligned>
 80036da:	3001      	adds	r0, #1
 80036dc:	d03f      	beq.n	800375e <_malloc_r+0xea>
 80036de:	6823      	ldr	r3, [r4, #0]
 80036e0:	19db      	adds	r3, r3, r7
 80036e2:	6023      	str	r3, [r4, #0]
 80036e4:	9b00      	ldr	r3, [sp, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d040      	beq.n	800376e <_malloc_r+0xfa>
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	42a2      	cmp	r2, r4
 80036f0:	d133      	bne.n	800375a <_malloc_r+0xe6>
 80036f2:	2200      	movs	r2, #0
 80036f4:	605a      	str	r2, [r3, #4]
 80036f6:	e014      	b.n	8003722 <_malloc_r+0xae>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	dac5      	bge.n	8003688 <_malloc_r+0x14>
 80036fc:	230c      	movs	r3, #12
 80036fe:	2500      	movs	r5, #0
 8003700:	6033      	str	r3, [r6, #0]
 8003702:	0028      	movs	r0, r5
 8003704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003706:	6821      	ldr	r1, [r4, #0]
 8003708:	1bc9      	subs	r1, r1, r7
 800370a:	d420      	bmi.n	800374e <_malloc_r+0xda>
 800370c:	290b      	cmp	r1, #11
 800370e:	d918      	bls.n	8003742 <_malloc_r+0xce>
 8003710:	19e2      	adds	r2, r4, r7
 8003712:	6027      	str	r7, [r4, #0]
 8003714:	42a3      	cmp	r3, r4
 8003716:	d112      	bne.n	800373e <_malloc_r+0xca>
 8003718:	9b00      	ldr	r3, [sp, #0]
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	6863      	ldr	r3, [r4, #4]
 800371e:	6011      	str	r1, [r2, #0]
 8003720:	6053      	str	r3, [r2, #4]
 8003722:	0030      	movs	r0, r6
 8003724:	0025      	movs	r5, r4
 8003726:	f000 f82f 	bl	8003788 <__malloc_unlock>
 800372a:	2207      	movs	r2, #7
 800372c:	350b      	adds	r5, #11
 800372e:	1d23      	adds	r3, r4, #4
 8003730:	4395      	bics	r5, r2
 8003732:	1aea      	subs	r2, r5, r3
 8003734:	429d      	cmp	r5, r3
 8003736:	d0e4      	beq.n	8003702 <_malloc_r+0x8e>
 8003738:	1b5b      	subs	r3, r3, r5
 800373a:	50a3      	str	r3, [r4, r2]
 800373c:	e7e1      	b.n	8003702 <_malloc_r+0x8e>
 800373e:	605a      	str	r2, [r3, #4]
 8003740:	e7ec      	b.n	800371c <_malloc_r+0xa8>
 8003742:	6862      	ldr	r2, [r4, #4]
 8003744:	42a3      	cmp	r3, r4
 8003746:	d1d5      	bne.n	80036f4 <_malloc_r+0x80>
 8003748:	9b00      	ldr	r3, [sp, #0]
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e7e9      	b.n	8003722 <_malloc_r+0xae>
 800374e:	0023      	movs	r3, r4
 8003750:	6864      	ldr	r4, [r4, #4]
 8003752:	e7a2      	b.n	800369a <_malloc_r+0x26>
 8003754:	002c      	movs	r4, r5
 8003756:	686d      	ldr	r5, [r5, #4]
 8003758:	e7ab      	b.n	80036b2 <_malloc_r+0x3e>
 800375a:	0013      	movs	r3, r2
 800375c:	e7c4      	b.n	80036e8 <_malloc_r+0x74>
 800375e:	230c      	movs	r3, #12
 8003760:	0030      	movs	r0, r6
 8003762:	6033      	str	r3, [r6, #0]
 8003764:	f000 f810 	bl	8003788 <__malloc_unlock>
 8003768:	e7cb      	b.n	8003702 <_malloc_r+0x8e>
 800376a:	6027      	str	r7, [r4, #0]
 800376c:	e7d9      	b.n	8003722 <_malloc_r+0xae>
 800376e:	605b      	str	r3, [r3, #4]
 8003770:	deff      	udf	#255	; 0xff
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	200002f0 	.word	0x200002f0

08003778 <__malloc_lock>:
 8003778:	b510      	push	{r4, lr}
 800377a:	4802      	ldr	r0, [pc, #8]	; (8003784 <__malloc_lock+0xc>)
 800377c:	f7ff ff0c 	bl	8003598 <__retarget_lock_acquire_recursive>
 8003780:	bd10      	pop	{r4, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	200002ec 	.word	0x200002ec

08003788 <__malloc_unlock>:
 8003788:	b510      	push	{r4, lr}
 800378a:	4802      	ldr	r0, [pc, #8]	; (8003794 <__malloc_unlock+0xc>)
 800378c:	f7ff ff05 	bl	800359a <__retarget_lock_release_recursive>
 8003790:	bd10      	pop	{r4, pc}
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	200002ec 	.word	0x200002ec

08003798 <__ssputs_r>:
 8003798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800379a:	b085      	sub	sp, #20
 800379c:	9301      	str	r3, [sp, #4]
 800379e:	9203      	str	r2, [sp, #12]
 80037a0:	688e      	ldr	r6, [r1, #8]
 80037a2:	9a01      	ldr	r2, [sp, #4]
 80037a4:	0007      	movs	r7, r0
 80037a6:	000c      	movs	r4, r1
 80037a8:	680b      	ldr	r3, [r1, #0]
 80037aa:	4296      	cmp	r6, r2
 80037ac:	d831      	bhi.n	8003812 <__ssputs_r+0x7a>
 80037ae:	898a      	ldrh	r2, [r1, #12]
 80037b0:	2190      	movs	r1, #144	; 0x90
 80037b2:	00c9      	lsls	r1, r1, #3
 80037b4:	420a      	tst	r2, r1
 80037b6:	d029      	beq.n	800380c <__ssputs_r+0x74>
 80037b8:	2003      	movs	r0, #3
 80037ba:	6921      	ldr	r1, [r4, #16]
 80037bc:	1a5b      	subs	r3, r3, r1
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	6963      	ldr	r3, [r4, #20]
 80037c2:	4343      	muls	r3, r0
 80037c4:	0fdd      	lsrs	r5, r3, #31
 80037c6:	18ed      	adds	r5, r5, r3
 80037c8:	9b01      	ldr	r3, [sp, #4]
 80037ca:	9802      	ldr	r0, [sp, #8]
 80037cc:	3301      	adds	r3, #1
 80037ce:	181b      	adds	r3, r3, r0
 80037d0:	106d      	asrs	r5, r5, #1
 80037d2:	42ab      	cmp	r3, r5
 80037d4:	d900      	bls.n	80037d8 <__ssputs_r+0x40>
 80037d6:	001d      	movs	r5, r3
 80037d8:	0552      	lsls	r2, r2, #21
 80037da:	d529      	bpl.n	8003830 <__ssputs_r+0x98>
 80037dc:	0029      	movs	r1, r5
 80037de:	0038      	movs	r0, r7
 80037e0:	f7ff ff48 	bl	8003674 <_malloc_r>
 80037e4:	1e06      	subs	r6, r0, #0
 80037e6:	d02d      	beq.n	8003844 <__ssputs_r+0xac>
 80037e8:	9a02      	ldr	r2, [sp, #8]
 80037ea:	6921      	ldr	r1, [r4, #16]
 80037ec:	f000 fae7 	bl	8003dbe <memcpy>
 80037f0:	89a2      	ldrh	r2, [r4, #12]
 80037f2:	4b19      	ldr	r3, [pc, #100]	; (8003858 <__ssputs_r+0xc0>)
 80037f4:	401a      	ands	r2, r3
 80037f6:	2380      	movs	r3, #128	; 0x80
 80037f8:	4313      	orrs	r3, r2
 80037fa:	81a3      	strh	r3, [r4, #12]
 80037fc:	9b02      	ldr	r3, [sp, #8]
 80037fe:	6126      	str	r6, [r4, #16]
 8003800:	18f6      	adds	r6, r6, r3
 8003802:	6026      	str	r6, [r4, #0]
 8003804:	6165      	str	r5, [r4, #20]
 8003806:	9e01      	ldr	r6, [sp, #4]
 8003808:	1aed      	subs	r5, r5, r3
 800380a:	60a5      	str	r5, [r4, #8]
 800380c:	9b01      	ldr	r3, [sp, #4]
 800380e:	429e      	cmp	r6, r3
 8003810:	d900      	bls.n	8003814 <__ssputs_r+0x7c>
 8003812:	9e01      	ldr	r6, [sp, #4]
 8003814:	0032      	movs	r2, r6
 8003816:	9903      	ldr	r1, [sp, #12]
 8003818:	6820      	ldr	r0, [r4, #0]
 800381a:	f000 fa9f 	bl	8003d5c <memmove>
 800381e:	2000      	movs	r0, #0
 8003820:	68a3      	ldr	r3, [r4, #8]
 8003822:	1b9b      	subs	r3, r3, r6
 8003824:	60a3      	str	r3, [r4, #8]
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	199b      	adds	r3, r3, r6
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	b005      	add	sp, #20
 800382e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003830:	002a      	movs	r2, r5
 8003832:	0038      	movs	r0, r7
 8003834:	f000 facc 	bl	8003dd0 <_realloc_r>
 8003838:	1e06      	subs	r6, r0, #0
 800383a:	d1df      	bne.n	80037fc <__ssputs_r+0x64>
 800383c:	0038      	movs	r0, r7
 800383e:	6921      	ldr	r1, [r4, #16]
 8003840:	f7ff feac 	bl	800359c <_free_r>
 8003844:	230c      	movs	r3, #12
 8003846:	2001      	movs	r0, #1
 8003848:	603b      	str	r3, [r7, #0]
 800384a:	89a2      	ldrh	r2, [r4, #12]
 800384c:	3334      	adds	r3, #52	; 0x34
 800384e:	4313      	orrs	r3, r2
 8003850:	81a3      	strh	r3, [r4, #12]
 8003852:	4240      	negs	r0, r0
 8003854:	e7ea      	b.n	800382c <__ssputs_r+0x94>
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	fffffb7f 	.word	0xfffffb7f

0800385c <_svfiprintf_r>:
 800385c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800385e:	b0a1      	sub	sp, #132	; 0x84
 8003860:	9003      	str	r0, [sp, #12]
 8003862:	001d      	movs	r5, r3
 8003864:	898b      	ldrh	r3, [r1, #12]
 8003866:	000f      	movs	r7, r1
 8003868:	0016      	movs	r6, r2
 800386a:	061b      	lsls	r3, r3, #24
 800386c:	d511      	bpl.n	8003892 <_svfiprintf_r+0x36>
 800386e:	690b      	ldr	r3, [r1, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10e      	bne.n	8003892 <_svfiprintf_r+0x36>
 8003874:	2140      	movs	r1, #64	; 0x40
 8003876:	f7ff fefd 	bl	8003674 <_malloc_r>
 800387a:	6038      	str	r0, [r7, #0]
 800387c:	6138      	str	r0, [r7, #16]
 800387e:	2800      	cmp	r0, #0
 8003880:	d105      	bne.n	800388e <_svfiprintf_r+0x32>
 8003882:	230c      	movs	r3, #12
 8003884:	9a03      	ldr	r2, [sp, #12]
 8003886:	3801      	subs	r0, #1
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	b021      	add	sp, #132	; 0x84
 800388c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388e:	2340      	movs	r3, #64	; 0x40
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	2300      	movs	r3, #0
 8003894:	ac08      	add	r4, sp, #32
 8003896:	6163      	str	r3, [r4, #20]
 8003898:	3320      	adds	r3, #32
 800389a:	7663      	strb	r3, [r4, #25]
 800389c:	3310      	adds	r3, #16
 800389e:	76a3      	strb	r3, [r4, #26]
 80038a0:	9507      	str	r5, [sp, #28]
 80038a2:	0035      	movs	r5, r6
 80038a4:	782b      	ldrb	r3, [r5, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <_svfiprintf_r+0x52>
 80038aa:	2b25      	cmp	r3, #37	; 0x25
 80038ac:	d148      	bne.n	8003940 <_svfiprintf_r+0xe4>
 80038ae:	1bab      	subs	r3, r5, r6
 80038b0:	9305      	str	r3, [sp, #20]
 80038b2:	42b5      	cmp	r5, r6
 80038b4:	d00b      	beq.n	80038ce <_svfiprintf_r+0x72>
 80038b6:	0032      	movs	r2, r6
 80038b8:	0039      	movs	r1, r7
 80038ba:	9803      	ldr	r0, [sp, #12]
 80038bc:	f7ff ff6c 	bl	8003798 <__ssputs_r>
 80038c0:	3001      	adds	r0, #1
 80038c2:	d100      	bne.n	80038c6 <_svfiprintf_r+0x6a>
 80038c4:	e0af      	b.n	8003a26 <_svfiprintf_r+0x1ca>
 80038c6:	6963      	ldr	r3, [r4, #20]
 80038c8:	9a05      	ldr	r2, [sp, #20]
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	6163      	str	r3, [r4, #20]
 80038ce:	782b      	ldrb	r3, [r5, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d100      	bne.n	80038d6 <_svfiprintf_r+0x7a>
 80038d4:	e0a7      	b.n	8003a26 <_svfiprintf_r+0x1ca>
 80038d6:	2201      	movs	r2, #1
 80038d8:	2300      	movs	r3, #0
 80038da:	4252      	negs	r2, r2
 80038dc:	6062      	str	r2, [r4, #4]
 80038de:	a904      	add	r1, sp, #16
 80038e0:	3254      	adds	r2, #84	; 0x54
 80038e2:	1852      	adds	r2, r2, r1
 80038e4:	1c6e      	adds	r6, r5, #1
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	60e3      	str	r3, [r4, #12]
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	7013      	strb	r3, [r2, #0]
 80038ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80038f0:	4b55      	ldr	r3, [pc, #340]	; (8003a48 <_svfiprintf_r+0x1ec>)
 80038f2:	2205      	movs	r2, #5
 80038f4:	0018      	movs	r0, r3
 80038f6:	7831      	ldrb	r1, [r6, #0]
 80038f8:	9305      	str	r3, [sp, #20]
 80038fa:	f000 fa55 	bl	8003da8 <memchr>
 80038fe:	1c75      	adds	r5, r6, #1
 8003900:	2800      	cmp	r0, #0
 8003902:	d11f      	bne.n	8003944 <_svfiprintf_r+0xe8>
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	06d3      	lsls	r3, r2, #27
 8003908:	d504      	bpl.n	8003914 <_svfiprintf_r+0xb8>
 800390a:	2353      	movs	r3, #83	; 0x53
 800390c:	a904      	add	r1, sp, #16
 800390e:	185b      	adds	r3, r3, r1
 8003910:	2120      	movs	r1, #32
 8003912:	7019      	strb	r1, [r3, #0]
 8003914:	0713      	lsls	r3, r2, #28
 8003916:	d504      	bpl.n	8003922 <_svfiprintf_r+0xc6>
 8003918:	2353      	movs	r3, #83	; 0x53
 800391a:	a904      	add	r1, sp, #16
 800391c:	185b      	adds	r3, r3, r1
 800391e:	212b      	movs	r1, #43	; 0x2b
 8003920:	7019      	strb	r1, [r3, #0]
 8003922:	7833      	ldrb	r3, [r6, #0]
 8003924:	2b2a      	cmp	r3, #42	; 0x2a
 8003926:	d016      	beq.n	8003956 <_svfiprintf_r+0xfa>
 8003928:	0035      	movs	r5, r6
 800392a:	2100      	movs	r1, #0
 800392c:	200a      	movs	r0, #10
 800392e:	68e3      	ldr	r3, [r4, #12]
 8003930:	782a      	ldrb	r2, [r5, #0]
 8003932:	1c6e      	adds	r6, r5, #1
 8003934:	3a30      	subs	r2, #48	; 0x30
 8003936:	2a09      	cmp	r2, #9
 8003938:	d94e      	bls.n	80039d8 <_svfiprintf_r+0x17c>
 800393a:	2900      	cmp	r1, #0
 800393c:	d111      	bne.n	8003962 <_svfiprintf_r+0x106>
 800393e:	e017      	b.n	8003970 <_svfiprintf_r+0x114>
 8003940:	3501      	adds	r5, #1
 8003942:	e7af      	b.n	80038a4 <_svfiprintf_r+0x48>
 8003944:	9b05      	ldr	r3, [sp, #20]
 8003946:	6822      	ldr	r2, [r4, #0]
 8003948:	1ac0      	subs	r0, r0, r3
 800394a:	2301      	movs	r3, #1
 800394c:	4083      	lsls	r3, r0
 800394e:	4313      	orrs	r3, r2
 8003950:	002e      	movs	r6, r5
 8003952:	6023      	str	r3, [r4, #0]
 8003954:	e7cc      	b.n	80038f0 <_svfiprintf_r+0x94>
 8003956:	9b07      	ldr	r3, [sp, #28]
 8003958:	1d19      	adds	r1, r3, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	9107      	str	r1, [sp, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	db01      	blt.n	8003966 <_svfiprintf_r+0x10a>
 8003962:	930b      	str	r3, [sp, #44]	; 0x2c
 8003964:	e004      	b.n	8003970 <_svfiprintf_r+0x114>
 8003966:	425b      	negs	r3, r3
 8003968:	60e3      	str	r3, [r4, #12]
 800396a:	2302      	movs	r3, #2
 800396c:	4313      	orrs	r3, r2
 800396e:	6023      	str	r3, [r4, #0]
 8003970:	782b      	ldrb	r3, [r5, #0]
 8003972:	2b2e      	cmp	r3, #46	; 0x2e
 8003974:	d10a      	bne.n	800398c <_svfiprintf_r+0x130>
 8003976:	786b      	ldrb	r3, [r5, #1]
 8003978:	2b2a      	cmp	r3, #42	; 0x2a
 800397a:	d135      	bne.n	80039e8 <_svfiprintf_r+0x18c>
 800397c:	9b07      	ldr	r3, [sp, #28]
 800397e:	3502      	adds	r5, #2
 8003980:	1d1a      	adds	r2, r3, #4
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	9207      	str	r2, [sp, #28]
 8003986:	2b00      	cmp	r3, #0
 8003988:	db2b      	blt.n	80039e2 <_svfiprintf_r+0x186>
 800398a:	9309      	str	r3, [sp, #36]	; 0x24
 800398c:	4e2f      	ldr	r6, [pc, #188]	; (8003a4c <_svfiprintf_r+0x1f0>)
 800398e:	2203      	movs	r2, #3
 8003990:	0030      	movs	r0, r6
 8003992:	7829      	ldrb	r1, [r5, #0]
 8003994:	f000 fa08 	bl	8003da8 <memchr>
 8003998:	2800      	cmp	r0, #0
 800399a:	d006      	beq.n	80039aa <_svfiprintf_r+0x14e>
 800399c:	2340      	movs	r3, #64	; 0x40
 800399e:	1b80      	subs	r0, r0, r6
 80039a0:	4083      	lsls	r3, r0
 80039a2:	6822      	ldr	r2, [r4, #0]
 80039a4:	3501      	adds	r5, #1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	6023      	str	r3, [r4, #0]
 80039aa:	7829      	ldrb	r1, [r5, #0]
 80039ac:	2206      	movs	r2, #6
 80039ae:	4828      	ldr	r0, [pc, #160]	; (8003a50 <_svfiprintf_r+0x1f4>)
 80039b0:	1c6e      	adds	r6, r5, #1
 80039b2:	7621      	strb	r1, [r4, #24]
 80039b4:	f000 f9f8 	bl	8003da8 <memchr>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d03c      	beq.n	8003a36 <_svfiprintf_r+0x1da>
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <_svfiprintf_r+0x1f8>)
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d125      	bne.n	8003a0e <_svfiprintf_r+0x1b2>
 80039c2:	2207      	movs	r2, #7
 80039c4:	9b07      	ldr	r3, [sp, #28]
 80039c6:	3307      	adds	r3, #7
 80039c8:	4393      	bics	r3, r2
 80039ca:	3308      	adds	r3, #8
 80039cc:	9307      	str	r3, [sp, #28]
 80039ce:	6963      	ldr	r3, [r4, #20]
 80039d0:	9a04      	ldr	r2, [sp, #16]
 80039d2:	189b      	adds	r3, r3, r2
 80039d4:	6163      	str	r3, [r4, #20]
 80039d6:	e764      	b.n	80038a2 <_svfiprintf_r+0x46>
 80039d8:	4343      	muls	r3, r0
 80039da:	0035      	movs	r5, r6
 80039dc:	2101      	movs	r1, #1
 80039de:	189b      	adds	r3, r3, r2
 80039e0:	e7a6      	b.n	8003930 <_svfiprintf_r+0xd4>
 80039e2:	2301      	movs	r3, #1
 80039e4:	425b      	negs	r3, r3
 80039e6:	e7d0      	b.n	800398a <_svfiprintf_r+0x12e>
 80039e8:	2300      	movs	r3, #0
 80039ea:	200a      	movs	r0, #10
 80039ec:	001a      	movs	r2, r3
 80039ee:	3501      	adds	r5, #1
 80039f0:	6063      	str	r3, [r4, #4]
 80039f2:	7829      	ldrb	r1, [r5, #0]
 80039f4:	1c6e      	adds	r6, r5, #1
 80039f6:	3930      	subs	r1, #48	; 0x30
 80039f8:	2909      	cmp	r1, #9
 80039fa:	d903      	bls.n	8003a04 <_svfiprintf_r+0x1a8>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0c5      	beq.n	800398c <_svfiprintf_r+0x130>
 8003a00:	9209      	str	r2, [sp, #36]	; 0x24
 8003a02:	e7c3      	b.n	800398c <_svfiprintf_r+0x130>
 8003a04:	4342      	muls	r2, r0
 8003a06:	0035      	movs	r5, r6
 8003a08:	2301      	movs	r3, #1
 8003a0a:	1852      	adds	r2, r2, r1
 8003a0c:	e7f1      	b.n	80039f2 <_svfiprintf_r+0x196>
 8003a0e:	aa07      	add	r2, sp, #28
 8003a10:	9200      	str	r2, [sp, #0]
 8003a12:	0021      	movs	r1, r4
 8003a14:	003a      	movs	r2, r7
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <_svfiprintf_r+0x1fc>)
 8003a18:	9803      	ldr	r0, [sp, #12]
 8003a1a:	e000      	b.n	8003a1e <_svfiprintf_r+0x1c2>
 8003a1c:	bf00      	nop
 8003a1e:	9004      	str	r0, [sp, #16]
 8003a20:	9b04      	ldr	r3, [sp, #16]
 8003a22:	3301      	adds	r3, #1
 8003a24:	d1d3      	bne.n	80039ce <_svfiprintf_r+0x172>
 8003a26:	89bb      	ldrh	r3, [r7, #12]
 8003a28:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003a2a:	065b      	lsls	r3, r3, #25
 8003a2c:	d400      	bmi.n	8003a30 <_svfiprintf_r+0x1d4>
 8003a2e:	e72c      	b.n	800388a <_svfiprintf_r+0x2e>
 8003a30:	2001      	movs	r0, #1
 8003a32:	4240      	negs	r0, r0
 8003a34:	e729      	b.n	800388a <_svfiprintf_r+0x2e>
 8003a36:	aa07      	add	r2, sp, #28
 8003a38:	9200      	str	r2, [sp, #0]
 8003a3a:	0021      	movs	r1, r4
 8003a3c:	003a      	movs	r2, r7
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <_svfiprintf_r+0x1fc>)
 8003a40:	9803      	ldr	r0, [sp, #12]
 8003a42:	f000 f87b 	bl	8003b3c <_printf_i>
 8003a46:	e7ea      	b.n	8003a1e <_svfiprintf_r+0x1c2>
 8003a48:	08003ee8 	.word	0x08003ee8
 8003a4c:	08003eee 	.word	0x08003eee
 8003a50:	08003ef2 	.word	0x08003ef2
 8003a54:	00000000 	.word	0x00000000
 8003a58:	08003799 	.word	0x08003799

08003a5c <_printf_common>:
 8003a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5e:	0016      	movs	r6, r2
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	688a      	ldr	r2, [r1, #8]
 8003a64:	690b      	ldr	r3, [r1, #16]
 8003a66:	000c      	movs	r4, r1
 8003a68:	9000      	str	r0, [sp, #0]
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	da00      	bge.n	8003a70 <_printf_common+0x14>
 8003a6e:	0013      	movs	r3, r2
 8003a70:	0022      	movs	r2, r4
 8003a72:	6033      	str	r3, [r6, #0]
 8003a74:	3243      	adds	r2, #67	; 0x43
 8003a76:	7812      	ldrb	r2, [r2, #0]
 8003a78:	2a00      	cmp	r2, #0
 8003a7a:	d001      	beq.n	8003a80 <_printf_common+0x24>
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	6033      	str	r3, [r6, #0]
 8003a80:	6823      	ldr	r3, [r4, #0]
 8003a82:	069b      	lsls	r3, r3, #26
 8003a84:	d502      	bpl.n	8003a8c <_printf_common+0x30>
 8003a86:	6833      	ldr	r3, [r6, #0]
 8003a88:	3302      	adds	r3, #2
 8003a8a:	6033      	str	r3, [r6, #0]
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	2306      	movs	r3, #6
 8003a90:	0015      	movs	r5, r2
 8003a92:	401d      	ands	r5, r3
 8003a94:	421a      	tst	r2, r3
 8003a96:	d027      	beq.n	8003ae8 <_printf_common+0x8c>
 8003a98:	0023      	movs	r3, r4
 8003a9a:	3343      	adds	r3, #67	; 0x43
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	1e5a      	subs	r2, r3, #1
 8003aa0:	4193      	sbcs	r3, r2
 8003aa2:	6822      	ldr	r2, [r4, #0]
 8003aa4:	0692      	lsls	r2, r2, #26
 8003aa6:	d430      	bmi.n	8003b0a <_printf_common+0xae>
 8003aa8:	0022      	movs	r2, r4
 8003aaa:	9901      	ldr	r1, [sp, #4]
 8003aac:	9800      	ldr	r0, [sp, #0]
 8003aae:	9d08      	ldr	r5, [sp, #32]
 8003ab0:	3243      	adds	r2, #67	; 0x43
 8003ab2:	47a8      	blx	r5
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d025      	beq.n	8003b04 <_printf_common+0xa8>
 8003ab8:	2206      	movs	r2, #6
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	2500      	movs	r5, #0
 8003abe:	4013      	ands	r3, r2
 8003ac0:	2b04      	cmp	r3, #4
 8003ac2:	d105      	bne.n	8003ad0 <_printf_common+0x74>
 8003ac4:	6833      	ldr	r3, [r6, #0]
 8003ac6:	68e5      	ldr	r5, [r4, #12]
 8003ac8:	1aed      	subs	r5, r5, r3
 8003aca:	43eb      	mvns	r3, r5
 8003acc:	17db      	asrs	r3, r3, #31
 8003ace:	401d      	ands	r5, r3
 8003ad0:	68a3      	ldr	r3, [r4, #8]
 8003ad2:	6922      	ldr	r2, [r4, #16]
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	dd01      	ble.n	8003adc <_printf_common+0x80>
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	18ed      	adds	r5, r5, r3
 8003adc:	2600      	movs	r6, #0
 8003ade:	42b5      	cmp	r5, r6
 8003ae0:	d120      	bne.n	8003b24 <_printf_common+0xc8>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e010      	b.n	8003b08 <_printf_common+0xac>
 8003ae6:	3501      	adds	r5, #1
 8003ae8:	68e3      	ldr	r3, [r4, #12]
 8003aea:	6832      	ldr	r2, [r6, #0]
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	42ab      	cmp	r3, r5
 8003af0:	ddd2      	ble.n	8003a98 <_printf_common+0x3c>
 8003af2:	0022      	movs	r2, r4
 8003af4:	2301      	movs	r3, #1
 8003af6:	9901      	ldr	r1, [sp, #4]
 8003af8:	9800      	ldr	r0, [sp, #0]
 8003afa:	9f08      	ldr	r7, [sp, #32]
 8003afc:	3219      	adds	r2, #25
 8003afe:	47b8      	blx	r7
 8003b00:	3001      	adds	r0, #1
 8003b02:	d1f0      	bne.n	8003ae6 <_printf_common+0x8a>
 8003b04:	2001      	movs	r0, #1
 8003b06:	4240      	negs	r0, r0
 8003b08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b0a:	2030      	movs	r0, #48	; 0x30
 8003b0c:	18e1      	adds	r1, r4, r3
 8003b0e:	3143      	adds	r1, #67	; 0x43
 8003b10:	7008      	strb	r0, [r1, #0]
 8003b12:	0021      	movs	r1, r4
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	3145      	adds	r1, #69	; 0x45
 8003b18:	7809      	ldrb	r1, [r1, #0]
 8003b1a:	18a2      	adds	r2, r4, r2
 8003b1c:	3243      	adds	r2, #67	; 0x43
 8003b1e:	3302      	adds	r3, #2
 8003b20:	7011      	strb	r1, [r2, #0]
 8003b22:	e7c1      	b.n	8003aa8 <_printf_common+0x4c>
 8003b24:	0022      	movs	r2, r4
 8003b26:	2301      	movs	r3, #1
 8003b28:	9901      	ldr	r1, [sp, #4]
 8003b2a:	9800      	ldr	r0, [sp, #0]
 8003b2c:	9f08      	ldr	r7, [sp, #32]
 8003b2e:	321a      	adds	r2, #26
 8003b30:	47b8      	blx	r7
 8003b32:	3001      	adds	r0, #1
 8003b34:	d0e6      	beq.n	8003b04 <_printf_common+0xa8>
 8003b36:	3601      	adds	r6, #1
 8003b38:	e7d1      	b.n	8003ade <_printf_common+0x82>
	...

08003b3c <_printf_i>:
 8003b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3e:	b08b      	sub	sp, #44	; 0x2c
 8003b40:	9206      	str	r2, [sp, #24]
 8003b42:	000a      	movs	r2, r1
 8003b44:	3243      	adds	r2, #67	; 0x43
 8003b46:	9307      	str	r3, [sp, #28]
 8003b48:	9005      	str	r0, [sp, #20]
 8003b4a:	9204      	str	r2, [sp, #16]
 8003b4c:	7e0a      	ldrb	r2, [r1, #24]
 8003b4e:	000c      	movs	r4, r1
 8003b50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003b52:	2a78      	cmp	r2, #120	; 0x78
 8003b54:	d809      	bhi.n	8003b6a <_printf_i+0x2e>
 8003b56:	2a62      	cmp	r2, #98	; 0x62
 8003b58:	d80b      	bhi.n	8003b72 <_printf_i+0x36>
 8003b5a:	2a00      	cmp	r2, #0
 8003b5c:	d100      	bne.n	8003b60 <_printf_i+0x24>
 8003b5e:	e0be      	b.n	8003cde <_printf_i+0x1a2>
 8003b60:	497c      	ldr	r1, [pc, #496]	; (8003d54 <_printf_i+0x218>)
 8003b62:	9103      	str	r1, [sp, #12]
 8003b64:	2a58      	cmp	r2, #88	; 0x58
 8003b66:	d100      	bne.n	8003b6a <_printf_i+0x2e>
 8003b68:	e093      	b.n	8003c92 <_printf_i+0x156>
 8003b6a:	0026      	movs	r6, r4
 8003b6c:	3642      	adds	r6, #66	; 0x42
 8003b6e:	7032      	strb	r2, [r6, #0]
 8003b70:	e022      	b.n	8003bb8 <_printf_i+0x7c>
 8003b72:	0010      	movs	r0, r2
 8003b74:	3863      	subs	r0, #99	; 0x63
 8003b76:	2815      	cmp	r0, #21
 8003b78:	d8f7      	bhi.n	8003b6a <_printf_i+0x2e>
 8003b7a:	f7fc fac3 	bl	8000104 <__gnu_thumb1_case_shi>
 8003b7e:	0016      	.short	0x0016
 8003b80:	fff6001f 	.word	0xfff6001f
 8003b84:	fff6fff6 	.word	0xfff6fff6
 8003b88:	001ffff6 	.word	0x001ffff6
 8003b8c:	fff6fff6 	.word	0xfff6fff6
 8003b90:	fff6fff6 	.word	0xfff6fff6
 8003b94:	003600a3 	.word	0x003600a3
 8003b98:	fff60083 	.word	0xfff60083
 8003b9c:	00b4fff6 	.word	0x00b4fff6
 8003ba0:	0036fff6 	.word	0x0036fff6
 8003ba4:	fff6fff6 	.word	0xfff6fff6
 8003ba8:	0087      	.short	0x0087
 8003baa:	0026      	movs	r6, r4
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	3642      	adds	r6, #66	; 0x42
 8003bb0:	1d11      	adds	r1, r2, #4
 8003bb2:	6019      	str	r1, [r3, #0]
 8003bb4:	6813      	ldr	r3, [r2, #0]
 8003bb6:	7033      	strb	r3, [r6, #0]
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0a2      	b.n	8003d02 <_printf_i+0x1c6>
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	6809      	ldr	r1, [r1, #0]
 8003bc0:	1d02      	adds	r2, r0, #4
 8003bc2:	060d      	lsls	r5, r1, #24
 8003bc4:	d50b      	bpl.n	8003bde <_printf_i+0xa2>
 8003bc6:	6805      	ldr	r5, [r0, #0]
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	2d00      	cmp	r5, #0
 8003bcc:	da03      	bge.n	8003bd6 <_printf_i+0x9a>
 8003bce:	232d      	movs	r3, #45	; 0x2d
 8003bd0:	9a04      	ldr	r2, [sp, #16]
 8003bd2:	426d      	negs	r5, r5
 8003bd4:	7013      	strb	r3, [r2, #0]
 8003bd6:	4b5f      	ldr	r3, [pc, #380]	; (8003d54 <_printf_i+0x218>)
 8003bd8:	270a      	movs	r7, #10
 8003bda:	9303      	str	r3, [sp, #12]
 8003bdc:	e01b      	b.n	8003c16 <_printf_i+0xda>
 8003bde:	6805      	ldr	r5, [r0, #0]
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	0649      	lsls	r1, r1, #25
 8003be4:	d5f1      	bpl.n	8003bca <_printf_i+0x8e>
 8003be6:	b22d      	sxth	r5, r5
 8003be8:	e7ef      	b.n	8003bca <_printf_i+0x8e>
 8003bea:	680d      	ldr	r5, [r1, #0]
 8003bec:	6819      	ldr	r1, [r3, #0]
 8003bee:	1d08      	adds	r0, r1, #4
 8003bf0:	6018      	str	r0, [r3, #0]
 8003bf2:	062e      	lsls	r6, r5, #24
 8003bf4:	d501      	bpl.n	8003bfa <_printf_i+0xbe>
 8003bf6:	680d      	ldr	r5, [r1, #0]
 8003bf8:	e003      	b.n	8003c02 <_printf_i+0xc6>
 8003bfa:	066d      	lsls	r5, r5, #25
 8003bfc:	d5fb      	bpl.n	8003bf6 <_printf_i+0xba>
 8003bfe:	680d      	ldr	r5, [r1, #0]
 8003c00:	b2ad      	uxth	r5, r5
 8003c02:	4b54      	ldr	r3, [pc, #336]	; (8003d54 <_printf_i+0x218>)
 8003c04:	2708      	movs	r7, #8
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	2a6f      	cmp	r2, #111	; 0x6f
 8003c0a:	d000      	beq.n	8003c0e <_printf_i+0xd2>
 8003c0c:	3702      	adds	r7, #2
 8003c0e:	0023      	movs	r3, r4
 8003c10:	2200      	movs	r2, #0
 8003c12:	3343      	adds	r3, #67	; 0x43
 8003c14:	701a      	strb	r2, [r3, #0]
 8003c16:	6863      	ldr	r3, [r4, #4]
 8003c18:	60a3      	str	r3, [r4, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	db03      	blt.n	8003c26 <_printf_i+0xea>
 8003c1e:	2104      	movs	r1, #4
 8003c20:	6822      	ldr	r2, [r4, #0]
 8003c22:	438a      	bics	r2, r1
 8003c24:	6022      	str	r2, [r4, #0]
 8003c26:	2d00      	cmp	r5, #0
 8003c28:	d102      	bne.n	8003c30 <_printf_i+0xf4>
 8003c2a:	9e04      	ldr	r6, [sp, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00c      	beq.n	8003c4a <_printf_i+0x10e>
 8003c30:	9e04      	ldr	r6, [sp, #16]
 8003c32:	0028      	movs	r0, r5
 8003c34:	0039      	movs	r1, r7
 8003c36:	f7fc faf5 	bl	8000224 <__aeabi_uidivmod>
 8003c3a:	9b03      	ldr	r3, [sp, #12]
 8003c3c:	3e01      	subs	r6, #1
 8003c3e:	5c5b      	ldrb	r3, [r3, r1]
 8003c40:	7033      	strb	r3, [r6, #0]
 8003c42:	002b      	movs	r3, r5
 8003c44:	0005      	movs	r5, r0
 8003c46:	429f      	cmp	r7, r3
 8003c48:	d9f3      	bls.n	8003c32 <_printf_i+0xf6>
 8003c4a:	2f08      	cmp	r7, #8
 8003c4c:	d109      	bne.n	8003c62 <_printf_i+0x126>
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	07db      	lsls	r3, r3, #31
 8003c52:	d506      	bpl.n	8003c62 <_printf_i+0x126>
 8003c54:	6862      	ldr	r2, [r4, #4]
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	dc02      	bgt.n	8003c62 <_printf_i+0x126>
 8003c5c:	2330      	movs	r3, #48	; 0x30
 8003c5e:	3e01      	subs	r6, #1
 8003c60:	7033      	strb	r3, [r6, #0]
 8003c62:	9b04      	ldr	r3, [sp, #16]
 8003c64:	1b9b      	subs	r3, r3, r6
 8003c66:	6123      	str	r3, [r4, #16]
 8003c68:	9b07      	ldr	r3, [sp, #28]
 8003c6a:	0021      	movs	r1, r4
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	9805      	ldr	r0, [sp, #20]
 8003c70:	9b06      	ldr	r3, [sp, #24]
 8003c72:	aa09      	add	r2, sp, #36	; 0x24
 8003c74:	f7ff fef2 	bl	8003a5c <_printf_common>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d147      	bne.n	8003d0c <_printf_i+0x1d0>
 8003c7c:	2001      	movs	r0, #1
 8003c7e:	4240      	negs	r0, r0
 8003c80:	b00b      	add	sp, #44	; 0x2c
 8003c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c84:	2220      	movs	r2, #32
 8003c86:	6809      	ldr	r1, [r1, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	6022      	str	r2, [r4, #0]
 8003c8c:	2278      	movs	r2, #120	; 0x78
 8003c8e:	4932      	ldr	r1, [pc, #200]	; (8003d58 <_printf_i+0x21c>)
 8003c90:	9103      	str	r1, [sp, #12]
 8003c92:	0021      	movs	r1, r4
 8003c94:	3145      	adds	r1, #69	; 0x45
 8003c96:	700a      	strb	r2, [r1, #0]
 8003c98:	6819      	ldr	r1, [r3, #0]
 8003c9a:	6822      	ldr	r2, [r4, #0]
 8003c9c:	c920      	ldmia	r1!, {r5}
 8003c9e:	0610      	lsls	r0, r2, #24
 8003ca0:	d402      	bmi.n	8003ca8 <_printf_i+0x16c>
 8003ca2:	0650      	lsls	r0, r2, #25
 8003ca4:	d500      	bpl.n	8003ca8 <_printf_i+0x16c>
 8003ca6:	b2ad      	uxth	r5, r5
 8003ca8:	6019      	str	r1, [r3, #0]
 8003caa:	07d3      	lsls	r3, r2, #31
 8003cac:	d502      	bpl.n	8003cb4 <_printf_i+0x178>
 8003cae:	2320      	movs	r3, #32
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	2710      	movs	r7, #16
 8003cb6:	2d00      	cmp	r5, #0
 8003cb8:	d1a9      	bne.n	8003c0e <_printf_i+0xd2>
 8003cba:	2220      	movs	r2, #32
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	4393      	bics	r3, r2
 8003cc0:	6023      	str	r3, [r4, #0]
 8003cc2:	e7a4      	b.n	8003c0e <_printf_i+0xd2>
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	680d      	ldr	r5, [r1, #0]
 8003cc8:	1d10      	adds	r0, r2, #4
 8003cca:	6949      	ldr	r1, [r1, #20]
 8003ccc:	6018      	str	r0, [r3, #0]
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	062e      	lsls	r6, r5, #24
 8003cd2:	d501      	bpl.n	8003cd8 <_printf_i+0x19c>
 8003cd4:	6019      	str	r1, [r3, #0]
 8003cd6:	e002      	b.n	8003cde <_printf_i+0x1a2>
 8003cd8:	066d      	lsls	r5, r5, #25
 8003cda:	d5fb      	bpl.n	8003cd4 <_printf_i+0x198>
 8003cdc:	8019      	strh	r1, [r3, #0]
 8003cde:	2300      	movs	r3, #0
 8003ce0:	9e04      	ldr	r6, [sp, #16]
 8003ce2:	6123      	str	r3, [r4, #16]
 8003ce4:	e7c0      	b.n	8003c68 <_printf_i+0x12c>
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	1d11      	adds	r1, r2, #4
 8003cea:	6019      	str	r1, [r3, #0]
 8003cec:	6816      	ldr	r6, [r2, #0]
 8003cee:	2100      	movs	r1, #0
 8003cf0:	0030      	movs	r0, r6
 8003cf2:	6862      	ldr	r2, [r4, #4]
 8003cf4:	f000 f858 	bl	8003da8 <memchr>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	d001      	beq.n	8003d00 <_printf_i+0x1c4>
 8003cfc:	1b80      	subs	r0, r0, r6
 8003cfe:	6060      	str	r0, [r4, #4]
 8003d00:	6863      	ldr	r3, [r4, #4]
 8003d02:	6123      	str	r3, [r4, #16]
 8003d04:	2300      	movs	r3, #0
 8003d06:	9a04      	ldr	r2, [sp, #16]
 8003d08:	7013      	strb	r3, [r2, #0]
 8003d0a:	e7ad      	b.n	8003c68 <_printf_i+0x12c>
 8003d0c:	0032      	movs	r2, r6
 8003d0e:	6923      	ldr	r3, [r4, #16]
 8003d10:	9906      	ldr	r1, [sp, #24]
 8003d12:	9805      	ldr	r0, [sp, #20]
 8003d14:	9d07      	ldr	r5, [sp, #28]
 8003d16:	47a8      	blx	r5
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d0af      	beq.n	8003c7c <_printf_i+0x140>
 8003d1c:	6823      	ldr	r3, [r4, #0]
 8003d1e:	079b      	lsls	r3, r3, #30
 8003d20:	d415      	bmi.n	8003d4e <_printf_i+0x212>
 8003d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d24:	68e0      	ldr	r0, [r4, #12]
 8003d26:	4298      	cmp	r0, r3
 8003d28:	daaa      	bge.n	8003c80 <_printf_i+0x144>
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	e7a8      	b.n	8003c80 <_printf_i+0x144>
 8003d2e:	0022      	movs	r2, r4
 8003d30:	2301      	movs	r3, #1
 8003d32:	9906      	ldr	r1, [sp, #24]
 8003d34:	9805      	ldr	r0, [sp, #20]
 8003d36:	9e07      	ldr	r6, [sp, #28]
 8003d38:	3219      	adds	r2, #25
 8003d3a:	47b0      	blx	r6
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d09d      	beq.n	8003c7c <_printf_i+0x140>
 8003d40:	3501      	adds	r5, #1
 8003d42:	68e3      	ldr	r3, [r4, #12]
 8003d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	42ab      	cmp	r3, r5
 8003d4a:	dcf0      	bgt.n	8003d2e <_printf_i+0x1f2>
 8003d4c:	e7e9      	b.n	8003d22 <_printf_i+0x1e6>
 8003d4e:	2500      	movs	r5, #0
 8003d50:	e7f7      	b.n	8003d42 <_printf_i+0x206>
 8003d52:	46c0      	nop			; (mov r8, r8)
 8003d54:	08003ef9 	.word	0x08003ef9
 8003d58:	08003f0a 	.word	0x08003f0a

08003d5c <memmove>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4288      	cmp	r0, r1
 8003d60:	d902      	bls.n	8003d68 <memmove+0xc>
 8003d62:	188b      	adds	r3, r1, r2
 8003d64:	4298      	cmp	r0, r3
 8003d66:	d303      	bcc.n	8003d70 <memmove+0x14>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e007      	b.n	8003d7c <memmove+0x20>
 8003d6c:	5c8b      	ldrb	r3, [r1, r2]
 8003d6e:	5483      	strb	r3, [r0, r2]
 8003d70:	3a01      	subs	r2, #1
 8003d72:	d2fb      	bcs.n	8003d6c <memmove+0x10>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	5ccc      	ldrb	r4, [r1, r3]
 8003d78:	54c4      	strb	r4, [r0, r3]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d1fa      	bne.n	8003d76 <memmove+0x1a>
 8003d80:	e7f8      	b.n	8003d74 <memmove+0x18>
	...

08003d84 <_sbrk_r>:
 8003d84:	2300      	movs	r3, #0
 8003d86:	b570      	push	{r4, r5, r6, lr}
 8003d88:	4d06      	ldr	r5, [pc, #24]	; (8003da4 <_sbrk_r+0x20>)
 8003d8a:	0004      	movs	r4, r0
 8003d8c:	0008      	movs	r0, r1
 8003d8e:	602b      	str	r3, [r5, #0]
 8003d90:	f7fc fef6 	bl	8000b80 <_sbrk>
 8003d94:	1c43      	adds	r3, r0, #1
 8003d96:	d103      	bne.n	8003da0 <_sbrk_r+0x1c>
 8003d98:	682b      	ldr	r3, [r5, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d000      	beq.n	8003da0 <_sbrk_r+0x1c>
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	bd70      	pop	{r4, r5, r6, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	200002e8 	.word	0x200002e8

08003da8 <memchr>:
 8003da8:	b2c9      	uxtb	r1, r1
 8003daa:	1882      	adds	r2, r0, r2
 8003dac:	4290      	cmp	r0, r2
 8003dae:	d101      	bne.n	8003db4 <memchr+0xc>
 8003db0:	2000      	movs	r0, #0
 8003db2:	4770      	bx	lr
 8003db4:	7803      	ldrb	r3, [r0, #0]
 8003db6:	428b      	cmp	r3, r1
 8003db8:	d0fb      	beq.n	8003db2 <memchr+0xa>
 8003dba:	3001      	adds	r0, #1
 8003dbc:	e7f6      	b.n	8003dac <memchr+0x4>

08003dbe <memcpy>:
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d100      	bne.n	8003dc8 <memcpy+0xa>
 8003dc6:	bd10      	pop	{r4, pc}
 8003dc8:	5ccc      	ldrb	r4, [r1, r3]
 8003dca:	54c4      	strb	r4, [r0, r3]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	e7f8      	b.n	8003dc2 <memcpy+0x4>

08003dd0 <_realloc_r>:
 8003dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003dd2:	0007      	movs	r7, r0
 8003dd4:	000e      	movs	r6, r1
 8003dd6:	0014      	movs	r4, r2
 8003dd8:	2900      	cmp	r1, #0
 8003dda:	d105      	bne.n	8003de8 <_realloc_r+0x18>
 8003ddc:	0011      	movs	r1, r2
 8003dde:	f7ff fc49 	bl	8003674 <_malloc_r>
 8003de2:	0005      	movs	r5, r0
 8003de4:	0028      	movs	r0, r5
 8003de6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d103      	bne.n	8003df4 <_realloc_r+0x24>
 8003dec:	f7ff fbd6 	bl	800359c <_free_r>
 8003df0:	0025      	movs	r5, r4
 8003df2:	e7f7      	b.n	8003de4 <_realloc_r+0x14>
 8003df4:	f000 f81b 	bl	8003e2e <_malloc_usable_size_r>
 8003df8:	9001      	str	r0, [sp, #4]
 8003dfa:	4284      	cmp	r4, r0
 8003dfc:	d803      	bhi.n	8003e06 <_realloc_r+0x36>
 8003dfe:	0035      	movs	r5, r6
 8003e00:	0843      	lsrs	r3, r0, #1
 8003e02:	42a3      	cmp	r3, r4
 8003e04:	d3ee      	bcc.n	8003de4 <_realloc_r+0x14>
 8003e06:	0021      	movs	r1, r4
 8003e08:	0038      	movs	r0, r7
 8003e0a:	f7ff fc33 	bl	8003674 <_malloc_r>
 8003e0e:	1e05      	subs	r5, r0, #0
 8003e10:	d0e8      	beq.n	8003de4 <_realloc_r+0x14>
 8003e12:	9b01      	ldr	r3, [sp, #4]
 8003e14:	0022      	movs	r2, r4
 8003e16:	429c      	cmp	r4, r3
 8003e18:	d900      	bls.n	8003e1c <_realloc_r+0x4c>
 8003e1a:	001a      	movs	r2, r3
 8003e1c:	0031      	movs	r1, r6
 8003e1e:	0028      	movs	r0, r5
 8003e20:	f7ff ffcd 	bl	8003dbe <memcpy>
 8003e24:	0031      	movs	r1, r6
 8003e26:	0038      	movs	r0, r7
 8003e28:	f7ff fbb8 	bl	800359c <_free_r>
 8003e2c:	e7da      	b.n	8003de4 <_realloc_r+0x14>

08003e2e <_malloc_usable_size_r>:
 8003e2e:	1f0b      	subs	r3, r1, #4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	1f18      	subs	r0, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	da01      	bge.n	8003e3c <_malloc_usable_size_r+0xe>
 8003e38:	580b      	ldr	r3, [r1, r0]
 8003e3a:	18c0      	adds	r0, r0, r3
 8003e3c:	4770      	bx	lr
	...

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
